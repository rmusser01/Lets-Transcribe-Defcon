Client-side security refers to the technologies and policies used to protect an end user from malicious activity that is occurring on dynamic web pages accessed from the end user’s own device. It is also sometimes referred to as the “front end” in the context of code development for web applications. 

Client-side attacks have been increasing in both scale and cost since the beginning of 2020 as companies expand their investment in the end-user digital experience. This has created an unprecedented opportunity for threat actors to exploit end-user activities. 

Client-side attacks occur when a user downloads malicious content. The flow of data is reversed compared to server-side attacks: client-side attacks initiate from the victim who downloads content from the attacker. 

Client-side attacks represent a shift in the way attacks have taken place, adding a powerful tool for gaining information from the systems of unsuspecting victims. Client-side attacks may be selected by an attacker as a way to gain information without having to go after the more heavily defended and protected server-side applications. 

Client-side attacks exploit vulnerabilities in applications that are running on the computer being operated directly by the user, often referred to as the client. 

Cross-site scripting (XSS) is a type of security vulnerability that can be found in some web applications. XSS attacks enable attackers to inject client-side scripts into web pages viewed by other users. 

XSS vulnerabilities have been reported and exploited since the 1990s. Prominent sites affected in the past include the social-networking sites Twitter and Facebook. Cross-site scripting flaws have since surpassed buffer overflows to become the most common publicly reported security vulnerability, with some researchers in 2007 estimating as many as 68% of websites are likely open to XSS attacks. 

There are several types of XSS flaws, including non-persistent (reflected), persistent (stored), DOM-based, self-XSS, and mutated XSS. 

The methods of injection can vary a great deal; in some cases, the attacker may not even need to directly interact with the web functionality itself to exploit such a hole. Any data received by the web application (via email, system logs, IM etc.) that can be controlled by an attacker could become an injection vector. 

The most significant problem with blocking all scripts on all websites by default is the substantial reduction in functionality and responsiveness (client-side scripting can be much faster than server-side scripting because it does not need to connect to a remote server and the page or frame does not need to be reloaded). 

Some browsers or browser plugins can be configured to disable client-side scripts on a per-domain basis. This approach is of limited value if scripting is allowed by default, since it blocks bad sites only after the user knows that they are bad, which is too late. 

Content Security Policy (CSP) allows HTML documents to opt in to disabling some scripts while leaving others enabled. The browser checks each script against a policy before deciding whether to run it. As long as the policy only allows trustworthy scripts and disallows dynamic code loading, the browser will not run programs from untrusted authors regardless of the HTML document's structure.