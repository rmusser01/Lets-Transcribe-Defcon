{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 14.84,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Welcome to .NET Core for Malware."
    },
    {
      "Time_Start": 14.84,
      "Time_End": 17.2,
      "Text": " We're going to be analyzing new opportunities for"
    },
    {
      "Time_Start": 17.2,
      "Time_End": 19.98,
      "Text": " Red Teamers presented by the .NET Core platform,"
    },
    {
      "Time_Start": 19.98,
      "Time_End": 23.04,
      "Text": " and showcase practical examples to take advantage of them."
    },
    {
      "Time_Start": 23.04,
      "Time_End": 25.18,
      "Text": " Before we get started, I wanted to let you know that I am"
    },
    {
      "Time_Start": 25.18,
      "Time_End": 27.04,
      "Text": " available for questions right now"
    },
    {
      "Time_Start": 27.04,
      "Time_End": 29.2,
      "Text": " in the chat as you are watching the talk."
    },
    {
      "Time_Start": 29.2,
      "Time_End": 31.84,
      "Text": " So feel free to ask away."
    },
    {
      "Time_Start": 31.84,
      "Time_End": 34.04,
      "Text": " Just to quickly introduce myself,"
    },
    {
      "Time_Start": 34.04,
      "Time_End": 35.44,
      "Text": " my name is Ryan Cobb."
    },
    {
      "Time_Start": 35.44,
      "Time_End": 38.28,
      "Text": " I'm a consultant and Red Teamer at Spectre Ops."
    },
    {
      "Time_Start": 38.28,
      "Time_End": 40.84,
      "Text": " I tend to focus mostly on software engineering and"
    },
    {
      "Time_Start": 40.84,
      "Time_End": 43.72,
      "Text": " building offensive tool sets which has resulted in"
    },
    {
      "Time_Start": 43.72,
      "Time_End": 45.64,
      "Text": " building some open-source tools like"
    },
    {
      "Time_Start": 45.64,
      "Time_End": 49.72,
      "Text": " Covenant and Sharpsploit which both rely on .NET Tradecraft."
    },
    {
      "Time_Start": 49.72,
      "Time_End": 52.480000000000004,
      "Text": " You can find me at my blog or on Twitter."
    },
    {
      "Time_Start": 52.480000000000004,
      "Time_End": 55.04,
      "Text": " To get started, let's introduce .NET."
    },
    {
      "Time_Start": 55.04,
      "Time_End": 56.68,
      "Text": " What exactly is .NET?"
    },
    {
      "Time_Start": 56.68,
      "Time_End": 59.44,
      "Text": " Well, it's a software development platform"
    },
    {
      "Time_Start": 59.44,
      "Time_End": 61.519999999999996,
      "Text": " that was developed by Microsoft,"
    },
    {
      "Time_Start": 61.519999999999996,
      "Time_End": 64.2,
      "Text": " includes a large built-in class library,"
    },
    {
      "Time_Start": 64.2,
      "Time_End": 67.08,
      "Text": " and a powerful set of APIs."
    },
    {
      "Time_Start": 67.08,
      "Time_End": 69.92,
      "Text": " Originally, because it was developed by Microsoft,"
    },
    {
      "Time_Start": 69.92,
      "Time_End": 72.2,
      "Text": " it was really only able to run on"
    },
    {
      "Time_Start": 72.2,
      "Time_End": 75.64,
      "Text": " Windows systems and it's actually language independent."
    },
    {
      "Time_Start": 75.64,
      "Time_End": 79.56,
      "Text": " Oftentimes .NET is implicitly associated with C-sharp."
    },
    {
      "Time_Start": 79.56,
      "Time_End": 81.6,
      "Text": " .NET itself really only defines"
    },
    {
      "Time_Start": 81.6,
      "Time_End": 83.48,
      "Text": " some specifications that can be"
    },
    {
      "Time_Start": 83.48,
      "Time_End": 85.88,
      "Text": " implemented by any programming language."
    },
    {
      "Time_Start": 86.03999999999999,
      "Time_End": 88.83999999999999,
      "Text": " Some examples would be the lesser known F-sharp,"
    },
    {
      "Time_Start": 88.83999999999999,
      "Time_End": 92.11999999999999,
      "Text": " and also PowerShell is built on .NET as well."
    },
    {
      "Time_Start": 92.11999999999999,
      "Time_End": 95.19999999999999,
      "Text": " Some terminology when it comes to versioning,"
    },
    {
      "Time_Start": 95.19999999999999,
      "Time_End": 98.88,
      "Text": " .NET Framework is the original implementation of .NET,"
    },
    {
      "Time_Start": 98.88,
      "Time_End": 101.84,
      "Text": " which only ran on Microsoft Windows."
    },
    {
      "Time_Start": 101.84,
      "Time_End": 104.6,
      "Text": " .NET Core is the newer open-source and"
    },
    {
      "Time_Start": 104.6,
      "Time_End": 107.24,
      "Text": " cross-platform implementation of .NET"
    },
    {
      "Time_Start": 107.24,
      "Time_End": 109.52,
      "Text": " that we're going to be talking about today."
    },
    {
      "Time_Start": 109.52,
      "Time_End": 110.96,
      "Text": " Maybe the most confusing of"
    },
    {
      "Time_Start": 110.96,
      "Time_End": 113.28,
      "Text": " the terminology is the .NET Standard,"
    },
    {
      "Time_Start": 113.28,
      "Time_End": 114.96,
      "Text": " whereas the other two listed here are"
    },
    {
      "Time_Start": 114.96000000000001,
      "Time_End": 117.2,
      "Text": " actual implementations of .NET."
    },
    {
      "Time_Start": 117.2,
      "Time_End": 120.28,
      "Text": " The .NET Standard is a bit more abstract."
    },
    {
      "Time_Start": 120.28,
      "Time_End": 124.4,
      "Text": " It's just a formal specifications of APIs that a .NET"
    },
    {
      "Time_Start": 124.4,
      "Time_End": 129.0,
      "Text": " implementation must fulfill in order to comply to the standard."
    },
    {
      "Time_Start": 129.0,
      "Time_End": 132.76000000000002,
      "Text": " That sounds confusing at first, but it's not too bad."
    },
    {
      "Time_Start": 132.76000000000002,
      "Time_End": 134.72,
      "Text": " Essentially, when you're writing your code,"
    },
    {
      "Time_Start": 134.72,
      "Time_End": 138.04000000000002,
      "Text": " instead of targeting .NET Framework or .NET Core,"
    },
    {
      "Time_Start": 138.04000000000002,
      "Time_End": 141.28,
      "Text": " you can target a specific version of the .NET Standard,"
    },
    {
      "Time_Start": 141.28,
      "Time_End": 144.28,
      "Text": " say version 2.1, when you run your application,"
    },
    {
      "Time_Start": 144.28,
      "Time_End": 145.96,
      "Text": " it can be run on any implementation that"
    },
    {
      "Time_Start": 145.96,
      "Time_End": 148.36,
      "Text": " complies with that version 2.1 standard,"
    },
    {
      "Time_Start": 148.36,
      "Time_End": 153.52,
      "Text": " like .NET Core 2.1 or .NET Framework version 4.7.1."
    },
    {
      "Time_Start": 153.52,
      "Time_End": 155.28,
      "Text": " Basically, it's a way to target"
    },
    {
      "Time_Start": 155.28,
      "Time_End": 157.96,
      "Text": " multiple .NET implementations at once,"
    },
    {
      "Time_Start": 157.96,
      "Time_End": 161.56,
      "Text": " and a way to make sure your code is compatible with both."
    },
    {
      "Time_Start": 161.56,
      "Time_End": 163.8,
      "Text": " But the .NET Standard is going to be partially"
    },
    {
      "Time_Start": 163.8,
      "Time_End": 165.92000000000002,
      "Text": " abandoned as a .NET 5,"
    },
    {
      "Time_Start": 165.92000000000002,
      "Time_End": 169.56,
      "Text": " and we'll be further analyzing the reasoning for that here in a bit."
    },
    {
      "Time_Start": 169.56,
      "Time_End": 171.92000000000002,
      "Text": " But as a sneak peek at the reasoning now,"
    },
    {
      "Time_Start": 171.96,
      "Time_End": 176.8,
      "Text": " the reason is that .NET Framework is going to be abandoned entirely."
    },
    {
      "Time_Start": 176.8,
      "Time_End": 180.84,
      "Text": " So once there is no future version of .NET Framework,"
    },
    {
      "Time_Start": 180.84,
      "Time_End": 183.36,
      "Text": " and there's only .NET Core,"
    },
    {
      "Time_Start": 183.36,
      "Time_End": 186.08,
      "Text": " there's really no reason to maintain something like"
    },
    {
      "Time_Start": 186.08,
      "Time_End": 188.24,
      "Text": " the .NET Standard that allows you to"
    },
    {
      "Time_Start": 188.24,
      "Time_End": 191.84000000000003,
      "Text": " target multiple .NET implementations at the same time,"
    },
    {
      "Time_Start": 191.84000000000003,
      "Time_End": 193.60000000000002,
      "Text": " since there's really only going to be"
    },
    {
      "Time_Start": 193.60000000000002,
      "Time_End": 197.48000000000002,
      "Text": " the one .NET implementation, namely .NET Core."
    },
    {
      "Time_Start": 197.48000000000002,
      "Time_End": 200.76000000000002,
      "Text": " A more visual explanation might be helpful to"
    },
    {
      "Time_Start": 200.76,
      "Time_End": 203.07999999999998,
      "Text": " see how all of this pieces together."
    },
    {
      "Time_Start": 203.07999999999998,
      "Time_End": 205.79999999999998,
      "Text": " Starting at the bottom, we have the specifications."
    },
    {
      "Time_Start": 205.79999999999998,
      "Time_End": 207.51999999999998,
      "Text": " Common Intermediate Language,"
    },
    {
      "Time_Start": 207.51999999999998,
      "Time_End": 210.72,
      "Text": " often referred to with different acronyms like CIL,"
    },
    {
      "Time_Start": 210.72,
      "Time_End": 212.92,
      "Text": " MSIL, or just IL,"
    },
    {
      "Time_Start": 212.92,
      "Time_End": 215.92,
      "Text": " is a specification for what a compiled binary has"
    },
    {
      "Time_Start": 215.92,
      "Time_End": 218.84,
      "Text": " to look like to be utilized inside of a .NET runtime."
    },
    {
      "Time_Start": 218.84,
      "Time_End": 222.32,
      "Text": " There are several runtimes built on top of that specification,"
    },
    {
      "Time_Start": 222.32,
      "Time_End": 224.56,
      "Text": " such as .NET Framework CLR,"
    },
    {
      "Time_Start": 224.56,
      "Time_End": 226.51999999999998,
      "Text": " or Common Language Runtime,"
    },
    {
      "Time_Start": 226.51999999999998,
      "Time_End": 228.68,
      "Text": " as well as .NET Core's Core CLR."
    },
    {
      "Time_Start": 228.72,
      "Time_End": 232.04000000000002,
      "Text": " These runtimes are often referred to as virtual machines."
    },
    {
      "Time_Start": 232.04000000000002,
      "Time_End": 235.52,
      "Text": " What they do is take the compiled IL code,"
    },
    {
      "Time_Start": 235.52,
      "Time_End": 237.52,
      "Text": " translate it into machine code,"
    },
    {
      "Time_Start": 237.52,
      "Time_End": 240.36,
      "Text": " and manage that code as it's being executed,"
    },
    {
      "Time_Start": 240.36,
      "Time_End": 243.52,
      "Text": " which is why .NET is often referred to as managed code."
    },
    {
      "Time_Start": 243.52,
      "Time_End": 245.72,
      "Text": " Many different languages can be used to generate"
    },
    {
      "Time_Start": 245.72,
      "Time_End": 248.08,
      "Text": " the IL code and are built on top of .NET,"
    },
    {
      "Time_Start": 248.08,
      "Time_End": 250.96,
      "Text": " such as C-Sharp and PowerShell for the .NET Framework,"
    },
    {
      "Time_Start": 250.96,
      "Time_End": 254.16,
      "Text": " and C-Sharp and PowerShell Core for .NET Core."
    },
    {
      "Time_Start": 254.16,
      "Time_End": 256.64,
      "Text": " So the timeline basically works like this."
    },
    {
      "Time_Start": 256.64,
      "Time_End": 260.84,
      "Text": " You write some C-Sharp code that you compile with some compiler,"
    },
    {
      "Time_Start": 260.84,
      "Time_End": 263.03999999999996,
      "Text": " maybe the one built into Visual Studio,"
    },
    {
      "Time_Start": 263.03999999999996,
      "Time_End": 265.4,
      "Text": " and you get out some EXE file,"
    },
    {
      "Time_Start": 265.4,
      "Time_End": 269.08,
      "Text": " which is a .NET assembly compiled to IL code."
    },
    {
      "Time_Start": 269.08,
      "Time_End": 271.47999999999996,
      "Text": " When you go to run that executable,"
    },
    {
      "Time_Start": 271.47999999999996,
      "Time_End": 275.15999999999997,
      "Text": " at runtime, CLR is going to get a hold of your executable,"
    },
    {
      "Time_Start": 275.15999999999997,
      "Time_End": 278.2,
      "Text": " and translate that into usable machine code,"
    },
    {
      "Time_Start": 278.2,
      "Time_End": 281.0,
      "Text": " and manage it throughout the runtime."
    },
    {
      "Time_Start": 281.0,
      "Time_End": 285.0,
      "Text": " So we'll start out a bit just talking about the .NET Framework,"
    },
    {
      "Time_Start": 285.04,
      "Time_End": 288.2,
      "Text": " so that you'll have some context for when we talk about .NET Core."
    },
    {
      "Time_Start": 288.2,
      "Time_End": 289.44,
      "Text": " So several years ago,"
    },
    {
      "Time_Start": 289.44,
      "Time_End": 292.4,
      "Text": " PowerShell for offensive operations was all the rage"
    },
    {
      "Time_Start": 292.4,
      "Time_End": 295.68,
      "Text": " until some defensive visibility features were added."
    },
    {
      "Time_Start": 295.68,
      "Time_End": 298.76,
      "Text": " But the problem was that all the visibility features were"
    },
    {
      "Time_Start": 298.76,
      "Time_End": 303.28,
      "Text": " added in at the language level specific for PowerShell."
    },
    {
      "Time_Start": 303.28,
      "Time_End": 306.0,
      "Text": " Script block logging logs PowerShell code,"
    },
    {
      "Time_Start": 306.0,
      "Time_End": 310.96,
      "Text": " the AMPC integration written for PowerShell examined only the PowerShell code."
    },
    {
      "Time_Start": 310.96,
      "Time_End": 314.04,
      "Text": " So an easy pivot for us as attackers was to use"
    },
    {
      "Time_Start": 314.04,
      "Time_End": 315.92,
      "Text": " another language that utilizes"
    },
    {
      "Time_Start": 315.92,
      "Time_End": 319.76000000000005,
      "Text": " the .NET Framework even more directly like C-Sharp."
    },
    {
      "Time_Start": 319.76000000000005,
      "Time_End": 323.6,
      "Text": " So why do we like to use C-Sharp and the .NET Framework?"
    },
    {
      "Time_Start": 323.6,
      "Time_End": 327.28000000000003,
      "Text": " Well, it's installed and enabled by default on most Windows"
    },
    {
      "Time_Start": 327.28000000000003,
      "Time_End": 330.04,
      "Text": " operating system versions with a few exceptions."
    },
    {
      "Time_Start": 330.04,
      "Time_End": 332.52000000000004,
      "Text": " There's less defensive visibility in C-Sharp"
    },
    {
      "Time_Start": 332.52000000000004,
      "Time_End": 335.72,
      "Text": " than some alternatives like PowerShell, as we mentioned before."
    },
    {
      "Time_Start": 335.72,
      "Time_End": 339.32000000000005,
      "Text": " Security products are starting to look for C-Sharp and .NET stuff,"
    },
    {
      "Time_Start": 339.32000000000005,
      "Time_End": 343.72,
      "Text": " but they aren't quite as good at finding it as they are at things like PowerShell,"
    },
    {
      "Time_Start": 343.8,
      "Time_End": 348.24,
      "Text": " and .NET has a large set of powerful APIs that makes development a lot"
    },
    {
      "Time_Start": 348.24,
      "Time_End": 352.64000000000004,
      "Text": " easier and faster for us than unmanaged alternatives like C."
    },
    {
      "Time_Start": 352.64000000000004,
      "Time_End": 355.04,
      "Text": " So we use .NET for a lot of the same reasons"
    },
    {
      "Time_Start": 355.04,
      "Time_End": 357.48,
      "Text": " that ordinary software developers might use it."
    },
    {
      "Time_Start": 357.48,
      "Time_End": 361.32000000000005,
      "Text": " Again, to reiterate, C-Sharp had less visibility at the cost of losing"
    },
    {
      "Time_Start": 361.32000000000005,
      "Time_End": 365.32000000000005,
      "Text": " some flexibility that a scripting language like PowerShell offered."
    },
    {
      "Time_Start": 365.32000000000005,
      "Time_End": 368.56,
      "Text": " However, AMPC, the Anti-Malware Scan Interface,"
    },
    {
      "Time_Start": 368.56,
      "Time_End": 373.68,
      "Text": " was introduced shortly after into the .NET Framework in version 4.8."
    },
    {
      "Time_Start": 373.68,
      "Time_End": 377.64,
      "Text": " So we built this large array of .NET tooling and tradecraft,"
    },
    {
      "Time_Start": 377.64,
      "Time_End": 379.28000000000003,
      "Text": " all written in C-Sharp."
    },
    {
      "Time_Start": 379.28000000000003,
      "Time_End": 381.76,
      "Text": " This has largely been pretty successful."
    },
    {
      "Time_Start": 381.76,
      "Time_End": 384.92,
      "Text": " I even built a C2 Framework called Covenant with"
    },
    {
      "Time_Start": 384.92,
      "Time_End": 388.92,
      "Text": " the explicit purpose of handling .NET implants and tasks."
    },
    {
      "Time_Start": 388.92,
      "Time_End": 392.08,
      "Text": " I'll reference Covenant a bit throughout this talk."
    },
    {
      "Time_Start": 392.08,
      "Time_End": 395.0,
      "Text": " While the talk isn't really a talk about Covenant,"
    },
    {
      "Time_Start": 395.0,
      "Time_End": 397.8,
      "Text": " a lot of the information in this talk originates from"
    },
    {
      "Time_Start": 397.8,
      "Time_End": 401.96000000000004,
      "Text": " the experience of writing a C2 Framework that supports .NET Core implants."
    },
    {
      "Time_Start": 401.96000000000004,
      "Time_End": 405.68000000000006,
      "Text": " The server side of Covenant is built on .NET Core."
    },
    {
      "Time_Start": 405.68000000000006,
      "Time_End": 409.48,
      "Text": " Originally, the implant ran only on the .NET Framework"
    },
    {
      "Time_Start": 409.48,
      "Time_End": 413.28000000000003,
      "Text": " until we added the .NET Core implant called Brutes,"
    },
    {
      "Time_Start": 413.28000000000003,
      "Time_End": 416.16,
      "Text": " which I'll refer back to throughout the rest of the talk."
    },
    {
      "Time_Start": 416.16,
      "Time_End": 418.04,
      "Text": " All right, with all of that context,"
    },
    {
      "Time_Start": 418.04,
      "Time_End": 419.64000000000004,
      "Text": " let's talk .NET Core."
    },
    {
      "Time_Start": 419.64000000000004,
      "Time_End": 423.20000000000005,
      "Text": " One big reason I'm so excited about .NET Core is that"
    },
    {
      "Time_Start": 423.20000000000005,
      "Time_End": 427.52000000000004,
      "Text": " the future of .NET itself is on .NET Core."
    },
    {
      "Time_Start": 427.56,
      "Time_End": 430.76,
      "Text": " The next version of .NET, .NET 5,"
    },
    {
      "Time_Start": 430.76,
      "Time_End": 432.32,
      "Text": " will be .NET Core."
    },
    {
      "Time_Start": 432.32,
      "Time_End": 433.76,
      "Text": " At the time of recording this,"
    },
    {
      "Time_Start": 433.76,
      "Time_End": 436.35999999999996,
      "Text": " there's already .NET 5 release candidates."
    },
    {
      "Time_Start": 436.35999999999996,
      "Time_End": 439.71999999999997,
      "Text": " There's a good chance that by November 20th,"
    },
    {
      "Time_Start": 439.71999999999997,
      "Time_End": 442.76,
      "Text": " .NET 5 will already be generally available."
    },
    {
      "Time_Start": 442.76,
      "Time_End": 447.08,
      "Text": " Once this happens, .NET Framework is on its way to being deprecated."
    },
    {
      "Time_Start": 447.08,
      "Time_End": 449.24,
      "Text": " One way or another, we're going to have to start"
    },
    {
      "Time_Start": 449.24,
      "Time_End": 451.56,
      "Text": " learning about .NET Core as attackers."
    },
    {
      "Time_Start": 451.56,
      "Time_End": 454.59999999999997,
      "Text": " I imagine it won't be long before .NET Core will be"
    },
    {
      "Time_Start": 454.6,
      "Time_End": 457.64000000000004,
      "Text": " installed by default on future OS versions."
    },
    {
      "Time_Start": 457.64000000000004,
      "Time_End": 460.92,
      "Text": " But using .NET Core for malware is a fairly new concept."
    },
    {
      "Time_Start": 460.92,
      "Time_End": 465.44,
      "Text": " I haven't seen any public information about it being used in the wild."
    },
    {
      "Time_Start": 465.44,
      "Time_End": 470.20000000000005,
      "Text": " There's limited information on tradecraft or open-source tools."
    },
    {
      "Time_Start": 470.20000000000005,
      "Time_End": 472.6,
      "Text": " But there's a lot of potential here and I think it's"
    },
    {
      "Time_Start": 472.6,
      "Time_End": 475.28000000000003,
      "Text": " inevitable before we start to see it in the wild."
    },
    {
      "Time_Start": 475.28000000000003,
      "Time_End": 476.76000000000005,
      "Text": " For us as attackers,"
    },
    {
      "Time_Start": 476.76000000000005,
      "Time_End": 480.28000000000003,
      "Text": " we're able to utilize the newest APIs for our malware."
    },
    {
      "Time_Start": 480.28000000000003,
      "Time_End": 483.08000000000004,
      "Text": " If you've done any .NET development for malware,"
    },
    {
      "Time_Start": 483.08,
      "Time_End": 485.71999999999997,
      "Text": " you know how painful it is to limit yourself to .NET"
    },
    {
      "Time_Start": 485.71999999999997,
      "Time_End": 488.84,
      "Text": " 3.5 for maximum compatibility."
    },
    {
      "Time_Start": 488.84,
      "Time_End": 492.76,
      "Text": " There's not a lot of existing research on the topic."
    },
    {
      "Time_Start": 492.76,
      "Time_End": 495.84,
      "Text": " Scotty Austin, who goes by Checkymander,"
    },
    {
      "Time_Start": 495.84,
      "Time_End": 501.15999999999997,
      "Text": " wrote CoreSploit, which is a port of SharpSploit for .NET Core specifically."
    },
    {
      "Time_Start": 501.15999999999997,
      "Time_End": 504.76,
      "Text": " It includes many of the capabilities that were able to be ported over."
    },
    {
      "Time_Start": 504.76,
      "Time_End": 508.2,
      "Text": " Just a bit of functionality missing."
    },
    {
      "Time_Start": 508.2,
      "Time_End": 511.2,
      "Text": " There's a blog post from Bohops found that if"
    },
    {
      "Time_Start": 511.24,
      "Time_End": 513.36,
      "Text": " the .NET Core runtime is installed,"
    },
    {
      "Time_Start": 513.36,
      "Time_End": 516.56,
      "Text": " it can be used as an application whitelisting bypass."
    },
    {
      "Time_Start": 516.56,
      "Time_End": 520.12,
      "Text": " That's really it when it comes to existing research."
    },
    {
      "Time_Start": 520.12,
      "Time_End": 522.28,
      "Text": " It's hard to find much outside of that."
    },
    {
      "Time_Start": 522.28,
      "Time_End": 525.4399999999999,
      "Text": " A few more reasons I am excited about .NET Core."
    },
    {
      "Time_Start": 525.4399999999999,
      "Time_End": 528.52,
      "Text": " Like I said before, we can utilize the newest APIs."
    },
    {
      "Time_Start": 528.52,
      "Time_End": 531.6,
      "Text": " We aren't stuck in 2007 anymore."
    },
    {
      "Time_Start": 531.6,
      "Time_End": 533.84,
      "Text": " Just a few examples of the highlights,"
    },
    {
      "Time_Start": 533.84,
      "Time_End": 536.08,
      "Text": " we get assembly load context,"
    },
    {
      "Time_Start": 536.08,
      "Time_End": 539.8,
      "Text": " which gives us the ability to load and unload new assemblies,"
    },
    {
      "Time_Start": 539.8,
      "Time_End": 546.24,
      "Text": " which surprisingly is not possible in version 3.5 of .NET Framework."
    },
    {
      "Time_Start": 546.24,
      "Time_End": 551.24,
      "Text": " Version 3.5 was totally missing JSON serialization APIs."
    },
    {
      "Time_Start": 551.24,
      "Time_End": 554.88,
      "Text": " You get actually usable asynchronous primitives,"
    },
    {
      "Time_Start": 554.88,
      "Time_End": 557.8399999999999,
      "Text": " which is a huge pain in version 3.5."
    },
    {
      "Time_Start": 557.8399999999999,
      "Time_End": 561.5999999999999,
      "Text": " I could go on. You get a lot of the newest capabilities"
    },
    {
      "Time_Start": 561.5999999999999,
      "Time_End": 565.12,
      "Text": " that attackers have been limited from using in the .NET Framework."
    },
    {
      "Time_Start": 565.12,
      "Time_End": 567.76,
      "Text": " .NET Core is cross-platform."
    },
    {
      "Time_Start": 567.76,
      "Time_End": 570.64,
      "Text": " This allows us to utilize our tooling on"
    },
    {
      "Time_Start": 570.64,
      "Time_End": 574.12,
      "Text": " Linux and Mac OS without writing a totally new tool set."
    },
    {
      "Time_Start": 574.12,
      "Time_End": 579.24,
      "Text": " In some cases, .NET Core is not required to be installed on target systems."
    },
    {
      "Time_Start": 579.24,
      "Time_End": 582.36,
      "Text": " This is actually an improvement over the .NET Framework"
    },
    {
      "Time_Start": 582.36,
      "Time_End": 585.28,
      "Text": " where not only did it have to be installed on the endpoint,"
    },
    {
      "Time_Start": 585.28,
      "Time_End": 587.08,
      "Text": " you had to be careful about that"
    },
    {
      "Time_Start": 587.08,
      "Time_End": 590.4,
      "Text": " the right version was installed on the endpoint as well."
    },
    {
      "Time_Start": 590.4,
      "Time_End": 596.52,
      "Text": " In most cases, it's very easy to port .NET Framework code to .NET Core,"
    },
    {
      "Time_Start": 596.52,
      "Time_End": 598.24,
      "Text": " depending on what you're writing."
    },
    {
      "Time_Start": 598.24,
      "Time_End": 602.4399999999999,
      "Text": " For example, when creating Covenant's .NET Core implant, Brutes,"
    },
    {
      "Time_Start": 602.4399999999999,
      "Time_End": 604.8,
      "Text": " I was able to take the existing code for"
    },
    {
      "Time_Start": 604.8,
      "Time_End": 609.24,
      "Text": " the .NET Framework implant and convert it with very little changes."
    },
    {
      "Time_Start": 609.24,
      "Time_End": 612.56,
      "Text": " This makes it a lot easier to adapt to the new platform."
    },
    {
      "Time_Start": 612.56,
      "Time_End": 615.92,
      "Text": " Getting into more of the specifics on .NET Core malware,"
    },
    {
      "Time_Start": 615.92,
      "Time_End": 618.76,
      "Text": " we're going to dive into a few areas."
    },
    {
      "Time_Start": 618.76,
      "Time_End": 621.92,
      "Text": " Visibility, which everyone always wants to hear about,"
    },
    {
      "Time_Start": 621.92,
      "Time_End": 625.88,
      "Text": " where we'll talk about the AMSI as well as ETW."
    },
    {
      "Time_Start": 625.88,
      "Time_End": 628.72,
      "Text": " We'll talk about execution techniques,"
    },
    {
      "Time_Start": 628.72,
      "Time_End": 632.6,
      "Text": " and we'll touch on a few unique practical problems"
    },
    {
      "Time_Start": 632.6,
      "Time_End": 635.4399999999999,
      "Text": " encountered when developing .NET Core malware"
    },
    {
      "Time_Start": 635.4399999999999,
      "Time_End": 637.84,
      "Text": " and some solutions for dealing with them."
    },
    {
      "Time_Start": 637.84,
      "Time_End": 640.12,
      "Text": " So first, let's talk about visibility."
    },
    {
      "Time_Start": 640.12,
      "Time_End": 642.24,
      "Text": " When .NET Core was first created,"
    },
    {
      "Time_Start": 642.24,
      "Time_End": 646.96,
      "Text": " the AMSI or Anti-Malware Scan Interface was just totally missing."
    },
    {
      "Time_Start": 646.96,
      "Time_End": 650.04,
      "Text": " So if you can use an early .NET version,"
    },
    {
      "Time_Start": 650.04,
      "Time_End": 652.88,
      "Text": " anything before .NET Core 3.0,"
    },
    {
      "Time_Start": 652.88,
      "Time_End": 655.24,
      "Text": " AMSI won't even be an issue."
    },
    {
      "Time_Start": 655.4,
      "Time_End": 657.6,
      "Text": " But unfortunately for us,"
    },
    {
      "Time_Start": 657.6,
      "Time_End": 659.12,
      "Text": " at least as attackers,"
    },
    {
      "Time_Start": 659.12,
      "Time_End": 661.16,
      "Text": " .NET Core versioning has proved to be"
    },
    {
      "Time_Start": 661.16,
      "Time_End": 664.0,
      "Text": " much faster than what we've seen with .NET Framework."
    },
    {
      "Time_Start": 664.0,
      "Time_End": 667.04,
      "Text": " So you're really unlikely to see any version of .NET"
    },
    {
      "Time_Start": 667.04,
      "Time_End": 671.16,
      "Text": " Core for 3.0 installed basically anywhere."
    },
    {
      "Time_Start": 671.16,
      "Time_End": 675.08,
      "Text": " But again, with AMSI and any AV solution,"
    },
    {
      "Time_Start": 675.08,
      "Time_End": 677.52,
      "Text": " at the end of the day, it relies on signatures."
    },
    {
      "Time_Start": 677.52,
      "Time_End": 679.72,
      "Text": " There's not a lot of .NET Core malware out there,"
    },
    {
      "Time_Start": 679.72,
      "Time_End": 681.88,
      "Text": " which means there's fewer signatures."
    },
    {
      "Time_Start": 681.88,
      "Time_End": 684.0,
      "Text": " We also have bypasses."
    },
    {
      "Time_Start": 684.0,
      "Time_End": 687.28,
      "Text": " So you might be surprised to learn that"
    },
    {
      "Time_Start": 687.28,
      "Time_End": 689.2,
      "Text": " AMSI bypasses for .NET Core"
    },
    {
      "Time_Start": 689.2,
      "Time_End": 692.36,
      "Text": " don't need to be any different than .NET Framework."
    },
    {
      "Time_Start": 692.36,
      "Time_End": 696.88,
      "Text": " To explain why, let's take a quick look at how the AMSI works."
    },
    {
      "Time_Start": 696.88,
      "Time_End": 700.6,
      "Text": " The way .NET works is that some application,"
    },
    {
      "Time_Start": 700.6,
      "Time_End": 703.28,
      "Text": " such as PowerShell, VBScript,"
    },
    {
      "Time_Start": 703.28,
      "Time_End": 705.32,
      "Text": " are the examples in this image,"
    },
    {
      "Time_Start": 705.32,
      "Time_End": 708.08,
      "Text": " or in this case .NET Core,"
    },
    {
      "Time_Start": 708.08,
      "Time_End": 712.32,
      "Text": " loads up the AMSI DLL into the process and"
    },
    {
      "Time_Start": 712.32,
      "Time_End": 716.24,
      "Text": " calls functions in that DLL to scan the questionable content,"
    },
    {
      "Time_Start": 716.24,
      "Time_End": 719.4000000000001,
      "Text": " namely your assembly that you're trying to run."
    },
    {
      "Time_Start": 719.4000000000001,
      "Time_End": 721.32,
      "Text": " So in the .NET Framework,"
    },
    {
      "Time_Start": 721.32,
      "Time_End": 723.1600000000001,
      "Text": " because we always have the privileges to"
    },
    {
      "Time_Start": 723.1600000000001,
      "Time_End": 725.6,
      "Text": " write to the memory in our own process,"
    },
    {
      "Time_Start": 725.6,
      "Time_End": 727.84,
      "Text": " we can patch out the logic in"
    },
    {
      "Time_Start": 727.84,
      "Time_End": 730.6,
      "Text": " these functions to always pass these scans."
    },
    {
      "Time_Start": 730.6,
      "Time_End": 733.72,
      "Text": " So based on how the AMSI works,"
    },
    {
      "Time_Start": 733.72,
      "Time_End": 735.4000000000001,
      "Text": " we can do this in .NET Core"
    },
    {
      "Time_Start": 735.4000000000001,
      "Time_End": 738.1600000000001,
      "Text": " just as easily as we could in the .NET Framework."
    },
    {
      "Time_Start": 738.1600000000001,
      "Time_End": 741.32,
      "Text": " Barring some code written by XPN and Rostamouse,"
    },
    {
      "Time_Start": 741.32,
      "Time_End": 744.8000000000001,
      "Text": " this code actually works great in .NET Core as well."
    },
    {
      "Time_Start": 744.8000000000001,
      "Time_End": 747.2,
      "Text": " So you can see what's happening here is we're calling"
    },
    {
      "Time_Start": 747.2,
      "Time_End": 749.9200000000001,
      "Text": " load library to load up the AMSI DLL."
    },
    {
      "Time_Start": 749.9200000000001,
      "Time_End": 753.5200000000001,
      "Text": " We're getting the address of the AMSI scan buffer function,"
    },
    {
      "Time_Start": 753.5200000000001,
      "Time_End": 758.2800000000001,
      "Text": " which the core CLR will use to scan content with AMSI,"
    },
    {
      "Time_Start": 758.2800000000001,
      "Time_End": 763.08,
      "Text": " and we're patching out some key parts of memory of that function."
    },
    {
      "Time_Start": 763.08,
      "Time_End": 765.32,
      "Text": " Because we have control of the process,"
    },
    {
      "Time_Start": 765.32,
      "Time_End": 767.72,
      "Text": " we have the control of that function,"
    },
    {
      "Time_Start": 767.72,
      "Time_End": 769.8800000000001,
      "Text": " and we can bypass the check."
    },
    {
      "Time_Start": 769.88,
      "Time_End": 772.92,
      "Text": " The other important visibility source is"
    },
    {
      "Time_Start": 772.92,
      "Time_End": 775.96,
      "Text": " ETW or event tracing for Windows."
    },
    {
      "Time_Start": 775.96,
      "Time_End": 778.32,
      "Text": " Maybe not surprising at this point,"
    },
    {
      "Time_Start": 778.32,
      "Time_End": 782.48,
      "Text": " but we can bypass ETW in .NET Core the exact same way."
    },
    {
      "Time_Start": 782.48,
      "Time_End": 790.04,
      "Text": " In this case, ETW is utilized via NTDLL.DLL instead of AMSIDLL.DLL."
    },
    {
      "Time_Start": 790.04,
      "Time_End": 792.56,
      "Text": " But the methodology here is the same."
    },
    {
      "Time_Start": 792.56,
      "Time_End": 796.96,
      "Text": " We're calling load library to bring the DLL into our process,"
    },
    {
      "Time_Start": 797.12,
      "Time_End": 802.6,
      "Text": " getting the memory address of the correct method in that DLL,"
    },
    {
      "Time_Start": 802.6,
      "Time_End": 805.08,
      "Text": " and then patching out some key parts of"
    },
    {
      "Time_Start": 805.08,
      "Time_End": 807.84,
      "Text": " memory to have the function do what we want it to."
    },
    {
      "Time_Start": 807.84,
      "Time_End": 812.24,
      "Text": " Again, borrowed this code from XPN and others."
    },
    {
      "Time_Start": 812.24,
      "Time_End": 814.32,
      "Text": " Moving on from visibility,"
    },
    {
      "Time_Start": 814.32,
      "Time_End": 816.72,
      "Text": " let's talk execution techniques."
    },
    {
      "Time_Start": 816.72,
      "Time_End": 819.72,
      "Text": " We've talked about how it's unlikely, currently at least,"
    },
    {
      "Time_Start": 819.72,
      "Time_End": 822.9200000000001,
      "Text": " to find a target with .NET Core installed."
    },
    {
      "Time_Start": 822.9200000000001,
      "Time_End": 826.2,
      "Text": " So how are we actually going to execute our code?"
    },
    {
      "Time_Start": 826.24,
      "Time_End": 830.5200000000001,
      "Text": " A few options. First, if the .NET Core runtime is installed,"
    },
    {
      "Time_Start": 830.5200000000001,
      "Time_End": 833.4000000000001,
      "Text": " you're likely to find the .NET Core command line tools,"
    },
    {
      "Time_Start": 833.4000000000001,
      "Time_End": 835.76,
      "Text": " which can be used for execution."
    },
    {
      "Time_Start": 835.76,
      "Time_End": 841.4000000000001,
      "Text": " Alternatively, we can use some alternative core runtimes"
    },
    {
      "Time_Start": 841.4000000000001,
      "Time_End": 843.8000000000001,
      "Text": " that do ahead-of-time compilation,"
    },
    {
      "Time_Start": 843.8000000000001,
      "Time_End": 847.0400000000001,
      "Text": " such as CoreRT or .NET Native."
    },
    {
      "Time_Start": 847.0400000000001,
      "Time_End": 849.1600000000001,
      "Text": " In these experimental runtimes,"
    },
    {
      "Time_Start": 849.1600000000001,
      "Time_End": 853.0400000000001,
      "Text": " the IL code is converted to native code at compile time."
    },
    {
      "Time_Start": 853.0400000000001,
      "Time_End": 855.0,
      "Text": " So these binaries look just like"
    },
    {
      "Time_Start": 855.0,
      "Time_End": 856.52,
      "Text": " unmanaged binaries and can be"
    },
    {
      "Time_Start": 856.52,
      "Time_End": 860.04,
      "Text": " executed without the runtime being installed."
    },
    {
      "Time_Start": 860.04,
      "Time_End": 863.44,
      "Text": " Finally, we have a feature called publish single file,"
    },
    {
      "Time_Start": 863.44,
      "Time_End": 866.52,
      "Text": " which we'll talk about in detail in just a minute."
    },
    {
      "Time_Start": 866.52,
      "Time_End": 870.28,
      "Text": " To start, let's talk about the .NET Core CLI."
    },
    {
      "Time_Start": 870.28,
      "Time_End": 874.92,
      "Text": " Whenever you install the .NET Core runtime or the full SDK,"
    },
    {
      "Time_Start": 874.92,
      "Time_End": 878.08,
      "Text": " you get a .NET command line interface."
    },
    {
      "Time_Start": 878.08,
      "Time_End": 879.84,
      "Text": " There's a couple of ways we can"
    },
    {
      "Time_Start": 879.84,
      "Time_End": 882.56,
      "Text": " execute our malware with the command line interface."
    },
    {
      "Time_Start": 882.5600000000001,
      "Time_End": 887.0000000000001,
      "Text": " First, we can just point the .NET.exe CLI"
    },
    {
      "Time_Start": 887.0000000000001,
      "Time_End": 889.4000000000001,
      "Text": " at a pre-built .NET Core assembly,"
    },
    {
      "Time_Start": 889.4000000000001,
      "Time_End": 891.24,
      "Text": " like in the first example."
    },
    {
      "Time_Start": 891.24,
      "Time_End": 895.0000000000001,
      "Text": " We also can point it at a .NET Core project file."
    },
    {
      "Time_Start": 895.0000000000001,
      "Time_End": 897.08,
      "Text": " If we just do .NET run,"
    },
    {
      "Time_Start": 897.08,
      "Time_End": 898.96,
      "Text": " this will find the project file,"
    },
    {
      "Time_Start": 898.96,
      "Time_End": 901.96,
      "Text": " build the application, and execute it."
    },
    {
      "Time_Start": 901.96,
      "Time_End": 905.0000000000001,
      "Text": " This is interesting in that the project file and"
    },
    {
      "Time_Start": 905.0000000000001,
      "Time_End": 906.7600000000001,
      "Text": " the executable don't actually"
    },
    {
      "Time_Start": 906.7600000000001,
      "Time_End": 908.72,
      "Text": " appear in the command line arguments,"
    },
    {
      "Time_Start": 908.72,
      "Time_End": 911.84,
      "Text": " and won't show up in the event logs."
    },
    {
      "Time_Start": 911.84,
      "Time_End": 914.5600000000001,
      "Text": " Now to be clear, the .NET Core runtime must"
    },
    {
      "Time_Start": 914.5600000000001,
      "Time_End": 917.12,
      "Text": " be installed on the system in order to do this."
    },
    {
      "Time_Start": 917.12,
      "Time_End": 919.08,
      "Text": " This is really uncommon for now,"
    },
    {
      "Time_Start": 919.08,
      "Time_End": 921.88,
      "Text": " so we won't focus too much on this technique."
    },
    {
      "Time_Start": 921.88,
      "Time_End": 925.4,
      "Text": " But I imagine it will become more important as .NET Core"
    },
    {
      "Time_Start": 925.4,
      "Time_End": 927.6800000000001,
      "Text": " starts being installed by default,"
    },
    {
      "Time_Start": 927.6800000000001,
      "Time_End": 931.24,
      "Text": " which I imagine could happen at some point this year or next."
    },
    {
      "Time_Start": 931.24,
      "Time_End": 933.1600000000001,
      "Text": " Just as an interesting side note,"
    },
    {
      "Time_Start": 933.1600000000001,
      "Time_End": 935.24,
      "Text": " the .NET Core CLI was the basis for"
    },
    {
      "Time_Start": 935.24,
      "Time_End": 937.88,
      "Text": " an application whitelisting bypass technique"
    },
    {
      "Time_Start": 938.0,
      "Time_End": 939.64,
      "Text": " discovered by Bochops,"
    },
    {
      "Time_Start": 939.64,
      "Time_End": 942.0,
      "Text": " which you can read about on his blog."
    },
    {
      "Time_Start": 942.08,
      "Time_End": 945.12,
      "Text": " Moving on to Core RT."
    },
    {
      "Time_Start": 945.12,
      "Time_End": 947.72,
      "Text": " Core RT does ahead-of-time compilation,"
    },
    {
      "Time_Start": 947.72,
      "Time_End": 950.8,
      "Text": " and that's not just ahead-of-time compilation to IL,"
    },
    {
      "Time_Start": 950.8,
      "Time_End": 953.24,
      "Text": " but actually does the IL conversion"
    },
    {
      "Time_Start": 953.24,
      "Time_End": 956.16,
      "Text": " to native machine code at compile time."
    },
    {
      "Time_Start": 956.16,
      "Time_End": 960.28,
      "Text": " This is strange for a .NET implementation because"
    },
    {
      "Time_Start": 960.28,
      "Time_End": 962.2,
      "Text": " the resulting binary does not need to"
    },
    {
      "Time_Start": 962.2,
      "Time_End": 964.28,
      "Text": " actually execute within a runtime,"
    },
    {
      "Time_Start": 964.28,
      "Time_End": 966.96,
      "Text": " since everything is already machine code."
    },
    {
      "Time_Start": 966.96,
      "Time_End": 970.0,
      "Text": " So .NET Core does not need to be installed."
    },
    {
      "Time_Start": 970.0,
      "Time_End": 973.32,
      "Text": " File sizes can be small for Core RT,"
    },
    {
      "Time_Start": 973.32,
      "Time_End": 975.44,
      "Text": " which can be important as this is"
    },
    {
      "Time_Start": 975.44,
      "Time_End": 978.2,
      "Text": " something we will continue to talk about a lot today."
    },
    {
      "Time_Start": 978.2,
      "Time_End": 981.0400000000001,
      "Text": " But it's important to stress that"
    },
    {
      "Time_Start": 981.0400000000001,
      "Time_End": 984.72,
      "Text": " Core RT is an experimental runtime for a reason."
    },
    {
      "Time_Start": 984.72,
      "Time_End": 987.44,
      "Text": " It's not a production-ready Microsoft product."
    },
    {
      "Time_Start": 987.44,
      "Time_End": 989.0400000000001,
      "Text": " I don't think it ever will be."
    },
    {
      "Time_Start": 989.0400000000001,
      "Time_End": 991.84,
      "Text": " Performance absolutely can be affected."
    },
    {
      "Time_Start": 991.84,
      "Time_End": 994.44,
      "Text": " Some code might just not work on Core RT,"
    },
    {
      "Time_Start": 994.44,
      "Time_End": 997.08,
      "Text": " so it's important to actually try it out ahead of time."
    },
    {
      "Time_Start": 997.08,
      "Time_End": 999.6400000000001,
      "Text": " There's also this thing called .NET Native,"
    },
    {
      "Time_Start": 999.6400000000001,
      "Time_End": 1001.48,
      "Text": " but it's closed-source while"
    },
    {
      "Time_Start": 1001.48,
      "Time_End": 1003.8000000000001,
      "Text": " Core RT is open-source and on GitHub."
    },
    {
      "Time_Start": 1003.8000000000001,
      "Time_End": 1009.08,
      "Text": " .NET Native is specifically for UWP or Universal Windows Platform,"
    },
    {
      "Time_Start": 1009.08,
      "Time_End": 1013.2800000000001,
      "Text": " which are basically the weird Windows Store apps."
    },
    {
      "Time_Start": 1013.2800000000001,
      "Time_End": 1015.8800000000001,
      "Text": " But it's a similar concept."
    },
    {
      "Time_Start": 1015.8800000000001,
      "Time_End": 1017.8000000000001,
      "Text": " But the execution technique I want to spend"
    },
    {
      "Time_Start": 1017.8000000000001,
      "Time_End": 1020.72,
      "Text": " the most time on is publish single file."
    },
    {
      "Time_Start": 1020.72,
      "Time_End": 1024.24,
      "Text": " So if you've been in the offensive security world for a while,"
    },
    {
      "Time_Start": 1024.24,
      "Time_End": 1026.08,
      "Text": " you'll know that living off the land is"
    },
    {
      "Time_Start": 1026.08,
      "Time_End": 1028.44,
      "Text": " an important concept for Red Teamers."
    },
    {
      "Time_Start": 1028.44,
      "Time_End": 1031.04,
      "Text": " That is the idea that we should only make use of"
    },
    {
      "Time_Start": 1031.04,
      "Time_End": 1033.2,
      "Text": " technologies that are likely to be"
    },
    {
      "Time_Start": 1033.2,
      "Time_End": 1036.84,
      "Text": " present on the target environments that we intend to attack."
    },
    {
      "Time_Start": 1036.84,
      "Time_End": 1040.72,
      "Text": " But .NET Core is unlikely to be installed by default yet on"
    },
    {
      "Time_Start": 1040.72,
      "Time_End": 1045.48,
      "Text": " target endpoints but doesn't actually need to be in some cases."
    },
    {
      "Time_Start": 1045.48,
      "Time_End": 1048.52,
      "Text": " As of .NET Core 3.0 and beyond,"
    },
    {
      "Time_Start": 1048.52,
      "Time_End": 1051.76,
      "Text": " a feature called publish single file was introduced."
    },
    {
      "Time_Start": 1051.76,
      "Time_End": 1056.04,
      "Text": " What this does is compile an assembly and all of"
    },
    {
      "Time_Start": 1056.04,
      "Time_End": 1061.84,
      "Text": " its dependencies into a single unmanaged PE executable."
    },
    {
      "Time_Start": 1061.84,
      "Time_End": 1065.6,
      "Text": " The difference between this and Core RT is that"
    },
    {
      "Time_Start": 1065.6,
      "Time_End": 1069.28,
      "Text": " your .NET code will still be managed by a real runtime,"
    },
    {
      "Time_Start": 1069.28,
      "Time_End": 1074.16,
      "Text": " and the entire runtime will also be embedded into this PE."
    },
    {
      "Time_Start": 1074.16,
      "Time_End": 1079.08,
      "Text": " The PE serves as a simple wrapper that will bootstrap the runtime,"
    },
    {
      "Time_Start": 1079.08,
      "Time_End": 1082.9199999999998,
      "Text": " which eventually will manage your assembly you've created."
    },
    {
      "Time_Start": 1082.9199999999998,
      "Time_End": 1084.76,
      "Text": " So what does this look like?"
    },
    {
      "Time_Start": 1084.76,
      "Time_End": 1088.04,
      "Text": " Again, we write out some C-sharp code just like normal,"
    },
    {
      "Time_Start": 1088.04,
      "Time_End": 1090.56,
      "Text": " put this through a compiler."
    },
    {
      "Time_Start": 1090.56,
      "Time_End": 1092.6799999999998,
      "Text": " You'll actually need to use the .NET"
    },
    {
      "Time_Start": 1092.6799999999998,
      "Time_End": 1095.96,
      "Text": " CLI's publish command to utilize this feature."
    },
    {
      "Time_Start": 1095.96,
      "Time_End": 1098.1999999999998,
      "Text": " This will generate your .NET assembly,"
    },
    {
      "Time_Start": 1098.1999999999998,
      "Time_End": 1103.12,
      "Text": " which will be stuffed inside of an unmanaged PE executable file,"
    },
    {
      "Time_Start": 1103.12,
      "Time_End": 1106.76,
      "Text": " as will the entire Core CLR runtime."
    },
    {
      "Time_Start": 1106.76,
      "Time_End": 1111.08,
      "Text": " At runtime, the PE will kick off the Core CLR,"
    },
    {
      "Time_Start": 1111.08,
      "Time_End": 1114.8799999999999,
      "Text": " which will load your assembly and do its normal stuff that converts"
    },
    {
      "Time_Start": 1114.8799999999999,
      "Time_End": 1119.6,
      "Text": " the IL to machine code and manages it throughout the execution."
    },
    {
      "Time_Start": 1119.6,
      "Time_End": 1123.48,
      "Text": " This turns out to be extremely useful to us as attackers."
    },
    {
      "Time_Start": 1123.48,
      "Time_End": 1125.84,
      "Text": " .NET Core does not need to be"
    },
    {
      "Time_Start": 1125.84,
      "Time_End": 1129.0,
      "Text": " installed on the target operating system at all."
    },
    {
      "Time_Start": 1129.0,
      "Time_End": 1133.64,
      "Text": " However, there are some drawbacks here, primarily file size."
    },
    {
      "Time_Start": 1133.64,
      "Time_End": 1138.64,
      "Text": " If you write a very basic Hello World assembly in C-sharp,"
    },
    {
      "Time_Start": 1138.64,
      "Time_End": 1140.96,
      "Text": " that has very few dependencies,"
    },
    {
      "Time_Start": 1140.96,
      "Time_End": 1143.68,
      "Text": " and compile that with publish single file,"
    },
    {
      "Time_Start": 1143.68,
      "Time_End": 1148.0,
      "Text": " you're going to have a binary that sits somewhere around 60 megabytes,"
    },
    {
      "Time_Start": 1148.0,
      "Time_End": 1151.0,
      "Text": " or maybe a little bigger, which is unfortunate."
    },
    {
      "Time_Start": 1151.0,
      "Time_End": 1155.92,
      "Text": " But keep in mind that you are stuffing the entire runtime into the binary."
    },
    {
      "Time_Start": 1155.92,
      "Time_End": 1158.76,
      "Text": " The code itself is cross-platform,"
    },
    {
      "Time_Start": 1158.76,
      "Time_End": 1161.5200000000002,
      "Text": " it can be run on any operating system."
    },
    {
      "Time_Start": 1161.52,
      "Time_End": 1163.8799999999999,
      "Text": " But the binary itself can only be"
    },
    {
      "Time_Start": 1163.8799999999999,
      "Time_End": 1167.04,
      "Text": " compiled for a single target operating system."
    },
    {
      "Time_Start": 1167.04,
      "Time_End": 1172.04,
      "Text": " So you're going to have to generate three separate 60 megabyte or so payloads,"
    },
    {
      "Time_Start": 1172.04,
      "Time_End": 1174.48,
      "Text": " one for Windows, one for Linux,"
    },
    {
      "Time_Start": 1174.48,
      "Time_End": 1179.8,
      "Text": " one for Mac OS, so that it knows which runtime to embed into the executable."
    },
    {
      "Time_Start": 1179.8,
      "Time_End": 1184.6399999999999,
      "Text": " You don't want to have multiple of them in there and make the payload even larger."
    },
    {
      "Time_Start": 1184.6399999999999,
      "Time_End": 1188.08,
      "Text": " There's a lot of similarities here to writing Go payloads."
    },
    {
      "Time_Start": 1188.08,
      "Time_End": 1191.0,
      "Text": " You get a large self-contained executable,"
    },
    {
      "Time_Start": 1191.0,
      "Time_End": 1194.48,
      "Text": " it has cross-platform benefits."
    },
    {
      "Time_Start": 1194.48,
      "Time_End": 1197.68,
      "Text": " So now that we've talked about a few execution techniques,"
    },
    {
      "Time_Start": 1197.68,
      "Time_End": 1201.16,
      "Text": " I wanted to talk about a few unique practical problems that are"
    },
    {
      "Time_Start": 1201.16,
      "Time_End": 1204.76,
      "Text": " presented for.NET Core Malware and how we might solve them."
    },
    {
      "Time_Start": 1204.76,
      "Time_End": 1207.12,
      "Text": " First, as we alluded to,"
    },
    {
      "Time_Start": 1207.12,
      "Time_End": 1209.28,
      "Text": " file size can be a problem."
    },
    {
      "Time_Start": 1209.28,
      "Time_End": 1212.48,
      "Text": " Sixty megabytes might just be too large for you to feel"
    },
    {
      "Time_Start": 1212.48,
      "Time_End": 1215.88,
      "Text": " comfortable using in some phishing scenarios."
    },
    {
      "Time_Start": 1215.88,
      "Time_End": 1219.4,
      "Text": " But I'll add that normal run-of-the-mill"
    },
    {
      "Time_Start": 1219.4,
      "Time_End": 1223.3200000000002,
      "Text": " legitimate software can sometimes be a lot larger than even this."
    },
    {
      "Time_Start": 1223.3200000000002,
      "Time_End": 1228.8400000000001,
      "Text": " So 60 megabytes might actually be fine in a lot of scenarios."
    },
    {
      "Time_Start": 1228.8400000000001,
      "Time_End": 1233.16,
      "Text": " The second problem we'll tackle is one of dependencies."
    },
    {
      "Time_Start": 1233.16,
      "Time_End": 1236.92,
      "Text": " Some solutions to the file size problem can actually generate"
    },
    {
      "Time_Start": 1236.92,
      "Time_End": 1240.2800000000002,
      "Text": " new problems when it comes to delayed dependencies,"
    },
    {
      "Time_Start": 1240.2800000000002,
      "Time_End": 1242.96,
      "Text": " which we'll talk about in just a bit."
    },
    {
      "Time_Start": 1242.96,
      "Time_End": 1245.24,
      "Text": " So let's talk file size."
    },
    {
      "Time_Start": 1245.24,
      "Time_End": 1247.2800000000002,
      "Text": " Sixty megabytes is just too big."
    },
    {
      "Time_Start": 1247.28,
      "Time_End": 1249.32,
      "Text": " So what are we going to do about it?"
    },
    {
      "Time_Start": 1249.32,
      "Time_End": 1251.04,
      "Text": " A couple of solutions."
    },
    {
      "Time_Start": 1251.04,
      "Time_End": 1253.2,
      "Text": " One is the IL Linker."
    },
    {
      "Time_Start": 1253.2,
      "Time_End": 1258.96,
      "Text": " Microsoft has created an illinker.tasks namespace that helps with this problem."
    },
    {
      "Time_Start": 1258.96,
      "Time_End": 1261.36,
      "Text": " It's easily usable when compiling"
    },
    {
      "Time_Start": 1261.36,
      "Time_End": 1265.96,
      "Text": " our single file assemblies with the publish trimmed feature."
    },
    {
      "Time_Start": 1265.96,
      "Time_End": 1268.2,
      "Text": " What this does is trim"
    },
    {
      "Time_Start": 1268.2,
      "Time_End": 1273.76,
      "Text": " unnecessary assemblies from our application and even from the runtime itself."
    },
    {
      "Time_Start": 1273.76,
      "Time_End": 1276.76,
      "Text": " So let's say we write an assembly that has no need for"
    },
    {
      "Time_Start": 1276.76,
      "Time_End": 1280.36,
      "Text": " the system.diagnostics.process namespace."
    },
    {
      "Time_Start": 1280.36,
      "Time_End": 1282.8,
      "Text": " We don't actually use that API at all."
    },
    {
      "Time_Start": 1282.8,
      "Time_End": 1286.72,
      "Text": " Well, that assembly can simply be removed from the runtime,"
    },
    {
      "Time_Start": 1286.72,
      "Time_End": 1288.92,
      "Text": " gets embedded in the executable."
    },
    {
      "Time_Start": 1288.92,
      "Time_End": 1292.44,
      "Text": " This can be a somewhat dangerous process."
    },
    {
      "Time_Start": 1292.44,
      "Time_End": 1294.92,
      "Text": " In some cases, the IL Linker might fail to"
    },
    {
      "Time_Start": 1294.92,
      "Time_End": 1299.48,
      "Text": " recognize a dependency that you need that will cause your code to fail."
    },
    {
      "Time_Start": 1299.48,
      "Time_End": 1303.44,
      "Text": " For example, if you're using reflection to load a dependency,"
    },
    {
      "Time_Start": 1303.44,
      "Time_End": 1307.68,
      "Text": " the IL Linker has no way of knowing that and will not include it in the runtime."
    },
    {
      "Time_Start": 1307.68,
      "Time_End": 1309.16,
      "Text": " In addition to the IL Linker,"
    },
    {
      "Time_Start": 1309.16,
      "Time_End": 1313.4,
      "Text": " we can use CoreRT to reduce file sizes like we've mentioned before."
    },
    {
      "Time_Start": 1313.4,
      "Time_End": 1315.96,
      "Text": " So let's see how effective this can be."
    },
    {
      "Time_Start": 1315.96,
      "Time_End": 1320.1200000000001,
      "Text": " We'll be using Covenants.NET Core Implant as the example here."
    },
    {
      "Time_Start": 1320.1200000000001,
      "Time_End": 1326.6000000000001,
      "Text": " We do our standard publish single file compilation and land at 60 megabytes."
    },
    {
      "Time_Start": 1326.6000000000001,
      "Time_End": 1330.56,
      "Text": " We add in the IL Linker publish trimmed feature."
    },
    {
      "Time_Start": 1330.56,
      "Time_End": 1333.84,
      "Text": " We cut this in half to about 30 megabytes."
    },
    {
      "Time_Start": 1333.84,
      "Time_End": 1335.52,
      "Text": " Now, in Covenant,"
    },
    {
      "Time_Start": 1335.52,
      "Time_End": 1337.8799999999999,
      "Text": " this is where I stop for brutes."
    },
    {
      "Time_Start": 1337.8799999999999,
      "Time_End": 1341.72,
      "Text": " 30 megabytes is certainly larger than I would like it to be for sure."
    },
    {
      "Time_Start": 1341.72,
      "Time_End": 1344.3999999999999,
      "Text": " My guess is that the IL Linker continues to"
    },
    {
      "Time_Start": 1344.3999999999999,
      "Time_End": 1348.28,
      "Text": " improve in size reduction in.NET 5 and beyond."
    },
    {
      "Time_Start": 1348.28,
      "Time_End": 1353.76,
      "Text": " I'm a little hesitant to make use of an experimental runtime by default,"
    },
    {
      "Time_Start": 1353.76,
      "Time_End": 1357.28,
      "Text": " but I'm definitely looking for new ways to cut down the size and maybe we can"
    },
    {
      "Time_Start": 1357.28,
      "Time_End": 1362.48,
      "Text": " introduce CoreRT compilation as an additional option in the future."
    },
    {
      "Time_Start": 1362.48,
      "Time_End": 1364.8,
      "Text": " If we do use CoreRT,"
    },
    {
      "Time_Start": 1364.8,
      "Time_End": 1369.04,
      "Text": " the default settings we get down to around five megabytes."
    },
    {
      "Time_Start": 1369.04,
      "Time_End": 1373.2,
      "Text": " But increasing the CoreRT settings to be more aggressive,"
    },
    {
      "Time_Start": 1373.2,
      "Time_End": 1377.24,
      "Text": " we can get down to four or even three megabytes."
    },
    {
      "Time_Start": 1377.24,
      "Time_End": 1382.12,
      "Text": " I believe there are more extensive options in CoreRT to reduce even further,"
    },
    {
      "Time_Start": 1382.12,
      "Time_End": 1385.2,
      "Text": " if you're willing to not make use of reflection in your code."
    },
    {
      "Time_Start": 1385.24,
      "Time_End": 1386.92,
      "Text": " But for brutes at least,"
    },
    {
      "Time_Start": 1386.92,
      "Time_End": 1389.24,
      "Text": " it's hard dependency for now."
    },
    {
      "Time_Start": 1389.24,
      "Time_End": 1392.8,
      "Text": " That's the file size problem and some practical solutions."
    },
    {
      "Time_Start": 1392.8,
      "Time_End": 1396.32,
      "Text": " If you want to see this taken to a further extreme,"
    },
    {
      "Time_Start": 1396.32,
      "Time_End": 1400.24,
      "Text": " I'd recommend this blog post where the author writes"
    },
    {
      "Time_Start": 1400.24,
      "Time_End": 1404.6000000000001,
      "Text": " a.NET Core snake game and gets very creative to get the file size"
    },
    {
      "Time_Start": 1404.6000000000001,
      "Time_End": 1409.28,
      "Text": " down to under eight kilobytes, which is very impressive."
    },
    {
      "Time_Start": 1409.3600000000001,
      "Time_End": 1411.76,
      "Text": " Like I mentioned, brutes use"
    },
    {
      "Time_Start": 1411.76,
      "Time_End": 1415.36,
      "Text": " the publish single file and publish trimmed features,"
    },
    {
      "Time_Start": 1415.36,
      "Time_End": 1418.56,
      "Text": " and we get to about 30 megabytes for the initial payload."
    },
    {
      "Time_Start": 1418.56,
      "Time_End": 1423.24,
      "Text": " What's cool is that even with this unmanaged PE payload,"
    },
    {
      "Time_Start": 1423.24,
      "Time_End": 1427.84,
      "Text": " we still can load in additional capabilities at runtime."
    },
    {
      "Time_Start": 1427.84,
      "Time_End": 1430.24,
      "Text": " If we want to run an LS,"
    },
    {
      "Time_Start": 1430.24,
      "Time_End": 1431.64,
      "Text": " once we have an implant,"
    },
    {
      "Time_Start": 1431.64,
      "Time_End": 1434.36,
      "Text": " the capability can be sent over the network to"
    },
    {
      "Time_Start": 1434.36,
      "Time_End": 1438.0,
      "Text": " the payload and load it up inside the implant."
    },
    {
      "Time_Start": 1438.0,
      "Time_End": 1441.04,
      "Text": " This is a fairly necessary feature for implants,"
    },
    {
      "Time_Start": 1441.04,
      "Time_End": 1444.0,
      "Text": " so I was very excited to find that it is still"
    },
    {
      "Time_Start": 1444.0,
      "Time_End": 1447.52,
      "Text": " possible with this publish single file feature."
    },
    {
      "Time_Start": 1447.52,
      "Time_End": 1450.3999999999999,
      "Text": " However, the publish trimmed feature can"
    },
    {
      "Time_Start": 1450.3999999999999,
      "Time_End": 1452.44,
      "Text": " cause us some issues with dependencies,"
    },
    {
      "Time_Start": 1452.44,
      "Time_End": 1455.32,
      "Text": " where we load up additional capabilities."
    },
    {
      "Time_Start": 1455.32,
      "Time_End": 1457.56,
      "Text": " When we generate these additional capabilities,"
    },
    {
      "Time_Start": 1457.56,
      "Time_End": 1460.8,
      "Text": " we don't use the publish single file feature,"
    },
    {
      "Time_Start": 1460.8,
      "Time_End": 1465.32,
      "Text": " since we can't just load an unmanaged assembly within our implant."
    },
    {
      "Time_Start": 1465.32,
      "Time_End": 1469.0,
      "Text": " These tasks are true.NET assemblies that don't"
    },
    {
      "Time_Start": 1469.0,
      "Time_End": 1472.36,
      "Text": " contain an entire core CLR runtime."
    },
    {
      "Time_Start": 1472.36,
      "Time_End": 1474.52,
      "Text": " If we trim out dependencies,"
    },
    {
      "Time_Start": 1474.52,
      "Time_End": 1476.52,
      "Text": " we don't need in our base implant,"
    },
    {
      "Time_Start": 1476.52,
      "Time_End": 1479.2,
      "Text": " but then load up capabilities that"
    },
    {
      "Time_Start": 1479.2,
      "Time_End": 1481.92,
      "Text": " depend on features that we just trimmed out,"
    },
    {
      "Time_Start": 1481.92,
      "Time_End": 1484.48,
      "Text": " we are going to run into problems."
    },
    {
      "Time_Start": 1484.48,
      "Time_End": 1486.8,
      "Text": " As an example, let's say we have"
    },
    {
      "Time_Start": 1486.8,
      "Time_End": 1489.56,
      "Text": " an implant and a task that looks something like this."
    },
    {
      "Time_Start": 1489.56,
      "Time_End": 1492.72,
      "Text": " On the right side, you see an implant looping,"
    },
    {
      "Time_Start": 1492.72,
      "Time_End": 1496.72,
      "Text": " asking the server side continuously if there are any new tasks."
    },
    {
      "Time_Start": 1496.72,
      "Time_End": 1502.4,
      "Text": " If it gets one, it tries to use assembly.load to load it up and execute it."
    },
    {
      "Time_Start": 1502.4,
      "Time_End": 1506.28,
      "Text": " On the left side, you see a task that does process listing."
    },
    {
      "Time_Start": 1506.28,
      "Time_End": 1511.1200000000001,
      "Text": " To do that, it's using the system.diagnostics.process API."
    },
    {
      "Time_Start": 1511.1200000000001,
      "Time_End": 1514.84,
      "Text": " However, this API was trimmed out of"
    },
    {
      "Time_Start": 1514.84,
      "Time_End": 1518.68,
      "Text": " our implant because it didn't need it in the actual implant code."
    },
    {
      "Time_Start": 1518.68,
      "Time_End": 1522.08,
      "Text": " So when we go to load and execute this assembly,"
    },
    {
      "Time_Start": 1522.08,
      "Time_End": 1524.4,
      "Text": " we're going to get a runtime error that our task"
    },
    {
      "Time_Start": 1524.4,
      "Time_End": 1528.76,
      "Text": " can't find the necessary dependency, which is unfortunate."
    },
    {
      "Time_Start": 1528.76,
      "Time_End": 1532.0,
      "Text": " So we have a couple of potential solutions here."
    },
    {
      "Time_Start": 1532.0,
      "Time_End": 1535.5600000000002,
      "Text": " The first makes use of assembly.load context,"
    },
    {
      "Time_Start": 1535.5600000000002,
      "Time_End": 1539.64,
      "Text": " which we mentioned for other purposes very briefly earlier on."
    },
    {
      "Time_Start": 1539.64,
      "Time_End": 1542.1200000000001,
      "Text": " We can also make use of assembly.resolve."
    },
    {
      "Time_Start": 1542.1200000000001,
      "Time_End": 1545.2,
      "Text": " So here's how the assembly.load context solution works."
    },
    {
      "Time_Start": 1545.2,
      "Time_End": 1547.16,
      "Text": " Checking manager was the first person"
    },
    {
      "Time_Start": 1547.16,
      "Time_End": 1549.1200000000001,
      "Text": " to alert me to this potential solution."
    },
    {
      "Time_Start": 1549.1200000000001,
      "Time_End": 1551.8400000000001,
      "Text": " What he discovered is that instead of directly using"
    },
    {
      "Time_Start": 1551.8400000000001,
      "Time_End": 1554.5200000000002,
      "Text": " assembly.load on the implant side,"
    },
    {
      "Time_Start": 1554.5200000000002,
      "Time_End": 1557.16,
      "Text": " we can use assembly.load context."
    },
    {
      "Time_Start": 1557.16,
      "Time_End": 1559.5200000000002,
      "Text": " Before we load the task directly,"
    },
    {
      "Time_Start": 1559.5200000000002,
      "Time_End": 1563.64,
      "Text": " we load each of the dependencies required by the task,"
    },
    {
      "Time_Start": 1563.64,
      "Time_End": 1566.88,
      "Text": " using assembly.load context.loadFromStream."
    },
    {
      "Time_Start": 1566.88,
      "Time_End": 1572.0000000000002,
      "Text": " In this example, the implant has to change to adapt to the task."
    },
    {
      "Time_Start": 1572.0000000000002,
      "Time_End": 1574.68,
      "Text": " We could automate and abstract this out a bit more,"
    },
    {
      "Time_Start": 1574.68,
      "Time_End": 1576.92,
      "Text": " allowing the server to deliver a list of"
    },
    {
      "Time_Start": 1576.92,
      "Time_End": 1580.6000000000001,
      "Text": " dependencies that need to be loaded before the task."
    },
    {
      "Time_Start": 1580.8400000000001,
      "Time_End": 1583.7600000000002,
      "Text": " So we don't have to hard code values like in this example."
    },
    {
      "Time_Start": 1583.7600000000002,
      "Time_End": 1586.44,
      "Text": " But at that point, we are adapting our implants,"
    },
    {
      "Time_Start": 1586.44,
      "Time_End": 1589.16,
      "Text": " our server to implant communication protocol,"
    },
    {
      "Time_Start": 1589.16,
      "Time_End": 1593.0400000000002,
      "Text": " and our server to accommodate the issue of task dependencies."
    },
    {
      "Time_Start": 1593.0400000000002,
      "Time_End": 1594.6000000000001,
      "Text": " But we can make this work."
    },
    {
      "Time_Start": 1594.6000000000001,
      "Time_End": 1597.96,
      "Text": " Another option is the assembly.resolve solution."
    },
    {
      "Time_Start": 1597.96,
      "Time_End": 1601.8400000000001,
      "Text": " The benefit of this option is that the implant stays the same,"
    },
    {
      "Time_Start": 1601.8400000000001,
      "Time_End": 1604.6000000000001,
      "Text": " the communication protocol stays the same,"
    },
    {
      "Time_Start": 1604.6000000000001,
      "Time_End": 1606.3200000000002,
      "Text": " and the server stays the same."
    },
    {
      "Time_Start": 1606.32,
      "Time_End": 1610.6,
      "Text": " Only the task has to adapt to load up its own dependencies."
    },
    {
      "Time_Start": 1610.6,
      "Time_End": 1615.72,
      "Text": " Assembly.resolve is an event handler that we can register callbacks to."
    },
    {
      "Time_Start": 1615.72,
      "Time_End": 1618.48,
      "Text": " If any assembly fails to resolve,"
    },
    {
      "Time_Start": 1618.48,
      "Time_End": 1622.04,
      "Text": " the assembly.resolve callbacks are tried as a fallback."
    },
    {
      "Time_Start": 1622.04,
      "Time_End": 1626.96,
      "Text": " If we load the assembly within the callback and return the assembly object,"
    },
    {
      "Time_Start": 1626.96,
      "Time_End": 1629.4399999999998,
      "Text": " execution will continue and succeed."
    },
    {
      "Time_Start": 1629.4399999999998,
      "Time_End": 1633.0,
      "Text": " Assembly.resolve is a carryover from the .NET framework."
    },
    {
      "Time_Start": 1633.0,
      "Time_End": 1636.96,
      "Text": " You may be familiar with projects like Kastura."
    },
    {
      "Time_Start": 1636.96,
      "Time_End": 1639.92,
      "Text": " Kastura actually makes use of assembly.resolve"
    },
    {
      "Time_Start": 1639.92,
      "Time_End": 1643.08,
      "Text": " to embed all of your third-party assemblies."
    },
    {
      "Time_Start": 1643.08,
      "Time_End": 1646.28,
      "Text": " We can use it in this scenario as well."
    },
    {
      "Time_Start": 1646.28,
      "Time_End": 1651.32,
      "Text": " So that wraps up our practical problems and solutions for .NET Core."
    },
    {
      "Time_Start": 1651.32,
      "Time_End": 1652.84,
      "Text": " All right. So up to now,"
    },
    {
      "Time_Start": 1652.84,
      "Time_End": 1655.0,
      "Text": " we've really covered all the benefits and"
    },
    {
      "Time_Start": 1655.0,
      "Time_End": 1657.56,
      "Text": " some useful information for malware developers."
    },
    {
      "Time_Start": 1657.56,
      "Time_End": 1660.64,
      "Text": " But what if you don't really want to do a ton of development,"
    },
    {
      "Time_Start": 1660.64,
      "Time_End": 1662.16,
      "Text": " but you mostly just want to use"
    },
    {
      "Time_Start": 1662.16,
      "Time_End": 1664.8400000000001,
      "Text": " the existing capabilities that are already out there?"
    },
    {
      "Time_Start": 1664.8400000000001,
      "Time_End": 1667.3600000000001,
      "Text": " Well, there is some, but not a ton."
    },
    {
      "Time_Start": 1667.3600000000001,
      "Time_End": 1670.0400000000002,
      "Text": " I definitely encourage folks to start thinking about"
    },
    {
      "Time_Start": 1670.0400000000002,
      "Time_End": 1673.4,
      "Text": " actually doing the development they wish already existed."
    },
    {
      "Time_Start": 1673.4,
      "Time_End": 1676.0400000000002,
      "Text": " But let's talk about what does exist."
    },
    {
      "Time_Start": 1676.0400000000002,
      "Time_End": 1677.72,
      "Text": " Like we've already mentioned,"
    },
    {
      "Time_Start": 1677.72,
      "Time_End": 1681.8400000000001,
      "Text": " we have a .NET Core implant called Brutes that is built into Covenant."
    },
    {
      "Time_Start": 1681.8400000000001,
      "Time_End": 1685.76,
      "Text": " So what built-in capabilities does this thing actually offer?"
    },
    {
      "Time_Start": 1686.08,
      "Time_End": 1690.84,
      "Text": " We have the basics like whoami, ls, cd, cat,"
    },
    {
      "Time_Start": 1690.84,
      "Time_End": 1696.56,
      "Text": " make directory, remove, copy, and process listing."
    },
    {
      "Time_Start": 1696.56,
      "Time_End": 1700.92,
      "Text": " The basic quality of life commands you'd expect to see in an implant."
    },
    {
      "Time_Start": 1700.92,
      "Time_End": 1705.04,
      "Text": " We also have some functional commands like assembly execution,"
    },
    {
      "Time_Start": 1705.04,
      "Time_End": 1709.24,
      "Text": " and that is for .NET Core assemblies only of course,"
    },
    {
      "Time_Start": 1709.24,
      "Time_End": 1712.92,
      "Text": " shell commands, and file download and upload."
    },
    {
      "Time_Start": 1712.92,
      "Time_End": 1714.76,
      "Text": " That's really it so far."
    },
    {
      "Time_Start": 1714.76,
      "Time_End": 1718.92,
      "Text": " There's definitely a lot more to do to bring built-in functionality to Brutes."
    },
    {
      "Time_Start": 1718.92,
      "Time_End": 1721.48,
      "Text": " One opportunity for doing so might be"
    },
    {
      "Time_Start": 1721.48,
      "Time_End": 1726.8,
      "Text": " the course plate post x library ported by Checkymander."
    },
    {
      "Time_Start": 1726.8,
      "Time_End": 1732.68,
      "Text": " This has some relatively more advanced capabilities like port scanning,"
    },
    {
      "Time_Start": 1732.68,
      "Time_End": 1736.4,
      "Text": " lateral movement, persistence, privilege escalation,"
    },
    {
      "Time_Start": 1736.4,
      "Time_End": 1739.8,
      "Text": " and possibly even domain enumeration."
    },
    {
      "Time_Start": 1739.8,
      "Time_End": 1742.76,
      "Text": " Unfortunately, up to this point .NET has not"
    },
    {
      "Time_Start": 1742.76,
      "Time_End": 1745.8799999999999,
      "Text": " supported the directory service APIs"
    },
    {
      "Time_Start": 1745.8799999999999,
      "Time_End": 1749.12,
      "Text": " that you may be used to in the .NET framework."
    },
    {
      "Time_Start": 1749.12,
      "Time_End": 1751.92,
      "Text": " So Checkymander was forced to use"
    },
    {
      "Time_Start": 1751.92,
      "Time_End": 1755.8,
      "Text": " a third-party library to support domain enumeration functionality."
    },
    {
      "Time_Start": 1755.8,
      "Time_End": 1759.52,
      "Text": " It seems like system.directory services is going to be"
    },
    {
      "Time_Start": 1759.52,
      "Time_End": 1762.32,
      "Text": " partially integrated in .NET 5,"
    },
    {
      "Time_Start": 1762.32,
      "Time_End": 1765.12,
      "Text": " so we'll definitely have to be on the lookout for that."
    },
    {
      "Time_Start": 1765.12,
      "Time_End": 1767.52,
      "Text": " It's worth pointing out also that"
    },
    {
      "Time_Start": 1767.52,
      "Time_End": 1771.0,
      "Text": " course plate is not built into Brutes by default yet,"
    },
    {
      "Time_Start": 1771.04,
      "Time_End": 1773.68,
      "Text": " although it probably will be eventually."
    },
    {
      "Time_Start": 1773.68,
      "Time_End": 1777.6,
      "Text": " So you have to do a little work on your own to use this with Brutes."
    },
    {
      "Time_Start": 1777.6,
      "Time_End": 1781.8,
      "Text": " But it is very possible as we'll see in just a second."
    },
    {
      "Time_Start": 1781.8,
      "Time_End": 1785.28,
      "Text": " So at this point, you probably just want to see some of this stuff in"
    },
    {
      "Time_Start": 1785.28,
      "Time_End": 1789.0,
      "Text": " action to make sure I'm not lying to you about how any of this works."
    },
    {
      "Time_Start": 1789.0,
      "Time_End": 1792.32,
      "Text": " So we'll do a quick demo to show you how Brutes work,"
    },
    {
      "Time_Start": 1792.32,
      "Time_End": 1794.8,
      "Text": " how to use some of the built-in capability,"
    },
    {
      "Time_Start": 1794.8,
      "Time_End": 1799.0,
      "Text": " and how we can extend that capability with course plate by utilizing"
    },
    {
      "Time_Start": 1799.0,
      "Time_End": 1802.48,
      "Text": " many of the tricks and techniques we talked about today."
    },
    {
      "Time_Start": 1802.48,
      "Time_End": 1807.16,
      "Text": " So we already have Covenant running and an HTTP listener up and running."
    },
    {
      "Time_Start": 1807.16,
      "Time_End": 1811.44,
      "Text": " We'll start out by generating our Brute Implant payload."
    },
    {
      "Time_Start": 1816.44,
      "Time_End": 1821.56,
      "Text": " We'll select the Brute Implant template and we'll"
    },
    {
      "Time_Start": 1821.56,
      "Time_End": 1825.08,
      "Text": " select .NET Core 3.1 as our .NET version,"
    },
    {
      "Time_Start": 1825.08,
      "Time_End": 1827.8,
      "Text": " which is the only option for this implant."
    },
    {
      "Time_Start": 1827.8,
      "Time_End": 1830.8799999999999,
      "Text": " Then we need to select a runtime identifier."
    },
    {
      "Time_Start": 1830.8799999999999,
      "Time_End": 1835.68,
      "Text": " Remember, we can only compile this payload for a single operating system."
    },
    {
      "Time_Start": 1835.68,
      "Time_End": 1840.44,
      "Text": " This tells the compiler which runtime it's going to be stuffed into our payload."
    },
    {
      "Time_Start": 1840.44,
      "Time_End": 1844.2,
      "Text": " So we'll go ahead and choose OSX."
    },
    {
      "Time_Start": 1846.68,
      "Time_End": 1851.8,
      "Text": " After that, we click Generate and give it just a second,"
    },
    {
      "Time_Start": 1851.8,
      "Time_End": 1855.6399999999999,
      "Text": " and hit Download to get a copy of the payload for ourselves."
    },
    {
      "Time_Start": 1855.64,
      "Time_End": 1858.24,
      "Text": " So I want to give you a little bit of a peek under"
    },
    {
      "Time_Start": 1858.24,
      "Time_End": 1861.5600000000002,
      "Text": " the hood to see how all of this actually works."
    },
    {
      "Time_Start": 1861.5600000000002,
      "Time_End": 1865.4,
      "Text": " You can see on the terminal output that it's running"
    },
    {
      "Time_Start": 1865.4,
      "Time_End": 1870.76,
      "Text": " some .NET compilation stuff on the Brute Stager project when we do that."
    },
    {
      "Time_Start": 1870.76,
      "Time_End": 1874.76,
      "Text": " Let's take a look at our Brute Stager project file."
    },
    {
      "Time_Start": 1874.76,
      "Time_End": 1887.24,
      "Text": " So you can see that we're targeting .NET Core 3.1."
    },
    {
      "Time_Start": 1887.24,
      "Time_End": 1890.32,
      "Text": " We're making use of both the publish single file and"
    },
    {
      "Time_Start": 1890.32,
      "Time_End": 1894.12,
      "Text": " publish trimmed features that we talked about before."
    },
    {
      "Time_Start": 1894.12,
      "Time_End": 1898.8,
      "Text": " Down here, you'll see a list of trimmer root assemblies specified."
    },
    {
      "Time_Start": 1898.8,
      "Time_End": 1902.96,
      "Text": " What this allows us to do is to add additional libraries to"
    },
    {
      "Time_Start": 1902.96,
      "Time_End": 1908.72,
      "Text": " the trimmed executable that the IL linker does not recognize as a dependency."
    },
    {
      "Time_Start": 1908.72,
      "Time_End": 1913.1200000000001,
      "Text": " This can be a shortcut to support particular tasks that you want to"
    },
    {
      "Time_Start": 1913.1200000000001,
      "Time_End": 1917.28,
      "Text": " add without going through the hard work of juggling dependencies,"
    },
    {
      "Time_Start": 1917.28,
      "Time_End": 1918.76,
      "Text": " like we talked about before,"
    },
    {
      "Time_Start": 1918.76,
      "Time_End": 1921.56,
      "Text": " but this is at the cost of file size."
    },
    {
      "Time_Start": 1921.56,
      "Time_End": 1925.4,
      "Text": " So I'd certainly recommend against using this too often."
    },
    {
      "Time_Start": 1925.4,
      "Time_End": 1928.76,
      "Text": " In fact, Brutes will probably be losing many of these in"
    },
    {
      "Time_Start": 1928.76,
      "Time_End": 1932.92,
      "Text": " the future to continue combating large file sizes."
    },
    {
      "Time_Start": 1932.92,
      "Time_End": 1935.8400000000001,
      "Text": " Okay. Now that we've generated our payload,"
    },
    {
      "Time_Start": 1935.8400000000001,
      "Time_End": 1938.44,
      "Text": " let's go ahead and execute it."
    },
    {
      "Time_Start": 1946.44,
      "Time_End": 1949.68,
      "Text": " You can see we get an implant calling back here."
    },
    {
      "Time_Start": 1949.68,
      "Time_End": 1951.68,
      "Text": " Let's go ahead and interact with it."
    },
    {
      "Time_Start": 1951.68,
      "Time_End": 1955.68,
      "Text": " You can see this is on a Mac system."
    },
    {
      "Time_Start": 1955.68,
      "Time_End": 1962.16,
      "Text": " Using the help command,"
    },
    {
      "Time_Start": 1962.16,
      "Time_End": 1966.2,
      "Text": " we can get a list of the capabilities we have at our disposal."
    },
    {
      "Time_Start": 1967.88,
      "Time_End": 1973.48,
      "Text": " We'll go ahead and use the delay command to make things a little faster."
    },
    {
      "Time_Start": 1978.88,
      "Time_End": 1984.92,
      "Text": " We can do many of the basic tasks we talked about before, like a who am I?"
    },
    {
      "Time_Start": 1986.28,
      "Time_End": 1990.28,
      "Text": " We can list files."
    },
    {
      "Time_Start": 1998.28,
      "Time_End": 2001.28,
      "Text": " We can get a process listing."
    },
    {
      "Time_Start": 2011.28,
      "Time_End": 2014.28,
      "Text": " We can use shell commands."
    },
    {
      "Time_Start": 2016.68,
      "Time_End": 2022.68,
      "Text": " Lastly, let's say we want to use some capability not built-in to the implant,"
    },
    {
      "Time_Start": 2022.68,
      "Time_End": 2025.28,
      "Text": " like say a port scanner."
    },
    {
      "Time_Start": 2025.28,
      "Time_End": 2028.48,
      "Text": " We want to make use of CoreSploit to accomplish this,"
    },
    {
      "Time_Start": 2028.48,
      "Time_End": 2031.0800000000002,
      "Text": " since it already has that capability built-in."
    },
    {
      "Time_Start": 2031.0800000000002,
      "Time_End": 2032.88,
      "Text": " How might we do that?"
    },
    {
      "Time_Start": 2032.88,
      "Time_End": 2037.88,
      "Text": " Well, first, we need to make sure we've cloned CoreSploit."
    },
    {
      "Time_Start": 2037.88,
      "Time_End": 2042.68,
      "Text": " I've cloned it and have it open in Visual Studio here."
    },
    {
      "Time_Start": 2042.68,
      "Time_End": 2045.68,
      "Text": " We need to make sure we build it."
    },
    {
      "Time_Start": 2049.6800000000003,
      "Time_End": 2053.6800000000003,
      "Text": " You can see these port scan functions and libraries here."
    },
    {
      "Time_Start": 2053.6800000000003,
      "Time_End": 2056.6800000000003,
      "Text": " Once we have CoreSploit built,"
    },
    {
      "Time_Start": 2056.6800000000003,
      "Time_End": 2059.6800000000003,
      "Text": " we'll need to create our own project called PortScanner"
    },
    {
      "Time_Start": 2059.6800000000003,
      "Time_End": 2063.6800000000003,
      "Text": " that references CoreSploit as a dependency"
    },
    {
      "Time_Start": 2063.6800000000003,
      "Time_End": 2067.6800000000003,
      "Text": " and makes use of its port scanning capability to do what we need."
    },
    {
      "Time_Start": 2067.6800000000003,
      "Time_End": 2070.6800000000003,
      "Text": " You can see here in the right-hand corner,"
    },
    {
      "Time_Start": 2070.68,
      "Time_End": 2073.68,
      "Text": " you can see here in the referenced assemblies,"
    },
    {
      "Time_Start": 2073.68,
      "Time_End": 2075.68,
      "Text": " we have CoreSploit."
    },
    {
      "Time_Start": 2075.68,
      "Time_End": 2078.68,
      "Text": " I'll talk about this part here in just a second."
    },
    {
      "Time_Start": 2078.68,
      "Time_End": 2085.68,
      "Text": " You can see all we're doing is making use of the CoreSploit APIs to do port scanning."
    },
    {
      "Time_Start": 2087.68,
      "Time_End": 2090.68,
      "Text": " You'll notice here"
    },
    {
      "Time_Start": 2090.68,
      "Time_End": 2095.68,
      "Text": " that we make use of AssemblyResolve, like we mentioned earlier."
    },
    {
      "Time_Start": 2095.68,
      "Time_End": 2099.68,
      "Text": " This is so that we don't run into errors when we execute this assembly on a target,"
    },
    {
      "Time_Start": 2099.68,
      "Time_End": 2103.68,
      "Text": " since the target has no notion of what CoreSploit really is."
    },
    {
      "Time_Start": 2103.68,
      "Time_End": 2106.68,
      "Text": " You see that we have to add an entry here for CoreSploit,"
    },
    {
      "Time_Start": 2106.68,
      "Time_End": 2112.68,
      "Text": " as well as a couple of dependencies that CoreSploit itself has to accomplish this task."
    },
    {
      "Time_Start": 2113.68,
      "Time_End": 2115.68,
      "Text": " When we build CoreSploit,"
    },
    {
      "Time_Start": 2115.68,
      "Time_End": 2120.68,
      "Text": " we can copy out the base64 bytes of CoreSploit,"
    },
    {
      "Time_Start": 2120.68,
      "Time_End": 2126.68,
      "Text": " and we just copy it in here to make sure it resolves."
    },
    {
      "Time_Start": 2126.68,
      "Time_End": 2129.68,
      "Text": " Let's go ahead and do this."
    },
    {
      "Time_Start": 2129.68,
      "Time_End": 2133.68,
      "Text": " First, we need to make sure we build the port scanner."
    },
    {
      "Time_Start": 2135.68,
      "Time_End": 2140.68,
      "Text": " Then we can use the assembly command to go ahead and execute this."
    },
    {
      "Time_Start": 2141.68,
      "Time_End": 2145.68,
      "Text": " We'll just go ahead and scan localhost port 22."
    },
    {
      "Time_Start": 2159.68,
      "Time_End": 2161.68,
      "Text": " And success."
    },
    {
      "Time_Start": 2161.68,
      "Time_End": 2164.68,
      "Text": " Hopefully, this ties together a lot of the different nuances"
    },
    {
      "Time_Start": 2164.68,
      "Time_End": 2167.68,
      "Text": " that we've been talking about that you have to consider in .NET Core,"
    },
    {
      "Time_Start": 2167.68,
      "Time_End": 2170.68,
      "Text": " as well as gives you an idea of the real potential"
    },
    {
      "Time_Start": 2170.68,
      "Time_End": 2173.68,
      "Text": " for using this in offensive operations."
    },
    {
      "Time_Start": 2173.68,
      "Time_End": 2177.68,
      "Text": " We haven't really touched on defensive measures to combat .NET Core yet."
    },
    {
      "Time_Start": 2177.68,
      "Time_End": 2181.68,
      "Text": " I know it's a bit of a faux pas to provide just a single cursory slide"
    },
    {
      "Time_Start": 2181.68,
      "Time_End": 2185.68,
      "Text": " in relation to defense in an offensive talk nowadays."
    },
    {
      "Time_Start": 2185.68,
      "Time_End": 2188.68,
      "Text": " I hope you'll forgive me for doing so,"
    },
    {
      "Time_Start": 2188.68,
      "Time_End": 2191.68,
      "Text": " and I'll see you in the next video."
    },
    {
      "Time_Start": 2195.68,
      "Time_End": 2198.68,
      "Text": " On one hand, I hope that the offensive knowledge is valuable"
    },
    {
      "Time_Start": 2198.68,
      "Time_End": 2202.68,
      "Text": " and informative in its own right, even for defenders."
    },
    {
      "Time_Start": 2202.68,
      "Time_End": 2205.68,
      "Text": " I also believe that the topic of defense and detection"
    },
    {
      "Time_Start": 2205.68,
      "Time_End": 2210.68,
      "Text": " when it comes to .NET Core deserves a deep dive all of its own."
    },
    {
      "Time_Start": 2210.68,
      "Time_End": 2213.68,
      "Text": " But for now, I'll leave you with these few thoughts."
    },
    {
      "Time_Start": 2213.68,
      "Time_End": 2218.68,
      "Text": " First, make use of the visibility sources that Microsoft provides you with."
    },
    {
      "Time_Start": 2218.68,
      "Time_End": 2222.68,
      "Text": " Make sure your anti-malware provider utilizes AMSI."
    },
    {
      "Time_Start": 2222.68,
      "Time_End": 2227.68,
      "Text": " Yes, I know it can be bypassed, but that almost doesn't matter."
    },
    {
      "Time_Start": 2227.68,
      "Time_End": 2233.68,
      "Text": " Attackers won't all be smart enough or diligent enough to do this all the time."
    },
    {
      "Time_Start": 2233.68,
      "Time_End": 2238.68,
      "Text": " And even if they are, the bypass itself can be detected by AMSI."
    },
    {
      "Time_Start": 2238.68,
      "Time_End": 2245.68,
      "Text": " So there's really no good reason to not make the most of this opportunity as a defender."
    },
    {
      "Time_Start": 2245.68,
      "Time_End": 2251.68,
      "Text": " And ETW might become an even more important source of visibility for defenders."
    },
    {
      "Time_Start": 2251.68,
      "Time_End": 2256.68,
      "Text": " ETW will log all of the assembly namespaces being executed."
    },
    {
      "Time_Start": 2256.68,
      "Time_End": 2259.68,
      "Text": " If this information is collected and centralized,"
    },
    {
      "Time_Start": 2259.68,
      "Time_End": 2265.68,
      "Text": " it can become a rich source of data to analyze and hunt for malicious behavior."
    },
    {
      "Time_Start": 2265.68,
      "Time_End": 2272.68,
      "Text": " And feel free to use Brutes and CoreSploit as the first signatures to test against your logs."
    },
    {
      "Time_Start": 2272.68,
      "Time_End": 2274.68,
      "Text": " Seriously, we won't be offended."
    },
    {
      "Time_Start": 2274.68,
      "Time_End": 2279.68,
      "Text": " Please use everything we write as an opportunity for detection."
    },
    {
      "Time_Start": 2279.68,
      "Time_End": 2284.68,
      "Text": " You shouldn't rely on tool-specific detection measures as a silver bullet,"
    },
    {
      "Time_Start": 2284.68,
      "Time_End": 2287.68,
      "Text": " but it can be a first step."
    },
    {
      "Time_Start": 2287.68,
      "Time_End": 2289.68,
      "Text": " Beyond signatures, like I've said,"
    },
    {
      "Time_Start": 2289.68,
      "Time_End": 2293.68,
      "Text": " please start collecting and centralizing your ETW logs."
    },
    {
      "Time_Start": 2293.68,
      "Time_End": 2297.68,
      "Text": " This will be a great source of information in the future."
    },
    {
      "Time_Start": 2297.68,
      "Time_End": 2301.68,
      "Text": " Additionally, some of the unique features we've talked about today"
    },
    {
      "Time_Start": 2301.68,
      "Time_End": 2307.68,
      "Text": " could be interesting research topics worthy of investigation on the defensive side."
    },
    {
      "Time_Start": 2307.68,
      "Time_End": 2311.68,
      "Text": " For instance, can we automate the process of distinguishing the difference"
    },
    {
      "Time_Start": 2311.68,
      "Time_End": 2318.68,
      "Text": " between a published single-file PE versus an ordinary unmanaged executable?"
    },
    {
      "Time_Start": 2318.68,
      "Time_End": 2320.68,
      "Text": " If so, we could take that a step further"
    },
    {
      "Time_Start": 2320.68,
      "Time_End": 2325.68,
      "Text": " and actually identify the user-created assembly that's embedded"
    },
    {
      "Time_Start": 2325.68,
      "Time_End": 2331.68,
      "Text": " inside a published single-file executable and analyze those."
    },
    {
      "Time_Start": 2331.68,
      "Time_End": 2336.68,
      "Text": " These are a couple of topics I certainly am interested in researching on the defensive side,"
    },
    {
      "Time_Start": 2336.68,
      "Time_End": 2343.68,
      "Text": " but please feel free to beat me to the punch if it's something you would like to pursue."
    },
    {
      "Time_Start": 2343.68,
      "Time_End": 2346.68,
      "Text": " Finally, don't fight the wave of .NET Core."
    },
    {
      "Time_Start": 2346.68,
      "Time_End": 2350.68,
      "Text": " Don't go back to your employer saying that you heard a talk about .NET Core malware"
    },
    {
      "Time_Start": 2350.68,
      "Time_End": 2352.68,
      "Text": " and how bad it is."
    },
    {
      "Time_Start": 2352.68,
      "Time_End": 2355.68,
      "Text": " And as an organization, we need to just prevent it from being installed"
    },
    {
      "Time_Start": 2355.68,
      "Time_End": 2358.68,
      "Text": " or run anywhere inside our network."
    },
    {
      "Time_Start": 2358.68,
      "Time_End": 2360.68,
      "Text": " That's just not the right approach."
    },
    {
      "Time_Start": 2360.68,
      "Time_End": 2363.68,
      "Text": " .NET is used for legitimate software."
    },
    {
      "Time_Start": 2363.68,
      "Time_End": 2365.68,
      "Text": " It's going to be used."
    },
    {
      "Time_Start": 2365.68,
      "Time_End": 2368.68,
      "Text": " We have visibility sources for .NET."
    },
    {
      "Time_Start": 2368.68,
      "Time_End": 2372.68,
      "Text": " Preventing the newest types of software won't do us any good."
    },
    {
      "Time_Start": 2372.68,
      "Time_End": 2378.68,
      "Text": " Attackers are just as happy to use the unmanaged C implants that they've had laying around for years"
    },
    {
      "Time_Start": 2378.68,
      "Time_End": 2382.68,
      "Text": " if you're really trying to prevent them from using .NET."
    },
    {
      "Time_Start": 2382.68,
      "Time_End": 2384.68,
      "Text": " It's really just not worth the fight."
    },
    {
      "Time_Start": 2384.68,
      "Time_End": 2387.68,
      "Text": " We have to adapt to the changing software landscape."
    },
    {
      "Time_Start": 2387.68,
      "Time_End": 2392.68,
      "Text": " Learn to detect where attackers might pivot to next."
    },
    {
      "Time_Start": 2392.68,
      "Time_End": 2396.68,
      "Text": " If an organization acts now, they really will be ahead of the curve."
    },
    {
      "Time_Start": 2396.68,
      "Time_End": 2401.68,
      "Text": " .NET Core malware is still very much at the beginning of its utilization curve,"
    },
    {
      "Time_Start": 2401.68,
      "Time_End": 2407.68,
      "Text": " so defenders definitely still have an opportunity to get the jump on attackers."
    },
    {
      "Time_Start": 2407.68,
      "Time_End": 2412.68,
      "Text": " In conclusion, if I could pick just a few things for you to take away from this talk,"
    },
    {
      "Time_Start": 2412.68,
      "Time_End": 2417.68,
      "Text": " it would be, one, that .NET Core is about to become much more prevalent."
    },
    {
      "Time_Start": 2417.68,
      "Time_End": 2419.68,
      "Text": " .NET Core is the future of .NET."
    },
    {
      "Time_Start": 2419.68,
      "Time_End": 2423.68,
      "Text": " .NET 5, which is set to be generally available any day now,"
    },
    {
      "Time_Start": 2423.68,
      "Time_End": 2429.68,
      "Text": " very likely will be installed by default on the latest Windows operating systems,"
    },
    {
      "Time_Start": 2429.68,
      "Time_End": 2433.68,
      "Text": " I'd guess by as early as early 2021."
    },
    {
      "Time_Start": 2433.68,
      "Time_End": 2438.68,
      "Text": " .NET Core includes some key features like publish single file and publish trimmed"
    },
    {
      "Time_Start": 2438.68,
      "Time_End": 2445.68,
      "Text": " that can be enormously useful and eliminates the need for .NET Core to be installed ahead of time."
    },
    {
      "Time_Start": 2445.68,
      "Time_End": 2450.68,
      "Text": " Practical issues like file size and dependencies are solvable."
    },
    {
      "Time_Start": 2450.68,
      "Time_End": 2454.68,
      "Text": " .NET Core is just very promising for malware development."
    },
    {
      "Time_Start": 2454.68,
      "Time_End": 2459.68,
      "Text": " As developers, we get to make use of the latest APIs like assembly load context,"
    },
    {
      "Time_Start": 2459.68,
      "Time_End": 2462.68,
      "Text": " async primitives, and many others."
    },
    {
      "Time_Start": 2462.68,
      "Time_End": 2465.68,
      "Text": " We get cross-platform implants."
    },
    {
      "Time_Start": 2465.68,
      "Time_End": 2470.68,
      "Text": " Visibility issues can be taken care of with bypasses, just like in the .NET framework."
    },
    {
      "Time_Start": 2470.68,
      "Time_End": 2474.68,
      "Text": " And in most cases, it's very easy to port the existing .NET framework"
    },
    {
      "Time_Start": 2474.68,
      "Time_End": 2477.68,
      "Text": " to Traycraft that we already have."
    },
    {
      "Time_Start": 2477.68,
      "Time_End": 2483.68,
      "Text": " And finally, there's some experimental runtimes like Core RT that are worth investigating as well."
    },
    {
      "Time_Start": 2483.68,
      "Time_End": 2488.68,
      "Text": " As a reminder, I am available for questions down in the chat right now."
    },
    {
      "Time_Start": 2488.68,
      "Time_End": 2492.68,
      "Text": " And if you want to join the conversation about these topics after today,"
    },
    {
      "Time_Start": 2492.68,
      "Time_End": 2495.68,
      "Text": " I'd recommend joining the Bloodhound Gang Slack group,"
    },
    {
      "Time_Start": 2495.68,
      "Time_End": 2499.68,
      "Text": " which is a free general InfoSec discussion group."
    },
    {
      "Time_Start": 2499.68,
      "Time_End": 2503.68,
      "Text": " And we have a couple of channels where this topic is being discussed,"
    },
    {
      "Time_Start": 2503.68,
      "Time_End": 2506.68,
      "Text": " including the Covenant channel and the Stay Sharp channel."
    },
    {
      "Time_Start": 2506.68,
      "Time_End": 2509.68,
      "Text": " Feel free to use that link to join."
    },
    {
      "Time_Start": 2509.68,
      "Time_End": 2511.68,
      "Text": " Besides that, everyone, thanks for joining."
    }
  ]
}