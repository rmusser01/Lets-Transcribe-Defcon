**Introduction**
- Presenter: Ryan Cobb, Consultant and Red Teamer at Spectre Ops
- Focus: Software engineering, building offensive toolsets (e.g. Covenant, Sharpsploit)
- Topic: Exploring new opportunities for Red Teamers presented by the .NET Core platform

**Understanding .NET**
- Software development platform developed by Microsoft
- Includes large built-in class library and powerful APIs
- Language-independent; often associated with C# but also includes F# and PowerShell
- **.NET Framework**: Original Windows-only implementation
- **.NET Core**: Newer, open-source, cross-platform implementation
- **.NET Standard**: Formal specifications of APIs that a .NET implementation must fulfill

**The Shift to .NET Core**
- .NET 5, the next version of .NET, will be based on .NET Core
- .NET Framework is on its way to deprecation
- .NET Core will likely be installed by default on future OS versions
- Using .NET Core for malware is a new concept with limited research and tools

**Benefits of .NET Core for Malware**
- Access to newest APIs, cross-platform support, easier porting from .NET Framework
- AMSI (Anti-Malware Scan Interface) and ETW (Event Tracing for Windows) bypasses similar to .NET Framework
- Execution techniques: .NET Core CLI, alternative runtimes (CoreRT, .NET Native), publish single file

**Practical Considerations**
- File size can be an issue, but can be reduced using IL Linker or CoreRT
- Dependency management: assembly.load context and assembly.resolve can handle delayed dependencies

**Existing Tools and Capabilities**
- Brutes: .NET Core implant built into Covenant with basic capabilities (whoami, ls, cd, etc.)
- CoreSploit: Port of SharpSploit for .NET Core with advanced capabilities (port scanning, lateral movement, etc.)

**Demo**
- Generating and executing Brute implant payload, using built-in capabilities
- Extending capabilities using CoreSploit for port scanning

**Defensive Measures**
- Utilize AMSI and ETW for visibility
- Collect and centralize ETW logs for analysis and hunting
- Research unique features of .NET Core (e.g. distinguishing published single-file PEs)
- Adapt to changing software landscape instead of preventing .NET Core usage