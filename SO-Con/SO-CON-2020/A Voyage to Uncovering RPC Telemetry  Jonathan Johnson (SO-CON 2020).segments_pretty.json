{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 14.88,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Hey, everybody."
    },
    {
      "Time_Start": 14.88,
      "Time_End": 16.580000000000002,
      "Text": " Thank you for joining today."
    },
    {
      "Time_Start": 16.580000000000002,
      "Time_End": 22.32,
      "Text": " My name is Jonathan Johnson, and we are going to be walking through a project that took"
    },
    {
      "Time_Start": 22.32,
      "Time_End": 27.400000000000002,
      "Text": " most of the year of 2020 for me that includes RPC."
    },
    {
      "Time_Start": 27.400000000000002,
      "Time_End": 30.6,
      "Text": " Before we get into that, I would like to introduce myself a little bit more."
    },
    {
      "Time_Start": 30.6,
      "Time_End": 35.400000000000006,
      "Text": " So I'm an associate consultant here at Specter Ops on the detection engineering team."
    },
    {
      "Time_Start": 35.400000000000006,
      "Time_End": 39.68000000000001,
      "Text": " I like to create and contribute to many open source projects."
    },
    {
      "Time_Start": 39.68000000000001,
      "Time_End": 44.52,
      "Text": " My GitHub can be found along with blog and Twitter there in those links."
    },
    {
      "Time_Start": 44.52,
      "Time_End": 48.480000000000004,
      "Text": " And one thing I want to point out is I'm never an expert but always a student, so I'm always"
    },
    {
      "Time_Start": 48.480000000000004,
      "Time_End": 51.64,
      "Text": " trying to learn from everyone around me."
    },
    {
      "Time_Start": 51.64,
      "Time_End": 56.28,
      "Text": " So before I get started in this talk, I would like to give some acknowledgments to some"
    },
    {
      "Time_Start": 56.28,
      "Time_End": 60.56,
      "Text": " people in the community and some amazing people that I work with as well."
    },
    {
      "Time_Start": 60.56,
      "Time_End": 65.52,
      "Text": " This research wouldn't have been possible if it wasn't for Jared Atkinson and Lee Christensen."
    },
    {
      "Time_Start": 65.52,
      "Time_End": 69.68,
      "Text": " They not only served as sanity checks for me during this research time, but also helped"
    },
    {
      "Time_Start": 69.68,
      "Time_End": 72.88,
      "Text": " answer tons of questions that I had."
    },
    {
      "Time_Start": 72.88,
      "Time_End": 76.12,
      "Text": " If you've never talked to any of those guys, they're some of the most intelligent people"
    },
    {
      "Time_Start": 76.12,
      "Time_End": 77.8,
      "Text": " I've ever talked to."
    },
    {
      "Time_Start": 77.8,
      "Time_End": 83.88,
      "Text": " Along with some research from the following people, Matt Graber, Matt Hand, James Forshaw,"
    },
    {
      "Time_Start": 83.88,
      "Time_End": 89.03999999999999,
      "Text": " also some of the most intelligent people I've ever talked to, read their work."
    },
    {
      "Time_Start": 89.03999999999999,
      "Time_End": 92.75999999999999,
      "Text": " If any of you watched this talk, I just want to say thank you for your previous work."
    },
    {
      "Time_Start": 92.75999999999999,
      "Time_End": 94.88,
      "Text": " This wouldn't have been possible without you guys."
    },
    {
      "Time_Start": 94.88,
      "Time_End": 97.47999999999999,
      "Text": " So the content's going to be as follows, right?"
    },
    {
      "Time_Start": 97.47999999999999,
      "Time_End": 102.8,
      "Text": " We're going to initially talk about the journey, how I got to looking into RPC."
    },
    {
      "Time_Start": 102.8,
      "Time_End": 111.36,
      "Text": " I feel like this process really holds a lot of importance, especially when it comes to"
    },
    {
      "Time_Start": 111.36,
      "Time_End": 117.48,
      "Text": " other technologies and when people want to start to research other technologies as well."
    },
    {
      "Time_Start": 117.48,
      "Time_End": 122.68,
      "Text": " We're going to talk about RPC, all the different components that lie inside of it, why they're"
    },
    {
      "Time_Start": 122.68,
      "Time_End": 129.28,
      "Text": " important, and the part that they play in our everyday experience inside of Windows"
    },
    {
      "Time_Start": 129.28,
      "Time_End": 131.64,
      "Text": " Components."
    },
    {
      "Time_Start": 131.64,
      "Time_End": 137.36,
      "Text": " As long as how can we leverage this telemetry that correlates with RPC, some of the research"
    },
    {
      "Time_Start": 137.36,
      "Time_End": 141.2,
      "Text": " that I found, some of the telemetry I found, and then how to take that research telemetry"
    },
    {
      "Time_Start": 141.20000000000002,
      "Time_End": 144.32000000000002,
      "Text": " and scale it."
    },
    {
      "Time_Start": 144.32000000000002,
      "Time_End": 145.96,
      "Text": " So how did this all begin?"
    },
    {
      "Time_Start": 145.96,
      "Time_End": 154.4,
      "Text": " Well, Jared Atkinson is the technical director lead here at Spectrops in the detection engineering"
    },
    {
      "Time_Start": 154.4,
      "Time_End": 161.8,
      "Text": " team, and he introduced a concept in 2020 called capability abstraction."
    },
    {
      "Time_Start": 161.8,
      "Time_End": 168.48000000000002,
      "Text": " This methodology is meant to extract different technology layers by which a specific task"
    },
    {
      "Time_Start": 168.48000000000002,
      "Time_End": 170.00000000000003,
      "Text": " can be performed."
    },
    {
      "Time_Start": 170.0,
      "Time_End": 174.8,
      "Text": " So it was meant to break down the different components by the way an attacker can perform"
    },
    {
      "Time_Start": 174.8,
      "Time_End": 182.8,
      "Text": " a specific malicious attack, and in doing so, it helps identify pivot points for defenders"
    },
    {
      "Time_Start": 182.8,
      "Time_End": 186.76,
      "Text": " when it comes to telemetry and the things that we want to see in our environment, and"
    },
    {
      "Time_Start": 186.76,
      "Time_End": 191.0,
      "Text": " maybe if we identify something that we currently don't have telemetry for, we can either create"
    },
    {
      "Time_Start": 191.0,
      "Time_End": 196.8,
      "Text": " the tooling to see that telemetry, or if tooling comes out in the future, we have notes and"
    },
    {
      "Time_Start": 196.8,
      "Time_End": 202.20000000000002,
      "Text": " identification of the telemetry we can see from that new tooling."
    },
    {
      "Time_Start": 202.20000000000002,
      "Time_End": 208.20000000000002,
      "Text": " The abstraction typically comes in a map format, and whenever I whenever Jared first came out"
    },
    {
      "Time_Start": 208.20000000000002,
      "Time_End": 213.08,
      "Text": " with this concept, my first thought was I want to dive deep into this methodology."
    },
    {
      "Time_Start": 213.08,
      "Time_End": 216.8,
      "Text": " I want to figure out how to utilize it and really become an expert in this."
    },
    {
      "Time_Start": 216.8,
      "Time_End": 219.48000000000002,
      "Text": " So I utilized DC sync."
    },
    {
      "Time_Start": 219.48000000000002,
      "Time_End": 228.56,
      "Text": " DC sync is typically my go-to research whenever it comes to new technologies that it's used"
    },
    {
      "Time_Start": 228.56,
      "Time_End": 230.96,
      "Text": " as a use case quite often."
    },
    {
      "Time_Start": 230.96,
      "Time_End": 235.84,
      "Text": " So in doing so, I went through the abstraction process, and this isn't I'm not going to break"
    },
    {
      "Time_Start": 235.84,
      "Time_End": 238.52,
      "Text": " down the abstraction process."
    },
    {
      "Time_Start": 238.52,
      "Time_End": 242.04000000000002,
      "Text": " Jared has a great blog out on that, and I believe some of the other people from the"
    },
    {
      "Time_Start": 242.04000000000002,
      "Time_End": 246.44,
      "Text": " team have either abstraction maps out there or different processes that you can use."
    },
    {
      "Time_Start": 247.07999999999998,
      "Time_End": 250.96,
      "Text": " But what I want to show here is in this abstraction map, when I started creating it, I started"
    },
    {
      "Time_Start": 250.96,
      "Time_End": 257.44,
      "Text": " to identify there was a lot of different components to Windows I just didn't really understand."
    },
    {
      "Time_Start": 257.44,
      "Time_End": 262.44,
      "Text": " If I'm going to go into a TLDR of DC sync and a couple different slides in the future,"
    },
    {
      "Time_Start": 262.44,
      "Time_End": 268.84,
      "Text": " but if you're not aware of it, it's a way for an attacker to capture credentials from"
    },
    {
      "Time_Start": 268.84,
      "Time_End": 276.2,
      "Text": " a user utilizing the DRS replication service, which is an RPC protocol, and there's been"
    },
    {
      "Time_Start": 276.2,
      "Time_End": 280.2,
      "Text": " a lot of great blogs, a lot of great talks out on DC sync, but I feel like there was"
    },
    {
      "Time_Start": 280.2,
      "Time_End": 285.36,
      "Text": " a lot of things just glossed over and things that maybe I just didn't understand, maybe"
    },
    {
      "Time_Start": 285.36,
      "Time_End": 286.44,
      "Text": " it was just me."
    },
    {
      "Time_Start": 286.44,
      "Time_End": 288.2,
      "Text": " So I wanted to start to identify it."
    },
    {
      "Time_Start": 288.2,
      "Time_End": 291.76,
      "Text": " So when going through this abstraction map, there were specifically these things that"
    },
    {
      "Time_Start": 291.76,
      "Time_End": 297.24,
      "Text": " I didn't really understand was an RPC protocol that made sense, it sounded like a service"
    },
    {
      "Time_Start": 297.24,
      "Time_End": 302.52,
      "Text": " to me, RPC interface, I wasn't really sure what that meant."
    },
    {
      "Time_Start": 302.52,
      "Time_End": 305.71999999999997,
      "Text": " Typically when I think of technologies, this isn't always the case, but I like to think"
    },
    {
      "Time_Start": 305.72,
      "Time_End": 313.32000000000005,
      "Text": " one-to-one, so how did an RPC interface, DRS UAPI and that GUID right there, if that's"
    },
    {
      "Time_Start": 313.32000000000005,
      "Time_End": 317.88000000000005,
      "Text": " a one-to-one, then how did this DLL come into play, I wasn't really sure about that."
    },
    {
      "Time_Start": 317.88000000000005,
      "Time_End": 320.08000000000004,
      "Text": " Also what were methods?"
    },
    {
      "Time_Start": 320.08000000000004,
      "Time_End": 326.40000000000003,
      "Text": " This looks like a function to me, but I wasn't quite sure how in depth or what it meant."
    },
    {
      "Time_Start": 326.40000000000003,
      "Time_End": 331.40000000000003,
      "Text": " And then when it came to this abstraction, what did replication of the NC schema mean"
    },
    {
      "Time_Start": 331.40000000000003,
      "Time_End": 334.44000000000005,
      "Text": " when I was researching it and running tests?"
    },
    {
      "Time_Start": 334.44,
      "Time_End": 343.84,
      "Text": " Did I even need that section, or was that kind of inherently given in something before?"
    },
    {
      "Time_Start": 343.84,
      "Time_End": 346.76,
      "Text": " So I had to start identifying things I didn't know."
    },
    {
      "Time_Start": 346.76,
      "Time_End": 351.08,
      "Text": " In doing so, I started to ask myself different questions, so those were things like, when"
    },
    {
      "Time_Start": 351.08,
      "Time_End": 355.08,
      "Text": " the network connection was made, what processes made those connections, right, between two"
    },
    {
      "Time_Start": 355.08,
      "Time_End": 357.24,
      "Text": " remote hosts?"
    },
    {
      "Time_Start": 357.24,
      "Time_End": 360.8,
      "Text": " How were the credentials being brought back to the client?"
    },
    {
      "Time_Start": 360.8,
      "Time_End": 367.0,
      "Text": " Outside of network traffic, is there any visibility into RPC, and what did RPC do exactly?"
    },
    {
      "Time_Start": 367.0,
      "Time_End": 372.64,
      "Text": " So how can I really look for data or telemetry when I didn't understand the technology itself?"
    },
    {
      "Time_Start": 372.64,
      "Time_End": 376.84000000000003,
      "Text": " And that brings us to what RPC is."
    },
    {
      "Time_Start": 376.84000000000003,
      "Time_End": 381.52,
      "Text": " So that was kind of my first step, was I wanted to, before I can really start to look into"
    },
    {
      "Time_Start": 381.52,
      "Time_End": 387.72,
      "Text": " telemetry, looking into data, I need to understand what RPC did, and what it was, and how I interacted"
    },
    {
      "Time_Start": 387.76000000000005,
      "Time_End": 392.68,
      "Text": " with it, how Windows components interacted with it, and how common it was inside of the,"
    },
    {
      "Time_Start": 392.68,
      "Time_End": 395.22,
      "Text": " or on the system, really."
    },
    {
      "Time_Start": 395.22,
      "Time_End": 400.04,
      "Text": " So to do that, I just started to do a lot of research and break down the different components."
    },
    {
      "Time_Start": 400.04,
      "Time_End": 405.06,
      "Text": " So a little bit about RPC, if you're not familiar, it's a technology used for distributed client"
    },
    {
      "Time_Start": 405.06,
      "Time_End": 410.44000000000005,
      "Text": " and server communications between programs, and it allows applications to send signals"
    },
    {
      "Time_Start": 410.44000000000005,
      "Time_End": 413.88000000000005,
      "Text": " to each other to perform an operation."
    },
    {
      "Time_Start": 414.12,
      "Time_End": 422.2,
      "Text": " RPC can be seen in everyday Windows environments for everyday procedures, ranging from authentication,"
    },
    {
      "Time_Start": 422.2,
      "Time_End": 430.28,
      "Text": " directory replication, service creation, scheduled tasks, WMI, et cetera."
    },
    {
      "Time_Start": 430.28,
      "Time_End": 435.04,
      "Text": " So just keep in mind that whenever I walk through these RPC components, there are going"
    },
    {
      "Time_Start": 435.04,
      "Time_End": 442.08,
      "Text": " to be, RPC can be used many different ways, but I'm going to be focusing on specifically"
    },
    {
      "Time_Start": 442.35999999999996,
      "Time_End": 448.15999999999997,
      "Text": " the Microsoft implementation, and its supporting development tools, not any low-level protocol"
    },
    {
      "Time_Start": 448.15999999999997,
      "Time_End": 452.64,
      "Text": " implementation details, so things that you might see in like MPacket, NtObjectManager,"
    },
    {
      "Time_Start": 452.64,
      "Time_End": 457.4,
      "Text": " and I'll go into those two a little bit in the future, but I'm not going to be focusing"
    },
    {
      "Time_Start": 457.4,
      "Time_End": 458.4,
      "Text": " on those."
    },
    {
      "Time_Start": 458.4,
      "Time_End": 460.71999999999997,
      "Text": " Just keep that in mind."
    },
    {
      "Time_Start": 460.71999999999997,
      "Time_End": 463.52,
      "Text": " So here we're going to start breaking down the different components."
    },
    {
      "Time_Start": 463.52,
      "Time_End": 468.76,
      "Text": " So an RPC protocol is going to basically be a service."
    },
    {
      "Time_Start": 468.76,
      "Time_End": 474.52,
      "Text": " So Microsoft supports many service-based protocols by default on Windows."
    },
    {
      "Time_Start": 474.52,
      "Time_End": 477.2,
      "Text": " These services can be thought of as protocols."
    },
    {
      "Time_Start": 477.2,
      "Time_End": 483.59999999999997,
      "Text": " So think of like directory replication, service control manager, the printer system, things"
    },
    {
      "Time_Start": 483.59999999999997,
      "Time_End": 484.59999999999997,
      "Text": " like that."
    },
    {
      "Time_Start": 484.59999999999997,
      "Time_End": 489.36,
      "Text": " RPC is going to happen between client and servers."
    },
    {
      "Time_Start": 489.36,
      "Time_End": 494.88,
      "Text": " So typically all the code needed to interact with the Microsoft-supported RPC protocol"
    },
    {
      "Time_Start": 494.88,
      "Time_End": 500.2,
      "Text": " is already pre-compiled and stored within the server, or RPC server, and keep in mind"
    },
    {
      "Time_Start": 500.2,
      "Time_End": 504.56,
      "Text": " this is done so that developers did not have to write the code needed to interact with"
    },
    {
      "Time_Start": 504.56,
      "Time_End": 512.68,
      "Text": " the Microsoft RPC interfaces without needing to implement the calls at a protocol level."
    },
    {
      "Time_Start": 512.68,
      "Time_End": 518.0,
      "Text": " These protocols can be stored in XE, SIS, and DLL binaries, and just one thing I want"
    },
    {
      "Time_Start": 518.0,
      "Time_End": 523.76,
      "Text": " to know is these binaries themselves are not actually the server or the quote-unquote"
    },
    {
      "Time_Start": 523.76,
      "Time_End": 525.12,
      "Text": " client."
    },
    {
      "Time_Start": 525.12,
      "Time_End": 530.88,
      "Text": " These applications just hold the code or the RPC server and client code that gets exposed"
    },
    {
      "Time_Start": 530.88,
      "Time_End": 536.0,
      "Text": " to the RPC runtime."
    },
    {
      "Time_Start": 536.0,
      "Time_End": 537.0,
      "Text": " What is the RPC interface?"
    },
    {
      "Time_Start": 537.0,
      "Time_End": 544.28,
      "Text": " Well, that is basically think of this as a bridge between a client and a server."
    },
    {
      "Time_Start": 544.28,
      "Time_End": 551.28,
      "Text": " So when using Microsoft development tools, an RPC interface is defined by something known"
    },
    {
      "Time_Start": 551.28,
      "Time_End": 554.52,
      "Text": " as a Microsoft Interface Definition Language, or MIDL."
    },
    {
      "Time_Start": 554.52,
      "Time_End": 558.1999999999999,
      "Text": " Typically this is stored as an IDL file."
    },
    {
      "Time_Start": 558.1999999999999,
      "Time_End": 565.3199999999999,
      "Text": " These files include protocols, the interfaces associated with, the methods, and the parameters"
    },
    {
      "Time_Start": 565.3199999999999,
      "Time_End": 568.64,
      "Text": " that interact with that interface."
    },
    {
      "Time_Start": 568.64,
      "Time_End": 576.96,
      "Text": " Each interface is tied to a universally unique identifier, and that is 128 bits or 16 bytes."
    },
    {
      "Time_Start": 576.96,
      "Time_End": 580.68,
      "Text": " This is an example of what this will look like in the IDL file."
    },
    {
      "Time_Start": 580.68,
      "Time_End": 584.92,
      "Text": " So here we can see the UUID."
    },
    {
      "Time_Start": 584.92,
      "Time_End": 586.92,
      "Text": " We can see the interface name."
    },
    {
      "Time_Start": 586.92,
      "Time_End": 591.56,
      "Text": " So in this specific example, it is test, and you can see the methods that are supported"
    },
    {
      "Time_Start": 591.5600000000001,
      "Time_End": 599.0400000000001,
      "Text": " by this interface, and that is going to be start notepad and start CMD, and these are"
    },
    {
      "Time_Start": 599.0400000000001,
      "Time_End": 605.8800000000001,
      "Text": " going to be internal functions that were created for a specific use case."
    },
    {
      "Time_Start": 605.8800000000001,
      "Time_End": 613.6800000000001,
      "Text": " An RPC client call can be interacted, an RPC interface can be interacted in many different"
    },
    {
      "Time_Start": 613.6800000000001,
      "Time_End": 622.2,
      "Text": " ways, one of which is a Win32 API can be called that will implement an RPC interface."
    },
    {
      "Time_Start": 622.2,
      "Time_End": 627.84,
      "Text": " Typically this can be seen in most native Windows binaries, and this is going to save"
    },
    {
      "Time_Start": 627.84,
      "Time_End": 633.1200000000001,
      "Text": " devs from having to implement the IDL or RPC client themselves since it was done by someone"
    },
    {
      "Time_Start": 633.1200000000001,
      "Time_End": 635.9200000000001,
      "Text": " previously before."
    },
    {
      "Time_Start": 635.9200000000001,
      "Time_End": 643.48,
      "Text": " An RPC client contains the necessary IDL code baked in so that it can talk to the RPC server."
    },
    {
      "Time_Start": 643.48,
      "Time_End": 648.72,
      "Text": " You can see this very commonly within Mimikatz code, and then as well as an RPC client will"
    },
    {
      "Time_Start": 648.72,
      "Time_End": 656.36,
      "Text": " talk to the RPC server directly by implementing the RPC over TCP IP or RPC over name pipe"
    },
    {
      "Time_Start": 656.36,
      "Time_End": 662.48,
      "Text": " protocols and will not interface with the client's OS RPC runtime."
    },
    {
      "Time_Start": 662.48,
      "Time_End": 667.6,
      "Text": " This can be typically seen within mPacket where all the client side components need"
    },
    {
      "Time_Start": 667.6,
      "Time_End": 671.96,
      "Text": " to successfully communicate to the RPC server or handcrafted."
    },
    {
      "Time_Start": 671.96,
      "Time_End": 676.74,
      "Text": " This will include handcrafting the client stub for serialization, we'll get into serialization"
    },
    {
      "Time_Start": 676.74,
      "Time_End": 683.88,
      "Text": " here in a little bit, code needed to fit the NDR, which stands for network data representation"
    },
    {
      "Time_Start": 683.88,
      "Time_End": 688.6800000000001,
      "Text": " format, RPC method code, RPC handle binding, and et cetera."
    },
    {
      "Time_Start": 688.6800000000001,
      "Time_End": 692.9200000000001,
      "Text": " All that is already caked into that client side."
    },
    {
      "Time_Start": 692.9200000000001,
      "Time_End": 701.46,
      "Text": " RPC methods, methods are just functions that the RPC server exposes to perform a specific"
    },
    {
      "Time_Start": 701.46,
      "Time_End": 704.7,
      "Text": " behavior."
    },
    {
      "Time_Start": 704.7,
      "Time_End": 710.02,
      "Text": " Each RPC method is identified by an operation number or known as an opnum."
    },
    {
      "Time_Start": 710.02,
      "Time_End": 714.1800000000001,
      "Text": " You can see this commonly inside of Microsoft documentation for Microsoft supported RPC"
    },
    {
      "Time_Start": 714.1800000000001,
      "Time_End": 715.1800000000001,
      "Text": " protocols."
    },
    {
      "Time_Start": 715.1800000000001,
      "Time_End": 719.1,
      "Text": " The interface will have opnums specifically for them, and I'll show a couple of those"
    },
    {
      "Time_Start": 719.1,
      "Time_End": 721.46,
      "Text": " here in a moment."
    },
    {
      "Time_Start": 721.46,
      "Time_End": 725.6600000000001,
      "Text": " When these methods are called, they accept parameters and arguments, then they perform"
    },
    {
      "Time_Start": 725.6600000000001,
      "Time_End": 730.82,
      "Text": " a task and then return data results back to the client."
    },
    {
      "Time_Start": 730.86,
      "Time_End": 735.62,
      "Text": " Opnums are given to a method based on where they are defined inside of the server code."
    },
    {
      "Time_Start": 735.62,
      "Time_End": 742.86,
      "Text": " For example, I had a use case where I just created my own client and server RPC and interface"
    },
    {
      "Time_Start": 742.86,
      "Time_End": 748.94,
      "Text": " code because I wanted to learn more about it and just see what all entailed when I'm"
    },
    {
      "Time_Start": 748.94,
      "Time_End": 753.46,
      "Text": " utilizing the MIDL."
    },
    {
      "Time_Start": 753.46,
      "Time_End": 756.86,
      "Text": " Here's an example of two different methods here."
    },
    {
      "Time_Start": 756.86,
      "Time_End": 762.66,
      "Text": " Keep in mind, I'm not actually passing any parameters in through to these, but here's"
    },
    {
      "Time_Start": 762.66,
      "Time_End": 776.38,
      "Text": " an example where start notepad would be opnum zero and start CMD would be opnum number one."
    },
    {
      "Time_Start": 776.38,
      "Time_End": 781.58,
      "Text": " Client and server stubs, these are used to serialize and deserialize the parameters being"
    },
    {
      "Time_Start": 781.58,
      "Time_End": 783.7,
      "Text": " passed to the method."
    },
    {
      "Time_Start": 783.7,
      "Time_End": 790.82,
      "Text": " The interface with the Windows RPC runtime to send and receive data over a transport."
    },
    {
      "Time_Start": 790.82,
      "Time_End": 795.4200000000001,
      "Text": " When the client wants to use a method, it will pass the parameters needed for that method"
    },
    {
      "Time_Start": 795.4200000000001,
      "Time_End": 797.98,
      "Text": " to perform the specific task."
    },
    {
      "Time_Start": 797.98,
      "Time_End": 803.34,
      "Text": " The parameters need to be transported to the server application before the transport of"
    },
    {
      "Time_Start": 803.34,
      "Time_End": 805.62,
      "Text": " these parameters can actually happen."
    },
    {
      "Time_Start": 805.62,
      "Time_End": 808.4200000000001,
      "Text": " The client must serialize the parameters."
    },
    {
      "Time_Start": 808.4200000000001,
      "Time_End": 813.7800000000001,
      "Text": " The server will deserialize or unpack the parameters before feeding it to the exposed"
    },
    {
      "Time_Start": 813.7800000000001,
      "Time_End": 818.98,
      "Text": " method function that is being invoked."
    },
    {
      "Time_Start": 818.98,
      "Time_End": 825.0600000000001,
      "Text": " Here's an example of my code for the stub."
    },
    {
      "Time_Start": 825.0600000000001,
      "Time_End": 828.2600000000001,
      "Text": " This image is going to show an example of what the client stub may look like."
    },
    {
      "Time_Start": 828.2600000000001,
      "Time_End": 833.7800000000001,
      "Text": " However, note, again, there's no parameters being passed to these methods, so it might"
    },
    {
      "Time_Start": 833.78,
      "Time_End": 840.1,
      "Text": " look different for any code that does do that."
    },
    {
      "Time_Start": 840.1,
      "Time_End": 849.1,
      "Text": " So the NDR engine is responsible for marshaling of DCOM and RPC components."
    },
    {
      "Time_Start": 849.1,
      "Time_End": 854.14,
      "Text": " Once the client stub serializes the method's parameters, the data must get to the server"
    },
    {
      "Time_Start": 854.14,
      "Time_End": 855.78,
      "Text": " stub somehow."
    },
    {
      "Time_Start": 855.78,
      "Time_End": 861.3399999999999,
      "Text": " This transportation is actually done through the runtime, which is driven by the NDR engine."
    },
    {
      "Time_Start": 861.34,
      "Time_End": 867.94,
      "Text": " The RPC runtime just holds the operation system's core RPC components, so endpoint mapper, and"
    },
    {
      "Time_Start": 867.94,
      "Time_End": 872.82,
      "Text": " I'll be getting into that here in a moment, and is responsible for the transportation"
    },
    {
      "Time_Start": 872.82,
      "Time_End": 877.38,
      "Text": " of the serialized parameters from the client stub to the server stub."
    },
    {
      "Time_Start": 877.38,
      "Time_End": 882.74,
      "Text": " All this code can actually be found inside the rpcrt4.dll file."
    },
    {
      "Time_Start": 882.74,
      "Time_End": 888.58,
      "Text": " If you've never dug into that before, it's actually kind of cool to dig into RPC code"
    },
    {
      "Time_Start": 888.58,
      "Time_End": 893.6600000000001,
      "Text": " that is provided by Microsoft via Ida or Girda."
    },
    {
      "Time_Start": 893.6600000000001,
      "Time_End": 898.34,
      "Text": " That was actually a lot of fun for me to look at."
    },
    {
      "Time_Start": 898.34,
      "Time_End": 903.3000000000001,
      "Text": " Endpoint mapper, so this is a service that is located on every Windows host, and it's"
    },
    {
      "Time_Start": 903.3000000000001,
      "Time_End": 907.82,
      "Text": " typically seen as EP mapper, I've never seen it called anything else, and it maintains"
    },
    {
      "Time_Start": 907.82,
      "Time_End": 913.1400000000001,
      "Text": " the database of endpoints that clients use to map an interface to endpoints."
    },
    {
      "Time_Start": 913.14,
      "Time_End": 920.06,
      "Text": " At runtime, this service is started and acts as a director to map client and server communication,"
    },
    {
      "Time_Start": 920.06,
      "Time_End": 925.18,
      "Text": " so whenever, I'll show this here in a moment, but whenever a client is passed through the"
    },
    {
      "Time_Start": 925.18,
      "Time_End": 932.42,
      "Text": " NDR engine, and the runtime is transporting the serialized data from the client, it'll"
    },
    {
      "Time_Start": 932.42,
      "Time_End": 940.78,
      "Text": " want to map to whatever the server is, and that mapping is done by the endpoint mapper."
    },
    {
      "Time_Start": 940.78,
      "Time_End": 945.9,
      "Text": " The name service database, or the locator, allows clients to use logical names instead"
    },
    {
      "Time_Start": 945.9,
      "Time_End": 948.9,
      "Text": " of specific network addresses and protocol sequences."
    },
    {
      "Time_Start": 948.9,
      "Time_End": 951.54,
      "Text": " I personally have never seen this."
    },
    {
      "Time_Start": 951.54,
      "Time_End": 956.1,
      "Text": " This was taken directly from Microsoft documentation, basically, and Microsoft actually mentioned"
    },
    {
      "Time_Start": 956.1,
      "Time_End": 960.74,
      "Text": " in their documentation that they have a specific article that says that it isn't supported"
    },
    {
      "Time_Start": 960.74,
      "Time_End": 965.8199999999999,
      "Text": " past Windows Vista, so you might not ever see it, unless you have a super outdated version"
    },
    {
      "Time_Start": 965.8199999999999,
      "Time_End": 968.8199999999999,
      "Text": " of Windows."
    },
    {
      "Time_Start": 968.86,
      "Time_End": 969.86,
      "Text": " So what is an endpoint?"
    },
    {
      "Time_Start": 969.86,
      "Time_End": 973.0200000000001,
      "Text": " I've been saying endpoint mapper quite a bit."
    },
    {
      "Time_Start": 973.0200000000001,
      "Time_End": 978.38,
      "Text": " This is going to be the TCP IP port name pipe that the client will use to communicate with"
    },
    {
      "Time_Start": 978.38,
      "Time_End": 983.0200000000001,
      "Text": " the server, and the server will listen on this endpoint and wait for the client to initialize"
    },
    {
      "Time_Start": 983.0200000000001,
      "Time_End": 985.2600000000001,
      "Text": " the communication."
    },
    {
      "Time_Start": 985.2600000000001,
      "Time_End": 992.4200000000001,
      "Text": " This happens, typically, the server will be exposed, and then, being exposed, it'll wait"
    },
    {
      "Time_Start": 992.4200000000001,
      "Time_End": 994.1400000000001,
      "Text": " for that communication."
    },
    {
      "Time_Start": 994.1400000000001,
      "Time_End": 995.22,
      "Text": " The client will want to communicate."
    },
    {
      "Time_Start": 995.22,
      "Time_End": 999.46,
      "Text": " The endpoint mapper points it to the server, they then communicate."
    },
    {
      "Time_Start": 999.46,
      "Time_End": 1003.9,
      "Text": " But keep in mind, there's two types of endpoints, so there's static, and this is when an RPC"
    },
    {
      "Time_Start": 1003.9,
      "Time_End": 1007.86,
      "Text": " protocol will communicate over the same port or name pipe every time, consistently."
    },
    {
      "Time_Start": 1007.86,
      "Time_End": 1012.7,
      "Text": " There's also dynamic, and this is used when a range of ports are utilized, or if the protocol"
    },
    {
      "Time_Start": 1012.7,
      "Time_End": 1019.46,
      "Text": " allows connection over a TCP IP or a name pipe."
    },
    {
      "Time_Start": 1019.46,
      "Time_End": 1021.94,
      "Text": " An example of this code can be seen here."
    },
    {
      "Time_Start": 1021.94,
      "Time_End": 1027.26,
      "Text": " Whenever I implemented my own interface, I specified that I wanted the client and the"
    },
    {
      "Time_Start": 1027.26,
      "Time_End": 1032.3400000000001,
      "Text": " server to connect over a name pipe, specifically a name pipe called JSecurity101."
    },
    {
      "Time_Start": 1032.3400000000001,
      "Time_End": 1038.98,
      "Text": " Now, I know that there were a lot of components in this RPC process, so I went ahead and made"
    },
    {
      "Time_Start": 1038.98,
      "Time_End": 1044.02,
      "Text": " a mapping video to walk through it all, and I will walk everyone through the steps while"
    },
    {
      "Time_Start": 1044.02,
      "Time_End": 1046.54,
      "Text": " this video is playing."
    },
    {
      "Time_Start": 1046.54,
      "Time_End": 1050.38,
      "Text": " So what's first going to happen is the application that holds the RPC server is going to get"
    },
    {
      "Time_Start": 1050.38,
      "Time_End": 1056.6200000000001,
      "Text": " loaded, and then the RPC server code is going to expose to the RPC runtime."
    },
    {
      "Time_Start": 1056.6200000000001,
      "Time_End": 1062.42,
      "Text": " The client is going to implement the RPC interface, and then pass the parameters to the method"
    },
    {
      "Time_Start": 1062.42,
      "Time_End": 1064.5400000000002,
      "Text": " that it wants to invoke."
    },
    {
      "Time_Start": 1064.5400000000002,
      "Time_End": 1069.8200000000002,
      "Text": " The parameters are serialized via the client stub in NDR format, and then the runtime is"
    },
    {
      "Time_Start": 1069.8200000000002,
      "Time_End": 1075.3000000000002,
      "Text": " going to transport that serialized data, but the NDR engine is going to be what's driving"
    },
    {
      "Time_Start": 1075.3000000000002,
      "Time_End": 1077.46,
      "Text": " the runtime during this time."
    },
    {
      "Time_Start": 1077.46,
      "Time_End": 1082.66,
      "Text": " At this time as well, the endpoint mapper is going to map to the specified endpoint"
    },
    {
      "Time_Start": 1082.66,
      "Time_End": 1085.26,
      "Text": " that was specified in the interface."
    },
    {
      "Time_Start": 1085.26,
      "Time_End": 1089.06,
      "Text": " The remote machine is going to accept the incoming communication, and a bind is going"
    },
    {
      "Time_Start": 1089.06,
      "Time_End": 1091.06,
      "Text": " to be created."
    },
    {
      "Time_Start": 1091.06,
      "Time_End": 1098.66,
      "Text": " At that time, the server stub will deserialize the parameters, and then the parameters are"
    },
    {
      "Time_Start": 1098.66,
      "Time_End": 1106.9,
      "Text": " going to get passed to the method, and then that method is going to get invoked."
    },
    {
      "Time_Start": 1106.9,
      "Time_End": 1111.26,
      "Text": " Once that method is invoked, if there's any return data, that data will return at that"
    },
    {
      "Time_Start": 1111.26,
      "Time_End": 1119.3000000000002,
      "Text": " time through the runtime, and then the binding is freed."
    },
    {
      "Time_Start": 1119.3000000000002,
      "Time_End": 1124.98,
      "Text": " So within this next section, I'm going to be talking about how I identified RPC telemetry,"
    },
    {
      "Time_Start": 1124.98,
      "Time_End": 1130.5,
      "Text": " and then how I wound up leveraging it from a data engineering perspective."
    },
    {
      "Time_Start": 1130.5,
      "Time_End": 1135.44,
      "Text": " So the first thing I wanted to do was identify the different ways an attacker could interact"
    },
    {
      "Time_Start": 1135.44,
      "Time_End": 1139.88,
      "Text": " with an interface, and we went ahead and figured this out whenever we looked at the"
    },
    {
      "Time_Start": 1139.88,
      "Time_End": 1146.88,
      "Text": " RPC interface definition, but to recap on that, an attacker can interact with the interface"
    },
    {
      "Time_Start": 1146.88,
      "Time_End": 1150.56,
      "Text": " either by a Win32 API."
    },
    {
      "Time_Start": 1150.56,
      "Time_End": 1159.0800000000002,
      "Text": " It can also have the necessary IDL code baked into the client, Mimikatz does this, as well"
    },
    {
      "Time_Start": 1159.1999999999998,
      "Time_End": 1167.1999999999998,
      "Text": " as it can directly communicate with the RPC server via the TCP IP or over a name pipe,"
    },
    {
      "Time_Start": 1167.1999999999998,
      "Time_End": 1175.36,
      "Text": " impact it does this, and that's whenever the client stub serialization is all handcrafted."
    },
    {
      "Time_Start": 1175.36,
      "Time_End": 1181.0,
      "Text": " When identifying this, I identified that although there was many ways to interact with the interface,"
    },
    {
      "Time_Start": 1181.0,
      "Time_End": 1186.6799999999998,
      "Text": " there was something that the attacker cannot control, and that is the server code itself."
    },
    {
      "Time_Start": 1186.68,
      "Time_End": 1193.24,
      "Text": " They cannot change the server code, nor could they change where the server code was stored."
    },
    {
      "Time_Start": 1193.24,
      "Time_End": 1198.6000000000001,
      "Text": " Now keep in mind, this is specific to Microsoft supported protocols, and what's nice about"
    },
    {
      "Time_Start": 1198.6000000000001,
      "Time_End": 1206.24,
      "Text": " this is if we can start to map these server codes to malicious techniques, then that helps"
    },
    {
      "Time_Start": 1206.24,
      "Time_End": 1211.04,
      "Text": " us as detection engineers identify places that we know attackers have to interact with"
    },
    {
      "Time_Start": 1211.04,
      "Time_End": 1215.44,
      "Text": " or applications that we know an attacker has to interact with, and that could become a"
    },
    {
      "Time_Start": 1215.44,
      "Time_End": 1217.2,
      "Text": " nice pivot point for us."
    },
    {
      "Time_Start": 1217.2,
      "Time_End": 1225.3200000000002,
      "Text": " Matt Nelson actually documents these RPC servers for us inside of a GitHub gist."
    },
    {
      "Time_Start": 1225.3200000000002,
      "Time_End": 1231.68,
      "Text": " And whenever we can identify things that an attacker cannot control, that becomes a pivot"
    },
    {
      "Time_Start": 1231.68,
      "Time_End": 1237.3200000000002,
      "Text": " point for us as detection engineers, which ultimately is ideal."
    },
    {
      "Time_Start": 1237.3200000000002,
      "Time_End": 1242.92,
      "Text": " Now I'm going to be utilizing DC sync as my use case, as I mentioned before, and a lot"
    },
    {
      "Time_Start": 1242.92,
      "Time_End": 1246.76,
      "Text": " of this information is very well known and out there in many blogs and has been known"
    },
    {
      "Time_Start": 1246.76,
      "Time_End": 1247.76,
      "Text": " for a long time."
    },
    {
      "Time_Start": 1247.76,
      "Time_End": 1249.5600000000002,
      "Text": " So this is nothing groundbreaking."
    },
    {
      "Time_Start": 1249.5600000000002,
      "Time_End": 1253.3600000000001,
      "Text": " I just wanted to go ahead and give a TLDR on this specific technique."
    },
    {
      "Time_Start": 1253.3600000000001,
      "Time_End": 1258.6000000000001,
      "Text": " So DC sync is used to capture credentials by impersonating a domain controller."
    },
    {
      "Time_Start": 1258.6000000000001,
      "Time_End": 1263.88,
      "Text": " This is done by the directory replication service RPC protocol that's supported by Microsoft,"
    },
    {
      "Time_Start": 1263.88,
      "Time_End": 1267.24,
      "Text": " and the interface to do this is the DRSU API."
    },
    {
      "Time_Start": 1267.24,
      "Time_End": 1272.68,
      "Text": " Typically the extended rights, actually always the extended rights needed to implement and"
    },
    {
      "Time_Start": 1272.68,
      "Time_End": 1277.88,
      "Text": " interact with this interface are the DS replication get changes all, and the DS replication get"
    },
    {
      "Time_Start": 1277.88,
      "Time_End": 1280.96,
      "Text": " changes, those GUIDs are attached below."
    },
    {
      "Time_Start": 1280.96,
      "Time_End": 1286.08,
      "Text": " And these extended rights are default in the domain admin, enterprise admin, DC computer"
    },
    {
      "Time_Start": 1286.08,
      "Time_End": 1288.44,
      "Text": " accounts, but it doesn't always have to be the case."
    },
    {
      "Time_Start": 1288.44,
      "Time_End": 1293.52,
      "Text": " A user can obtain those extended rights pretty easily."
    },
    {
      "Time_Start": 1293.52,
      "Time_End": 1300.76,
      "Text": " Whenever these extended rights are acquired, that gives them access to the domain DNS class,"
    },
    {
      "Time_Start": 1300.76,
      "Time_End": 1307.48,
      "Text": " and that allows them to perform replication to the NC replica within AD, active directory,"
    },
    {
      "Time_Start": 1307.48,
      "Time_End": 1312.72,
      "Text": " and this is achieved by utilizing the method DRS get NC changes."
    },
    {
      "Time_Start": 1312.72,
      "Time_End": 1314.84,
      "Text": " The process typically is as follows."
    },
    {
      "Time_Start": 1314.84,
      "Time_End": 1320.8,
      "Text": " An attacker can and will obtain user with specified extended rights, targets a domain"
    },
    {
      "Time_Start": 1320.8,
      "Time_End": 1327.8,
      "Text": " controller to replicate, request the replication via the method, DRS get NC changes, obtains AD secrets."
    },
    {
      "Time_Start": 1327.8,
      "Time_End": 1332.1599999999999,
      "Text": " Again, many people have known this for a long time, and here are a couple links to some"
    },
    {
      "Time_Start": 1332.1599999999999,
      "Time_End": 1339.68,
      "Text": " blogs that hold information about this technique pretty in depth."
    },
    {
      "Time_Start": 1339.68,
      "Time_End": 1345.6,
      "Text": " So the first thing that I wanted to do was take my research and start to apply it to"
    },
    {
      "Time_Start": 1345.6,
      "Time_End": 1346.68,
      "Text": " this specific technique."
    },
    {
      "Time_Start": 1346.68,
      "Time_End": 1351.68,
      "Text": " So the first thing I want to do is identify the UUID for the interface, and this was given"
    },
    {
      "Time_Start": 1351.68,
      "Time_End": 1355.96,
      "Text": " to us by Microsoft documentation, which was nice."
    },
    {
      "Time_Start": 1355.96,
      "Time_End": 1360.1200000000001,
      "Text": " Now keep in mind, through this process, not everything is given to us through Microsoft"
    },
    {
      "Time_Start": 1360.1200000000001,
      "Time_End": 1365.3200000000002,
      "Text": " documentation, so I had to use multiple other tools, and those are going to be NT object"
    },
    {
      "Time_Start": 1365.3200000000002,
      "Time_End": 1372.96,
      "Text": " manager, procmon, ETW, Wireshark, et cetera."
    },
    {
      "Time_Start": 1372.96,
      "Time_End": 1377.1200000000001,
      "Text": " The next thing I wanted to do was identify the server code, and how I did that was use"
    },
    {
      "Time_Start": 1377.1200000000001,
      "Time_End": 1384.24,
      "Text": " NT object manager by taking the interface ID and then looking for the file path that"
    },
    {
      "Time_Start": 1384.24,
      "Time_End": 1387.2,
      "Text": " contained the interface ID."
    },
    {
      "Time_Start": 1387.2,
      "Time_End": 1390.88,
      "Text": " Thank you to James Forshaw for having this available."
    },
    {
      "Time_Start": 1390.88,
      "Time_End": 1400.76,
      "Text": " And during this, I identified that this interface and the server code is stored inside of NTDSAI.ELL."
    },
    {
      "Time_Start": 1400.76,
      "Time_End": 1403.64,
      "Text": " The next thing I wanted to do was identify the endpoint."
    },
    {
      "Time_Start": 1403.64,
      "Time_End": 1408.32,
      "Text": " So how were they going to connect the client and server?"
    },
    {
      "Time_Start": 1408.32,
      "Time_End": 1413.28,
      "Text": " Well inside of Microsoft documentation, it showed that RPC over TCP, meaning that a port"
    },
    {
      "Time_Start": 1413.28,
      "Time_End": 1419.32,
      "Text": " was going to be used for the specific communication, and it also mentioned that a dynamic endpoints"
    },
    {
      "Time_Start": 1419.32,
      "Time_End": 1422.62,
      "Text": " were utilized as well, meaning the port is going to change over time."
    },
    {
      "Time_Start": 1422.62,
      "Time_End": 1428.68,
      "Text": " So for me as a detection engineer, I deemed that I cannot specify a specific port when"
    },
    {
      "Time_Start": 1428.68,
      "Time_End": 1432.88,
      "Text": " looking for a detection because that port can change."
    },
    {
      "Time_Start": 1432.88,
      "Time_End": 1435.0,
      "Text": " The next thing I wanted to do was method identification."
    },
    {
      "Time_Start": 1435.0,
      "Time_End": 1441.72,
      "Text": " So I already knew that the DRS get NC changes method was used, but I wanted to identify"
    },
    {
      "Time_Start": 1441.72,
      "Time_End": 1446.04,
      "Text": " any other methods that are possibly there, and then also what that looked like on a server"
    },
    {
      "Time_Start": 1446.04,
      "Time_End": 1447.04,
      "Text": " side."
    },
    {
      "Time_Start": 1447.04,
      "Time_End": 1449.16,
      "Text": " So I utilized ETW to do this."
    },
    {
      "Time_Start": 1449.16,
      "Time_End": 1453.3200000000002,
      "Text": " If you're not familiar with ETW, that stands for event tracing in Windows, and I actually"
    },
    {
      "Time_Start": 1453.3200000000002,
      "Time_End": 1455.28,
      "Text": " learned this from Matt Graber."
    },
    {
      "Time_Start": 1455.28,
      "Time_End": 1459.44,
      "Text": " So Matt Graber, if you watch this, thank you for showing me this."
    },
    {
      "Time_Start": 1459.44,
      "Time_End": 1466.12,
      "Text": " So in here I specified, I did an event trace, and then I performed the attack, and then"
    },
    {
      "Time_Start": 1466.12,
      "Time_End": 1471.32,
      "Text": " afterwards I was able to see the following information from the capture."
    },
    {
      "Time_Start": 1471.32,
      "Time_End": 1477.96,
      "Text": " In this capture, I saw the opnum, so the opnum is going to directly correlate with the method,"
    },
    {
      "Time_Start": 1477.96,
      "Time_End": 1483.96,
      "Text": " which if you go to Microsoft documentation, it will show that the DRS get NC changes matches"
    },
    {
      "Time_Start": 1483.96,
      "Time_End": 1484.96,
      "Text": " that opnum."
    },
    {
      "Time_Start": 1484.96,
      "Time_End": 1492.32,
      "Text": " So that would be cool to see, and I was curious if that could be leveraged in the future."
    },
    {
      "Time_Start": 1492.32,
      "Time_End": 1494.4,
      "Text": " The next thing I did was did a Wireshark capture."
    },
    {
      "Time_Start": 1494.4,
      "Time_End": 1498.48,
      "Text": " This was nice because I already identified things I could see on the host, but I was"
    },
    {
      "Time_Start": 1498.48,
      "Time_End": 1504.1200000000001,
      "Text": " curious what Wireshark over the network looked like."
    },
    {
      "Time_Start": 1504.1200000000001,
      "Time_End": 1509.72,
      "Text": " And as I did this, I identified that I could see the TCP endpoint, I could see the interface,"
    },
    {
      "Time_Start": 1509.72,
      "Time_End": 1512.48,
      "Text": " and I could see the opnum or the method."
    },
    {
      "Time_Start": 1512.48,
      "Time_End": 1516.6,
      "Text": " This was nice, but I was also curious if there was anything I was missing from the"
    },
    {
      "Time_Start": 1516.6,
      "Time_End": 1518.56,
      "Text": " host side."
    },
    {
      "Time_Start": 1518.56,
      "Time_End": 1523.48,
      "Text": " Now I actually utilized ProcMon for this, and this was actually really fun to do."
    },
    {
      "Time_Start": 1523.48,
      "Time_End": 1529.64,
      "Text": " So from the server side, you can see that Mimikatz is doing a TCP connection, and then"
    },
    {
      "Time_Start": 1529.64,
      "Time_End": 1532.44,
      "Text": " on the client that LSAS is accepting that."
    },
    {
      "Time_Start": 1532.44,
      "Time_End": 1539.28,
      "Text": " Now we can see that the port here matches the test along the way from Wireshark and"
    },
    {
      "Time_Start": 1539.28,
      "Time_End": 1543.24,
      "Text": " from the ETW capture, but there's some things I was kind of curious about."
    },
    {
      "Time_Start": 1543.24,
      "Time_End": 1550.84,
      "Text": " We can see this replication NTSDIT, which makes sense because it has to read from NTSDIT,"
    },
    {
      "Time_Start": 1550.84,
      "Time_End": 1554.52,
      "Text": " which if you're not familiar, that is the database for Active Directory, so it's pulling"
    },
    {
      "Time_Start": 1554.52,
      "Time_End": 1556.48,
      "Text": " the credentials there."
    },
    {
      "Time_Start": 1556.48,
      "Time_End": 1562.32,
      "Text": " And then what I was curious about was why LSAS was there, because I've already identified"
    },
    {
      "Time_Start": 1562.32,
      "Time_End": 1567.3799999999999,
      "Text": " that NTDSAI.dll was actually the server."
    },
    {
      "Time_Start": 1567.38,
      "Time_End": 1578.2600000000002,
      "Text": " So after doing some digging, I saw that with Event ID 7 inside of Sysmon, that NTDSAI.dll"
    },
    {
      "Time_Start": 1578.2600000000002,
      "Time_End": 1586.22,
      "Text": " was loaded into LSAS, and this was actually a trick that Matt Hand showed me."
    },
    {
      "Time_Start": 1586.22,
      "Time_End": 1591.1000000000001,
      "Text": " So I then went to see when the boot up time was and correlated that with the time that"
    },
    {
      "Time_Start": 1591.1000000000001,
      "Time_End": 1596.98,
      "Text": " the image load was, and sure enough, this happened at boot where LSAS loaded NTDSAI.dll,"
    },
    {
      "Time_Start": 1597.98,
      "Time_End": 1599.14,
      "Text": " on domain controllers."
    },
    {
      "Time_Start": 1599.14,
      "Time_End": 1601.06,
      "Text": " So that was really cool to see."
    },
    {
      "Time_Start": 1601.06,
      "Time_End": 1607.1,
      "Text": " So at that point, LSAS accepting that connection made complete sense."
    },
    {
      "Time_Start": 1607.1,
      "Time_End": 1612.0,
      "Text": " Now I want to take this research telemetry and make it scalable."
    },
    {
      "Time_Start": 1612.0,
      "Time_End": 1617.1,
      "Text": " So converting my research data into telemetry can be relatively easy, depending on the data"
    },
    {
      "Time_Start": 1617.1000000000001,
      "Time_End": 1620.18,
      "Text": " sensors within the environment."
    },
    {
      "Time_Start": 1620.18,
      "Time_End": 1629.38,
      "Text": " And again, taking the Wireshark data capture to Zeek was relatively easy."
    },
    {
      "Time_Start": 1629.38,
      "Time_End": 1632.8400000000001,
      "Text": " So on the left here, you can see this is actually Zeek data."
    },
    {
      "Time_Start": 1632.8400000000001,
      "Time_End": 1637.2600000000002,
      "Text": " But what I was curious about was host data from ProcMon ETW."
    },
    {
      "Time_Start": 1637.2600000000002,
      "Time_End": 1639.1000000000001,
      "Text": " Was there anything there?"
    },
    {
      "Time_Start": 1639.1000000000001,
      "Time_End": 1645.64,
      "Text": " And at first, whenever I Googled RPC event data inside of Microsoft, there was an event"
    },
    {
      "Time_Start": 1645.64,
      "Time_End": 1651.5200000000002,
      "Text": " called 5712 RPC was attempted, but it doesn't actively collect."
    },
    {
      "Time_Start": 1651.5200000000002,
      "Time_End": 1658.3600000000001,
      "Text": " And it says something along the lines where it doesn't appear any events actually appear,"
    },
    {
      "Time_Start": 1658.3600000000001,
      "Time_End": 1659.3600000000001,
      "Text": " which was curious."
    },
    {
      "Time_Start": 1659.3600000000001,
      "Time_End": 1661.68,
      "Text": " And upon testing, that was true."
    },
    {
      "Time_Start": 1661.68,
      "Time_End": 1668.5200000000002,
      "Text": " But one thing I started to see when, at least on the service side when performing this attack,"
    },
    {
      "Time_Start": 1668.52,
      "Time_End": 1677.32,
      "Text": " I saw that every time the 4662 happened, if you're not familiar with DC sync or 4662,"
    },
    {
      "Time_Start": 1677.32,
      "Time_End": 1683.84,
      "Text": " 4662 is utilized for basically every DC sync detection."
    },
    {
      "Time_Start": 1683.84,
      "Time_End": 1685.28,
      "Text": " You can see the extended writes in there."
    },
    {
      "Time_Start": 1685.28,
      "Time_End": 1687.76,
      "Text": " You can see the user, et cetera."
    },
    {
      "Time_Start": 1687.76,
      "Time_End": 1692.6399999999999,
      "Text": " So that's typically the main pivot point for DC sync."
    },
    {
      "Time_Start": 1692.64,
      "Time_End": 1701.96,
      "Text": " But one thing I was noticing was this 5156 happening quite often."
    },
    {
      "Time_Start": 1701.96,
      "Time_End": 1706.2,
      "Text": " And in doing so, here's an example of the 4662."
    },
    {
      "Time_Start": 1706.2,
      "Time_End": 1712.3200000000002,
      "Text": " And again, you can see the account name that requested the replication."
    },
    {
      "Time_Start": 1712.3200000000002,
      "Time_End": 1714.76,
      "Text": " You can see the object, the domain DNS class."
    },
    {
      "Time_Start": 1714.76,
      "Time_End": 1719.0,
      "Text": " And you can also see the extended writes in the access mass, which is control access."
    },
    {
      "Time_Start": 1719.0,
      "Time_End": 1724.48,
      "Text": " So all of this aligns perfectly with how an attacker would typically interact with"
    },
    {
      "Time_Start": 1724.48,
      "Time_End": 1729.74,
      "Text": " the DRS RPC protocol maliciously, because typically this should only happen from other"
    },
    {
      "Time_Start": 1729.74,
      "Time_End": 1733.08,
      "Text": " domain controllers."
    },
    {
      "Time_Start": 1733.08,
      "Time_End": 1735.28,
      "Text": " But what I was seeing was this 5156."
    },
    {
      "Time_Start": 1735.28,
      "Time_End": 1740.08,
      "Text": " Now, keep in mind, these port numbers might be a little bit different, because these screenshots"
    },
    {
      "Time_Start": 1740.08,
      "Time_End": 1743.56,
      "Text": " actually came from a different test."
    },
    {
      "Time_Start": 1743.56,
      "Time_End": 1751.3999999999999,
      "Text": " But I was seeing an inbound connection to LSAS over the port that was actually connecting"
    },
    {
      "Time_Start": 1751.3999999999999,
      "Time_End": 1754.76,
      "Text": " that correlated specifically with ProcMon."
    },
    {
      "Time_Start": 1754.76,
      "Time_End": 1756.0,
      "Text": " And that was particularly interesting."
    },
    {
      "Time_Start": 1756.0,
      "Time_End": 1761.56,
      "Text": " So I went to the client side, and I was like, oh, I wonder if I can see anything going outbound."
    },
    {
      "Time_Start": 1761.56,
      "Time_End": 1765.76,
      "Text": " And sure enough, I was able to see that many accounts had an outbound connection to the"
    },
    {
      "Time_Start": 1765.76,
      "Time_End": 1770.52,
      "Text": " same port, same ports, to the same IPs."
    },
    {
      "Time_Start": 1770.52,
      "Time_End": 1774.52,
      "Text": " And that was particularly interesting to me, because in my head, that click, that kind"
    },
    {
      "Time_Start": 1774.52,
      "Time_End": 1779.72,
      "Text": " of correlated with that ETW and ProcMon information that we had."
    },
    {
      "Time_Start": 1779.72,
      "Time_End": 1787.12,
      "Text": " The reality, though, is I didn't know anything about the Windows filtering platform."
    },
    {
      "Time_Start": 1787.12,
      "Time_End": 1788.72,
      "Text": " So I decided to kind of dive into that."
    },
    {
      "Time_Start": 1788.72,
      "Time_End": 1792.92,
      "Text": " Now, keep in mind, as I go through this, a lot of the same information can be with Sysmoni"
    },
    {
      "Time_Start": 1792.92,
      "Time_End": 1798.2,
      "Text": " VennID 3, or any other EDR product that allows network connection."
    },
    {
      "Time_Start": 1798.2,
      "Time_End": 1804.4,
      "Text": " The only difference is you don't get to see the direction outbound or inbound with Sysmoni,"
    },
    {
      "Time_Start": 1804.4,
      "Time_End": 1805.56,
      "Text": " unfortunately."
    },
    {
      "Time_Start": 1805.56,
      "Time_End": 1811.24,
      "Text": " So when looking at the Windows filtering platform, I saw here, I clicked on the link, I started"
    },
    {
      "Time_Start": 1811.24,
      "Time_End": 1817.32,
      "Text": " to do a little bit of research, and I found this architecture map, which was pretty cool."
    },
    {
      "Time_Start": 1817.32,
      "Time_End": 1820.0,
      "Text": " Thank you, Microsoft, for having this."
    },
    {
      "Time_Start": 1820.0,
      "Time_End": 1823.04,
      "Text": " And inside of it, there was RPC everywhere."
    },
    {
      "Time_Start": 1823.04,
      "Time_End": 1827.0800000000002,
      "Text": " So all of this was starting to make sense, because I saw the RPC server application,"
    },
    {
      "Time_Start": 1827.08,
      "Time_End": 1832.6399999999999,
      "Text": " which is where the server code would be stored, I saw the RPC runtime, I saw the RPC interface,"
    },
    {
      "Time_Start": 1832.6399999999999,
      "Time_End": 1836.6799999999998,
      "Text": " and I was like, oh, well, this directly correlates with RPC."
    },
    {
      "Time_Start": 1836.6799999999998,
      "Time_End": 1843.04,
      "Text": " So the next question I had was, does this data correlate with Zeek at all?"
    },
    {
      "Time_Start": 1843.04,
      "Time_End": 1846.8,
      "Text": " Because if it does correlate with Zeek, or if there's any of the same information, then"
    },
    {
      "Time_Start": 1846.8,
      "Time_End": 1851.6799999999998,
      "Text": " this would be a good event to use for a join during an analytic."
    },
    {
      "Time_Start": 1851.68,
      "Time_End": 1857.2,
      "Text": " So during this, I saw that, sure enough, there was plenty of network packet data I"
    },
    {
      "Time_Start": 1857.2,
      "Time_End": 1864.3600000000001,
      "Text": " could correlate with Zeek, I could see and correlate specifically how this 5156 interacted"
    },
    {
      "Time_Start": 1864.3600000000001,
      "Time_End": 1870.16,
      "Text": " or correlated with the RPC server, and I could start to specify the inbound and outbound,"
    },
    {
      "Time_Start": 1870.16,
      "Time_End": 1876.4,
      "Text": " which helped me separate server and client applications, because the outbound will come"
    },
    {
      "Time_Start": 1876.4,
      "Time_End": 1878.74,
      "Text": " from a client, the inbound will come from a server."
    },
    {
      "Time_Start": 1878.74,
      "Time_End": 1884.06,
      "Text": " So sure enough, I was able to utilize this inside of an analytic, where I'm using the"
    },
    {
      "Time_Start": 1884.06,
      "Time_End": 1888.98,
      "Text": " 4662, 4264, 5156, and Zeek as well."
    },
    {
      "Time_Start": 1888.98,
      "Time_End": 1895.26,
      "Text": " I did do the same analytic, which is 5156 and Zeek, got the same amount of events."
    },
    {
      "Time_Start": 1895.26,
      "Time_End": 1900.18,
      "Text": " So it was really nice to see this is all on the SpecterOps GitHub, and the whole notebook,"
    },
    {
      "Time_Start": 1900.18,
      "Time_End": 1905.6200000000001,
      "Text": " this is utilizing Jupyter Notebooks and Splunk, the whole notebook is actually up on the SpecterOps"
    },
    {
      "Time_Start": 1905.6200000000001,
      "Time_End": 1909.0600000000002,
      "Text": " GitHub under the IPC research project."
    },
    {
      "Time_Start": 1909.0600000000002,
      "Time_End": 1914.74,
      "Text": " So here we can see the endpoint, which is the DRSU API that came from Zeek, the operation,"
    },
    {
      "Time_Start": 1914.74,
      "Time_End": 1920.98,
      "Text": " DRS changes, I could see the port, the destination address, the application name, so the application"
    },
    {
      "Time_Start": 1920.98,
      "Time_End": 1927.2600000000002,
      "Text": " name would be the server application, which this was all really cool to see."
    },
    {
      "Time_Start": 1927.2600000000002,
      "Time_End": 1934.38,
      "Text": " So after this, I wanted to answer some of the unknowns that I went ahead and identified."
    },
    {
      "Time_Start": 1935.38,
      "Time_End": 1941.7800000000002,
      "Text": " During this, this was really fun for me, because it really showed that the research process"
    },
    {
      "Time_Start": 1941.7800000000002,
      "Time_End": 1946.46,
      "Text": " that I had answered the original questions that I might have had, and I didn't go too"
    },
    {
      "Time_Start": 1946.46,
      "Time_End": 1948.18,
      "Text": " off track during this."
    },
    {
      "Time_Start": 1948.18,
      "Time_End": 1956.14,
      "Text": " So I answered what RPC did exactly, also what network connections were made and how they"
    },
    {
      "Time_Start": 1956.14,
      "Time_End": 1962.3400000000001,
      "Text": " were made, how were the credentials being brought back to the client, specifically the"
    },
    {
      "Time_Start": 1962.3400000000001,
      "Time_End": 1967.2600000000002,
      "Text": " method and the interface, and then if there was any host-based data that we could utilize"
    },
    {
      "Time_Start": 1967.2600000000002,
      "Time_End": 1969.14,
      "Text": " for telemetry."
    },
    {
      "Time_Start": 1969.14,
      "Time_End": 1970.2600000000002,
      "Text": " And this was really cool to see."
    },
    {
      "Time_Start": 1970.2600000000002,
      "Time_End": 1974.8600000000001,
      "Text": " Now one thing I want to point out back at this slide here, you can see with the analytic"
    },
    {
      "Time_Start": 1974.8600000000001,
      "Time_End": 1983.8400000000001,
      "Text": " that the application name for the server was specified, and you can see that inside the"
    },
    {
      "Time_Start": 1983.8400000000001,
      "Time_End": 1986.1000000000001,
      "Text": " analytic for the server code."
    },
    {
      "Time_Start": 1986.1000000000001,
      "Time_End": 1993.9,
      "Text": " You can actually do somewhat of the same analytic where you specify the outbound information"
    },
    {
      "Time_Start": 1993.9,
      "Time_End": 1998.3400000000001,
      "Text": " to actually find the RPC client."
    },
    {
      "Time_Start": 1998.3400000000001,
      "Time_End": 2005.2600000000002,
      "Text": " And I believe I did this inside of the Specter Ops GitHub when I uploaded that notebook."
    },
    {
      "Time_Start": 2005.2600000000002,
      "Time_End": 2010.94,
      "Text": " You can actually see the RPC client application."
    },
    {
      "Time_Start": 2011.78,
      "Time_End": 2016.5800000000002,
      "Text": " Lastly, here is the final product of the abstraction for DC-Sync."
    },
    {
      "Time_Start": 2016.5800000000002,
      "Time_End": 2021.42,
      "Text": " And as you can see, it's a lot more robust and it's a lot more detailed, and there's"
    },
    {
      "Time_Start": 2021.42,
      "Time_End": 2023.98,
      "Text": " a lot more context surrounding the different components."
    },
    {
      "Time_Start": 2023.98,
      "Time_End": 2029.98,
      "Text": " And this is ultimately the goal of the abstraction is to give as much context, detail to the"
    },
    {
      "Time_Start": 2029.98,
      "Time_End": 2037.3400000000001,
      "Text": " specific components as possible as to how an attacker can implement the attack or leverage"
    },
    {
      "Time_Start": 2037.3400000000001,
      "Time_End": 2040.6200000000001,
      "Text": " the attack they are trying to do."
    },
    {
      "Time_Start": 2040.6200000000001,
      "Time_End": 2048.54,
      "Text": " Lastly, I would like to talk about the purpose of this talk, of this research, and why I"
    },
    {
      "Time_Start": 2048.54,
      "Time_End": 2050.82,
      "Text": " thought it was important to kind of share."
    },
    {
      "Time_Start": 2050.82,
      "Time_End": 2055.7400000000002,
      "Text": " The purpose was to show a methodology that can be used across many technologies to uncover"
    },
    {
      "Time_Start": 2055.7400000000002,
      "Time_End": 2061.06,
      "Text": " their meanings, to provide insight to detection engineers as to any data that can be leveraged"
    },
    {
      "Time_Start": 2061.06,
      "Time_End": 2063.1000000000004,
      "Text": " pertaining that technology."
    },
    {
      "Time_Start": 2063.1000000000004,
      "Time_End": 2065.1800000000003,
      "Text": " You know, this goes far beyond RPC."
    },
    {
      "Time_Start": 2065.18,
      "Time_End": 2071.7799999999997,
      "Text": " This goes to really any technology that is out there, because I think oftentimes it is"
    },
    {
      "Time_Start": 2071.7799999999997,
      "Time_End": 2077.3399999999997,
      "Text": " easy for us as detection engineers to stop after a certain threshold and not dive any"
    },
    {
      "Time_Start": 2077.3399999999997,
      "Time_End": 2082.3399999999997,
      "Text": " deeper into a specific technology, whether we think that is because the telemetry that"
    },
    {
      "Time_Start": 2082.3399999999997,
      "Time_End": 2087.8599999999997,
      "Text": " we find cannot be scaled or we're not sure of the technology that's actually there."
    },
    {
      "Time_Start": 2087.8599999999997,
      "Time_End": 2095.0,
      "Text": " That could actually be one of our biggest downfalls, because once we identify that telemetry,"
    },
    {
      "Time_Start": 2095.0,
      "Time_End": 2100.76,
      "Text": " we can start to piece together any events that we didn't know about before and implement"
    },
    {
      "Time_Start": 2100.76,
      "Time_End": 2104.96,
      "Text": " them and possibly use that data at scale."
    },
    {
      "Time_Start": 2104.96,
      "Time_End": 2112.04,
      "Text": " Now speaking of scaling data, scaling data does not equal collecting all the logs."
    },
    {
      "Time_Start": 2112.04,
      "Time_End": 2116.56,
      "Text": " So when I mean collecting 5156 at scale, yes."
    },
    {
      "Time_Start": 2116.56,
      "Time_End": 2119.88,
      "Text": " Can it be used for detections in large organizations?"
    },
    {
      "Time_Start": 2119.88,
      "Time_End": 2120.88,
      "Text": " Absolutely."
    },
    {
      "Time_Start": 2121.88,
      "Time_End": 2128.4,
      "Text": " Even if you're not using 5156, you could utilize another network event from an EDR that collects"
    },
    {
      "Time_Start": 2128.4,
      "Time_End": 2129.4,
      "Text": " the same information."
    },
    {
      "Time_Start": 2129.4,
      "Time_End": 2132.76,
      "Text": " But again, keep in mind it's going to be noisy."
    },
    {
      "Time_Start": 2132.76,
      "Time_End": 2134.82,
      "Text": " That is okay."
    },
    {
      "Time_Start": 2134.82,
      "Time_End": 2138.44,
      "Text": " You want to make sure that you're collecting with a purpose."
    },
    {
      "Time_Start": 2138.44,
      "Time_End": 2145.1600000000003,
      "Text": " There's no point in collecting every, let's say 5156 for every RPC server, because we"
    },
    {
      "Time_Start": 2145.1600000000003,
      "Time_End": 2147.6800000000003,
      "Text": " don't have a detection for every RPC server."
    },
    {
      "Time_Start": 2147.68,
      "Time_End": 2151.0,
      "Text": " There's no point in collecting that data if we're not actually utilizing that data"
    },
    {
      "Time_Start": 2151.0,
      "Time_End": 2155.64,
      "Text": " or leveraging it in some way, shape, or form."
    },
    {
      "Time_Start": 2155.64,
      "Time_End": 2157.7599999999998,
      "Text": " You don't have to collect it all."
    },
    {
      "Time_Start": 2157.7599999999998,
      "Time_End": 2163.04,
      "Text": " Identify what you don't so that you know what the risks are that are associated with it."
    },
    {
      "Time_Start": 2163.04,
      "Time_End": 2168.48,
      "Text": " But having something is better than nothing, especially when it's done correctly."
    },
    {
      "Time_Start": 2168.48,
      "Time_End": 2175.52,
      "Text": " So for example, we know that LSAS on domain controllers is the RPC server for the DRSU"
    },
    {
      "Time_Start": 2175.52,
      "Time_End": 2176.52,
      "Text": " API interface."
    },
    {
      "Time_Start": 2176.96,
      "Time_End": 2179.24,
      "Text": " Well, that would be good to collect."
    },
    {
      "Time_Start": 2179.24,
      "Time_End": 2185.84,
      "Text": " You don't have to collect all LSAS RPC servers on every host."
    },
    {
      "Time_Start": 2185.84,
      "Time_End": 2188.8,
      "Text": " We're just looking at the domain controller ones because we have it correlated with a"
    },
    {
      "Time_Start": 2188.8,
      "Time_End": 2190.92,
      "Text": " specific attack right now."
    },
    {
      "Time_Start": 2190.92,
      "Time_End": 2195.88,
      "Text": " And once we accomplish that, we can start to build up our detection surrounding this"
    },
    {
      "Time_Start": 2195.88,
      "Time_End": 2200.68,
      "Text": " technology or any other technology that we have trouble scaling data at."
    },
    {
      "Time_Start": 2200.68,
      "Time_End": 2206.2,
      "Text": " It's just taking things one step at a time and building it as time goes on."
    },
    {
      "Time_Start": 2206.2000000000003,
      "Time_End": 2207.9600000000005,
      "Text": " Here are the references I used."
    },
    {
      "Time_Start": 2207.9600000000005,
      "Time_End": 2211.4800000000005,
      "Text": " My RPC white paper research paper is at the very top."
    },
    {
      "Time_Start": 2211.4800000000005,
      "Time_End": 2215.6400000000003,
      "Text": " And there's different talks, different documentation that I used."
    },
    {
      "Time_Start": 2215.6400000000003,
      "Time_End": 2221.0400000000004,
      "Text": " Again, if you wanted a more detailed walkthrough of everything, I highly recommend going through"
    },
    {
      "Time_Start": 2221.0400000000004,
      "Time_End": 2223.5400000000004,
      "Text": " my research paper."
    },
    {
      "Time_Start": 2223.5400000000004,
      "Time_End": 2228.4800000000005,
      "Text": " And again, to everyone that's referenced in this section, thank you so much for your work"
    },
    {
      "Time_Start": 2228.4800000000005,
      "Time_End": 2230.2400000000002,
      "Text": " previously."
    },
    {
      "Time_Start": 2230.2400000000002,
      "Time_End": 2233.9600000000005,
      "Text": " Thank you to everyone who has joined this talk today."
    },
    {
      "Time_Start": 2233.96,
      "Time_End": 2238.96,
      "Text": " I'm going to reference the chat room to answer any questions anyone might have."
    },
    {
      "Time_Start": 2238.96,
      "Time_End": 2240.4,
      "Text": " I hope everyone has a great day."
    },
    {
      "Time_Start": 2240.4,
      "Time_End": 2251.2400000000002,
      "Text": " And again, thank you so much for coming."
    }
  ]
}