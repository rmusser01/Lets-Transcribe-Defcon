{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 29.0,
      "Text": "This text was transcribed using whisper model: large-v2\n\n All right, everybody, welcome to our workshop, understanding technique extraction for detection"
    },
    {
      "Time_Start": 29.0,
      "Time_End": 34.36,
      "Text": " engineers. My name is Jared Atkinson and with me I have Luke Payne and Jonathan Johnson. We'll go"
    },
    {
      "Time_Start": 34.36,
      "Time_End": 39.64,
      "Text": " ahead and skip introductions, but we're basically three detection engineers that work for Spectre"
    },
    {
      "Time_Start": 39.64,
      "Time_End": 48.92,
      "Text": " Ops. So for this training class, we're going to kind of walk through some parts of the class that"
    },
    {
      "Time_Start": 48.92,
      "Time_End": 53.879999999999995,
      "Text": " could be labs, but due to time we're going to kind of walk through them as a group. However,"
    },
    {
      "Time_Start": 53.879999999999995,
      "Time_End": 58.84,
      "Text": " if you want to kind of play around with them later on, you can visit this link. So it's part of my"
    },
    {
      "Time_Start": 58.84,
      "Time_End": 63.720000000000006,
      "Text": " GitHub pages and you can actually see the labs and they're kind of broken down step by step"
    },
    {
      "Time_Start": 63.720000000000006,
      "Time_End": 68.12,
      "Text": " in detail. So if you want to follow through on the labs later on, kind of rehash things,"
    },
    {
      "Time_Start": 68.76,
      "Time_End": 73.0,
      "Text": " this is a good place to visit. So I'll leave that up for a second while you write that down."
    },
    {
      "Time_Start": 73.0,
      "Time_End": 78.2,
      "Text": " Maybe one of the guys can also share that in the in the chat to make sure that everybody has access"
    },
    {
      "Time_Start": 78.2,
      "Time_End": 87.16,
      "Text": " to it. All right, so before we start off, one of our my favorite thing, I guess, to kind of start"
    },
    {
      "Time_Start": 87.16,
      "Time_End": 91.96,
      "Text": " off with is this idea of the funnel of fidelity. And so at Spectre Ops, we're consultants. And so"
    },
    {
      "Time_Start": 91.96,
      "Time_End": 97.16,
      "Text": " we end up seeing quite a few different organizations and how they conduct detection and"
    },
    {
      "Time_Start": 97.16,
      "Time_End": 102.92,
      "Text": " response. And so one of the things that we've noticed is that every organization kind of sets"
    },
    {
      "Time_Start": 102.92,
      "Time_End": 108.28,
      "Text": " up their teams slightly differently. So like what the threat hunters do at organization A may be"
    },
    {
      "Time_Start": 108.28,
      "Time_End": 114.67999999999999,
      "Text": " slightly different than what the threat hunters do at organization B. But in reality, the detection"
    },
    {
      "Time_Start": 114.68,
      "Time_End": 118.84,
      "Text": " and response program really has to accomplish kind of five objectives. And this is like an"
    },
    {
      "Time_Start": 118.84,
      "Time_End": 123.08000000000001,
      "Text": " abstraction that I've created to put on top of that. And so you have this idea of collection,"
    },
    {
      "Time_Start": 123.08000000000001,
      "Time_End": 127.4,
      "Text": " which is how do I gather telemetry or signal from my enterprise to know what's happening?"
    },
    {
      "Time_Start": 127.4,
      "Time_End": 132.52,
      "Text": " Right. And so that could be users logging on, that could be processes being created, that can be"
    },
    {
      "Time_Start": 132.52,
      "Time_End": 136.28,
      "Text": " alerts that are generated from a vendor appliance. It could be all kinds of things. But"
    },
    {
      "Time_Start": 136.84,
      "Time_End": 141.32,
      "Text": " generally, if you're not collecting telemetry, then you can't know what's happening in the"
    },
    {
      "Time_Start": 141.32,
      "Time_End": 146.84,
      "Text": " environment. Then we have this idea of detection. And so all of this is predicated on the idea that"
    },
    {
      "Time_Start": 147.4,
      "Time_End": 152.84,
      "Text": " we have limited resources. Right. So it'd be great if we had the ability to manually investigate"
    },
    {
      "Time_Start": 152.84,
      "Time_End": 157.88,
      "Text": " every single event that ever is generated. But we all know that that's not plausible. Right. And so"
    },
    {
      "Time_Start": 157.88,
      "Time_End": 162.44,
      "Text": " we need to be smarter about how we apply those resources. And so that's why we have this funnel."
    },
    {
      "Time_Start": 162.44,
      "Time_End": 169.16,
      "Text": " Right. So from left to right, from collection all the way through, it requires less manual resources"
    },
    {
      "Time_Start": 170.12,
      "Time_End": 175.0,
      "Text": " on the left and more manual resources as you go right. And so detection is basically this idea of"
    },
    {
      "Time_Start": 175.0,
      "Time_End": 180.2,
      "Text": " how do I identify events in the telemetry that I've collected that are most likely to represent"
    },
    {
      "Time_Start": 181.16,
      "Time_End": 186.35999999999999,
      "Text": " security relevant information. Right. So that would be we write a detection or a classification"
    },
    {
      "Time_Start": 186.35999999999999,
      "Time_End": 191.24,
      "Text": " rule that allows us to say this event represents something that might be bad and we want to look"
    },
    {
      "Time_Start": 191.24,
      "Time_End": 197.64,
      "Text": " into it. Then we have this idea of triage, which is the detections are inherently producing. We"
    },
    {
      "Time_Start": 197.64000000000001,
      "Time_End": 202.20000000000002,
      "Text": " probably want to cast a relatively wide net. If you watch my talk earlier today, I'm advocating"
    },
    {
      "Time_Start": 202.20000000000002,
      "Time_End": 207.72000000000003,
      "Text": " casting a fairly wide net at the detection level. But when we get to triage, we need to"
    },
    {
      "Time_Start": 207.72000000000003,
      "Time_End": 214.04000000000002,
      "Text": " basically figure out how we're going to narrow in on that and prioritize the detections. Right."
    },
    {
      "Time_Start": 214.04000000000002,
      "Time_End": 220.84,
      "Text": " And so triage allows us to basically say add context. Right. So add additional information"
    },
    {
      "Time_Start": 220.84,
      "Time_End": 225.64000000000001,
      "Text": " that may be relevant to determining whether an event is security relevant or malicious."
    },
    {
      "Time_Start": 226.44000000000003,
      "Time_End": 231.32000000000002,
      "Text": " And then also prioritize based off of some sort of score similar to what Josh Prager talked about"
    },
    {
      "Time_Start": 231.32000000000002,
      "Time_End": 236.52,
      "Text": " in his talk earlier today. OK. And once we've prioritized, we then want to investigate. And"
    },
    {
      "Time_Start": 236.52,
      "Time_End": 242.60000000000002,
      "Text": " this is our opportunity to actually evaluate whether an event is actually malicious or benign."
    },
    {
      "Time_Start": 243.16000000000003,
      "Time_End": 247.4,
      "Text": " And then, of course, if an event turns out to be malicious, we would go into remediation. Right. So"
    },
    {
      "Time_Start": 247.4,
      "Time_End": 252.84,
      "Text": " again, remediation is a very manual process, very resource intensive process, as opposed to"
    },
    {
      "Time_Start": 252.84,
      "Time_End": 257.24,
      "Text": " collection, which is, you know, it might be resource intensive to set up, but kind of in your"
    },
    {
      "Time_Start": 257.24,
      "Time_End": 263.4,
      "Text": " day to day state might not be so resource intensive. OK. So we kind of set that stage. We"
    },
    {
      "Time_Start": 263.4,
      "Time_End": 268.44,
      "Text": " have this idea called capability abstraction. Right. And so this is the the idea that this"
    },
    {
      "Time_Start": 268.44,
      "Time_End": 273.4,
      "Text": " entire workshop is built around. And so the idea is, is that when detection engineers are creating"
    },
    {
      "Time_Start": 273.4,
      "Time_End": 279.4,
      "Text": " detections, traditionally they don't have a great method for determining the quality or the"
    },
    {
      "Time_Start": 280.04,
      "Time_End": 286.28000000000003,
      "Text": " complexity of the coverage. Right. And so how do I know that my detection is sufficient to address"
    },
    {
      "Time_Start": 286.28000000000003,
      "Time_End": 291.40000000000003,
      "Text": " the attack technique that I'm trying to address? That's a really difficult problem. Right. And so"
    },
    {
      "Time_Start": 292.6,
      "Time_End": 298.92,
      "Text": " capability abstraction allows us to basically look beyond the idea of a tool and look into what is"
    },
    {
      "Time_Start": 298.92,
      "Time_End": 303.64000000000004,
      "Text": " the actual technology that's being abstracted by that tool. So, for instance, you know,"
    },
    {
      "Time_Start": 303.64,
      "Time_End": 310.68,
      "Text": " Mimikatz can be used for credential dumping. And so we probably could and should detect Mimikatz"
    },
    {
      "Time_Start": 310.68,
      "Time_End": 314.59999999999997,
      "Text": " being used. Right. So if somebody is using a stock version of Mimikatz that they downloaded"
    },
    {
      "Time_Start": 314.59999999999997,
      "Time_End": 318.44,
      "Text": " straight from GitHub, you know, hopefully we have some sort of precise indicator that allows us to"
    },
    {
      "Time_Start": 318.44,
      "Time_End": 324.12,
      "Text": " detect that happening. However, detecting the stock version of Mimikatz does not actually"
    },
    {
      "Time_Start": 324.76,
      "Time_End": 331.0,
      "Text": " sufficiently cover the overall attack techniques that Mimikatz enables. Right. So credential"
    },
    {
      "Time_Start": 331.0,
      "Time_End": 335.56,
      "Text": " dumping, Kerberostein, golden tickets, so on and so forth. And so we need to make sure we need to"
    },
    {
      "Time_Start": 336.12,
      "Time_End": 340.28,
      "Text": " also consider how do we address those at a technique level as opposed to a tool level?"
    },
    {
      "Time_Start": 341.0,
      "Time_End": 347.0,
      "Text": " And so my thought is that you have abstraction layers. Right. And so a tool is the most"
    },
    {
      "Time_Start": 347.0,
      "Time_End": 353.4,
      "Text": " superficial level of abstraction. Right. And so I can create an unlimited number of unique tools"
    },
    {
      "Time_Start": 353.4,
      "Time_End": 359.8,
      "Text": " that accomplish credential dumping. But as we go lower into, you know, understanding those,"
    },
    {
      "Time_Start": 359.8,
      "Time_End": 364.36,
      "Text": " filling those abstraction layers back, we might be able to have a more comprehensive approach."
    },
    {
      "Time_Start": 364.36,
      "Time_End": 370.04,
      "Text": " Right. And so the general idea is, is that typically attackers can enter into an attack"
    },
    {
      "Time_Start": 370.04,
      "Time_End": 375.88,
      "Text": " technique at different layers. So, for instance, Mimikatz is a tool, but Kerberostein is a, you"
    },
    {
      "Time_Start": 375.88,
      "Time_End": 381.08000000000004,
      "Text": " know, capability that is achieved by Mimikatz. And so somebody can use something like"
    },
    {
      "Time_Start": 381.96,
      "Time_End": 389.71999999999997,
      "Text": " impact it to perform Kerberostein at the RPC layer, as opposed to at the highest layer,"
    },
    {
      "Time_Start": 389.71999999999997,
      "Time_End": 394.84,
      "Text": " which would be what we'll talk about as we go. Okay. And so this is a little bit of rehash from"
    },
    {
      "Time_Start": 394.84,
      "Time_End": 398.91999999999996,
      "Text": " my talk, but I just wanted to make sure that this was captured for anybody that wasn't"
    },
    {
      "Time_Start": 398.91999999999996,
      "Time_End": 403.24,
      "Text": " attending my talk earlier. I'll kind of go through quickly. So the idea is, is that when we perform"
    },
    {
      "Time_Start": 403.24,
      "Time_End": 408.84,
      "Text": " collection, we are establishing the population. Right. So the population is representative of all"
    },
    {
      "Time_Start": 408.84000000000003,
      "Time_End": 413.32000000000005,
      "Text": " the events that we're collecting, and those are all the events that are relevant to our"
    },
    {
      "Time_Start": 413.32000000000005,
      "Time_End": 417.24,
      "Text": " detections. Right. So we're going to, we collect a bunch of telemetry that tells us what's happening"
    },
    {
      "Time_Start": 417.24,
      "Time_End": 423.16,
      "Text": " in the environment. And then our job is to identify which of those events represent potential"
    },
    {
      "Time_Start": 423.16,
      "Time_End": 429.16,
      "Text": " malicious activity. Right. And so we'll kind of look at the population, and then we ultimately"
    },
    {
      "Time_Start": 429.16,
      "Time_End": 433.08000000000004,
      "Text": " create what we call classification rules. And this would be, a lot of times we call this detections"
    },
    {
      "Time_Start": 433.08,
      "Time_End": 439.08,
      "Text": " or analytics or rules or alerts or whatever it may be. But a classification rule is basically,"
    },
    {
      "Time_Start": 439.88,
      "Time_End": 444.35999999999996,
      "Text": " this is how I determine whether this thing is of interest or it's not of interest. Right. And so"
    },
    {
      "Time_Start": 445.0,
      "Time_End": 450.28,
      "Text": " when we're looking at this, I want you to think of this green section here as being representative"
    },
    {
      "Time_Start": 450.28,
      "Time_End": 456.12,
      "Text": " of what our classification rule deems to be of interest. Right. So potentially bad and everything"
    },
    {
      "Time_Start": 456.12,
      "Time_End": 460.91999999999996,
      "Text": " that's not covered in green is considered potentially irrelevant. Right. So like benign."
    },
    {
      "Time_Start": 461.88,
      "Time_End": 466.36,
      "Text": " Okay. So the problem is, is that there, there is what they call the condition positive. And so the"
    },
    {
      "Time_Start": 466.36,
      "Time_End": 472.92,
      "Text": " condition positive represents events that are like objectively bad or malicious. Right. And so"
    },
    {
      "Time_Start": 472.92,
      "Time_End": 477.0,
      "Text": " the problem is, is that we don't know what those events are. Right. We have no way of knowing that"
    },
    {
      "Time_Start": 477.64,
      "Time_End": 482.92,
      "Text": " fully. And so our, our classification rule is ultimately our best, best effort at trying to"
    },
    {
      "Time_Start": 482.92,
      "Time_End": 489.56,
      "Text": " identify those. Okay. And so ultimately we overlay our classification rule onto the condition positive."
    },
    {
      "Time_Start": 490.44,
      "Time_End": 495.08,
      "Text": " And as you see the condition positive, there's some, some situations in which we've identified"
    },
    {
      "Time_Start": 496.04,
      "Time_End": 500.36,
      "Text": " our classification rule identifies condition positive as being positive. And there's some"
    },
    {
      "Time_Start": 500.36,
      "Time_End": 504.92,
      "Text": " situations where there are condition positive events that are not classified as being positive."
    },
    {
      "Time_Start": 504.92,
      "Time_End": 509.8,
      "Text": " And so that goes into what we call true positive and false negatives. And so a true positive is"
    },
    {
      "Time_Start": 509.8,
      "Time_End": 514.84,
      "Text": " an event that is positive for the condition. So let's say an event that represents malicious"
    },
    {
      "Time_Start": 514.84,
      "Time_End": 520.9200000000001,
      "Text": " activity that we are identifying through our detection as being malicious. Right. Now,"
    },
    {
      "Time_Start": 520.9200000000001,
      "Time_End": 525.96,
      "Text": " on the other hand, we have false negatives, which are events that are bad that we are identifying"
    },
    {
      "Time_Start": 525.96,
      "Time_End": 530.9200000000001,
      "Text": " as benign. Right. So this, this represents a really big gap in a lot of programs that we see"
    },
    {
      "Time_Start": 530.9200000000001,
      "Time_End": 536.12,
      "Text": " is how do you quantify the false negatives or how do you, how do you basically expand your detection"
    },
    {
      "Time_Start": 536.12,
      "Time_End": 541.24,
      "Text": " rule or make your detection rule a little bit more accurate in being able to identify these false"
    },
    {
      "Time_Start": 541.24,
      "Time_End": 544.92,
      "Text": " negatives? That's a, that's a big problem. And so one of the big problems about that"
    },
    {
      "Time_Start": 544.92,
      "Time_End": 549.5600000000001,
      "Text": " is that false negatives fail silently. So there's no way for us to go back and actually check,"
    },
    {
      "Time_Start": 550.6800000000001,
      "Time_End": 554.76,
      "Text": " you know, Hey, do we have any false negatives? Well, the problem is, is it's impossible to"
    },
    {
      "Time_Start": 554.76,
      "Time_End": 560.36,
      "Text": " quantify that. Okay. And so what we, what we end up with is this metric called sensitivity. And so"
    },
    {
      "Time_Start": 560.36,
      "Time_End": 565.96,
      "Text": " sensitivity takes the true number of conditioned positive events, which is represented by the red"
    },
    {
      "Time_Start": 565.96,
      "Time_End": 571.96,
      "Text": " circle and the, the number of true, true positive events based on our classification, which is this"
    },
    {
      "Time_Start": 571.96,
      "Time_End": 577.32,
      "Text": " yellow shape here. And then it overlays them. Right. And so sensitivity is ultimately how,"
    },
    {
      "Time_Start": 577.96,
      "Time_End": 583.88,
      "Text": " how able is your classification rule to identify or correctly identify positive events as being"
    },
    {
      "Time_Start": 583.88,
      "Time_End": 588.6800000000001,
      "Text": " positive. Right. And so you'll see that we have probably more than 50% coverage here,"
    },
    {
      "Time_Start": 589.4000000000001,
      "Time_End": 595.0,
      "Text": " but we're missing some. Right. And so in the case of, I used earlier in my talk, COVID-19,"
    },
    {
      "Time_Start": 595.0,
      "Time_End": 599.64,
      "Text": " it's like, how well are you, how, how able are you to identify sick people as being sick when"
    },
    {
      "Time_Start": 599.64,
      "Time_End": 604.84,
      "Text": " you give them a COVID-19 test? And so this sensitivity is one of those things that really"
    },
    {
      "Time_Start": 604.84,
      "Time_End": 611.16,
      "Text": " drives your risk. Right. And so it's, it's like, or it's driven by your risk. And so for COVID-19"
    },
    {
      "Time_Start": 612.12,
      "Time_End": 617.48,
      "Text": " it's, we probably err on the side of being sensitive because it's, you know, it'd be"
    },
    {
      "Time_Start": 617.48,
      "Time_End": 622.68,
      "Text": " somewhat dangerous, right. To have somebody that actually has COVID-19, give them a test and then"
    },
    {
      "Time_Start": 622.6800000000001,
      "Time_End": 626.2,
      "Text": " tell them, nope, you're all good. Go ahead and go out into the world and continue doing your thing."
    },
    {
      "Time_Start": 626.2,
      "Time_End": 632.1200000000001,
      "Text": " Right. We probably want to err on the side of, we want to make sure that we, we test positive,"
    },
    {
      "Time_Start": 632.6800000000001,
      "Time_End": 636.0400000000001,
      "Text": " everybody that has COVID-19. And as a result, we're going to end up having what they call"
    },
    {
      "Time_Start": 636.0400000000001,
      "Time_End": 640.84,
      "Text": " false positives, which are people that are not actually sick, that receive a positive test"
    },
    {
      "Time_Start": 640.84,
      "Time_End": 645.96,
      "Text": " result. And that's kind of like an acceptable thing for the greater good of society. Right."
    },
    {
      "Time_Start": 646.7600000000001,
      "Time_End": 651.08,
      "Text": " Now the same thing might, might be a consideration in cybersecurity. It's like,"
    },
    {
      "Time_Start": 651.08,
      "Time_End": 657.5600000000001,
      "Text": " you know, are, are false positives a bigger risk because that, that drains resources or are false"
    },
    {
      "Time_Start": 657.5600000000001,
      "Time_End": 661.08,
      "Text": " negatives a bigger risk because now we have malicious activity that we're not identifying."
    },
    {
      "Time_Start": 661.08,
      "Time_End": 665.5600000000001,
      "Text": " And so you have to kind of balance that out. Right. Okay. Then we have condition negative,"
    },
    {
      "Time_Start": 665.5600000000001,
      "Time_End": 670.0400000000001,
      "Text": " right. And condition negative is basically all events that are actually not actually malicious"
    },
    {
      "Time_Start": 670.76,
      "Time_End": 676.2,
      "Text": " or all healthy people within your population. Okay. And we overlay our classification rule,"
    },
    {
      "Time_Start": 676.2,
      "Time_End": 679.96,
      "Text": " and then we start to look at how that, that lays out. Right. And so we have what we call"
    },
    {
      "Time_Start": 679.96,
      "Time_End": 684.2800000000001,
      "Text": " true negatives, which are events that are benign, which we've classified as benign. Right. And this"
    },
    {
      "Time_Start": 684.2800000000001,
      "Time_End": 687.5600000000001,
      "Text": " is, this is a good thing, right. That's kind of what we're going for. And then we have false"
    },
    {
      "Time_Start": 687.5600000000001,
      "Time_End": 691.8000000000001,
      "Text": " positives. And this is the bane of everybody's existence in cybersecurity is these are events"
    },
    {
      "Time_Start": 691.8000000000001,
      "Time_End": 696.36,
      "Text": " that are benign that we classify as malicious. So this basically, these events are nothing to"
    },
    {
      "Time_Start": 696.36,
      "Time_End": 700.52,
      "Text": " worry about, but we create an alert on them anyway. Right. And so that ends up, you know,"
    },
    {
      "Time_Start": 700.52,
      "Time_End": 705.5600000000001,
      "Text": " alerts there's, you know, that drains resources. People have to investigate and triage alerts."
    },
    {
      "Time_Start": 705.5600000000001,
      "Time_End": 710.44,
      "Text": " And so ultimately what we, what we often do is we say, we need to tune this, this detection rule"
    },
    {
      "Time_Start": 710.44,
      "Time_End": 715.4000000000001,
      "Text": " because it's too false positive prone. And so one of the big problems is that false positives"
    },
    {
      "Time_Start": 715.4000000000001,
      "Time_End": 721.08,
      "Text": " and false negatives are to some degree inversely proportional. So like, as I reduce false positives,"
    },
    {
      "Time_Start": 721.08,
      "Time_End": 725.24,
      "Text": " I generally am introducing opportunities for false negatives to thrive. And so that's something we"
    },
    {
      "Time_Start": 725.24,
      "Time_End": 730.2,
      "Text": " need to be really careful about. And so we have this metric called specificity, and this is the"
    },
    {
      "Time_Start": 730.2,
      "Time_End": 737.48,
      "Text": " kind of the inverse of sensitivity. And this is basically how, how able are you to correctly"
    },
    {
      "Time_Start": 737.48,
      "Time_End": 741.6400000000001,
      "Text": " reject events that do not meet the condition? So how, how likely are you to identify healthy people"
    },
    {
      "Time_Start": 741.6400000000001,
      "Time_End": 749.1600000000001,
      "Text": " as being healthy? Right. And so the power of a test or a detection rule is a measure of both"
    },
    {
      "Time_Start": 749.1600000000001,
      "Time_End": 753.5600000000001,
      "Text": " sensitivity and specificity. So how able are you to identify malicious events as being malicious"
    },
    {
      "Time_Start": 753.5600000000001,
      "Time_End": 759.32,
      "Text": " and how able are you to identify benign events as being benign. And so in order to evaluate how well"
    },
    {
      "Time_Start": 759.32,
      "Time_End": 763.0,
      "Text": " your detection actually works, you have to consider both those things. So it's not just"
    },
    {
      "Time_Start": 763.0,
      "Time_End": 766.44,
      "Text": " how many false positives are you producing? You need to make sure that you're also considering"
    },
    {
      "Time_Start": 766.44,
      "Time_End": 772.84,
      "Text": " what the likelihood of false negatives might be. Okay. As we go through that, we also have this"
    },
    {
      "Time_Start": 772.84,
      "Time_End": 777.8000000000001,
      "Text": " idea called the detection spectrum, right? And so a lot of us have heard of, so I talked about"
    },
    {
      "Time_Start": 777.8000000000001,
      "Time_End": 783.1600000000001,
      "Text": " Mimi cats earlier and it's like, okay, well if we, if we know that Mimi cats is a thing,"
    },
    {
      "Time_Start": 783.1600000000001,
      "Time_End": 788.44,
      "Text": " we probably want to create a detection to, to identify the presence of the base version of"
    },
    {
      "Time_Start": 788.44,
      "Time_End": 792.7600000000001,
      "Text": " Mimi cats, right? So like if you have the hash of Mimi cats from GitHub, you probably want to"
    },
    {
      "Time_Start": 792.7600000000001,
      "Time_End": 797.1600000000001,
      "Text": " detect that because it's an easy win. Right. But you may have heard that be called something like"
    },
    {
      "Time_Start": 797.1600000000001,
      "Time_End": 802.2,
      "Text": " a brittle detection. Well, I don't like the idea of brittle because that's kind of pejorative in"
    },
    {
      "Time_Start": 802.2,
      "Time_End": 807.0,
      "Text": " some sense. And so I like the idea of calling it a precise detection. What a precise detection is,"
    },
    {
      "Time_Start": 807.0,
      "Time_End": 812.6800000000001,
      "Text": " is it's a detection that has a low likelihood or low occurrence of false positives, but a high,"
    },
    {
      "Time_Start": 812.9200000000001,
      "Time_End": 818.44,
      "Text": " a high rate of, or highly reduces false negatives. Right. So,"
    },
    {
      "Time_Start": 819.8800000000001,
      "Time_End": 822.9200000000001,
      "Text": " and so, or it has a high level of false negatives. And so for instance,"
    },
    {
      "Time_Start": 823.8800000000001,
      "Time_End": 827.8000000000001,
      "Text": " if, if I create a detection that looks for the hash of the base version of Mimi cats,"
    },
    {
      "Time_Start": 828.44,
      "Time_End": 834.0400000000001,
      "Text": " if that alert fires I'm pretty assured that it's bad. Right. And so like, I know that it's bad."
    },
    {
      "Time_Start": 834.0400000000001,
      "Time_End": 837.8000000000001,
      "Text": " However, there's tons of ways that attackers can do the things that Mimi cats does,"
    },
    {
      "Time_Start": 837.8000000000001,
      "Time_End": 842.1200000000001,
      "Text": " or they can even use Mimi cats for that matter and not fire that alert. Right. So all you have"
    },
    {
      "Time_Start": 842.12,
      "Time_End": 846.68,
      "Text": " to do is change one bite to change the hash. Right. So that's like the most hyperbolic version"
    },
    {
      "Time_Start": 846.68,
      "Time_End": 851.24,
      "Text": " of a precise indicator. On the other hand, we have broad indicators, which is something like"
    },
    {
      "Time_Start": 852.6,
      "Time_End": 856.76,
      "Text": " we're going to be talking about service creation, but it's like the fact that a service was created,"
    },
    {
      "Time_Start": 857.32,
      "Time_End": 860.68,
      "Text": " that would be a broad indicator. Right. So there's tons of false positives in that because,"
    },
    {
      "Time_Start": 860.68,
      "Time_End": 865.64,
      "Text": " you know, not every service, actually a small, small proportion of services are probably malicious,"
    },
    {
      "Time_Start": 866.28,
      "Time_End": 870.76,
      "Text": " but you're reducing your false negatives. So think of precise and broad as being"
    },
    {
      "Time_Start": 871.0,
      "Time_End": 877.96,
      "Text": " sensitive versus specific. Right. Once we, once we introduce kind of those metrics that we talked"
    },
    {
      "Time_Start": 877.96,
      "Time_End": 884.92,
      "Text": " about earlier. Okay. So as we go through abstraction, we kind of laid out, we were laying"
    },
    {
      "Time_Start": 884.92,
      "Time_End": 889.8,
      "Text": " out a few different ideas. Right. So we have this, we have to identify what technique are we interested"
    },
    {
      "Time_Start": 889.8,
      "Time_End": 894.92,
      "Text": " in. Right. So to start looking in and building a detection and understanding how that capability"
    },
    {
      "Time_Start": 894.92,
      "Time_End": 899.48,
      "Text": " is ultimately abstracted, we need to identify a technique that we're interested in. Then we,"
    },
    {
      "Time_Start": 899.48,
      "Time_End": 903.96,
      "Text": " then we probably want to identify some tools that perform that technique. Right. And so for"
    },
    {
      "Time_Start": 903.96,
      "Time_End": 908.6,
      "Text": " instance, Mimikatz is a tool that performs a clear text credential dumping, for instance."
    },
    {
      "Time_Start": 908.6,
      "Time_End": 912.76,
      "Text": " Then we want to identify the functions that are used to accomplish that. So in Mimikatz,"
    },
    {
      "Time_Start": 912.76,
      "Time_End": 918.44,
      "Text": " maybe you use open process to open a handle to LSAS and then reprocess memory to read,"
    },
    {
      "Time_Start": 918.44,
      "Time_End": 923.24,
      "Text": " read the actual memory from, from LSAS. Maybe there's some files that are created that might"
    },
    {
      "Time_Start": 923.24,
      "Time_End": 927.0,
      "Text": " be relevant indicators. Maybe there's some registry interaction. Maybe there's some"
    },
    {
      "Time_Start": 927.0,
      "Time_End": 930.6,
      "Text": " network connections that are occurring. And so those are kind of the things that we want to be"
    },
    {
      "Time_Start": 930.6,
      "Time_End": 936.28,
      "Text": " asking. Now, is it possible that there are abstraction layers that are not represented"
    },
    {
      "Time_Start": 936.28,
      "Time_End": 940.12,
      "Text": " in these six kind of items? Of course, of course there are, but we're kind of doing the Pareto"
    },
    {
      "Time_Start": 940.12,
      "Time_End": 945.64,
      "Text": " principle where it's like, you know, 80%, 80% of the different techniques could be covered by these"
    },
    {
      "Time_Start": 945.64,
      "Time_End": 952.12,
      "Text": " six, six indicators. And maybe there's 20% that's not right. So we're kind of like trying to create"
    },
    {
      "Time_Start": 952.68,
      "Time_End": 956.68,
      "Text": " a methodology that will get you most of the way there most of the time, as opposed to something"
    },
    {
      "Time_Start": 956.6800000000001,
      "Time_End": 961.48,
      "Text": " that's perfect. Right. Because we all know that uncertainty rules, our lives and cybersecurity."
    },
    {
      "Time_Start": 961.48,
      "Time_End": 966.7600000000001,
      "Text": " And so we're not going to be perfect. Okay. So when we're looking at a technique generally,"
    },
    {
      "Time_Start": 966.7600000000001,
      "Time_End": 972.0400000000001,
      "Text": " we want to provide a goal for ourselves. So what are we trying to accomplish with this? Right. So"
    },
    {
      "Time_Start": 972.9200000000001,
      "Time_End": 978.0400000000001,
      "Text": " and what, and that could be represented as looking for evidence of a specific technique"
    },
    {
      "Time_Start": 978.7600000000001,
      "Time_End": 984.84,
      "Text": " being accomplished. Now we may, we may ultimately land on a more specific goal than that, but that's"
    },
    {
      "Time_Start": 984.84,
      "Time_End": 990.36,
      "Text": " generally a good starting point to kind of like focus your effort. Right. And so kind of our theme"
    },
    {
      "Time_Start": 990.36,
      "Time_End": 995.96,
      "Text": " for today is service creation. One of the reasons is, is it's relatively easy to understand"
    },
    {
      "Time_Start": 995.96,
      "Time_End": 1000.12,
      "Text": " conceptually, like what a service is, why it might be used by attackers, but it's also complex because"
    },
    {
      "Time_Start": 1000.12,
      "Time_End": 1004.44,
      "Text": " it's one of those things that how do you differentiate between a bad service and a good"
    },
    {
      "Time_Start": 1004.44,
      "Time_End": 1009.48,
      "Text": " service? And so we thought it was an interesting thing to kind of, kind of tackle. Right. And so"
    },
    {
      "Time_Start": 1009.48,
      "Time_End": 1013.96,
      "Text": " some things that we might know about services is that there are long running applications that are"
    },
    {
      "Time_Start": 1013.96,
      "Time_End": 1017.96,
      "Text": " typically transparent to the user. So they're kind of running in the background. They can be"
    },
    {
      "Time_Start": 1017.96,
      "Time_End": 1022.0400000000001,
      "Text": " set to execute upon boot up. Right. So that might indicate that they could be used for persistence."
    },
    {
      "Time_Start": 1022.6,
      "Time_End": 1027.08,
      "Text": " They often run in an elevated user context, so they could be used for privilege escalation."
    },
    {
      "Time_Start": 1027.08,
      "Time_End": 1032.1200000000001,
      "Text": " And then yeah, so attackers leverage services for persistence and privilege escalation,"
    },
    {
      "Time_Start": 1032.1200000000001,
      "Time_End": 1037.08,
      "Text": " as well as lateral movement, which is something that isn't on this slide. Okay. And so what I"
    },
    {
      "Time_Start": 1037.08,
      "Time_End": 1042.28,
      "Text": " like to do is kind of go to Sigma, right? So Sigma is a great repository for kind of like"
    },
    {
      "Time_Start": 1042.28,
      "Time_End": 1047.32,
      "Text": " tool agnostic detections. Right. And so it's kind of nice to go and start by looking and seeing what"
    },
    {
      "Time_Start": 1047.32,
      "Time_End": 1051.96,
      "Text": " other people are doing. And so we'll see that there's in Sigma for service creation, there's"
    },
    {
      "Time_Start": 1051.96,
      "Time_End": 1059.48,
      "Text": " kind of a mix of precise versus broad detections. Right. And so first we'll look at, okay, so"
    },
    {
      "Time_Start": 1060.04,
      "Time_End": 1064.36,
      "Text": " this is somebody looking for a service where the service name is Google update."
    },
    {
      "Time_Start": 1064.36,
      "Time_End": 1069.8,
      "Text": " Right. And so that might represent, we kind of want to plot that on our detection spectrum."
    },
    {
      "Time_Start": 1070.68,
      "Time_End": 1075.96,
      "Text": " Here we see we're fault service. So somebody is looking for a very specific service name,"
    },
    {
      "Time_Start": 1075.96,
      "Time_End": 1079.6399999999999,
      "Text": " and that would be something that's a little bit more on the precise end of the spectrum."
    },
    {
      "Time_Start": 1079.6399999999999,
      "Time_End": 1085.8799999999999,
      "Text": " We see maybe another specific service name where the service file is star represented by"
    },
    {
      "Time_Start": 1085.8799999999999,
      "Time_End": 1089.8799999999999,
      "Text": " a wildcard and local service. And so maybe that's also on the precise end of the spectrum."
    },
    {
      "Time_Start": 1090.6,
      "Time_End": 1097.56,
      "Text": " We have a detection that's looking for a specific implementation of a service as part of a malware"
    },
    {
      "Time_Start": 1097.56,
      "Time_End": 1103.32,
      "Text": " attack. And so we might look for one of three different service names to be represented here."
    },
    {
      "Time_Start": 1103.8799999999999,
      "Time_End": 1108.84,
      "Text": " And so that's maybe a little bit more broad, another specific service name. So we're seeing"
    },
    {
      "Time_Start": 1108.84,
      "Time_End": 1113.6399999999999,
      "Text": " that there's kind of like a, we're really good at creating detections. These more precise"
    },
    {
      "Time_Start": 1113.6399999999999,
      "Time_End": 1118.04,
      "Text": " detections that are looking for known bad, but it's like, how do we transition to the next step?"
    },
    {
      "Time_Start": 1118.04,
      "Time_End": 1123.8,
      "Text": " And so maybe one effort to do that would be let's look for a service that was created either by"
    },
    {
      "Time_Start": 1123.8,
      "Time_End": 1130.9199999999998,
      "Text": " sc.exe with a command line that contains create or bin path or PowerShell where they used a new"
    },
    {
      "Time_Start": 1130.9199999999998,
      "Time_End": 1137.0,
      "Text": " service in the command line. So maybe that's trying to identify the use of known tools"
    },
    {
      "Time_Start": 1137.0,
      "Time_End": 1141.6399999999999,
      "Text": " to create services. And so that might be a little bit more broad because"
    },
    {
      "Time_Start": 1141.6399999999999,
      "Time_End": 1147.08,
      "Text": " you could use SC or PowerShell to create legitimate or benign services. And so now we're just"
    },
    {
      "Time_Start": 1147.08,
      "Time_End": 1152.36,
      "Text": " being a little bit more broad, trying to get a good idea of what's happening. And then we"
    },
    {
      "Time_Start": 1152.6000000000001,
      "Time_End": 1156.5200000000002,
      "Text": " maybe on the backend start to actually dig into it, whether it's malicious or not."
    },
    {
      "Time_Start": 1156.5200000000002,
      "Time_End": 1161.72,
      "Text": " Now, many of you may be familiar, if you're more familiar with how services work and how you can"
    },
    {
      "Time_Start": 1161.72,
      "Time_End": 1166.2,
      "Text": " create them, you may know that there's maybe a flaw in this logic if you're trying to be"
    },
    {
      "Time_Start": 1166.2,
      "Time_End": 1172.2,
      "Text": " extremely broad, right? Because sc.exe and PowerShell are just two tools that can be used"
    },
    {
      "Time_Start": 1172.2,
      "Time_End": 1177.72,
      "Text": " by attackers to create services. However, there's basically an unlimited number of tools that can be"
    },
    {
      "Time_Start": 1177.72,
      "Time_End": 1182.44,
      "Text": " used to create services. And so that's why it's not fully on the broad end of the spectrum."
    },
    {
      "Time_Start": 1183.88,
      "Time_End": 1191.96,
      "Text": " And then maybe another example would be using the Windows Event 7045 and then looking for"
    },
    {
      "Time_Start": 1191.96,
      "Time_End": 1199.64,
      "Text": " anything where the service file name is less than five as far as like the results, right?"
    },
    {
      "Time_Start": 1199.64,
      "Time_End": 1204.1200000000001,
      "Text": " And so that's a little bit more broad, right? So that's kind of using frequency analysis there."
    },
    {
      "Time_Start": 1204.8400000000001,
      "Time_End": 1210.3600000000001,
      "Text": " Okay. And so what we do is we start to build out what we call an abstraction map. And this is like,"
    },
    {
      "Time_Start": 1210.3600000000001,
      "Time_End": 1215.0000000000002,
      "Text": " we have these tools, right? So we have sc.exe and PowerShell. And maybe we can create some"
    },
    {
      "Time_Start": 1215.0000000000002,
      "Time_End": 1218.68,
      "Text": " detections off of that. We also have maybe a little bit more broad way to detect something"
    },
    {
      "Time_Start": 1218.68,
      "Time_End": 1227.96,
      "Text": " using the 7045 event. But we want to evaluate A, how comprehensive are those approaches? But B,"
    },
    {
      "Time_Start": 1227.96,
      "Time_End": 1233.0800000000002,
      "Text": " how much do we trust their ability to collect the information that we expect them to collect, right?"
    },
    {
      "Time_Start": 1233.72,
      "Time_End": 1241.6399999999999,
      "Text": " And so a good starting point as always is MITRE ATT&CK. Usually the great thing is that they're"
    },
    {
      "Time_Start": 1241.6399999999999,
      "Time_End": 1245.08,
      "Text": " pulling threat information and putting it in there. So you know that this is actually relevant"
    },
    {
      "Time_Start": 1245.08,
      "Time_End": 1249.72,
      "Text": " information that's been seen in real life, right? And they're giving you some at least starting"
    },
    {
      "Time_Start": 1249.72,
      "Time_End": 1255.24,
      "Text": " points, right? And so a really good section for MITRE ATT&CK is this data sources section. So"
    },
    {
      "Time_Start": 1255.24,
      "Time_End": 1258.84,
      "Text": " they're saying, hey, there may be some value in looking at the registry. There may be some value"
    },
    {
      "Time_Start": 1258.84,
      "Time_End": 1263.9599999999998,
      "Text": " in process monitoring. We've already seen that with monitoring for sc.exe or PowerShell with"
    },
    {
      "Time_Start": 1263.9599999999998,
      "Time_End": 1269.3999999999999,
      "Text": " new service in the command line. We see some Windows event logs while there's a 7045 event"
    },
    {
      "Time_Start": 1269.3999999999999,
      "Time_End": 1272.6799999999998,
      "Text": " that we might be able to monitor. And so that's kind of giving us an idea. The one thing that we"
    },
    {
      "Time_Start": 1272.6799999999998,
      "Time_End": 1277.0,
      "Text": " haven't touched on yet is this registry. And so we might be interested in digging into that a"
    },
    {
      "Time_Start": 1277.0,
      "Time_End": 1281.8799999999999,
      "Text": " little bit further. And so they also have a detection section, which is some detection"
    },
    {
      "Time_Start": 1281.8799999999999,
      "Time_End": 1287.9599999999998,
      "Text": " guidance, right? Never think that this is comprehensive, right? But it's always a really"
    },
    {
      "Time_Start": 1287.96,
      "Time_End": 1292.68,
      "Text": " good starting point if you don't really know a lot about what's going on. You could start"
    },
    {
      "Time_Start": 1292.68,
      "Time_End": 1297.24,
      "Text": " there and then ask some questions, right? And so it says monitor service creation through changes"
    },
    {
      "Time_Start": 1297.24,
      "Time_End": 1302.76,
      "Text": " to the registry and common utilities using command line invocation. Common utilities, again, are sc.exe"
    },
    {
      "Time_Start": 1302.76,
      "Time_End": 1307.0,
      "Text": " and PowerShell.exe. And then I'm sure there's other ones. But then it's like, hey, you could"
    },
    {
      "Time_Start": 1307.0,
      "Time_End": 1312.2,
      "Text": " supplement that through monitoring changes to the registry. And so as I read that, I asked myself"
    },
    {
      "Time_Start": 1312.2,
      "Time_End": 1317.08,
      "Text": " a couple questions. So the first question might be, what are common utilities to install a service?"
    },
    {
      "Time_Start": 1317.08,
      "Time_End": 1322.1999999999998,
      "Text": " Well, we know about sc.exe and PowerShell, but maybe there's others. And then why would we monitor"
    },
    {
      "Time_Start": 1322.1999999999998,
      "Time_End": 1326.6799999999998,
      "Text": " the registry for service creations? And so as part of this understanding the abstraction and pulling"
    },
    {
      "Time_Start": 1326.6799999999998,
      "Time_End": 1332.52,
      "Text": " back the layers, we might actually want to try to evaluate the answer to that question. And so"
    },
    {
      "Time_Start": 1333.72,
      "Time_End": 1339.08,
      "Text": " what tools do we know that perform this technique? Well, let's say that we don't know anything off"
    },
    {
      "Time_Start": 1339.08,
      "Time_End": 1342.6799999999998,
      "Text": " the top of our head. Usually I would ask that question, like if I was teaching an in-person"
    },
    {
      "Time_Start": 1342.68,
      "Time_End": 1348.2,
      "Text": " class, and ask people to provide feedback. But I don't think that's an option here. So we'll just"
    },
    {
      "Time_Start": 1348.2,
      "Time_End": 1352.76,
      "Text": " kind of move on. But yeah, how do you install a Windows service? Literally just Google it."
    },
    {
      "Time_Start": 1352.76,
      "Time_End": 1359.24,
      "Text": " And Microsoft's like, here's a way. Install util, new service through PowerShell. And so they say,"
    },
    {
      "Time_Start": 1359.24,
      "Time_End": 1363.8,
      "Text": " hey, you can use PowerShell to do it. And there's a commandlet called new service. You specify your"
    },
    {
      "Time_Start": 1363.8,
      "Time_End": 1369.3200000000002,
      "Text": " service name, provide a binary path, and that's going to handle all that for you. And so we're"
    },
    {
      "Time_Start": 1369.32,
      "Time_End": 1373.48,
      "Text": " going to now, like obviously there's tons of different tools that we could look at. But I think"
    },
    {
      "Time_Start": 1373.48,
      "Time_End": 1379.1599999999999,
      "Text": " the idea that we're trying to push is the idea that focusing on the tool that's used to create"
    },
    {
      "Time_Start": 1379.1599999999999,
      "Time_End": 1385.24,
      "Text": " the service is a losing strategy to some degree. Because somebody with kind of basic"
    },
    {
      "Time_Start": 1385.24,
      "Time_End": 1389.3999999999999,
      "Text": " programming capability would be able to write a new tool that would implement this capability."
    },
    {
      "Time_Start": 1389.3999999999999,
      "Time_End": 1396.12,
      "Text": " And so you're fighting an uphill battle that's ultimately an infinitely large problem."
    },
    {
      "Time_Start": 1396.7600000000002,
      "Time_End": 1401.88,
      "Text": " And so how do we kind of address this in a more comprehensive way is kind of what we're"
    },
    {
      "Time_Start": 1401.88,
      "Time_End": 1408.7600000000002,
      "Text": " trying to figure out here. Okay. So again, we saw that there was a detection already like this in"
    },
    {
      "Time_Start": 1408.7600000000002,
      "Time_End": 1414.5200000000002,
      "Text": " Sigma. But maybe we want to kind of look into it a little bit more. So we kind of have a"
    },
    {
      "Time_Start": 1414.5200000000002,
      "Time_End": 1418.92,
      "Text": " half answer to our question, what are common utilities to install a service?"
    },
    {
      "Time_Start": 1420.5200000000002,
      "Time_End": 1424.68,
      "Text": " New service is one of them, but there are obviously more. And then why would we monitor"
    },
    {
      "Time_Start": 1424.68,
      "Time_End": 1429.8,
      "Text": " the registry for service creation? We're still at an unknown. And so the next step,"
    },
    {
      "Time_Start": 1429.8,
      "Time_End": 1433.96,
      "Text": " so we talked about tools, right? We identified our technique. We talked about the tools that"
    },
    {
      "Time_Start": 1433.96,
      "Time_End": 1439.96,
      "Text": " might be useful. We picked a tool to kind of dig into. Ideally you would identify numerous tools"
    },
    {
      "Time_Start": 1439.96,
      "Time_End": 1443.5600000000002,
      "Text": " and then you would kind of dig into them iteratively, right? So it's kind of like"
    },
    {
      "Time_Start": 1444.2,
      "Time_End": 1448.68,
      "Text": " you identify the tools and then you kind of do a for loop where you iterate through all of them"
    },
    {
      "Time_Start": 1448.68,
      "Time_End": 1453.16,
      "Text": " for what we're showing in the workshop. And then you identify if there's any commonalities amongst"
    },
    {
      "Time_Start": 1453.16,
      "Time_End": 1458.68,
      "Text": " them. We're just going to do this for one example because of the time constraints. But one of the"
    },
    {
      "Time_Start": 1458.68,
      "Time_End": 1465.0,
      "Text": " first things that we want to do is say, are there any functions that we can pull out of this, right?"
    },
    {
      "Time_Start": 1465.0,
      "Time_End": 1471.24,
      "Text": " And so the thing that we might do is static analysis of the functions that are available"
    },
    {
      "Time_Start": 1471.24,
      "Time_End": 1477.72,
      "Text": " in new service. And so some questions that we might ask at this phase are, are there any managed,"
    },
    {
      "Time_Start": 1477.72,
      "Time_End": 1482.52,
      "Text": " for instance, .NET APIs that we should consider as being used by a new service?"
    },
    {
      "Time_Start": 1483.4,
      "Time_End": 1486.92,
      "Text": " Are there any unmanaged or like Windows APIs that are being used by these tools?"
    },
    {
      "Time_Start": 1488.28,
      "Time_End": 1493.32,
      "Text": " What DLLs export these functions? That might be interesting to us. Are there alternate functions"
    },
    {
      "Time_Start": 1493.32,
      "Time_End": 1498.04,
      "Text": " that can be called? So for instance, like with Mimikatz, I talked about open process. Well,"
    },
    {
      "Time_Start": 1498.04,
      "Time_End": 1504.28,
      "Text": " there's also a function called NT open process. And so if your detection is focused on open"
    },
    {
      "Time_Start": 1504.28,
      "Time_End": 1509.8,
      "Text": " process only, and somebody calls NT open process, then they're going to bypass your"
    },
    {
      "Time_Start": 1509.8,
      "Time_End": 1516.76,
      "Text": " detection capability. And so it's important to kind of evaluate, are there multiple paths that"
    },
    {
      "Time_Start": 1516.76,
      "Time_End": 1521.6399999999999,
      "Text": " an attacker can achieve the same objective through the API, for instance? And then are there any"
    },
    {
      "Time_Start": 1521.6399999999999,
      "Time_End": 1525.96,
      "Text": " native undocumented or underlying functions that are relied upon? And so I'm going to"
    },
    {
      "Time_Start": 1526.84,
      "Time_End": 1531.6399999999999,
      "Text": " kind of walk through this real quick. Stop share real quick, switch over."
    },
    {
      "Time_Start": 1535.0,
      "Time_End": 1542.68,
      "Text": " There. Okay. All right. So here I am. Luke, you can see this, right? Just making sure."
    },
    {
      "Time_Start": 1543.6399999999999,
      "Time_End": 1549.3999999999999,
      "Text": " Yep. All right. Okay. So if we go and look at new service, this is the PowerShell GitHub repo,"
    },
    {
      "Time_Start": 1549.3999999999999,
      "Time_End": 1555.56,
      "Text": " right? So this is where the source code for PowerShell itself exists, I guess. And so what"
    },
    {
      "Time_Start": 1555.56,
      "Time_End": 1560.84,
      "Text": " I did is I searched for new service, which is the name of that command, because that code is"
    },
    {
      "Time_Start": 1560.8400000000001,
      "Time_End": 1565.7200000000003,
      "Text": " implemented in PowerShell. And so we can go and look at the actual source code of it, right?"
    },
    {
      "Time_Start": 1565.7200000000003,
      "Time_End": 1573.7200000000003,
      "Text": " And so this is service.cs. That's the C sharp source code for new service. And I'm going to,"
    },
    {
      "Time_Start": 1573.7200000000003,
      "Time_End": 1577.8000000000002,
      "Text": " yeah, we got it. Okay. I was looking up some GoPro stuff earlier, apparently."
    },
    {
      "Time_Start": 1579.5600000000002,
      "Time_End": 1584.92,
      "Text": " I just switched from my Mac webcam to my GoPro so that it looks prettier. But I don't know how"
    },
    {
      "Time_Start": 1584.92,
      "Time_End": 1591.0800000000002,
      "Text": " much that helps you guys. Okay. So here's the actual code where new service is being implemented."
    },
    {
      "Time_Start": 1591.0800000000002,
      "Time_End": 1597.0,
      "Text": " And so what we can do is we can start to look through this and identify locations or functions"
    },
    {
      "Time_Start": 1597.0,
      "Time_End": 1601.72,
      "Text": " that are being called, right? And so maybe we're looking for C sharp is a .NET language. And so"
    },
    {
      "Time_Start": 1601.72,
      "Time_End": 1607.96,
      "Text": " maybe we're looking for a .NET class and .NET method that's being called. But .NET also has"
    },
    {
      "Time_Start": 1607.96,
      "Time_End": 1613.0,
      "Text": " the ability to call Windows API functions through a thing called P invoke. And so maybe we're looking"
    },
    {
      "Time_Start": 1613.0,
      "Time_End": 1617.64,
      "Text": " for that as well. And so we start scrolling through it. And if you're not familiar, there's,"
    },
    {
      "Time_Start": 1617.64,
      "Time_End": 1621.48,
      "Text": " the way that this all works is they define all the parameters. So you could specify the name"
    },
    {
      "Time_Start": 1621.48,
      "Time_End": 1626.36,
      "Text": " of the service, the binary path name of the service, the display name of the service,"
    },
    {
      "Time_Start": 1626.36,
      "Time_End": 1629.96,
      "Text": " so on and so forth. So you could kind of, that's all the parameters that new service,"
    },
    {
      "Time_Start": 1629.96,
      "Time_End": 1636.2,
      "Text": " the commandlet would accept. And as we scroll through, we're looking for things. And so one"
    },
    {
      "Time_Start": 1636.2,
      "Time_End": 1644.04,
      "Text": " of the common things in C sharp is when you use P invoke to access a Windows API, you typically,"
    },
    {
      "Time_Start": 1644.04,
      "Time_End": 1649.72,
      "Text": " like the convention is to put it in the native methods class. And so we have this function or"
    },
    {
      "Time_Start": 1649.72,
      "Time_End": 1656.68,
      "Text": " method called OpenSCManagerW, which is part of the native methods class. And so OpenSCManagerW"
    },
    {
      "Time_Start": 1657.32,
      "Time_End": 1663.88,
      "Text": " ends up being a Windows API function. And so we can actually, I looked at OpenSCManagerA,"
    },
    {
      "Time_Start": 1663.88,
      "Time_End": 1672.8400000000001,
      "Text": " but we can do the same. ManagerW. We can go look at it. They're basically the same thing."
    },
    {
      "Time_Start": 1673.8000000000002,
      "Time_End": 1679.4,
      "Text": " And we get the Windows API or documentation. So MSDN has this documentation for us. And we can"
    },
    {
      "Time_Start": 1679.4,
      "Time_End": 1683.72,
      "Text": " start to look at how this thing works, right? So PowerShell is calling this, and we can start to"
    },
    {
      "Time_Start": 1683.72,
      "Time_End": 1689.16,
      "Text": " actually understand how it works. So just to kind of give a quick overview of how we should read"
    },
    {
      "Time_Start": 1689.16,
      "Time_End": 1694.3600000000001,
      "Text": " this, this is the name of the function. This is the description, right? So there's something called"
    },
    {
      "Time_Start": 1694.3600000000001,
      "Time_End": 1700.2,
      "Text": " the service control manager on like every computer has it. And we're able to establish a connection"
    },
    {
      "Time_Start": 1700.2,
      "Time_End": 1705.72,
      "Text": " to it using this function. This is the syntax of how you would use it, right? So the way that you"
    },
    {
      "Time_Start": 1705.72,
      "Time_End": 1709.8000000000002,
      "Text": " look at this is this is the kind of the output, right? Which is a handle. This is the name of"
    },
    {
      "Time_Start": 1709.8000000000002,
      "Time_End": 1714.44,
      "Text": " the function. And each of these are the parameters. And so for each parameter, there's a parameter"
    },
    {
      "Time_Start": 1714.44,
      "Time_End": 1719.56,
      "Text": " type, which is, in this case, a pointer to a string. And then this is the actual parameter"
    },
    {
      "Time_Start": 1719.56,
      "Time_End": 1724.1200000000001,
      "Text": " name, right? So the machine name, the database name, and the desired access. And so you might"
    },
    {
      "Time_Start": 1724.1200000000001,
      "Time_End": 1728.52,
      "Text": " be like, okay, well, I don't know what desired access is, which is a DWORD or 32-bit unsigned"
    },
    {
      "Time_Start": 1728.52,
      "Time_End": 1733.72,
      "Text": " integer. And so we could come down here to the parameters section, and we can actually read"
    },
    {
      "Time_Start": 1733.72,
      "Time_End": 1739.0,
      "Text": " what's going on here. And it's like, it tells us, hey, you have this parameter called DW desired"
    },
    {
      "Time_Start": 1739.0,
      "Time_End": 1743.56,
      "Text": " access. Well, this is the access to the service control manager that you're requesting. So when"
    },
    {
      "Time_Start": 1743.56,
      "Time_End": 1748.76,
      "Text": " you generally, when you request a handle, you have to tell it what you intend to do with that"
    },
    {
      "Time_Start": 1748.76,
      "Time_End": 1754.28,
      "Text": " handle. And that's how, for instance, for files, if you want to read the contents of a file,"
    },
    {
      "Time_Start": 1754.28,
      "Time_End": 1758.52,
      "Text": " what's happening underneath the hood is you're requesting a handle to that file. And you say,"
    },
    {
      "Time_Start": 1758.52,
      "Time_End": 1763.56,
      "Text": " I want to read that file. And then it provides you a handle. And that handle gets checked for"
    },
    {
      "Time_Start": 1763.56,
      "Time_End": 1769.6399999999999,
      "Text": " whether or not your user account or your identity is allowed to read that file. And so it says,"
    },
    {
      "Time_Start": 1769.64,
      "Time_End": 1774.3600000000001,
      "Text": " for the list of access rights, go ahead and see service security and access rights, which is"
    },
    {
      "Time_Start": 1774.3600000000001,
      "Time_End": 1779.48,
      "Text": " another page. And these are the types of things that we could do with this. So we can ask to"
    },
    {
      "Time_Start": 1779.48,
      "Time_End": 1784.68,
      "Text": " create a service. We could ask to connect to the database. We could ask to enumerate a service,"
    },
    {
      "Time_Start": 1786.5200000000002,
      "Time_End": 1790.0400000000002,
      "Text": " lock the database. I'm not exactly sure what that does, but maybe if we wanted to know,"
    },
    {
      "Time_Start": 1790.0400000000002,
      "Time_End": 1794.68,
      "Text": " we could look it up a little bit further. We can modify the boot config. We could also query the"
    },
    {
      "Time_Start": 1794.68,
      "Time_End": 1798.8400000000001,
      "Text": " lock status. So those are kind of the options that you have when you're interacting with the"
    },
    {
      "Time_Start": 1798.8400000000001,
      "Time_End": 1805.5600000000002,
      "Text": " service control manager. So if we go back, we can see a couple things. So we see, again,"
    },
    {
      "Time_Start": 1806.2800000000002,
      "Time_End": 1811.4800000000002,
      "Text": " that they're passing in the parameters here. And the first parameter is null. The second parameter"
    },
    {
      "Time_Start": 1811.4800000000002,
      "Time_End": 1819.0000000000002,
      "Text": " is null. And then they pass in scManagerConnect and scManagerCreateService. So that aligns here."
    },
    {
      "Time_Start": 1819.0000000000002,
      "Time_End": 1823.88,
      "Text": " So we have scManagerConnect and scManagerCreateService. And so we know that they're"
    },
    {
      "Time_Start": 1823.88,
      "Time_End": 1829.48,
      "Text": " passing in a value of 3. And that's what's intended. So they're intending to connect to"
    },
    {
      "Time_Start": 1829.48,
      "Time_End": 1833.4,
      "Text": " the service control manager. And then they're intending to create a service as part of this"
    },
    {
      "Time_Start": 1834.1200000000001,
      "Time_End": 1842.2800000000002,
      "Text": " functionality. So again, this function is built into PowerShell. It's not malicious in and of"
    },
    {
      "Time_Start": 1842.2800000000002,
      "Time_End": 1846.3600000000001,
      "Text": " itself. But it could be used to perform malicious activity. And so what we're trying to do is kind"
    },
    {
      "Time_Start": 1846.3600000000001,
      "Time_End": 1853.64,
      "Text": " of uncover how it works so we could potentially identify other implementations that are trying to"
    },
    {
      "Time_Start": 1854.0400000000002,
      "Time_End": 1861.4,
      "Text": " do this as a third party. And as we go through, it's outputting this into this variable called"
    },
    {
      "Time_Start": 1861.4,
      "Time_End": 1867.0800000000002,
      "Text": " hscManager. And so now what we might do is we might go and look for hscManager."
    },
    {
      "Time_Start": 1869.48,
      "Time_End": 1873.8000000000002,
      "Text": " And we see that they call this function called createServiceW. And they pass in a bunch of"
    },
    {
      "Time_Start": 1873.8000000000002,
      "Time_End": 1878.68,
      "Text": " information here. And for instance, remember, we had parameters at the beginning. We had a"
    },
    {
      "Time_Start": 1878.68,
      "Time_End": 1882.68,
      "Text": " parameter called name. We had a parameter called display name. We had a parameter called binary"
    },
    {
      "Time_Start": 1882.68,
      "Time_End": 1887.88,
      "Text": " path name, so on and so forth. So we see that those are being used in this call to createServiceW."
    },
    {
      "Time_Start": 1887.88,
      "Time_End": 1892.68,
      "Text": " So those are variables that you could pass into new service, the PowerShell cmdlet. And they will"
    },
    {
      "Time_Start": 1892.68,
      "Time_End": 1899.16,
      "Text": " then be passed down to this createServiceW function. And what that does is that creates a"
    },
    {
      "Time_Start": 1899.16,
      "Time_End": 1904.04,
      "Text": " service object and adds it to the specified service control manager database. So again,"
    },
    {
      "Time_Start": 1905.16,
      "Time_End": 1910.44,
      "Text": " you pass in the first parameter is the hscManager, so the handle to the service control manager."
    },
    {
      "Time_Start": 1910.44,
      "Time_End": 1915.64,
      "Text": " And it says you must have hscManager createServiceAccessWrite. So that's"
    },
    {
      "Time_Start": 1915.64,
      "Time_End": 1920.2,
      "Text": " something to keep in mind. We saw that in OpenSCManager that they requested this access"
    },
    {
      "Time_Start": 1920.2,
      "Time_End": 1923.72,
      "Text": " write. And so in order to create a service, you must have that. That's what the documentation"
    },
    {
      "Time_Start": 1923.72,
      "Time_End": 1933.0,
      "Text": " tells us. And then you pass in a bunch of additional information. Let me get back to the slides."
    },
    {
      "Time_Start": 1933.56,
      "Time_End": 1938.44,
      "Text": " All right. So just to kind of review, and this is mostly meant if you're wanting to go back and"
    },
    {
      "Time_Start": 1938.44,
      "Time_End": 1944.6,
      "Text": " like kind of look through things. But again, we went to the PowerShell GitHub repo. And then we"
    },
    {
      "Time_Start": 1944.6,
      "Time_End": 1952.04,
      "Text": " searched for new service. We found that there was a source code file called service.cs, which had"
    },
    {
      "Time_Start": 1952.04,
      "Time_End": 1956.84,
      "Text": " information about new service. We went and looked at it. We saw that they were calling openscManagerW."
    },
    {
      "Time_Start": 1956.8400000000001,
      "Time_End": 1960.6000000000001,
      "Text": " We went and opened up that file. And so we started to look at kind of what's going on here."
    },
    {
      "Time_Start": 1960.6000000000001,
      "Time_End": 1965.64,
      "Text": " And remember, I had openscManagerA opened up originally and then switched over. So the"
    },
    {
      "Time_Start": 1965.64,
      "Time_End": 1971.16,
      "Text": " difference is, is that openscManagerA, the A represents ASCII strings and the W represents"
    },
    {
      "Time_Start": 1971.16,
      "Time_End": 1976.2800000000002,
      "Text": " wide strings. So if you're trying to use, you know, Unicode characters, you would want to use"
    },
    {
      "Time_Start": 1976.2800000000002,
      "Time_End": 1981.5600000000002,
      "Text": " openscManagerW. If you're wanting to use ASCII characters, you could use or only ASCII characters."
    },
    {
      "Time_Start": 1981.56,
      "Time_End": 1985.72,
      "Text": " Then you could use the A version. This is like a backwards compatibility kind of feature."
    },
    {
      "Time_Start": 1986.6799999999998,
      "Time_End": 1991.96,
      "Text": " But then we looked at the actual function in the documentation. We saw that we kind of talked"
    },
    {
      "Time_Start": 1991.96,
      "Time_End": 1996.28,
      "Text": " about how to read this. So we have the function name, the output type, and then we have a bunch"
    },
    {
      "Time_Start": 1996.28,
      "Time_End": 2001.08,
      "Text": " of parameters. If we want to learn more about the parameters, we can kind of dig into them,"
    },
    {
      "Time_Start": 2001.08,
      "Time_End": 2006.52,
      "Text": " and they specifically tell us what's going on. If you remember, we had a bunch of parameters"
    },
    {
      "Time_Start": 2006.68,
      "Time_End": 2009.56,
      "Text": " dig into them, and they specifically tell us what's going on."
    },
    {
      "Time_Start": 2010.36,
      "Time_End": 2016.52,
      "Text": " If you remember, the first two parameters in the new service for openscManager were null, right?"
    },
    {
      "Time_Start": 2016.52,
      "Time_End": 2022.2,
      "Text": " And so this first parameter represents the machine name, which is if you want to connect to the"
    },
    {
      "Time_Start": 2023.08,
      "Time_End": 2028.12,
      "Text": " service control manager on a remote system, meaning that you want to enumerate or create"
    },
    {
      "Time_Start": 2028.12,
      "Time_End": 2034.36,
      "Text": " a service on a remote system, then you can specify the name of the system in this lpMachineName"
    },
    {
      "Time_Start": 2034.3600000000001,
      "Time_End": 2038.8400000000001,
      "Text": " variable. Now, it says if the pointer is null or points to an empty string,"
    },
    {
      "Time_Start": 2038.8400000000001,
      "Time_End": 2043.48,
      "Text": " the function will happen on the local computer. And so an interesting aspect of this is that"
    },
    {
      "Time_Start": 2044.2,
      "Time_End": 2050.84,
      "Text": " PowerShell, and I think it's because they didn't have the use case, the desire to allow remote"
    },
    {
      "Time_Start": 2050.84,
      "Time_End": 2058.36,
      "Text": " service functionality, PowerShell hard codes null into new service. And so there's no inherent"
    },
    {
      "Time_Start": 2058.36,
      "Time_End": 2062.92,
      "Text": " capability in new service to be able to create a service or manage services on a remote system."
    },
    {
      "Time_Start": 2063.88,
      "Time_End": 2067.88,
      "Text": " Doesn't mean that that functionality doesn't exist in the Windows operating system. It's just"
    },
    {
      "Time_Start": 2067.88,
      "Time_End": 2070.92,
      "Text": " the PowerShell commandlet new service does not have that capability."
    },
    {
      "Time_Start": 2071.96,
      "Time_End": 2077.08,
      "Text": " Then also you have the database name. And so apparently there could be multiple service"
    },
    {
      "Time_Start": 2077.08,
      "Time_End": 2081.08,
      "Text": " control manager databases. So that's something we might want to look into going forward, right?"
    },
    {
      "Time_Start": 2081.08,
      "Time_End": 2085.56,
      "Text": " I don't know what a database is per se at this point. And so if that's null, then it's just going"
    },
    {
      "Time_Start": 2085.56,
      "Time_End": 2093.48,
      "Text": " to use the active database, which seems to be kind of like the database that's in use currently."
    },
    {
      "Time_Start": 2093.48,
      "Time_End": 2099.16,
      "Text": " But maybe there's secondary or alternate databases that we might be able to adjust or interact with."
    },
    {
      "Time_Start": 2099.7999999999997,
      "Time_End": 2105.08,
      "Text": " And then of course, there's the desired access. And so we dug into that and we looked and found"
    },
    {
      "Time_Start": 2105.08,
      "Time_End": 2111.96,
      "Text": " that they were requesting scManagerConnect and scManagerCreateService. Also, there's the return"
    },
    {
      "Time_Start": 2111.96,
      "Time_End": 2116.04,
      "Text": " value section, which tells you this is what you should expect as the output of calling this"
    },
    {
      "Time_Start": 2116.04,
      "Time_End": 2122.44,
      "Text": " function. Again, the return value is a handle. If the function fails, it's going to return a null"
    },
    {
      "Time_Start": 2122.44,
      "Time_End": 2129.2400000000002,
      "Text": " value. And then lastly, there's some remarks that talk about how this works. Like for instance,"
    },
    {
      "Time_Start": 2129.2400000000002,
      "Time_End": 2133.88,
      "Text": " services and RPC, TCP, that might be something that we're interested in. There's a function"
    },
    {
      "Time_Start": 2133.88,
      "Time_End": 2139.96,
      "Text": " called create service. When you open a handle, you want to always close the handle before you're done"
    },
    {
      "Time_Start": 2139.96,
      "Time_End": 2145.64,
      "Text": " with it. There's also some information about changing the configuration of a service. So you"
    },
    {
      "Time_Start": 2145.64,
      "Time_End": 2149.88,
      "Text": " could, you don't have to always create a service. You could also alter the configuration of a"
    },
    {
      "Time_Start": 2149.88,
      "Time_End": 2154.84,
      "Text": " service, which is something to keep in mind as well. Okay. And then there's also requirements."
    },
    {
      "Time_Start": 2154.84,
      "Time_End": 2160.92,
      "Text": " It's like telling you, okay, this function has been around since Windows XP or Windows Server 2003."
    },
    {
      "Time_Start": 2160.92,
      "Time_End": 2167.32,
      "Text": " And it's found in the library advanced API 32.dll. Right. And so that's something to keep in mind as"
    },
    {
      "Time_Start": 2167.8,
      "Time_End": 2176.92,
      "Text": " we move forward. Okay. So then we went and looked at create service W. Again, we Googled it, looked"
    },
    {
      "Time_Start": 2176.92,
      "Time_End": 2180.6800000000003,
      "Text": " it up, found the function, kind of did the same thing. Right. And so now we're kind of building,"
    },
    {
      "Time_Start": 2180.6800000000003,
      "Time_End": 2185.6400000000003,
      "Text": " we peeled back a layer of abstraction. Right. So we have this tool, which is PowerShell's new"
    },
    {
      "Time_Start": 2185.6400000000003,
      "Time_End": 2190.92,
      "Text": " service commandlet. And then we ultimately dug in and found the Windows API functions that are"
    },
    {
      "Time_Start": 2190.92,
      "Time_End": 2196.76,
      "Text": " being used by new service. Now the logical kind of like next step would be, we knew about sc.exe"
    },
    {
      "Time_Start": 2196.76,
      "Time_End": 2202.76,
      "Text": " being used to create services. The question that we might ask is, does sc.exe use these same"
    },
    {
      "Time_Start": 2202.76,
      "Time_End": 2208.2000000000003,
      "Text": " functions to accomplish the task? Right. And if so, that means that we have kind of a point at"
    },
    {
      "Time_Start": 2208.2000000000003,
      "Time_End": 2213.5600000000004,
      "Text": " which, you know, we got some, some parity. Right. And so like we could, we could create a detection"
    },
    {
      "Time_Start": 2213.5600000000004,
      "Time_End": 2219.1600000000003,
      "Text": " that looks for new service or sc.exe, or we create a detection that looks for the use of the create"
    },
    {
      "Time_Start": 2219.1600000000003,
      "Time_End": 2225.8,
      "Text": " service API function, for instance. Okay. And so at this point, we have some, we kind of update"
    },
    {
      "Time_Start": 2225.8,
      "Time_End": 2229.4,
      "Text": " our questions. And this is kind of the, this is like one of the big things when we're doing this"
    },
    {
      "Time_Start": 2229.4,
      "Time_End": 2233.6400000000003,
      "Text": " research. It's like, let's read the things that are readily available to us. So for instance,"
    },
    {
      "Time_Start": 2233.6400000000003,
      "Time_End": 2238.28,
      "Text": " start with the MITRE ATT&CK page. And as you're reading about that, if you have any ambiguity at"
    },
    {
      "Time_Start": 2238.28,
      "Time_End": 2242.52,
      "Text": " all, create a question around that. Right. And so it's like, what are some common utilities to"
    },
    {
      "Time_Start": 2243.0800000000004,
      "Time_End": 2249.8,
      "Text": " create or to install a service? Well, new service is one. We read about something MITRE ATT&CK was"
    },
    {
      "Time_Start": 2249.8,
      "Time_End": 2253.2400000000002,
      "Text": " telling us that we should look at registry monitoring or like the Windows registry."
    },
    {
      "Time_Start": 2253.2400000000002,
      "Time_End": 2258.0400000000004,
      "Text": " Why do we need to do that for service creation? Then we read about two new things, right? So what"
    },
    {
      "Time_Start": 2258.0400000000004,
      "Time_End": 2262.92,
      "Text": " is the service control manager? And what is the service control manager database? And currently,"
    },
    {
      "Time_Start": 2262.92,
      "Time_End": 2268.2000000000003,
      "Text": " we don't know about that. So those might be the next things that I want to look into. Okay. And so"
    },
    {
      "Time_Start": 2269.5600000000004,
      "Time_End": 2273.5600000000004,
      "Text": " I just Googled, Googled this again. And so what is the service control manager? Well,"
    },
    {
      "Time_Start": 2273.5600000000004,
      "Time_End": 2279.88,
      "Text": " it's something that started at boot and it, it's a RPC server that manages service configuration."
    },
    {
      "Time_Start": 2279.88,
      "Time_End": 2284.12,
      "Text": " You could click on that and go in and dig into it a little bit more. But then I also wanted to"
    },
    {
      "Time_Start": 2284.12,
      "Time_End": 2290.12,
      "Text": " look at, I saw that there was some RPC. So I Googled that and I see that there's an RPC,"
    },
    {
      "Time_Start": 2290.12,
      "Time_End": 2297.56,
      "Text": " some RPC documentation. You may remember that the open SC manager documentation described that there"
    },
    {
      "Time_Start": 2297.56,
      "Time_End": 2304.12,
      "Text": " was a services and RPC slash TCP page that we might want to go look at. But also there's this"
    },
    {
      "Time_Start": 2304.6800000000003,
      "Time_End": 2309.2400000000002,
      "Text": " RPC protocol called service control manager remote protocol. And that might be something"
    },
    {
      "Time_Start": 2309.2400000000002,
      "Time_End": 2315.8,
      "Text": " that we want to dig into a little bit later. Okay. And so yeah, I guess we're digging into"
    },
    {
      "Time_Start": 2315.8,
      "Time_End": 2320.6000000000004,
      "Text": " that now. And so the over there's an overview section, right? Which tells you kind of what's"
    },
    {
      "Time_Start": 2320.6000000000004,
      "Time_End": 2325.96,
      "Text": " going on. Hey, there's a client server protocol that's used to manage services on remote, remote"
    },
    {
      "Time_Start": 2325.96,
      "Time_End": 2333.4,
      "Text": " systems. And so remember open SC manager allows you to specify a remote system to open the manager,"
    },
    {
      "Time_Start": 2333.4,
      "Time_End": 2340.6800000000003,
      "Text": " the handle. And so that might be happening over RPC for instance. But one thing that we could"
    },
    {
      "Time_Start": 2340.6800000000003,
      "Time_End": 2345.88,
      "Text": " always look at is the standards assignment section down here, 1.9. And that tells us that"
    },
    {
      "Time_Start": 2345.88,
      "Time_End": 2354.2000000000003,
      "Text": " this actually happens via a named pipe, which is a pipe SVC CTL, right? And so that may be"
    },
    {
      "Time_Start": 2354.2000000000003,
      "Time_End": 2359.88,
      "Text": " interesting information that we want to add, right? So there's an RPC interface ID, which"
    },
    {
      "Time_Start": 2359.88,
      "Time_End": 2365.4,
      "Text": " represents the service control manager remote protocol uniquely, but there's also a named"
    },
    {
      "Time_Start": 2365.4,
      "Time_End": 2371.4,
      "Text": " pipe that's used as part of this. And so we're kind of building out our overall information,"
    },
    {
      "Time_Start": 2371.4,
      "Time_End": 2376.76,
      "Text": " right? So, hey, you call open SC manager, open SC manager potentially interacts with this RPC"
    },
    {
      "Time_Start": 2376.76,
      "Time_End": 2382.44,
      "Text": " interface, which then sends a request over this name pipe SVC CTL, right? And so it's like,"
    },
    {
      "Time_Start": 2382.44,
      "Time_End": 2387.7200000000003,
      "Text": " we're kind of narrowing in our focus on kind of the underlying functionality. And so the idea might be"
    },
    {
      "Time_Start": 2388.6800000000003,
      "Time_End": 2394.2000000000003,
      "Text": " an attacker could basically, they could call new service or they could write their own utility that"
    },
    {
      "Time_Start": 2394.2000000000003,
      "Time_End": 2398.1200000000003,
      "Text": " calls open SC manager and create service, right? So if you're only detecting on new service,"
    },
    {
      "Time_Start": 2398.1200000000003,
      "Time_End": 2403.5600000000004,
      "Text": " you're going to miss everything that's unique that calls open SC manager and create service."
    },
    {
      "Time_Start": 2403.5600000000004,
      "Time_End": 2408.44,
      "Text": " And it's like, okay, well, if I'm only looking at great service and open SC manager,"
    },
    {
      "Time_Start": 2408.44,
      "Time_End": 2412.44,
      "Text": " then I'm going to potentially miss anything that doesn't call these. What if somebody makes like"
    },
    {
      "Time_Start": 2413.4,
      "Time_End": 2420.36,
      "Text": " a raw RPC? So there's a tool called impact that allows you to send raw RPC requests. And so you"
    },
    {
      "Time_Start": 2420.36,
      "Time_End": 2425.08,
      "Text": " don't necessarily have to call the API function. Instead, you just send like a network request"
    },
    {
      "Time_Start": 2425.08,
      "Time_End": 2429.48,
      "Text": " over the name pipe, and it's going to create a service for you. And so if somebody does that,"
    },
    {
      "Time_Start": 2429.48,
      "Time_End": 2434.44,
      "Text": " and you're only monitoring at this layer, you're screwed, right? And so that's why we want to"
    },
    {
      "Time_Start": 2434.44,
      "Time_End": 2440.12,
      "Text": " understand all of these, right? And so a good approach would probably consider detections at"
    },
    {
      "Time_Start": 2440.12,
      "Time_End": 2445.7999999999997,
      "Text": " each of these layers, right? Okay. And so as we're looking through this, we know that there's"
    },
    {
      "Time_Start": 2446.3599999999997,
      "Time_End": 2450.92,
      "Text": " RPC over name pipe for the service control manager, but we still don't know what this"
    },
    {
      "Time_Start": 2450.92,
      "Time_End": 2456.2799999999997,
      "Text": " service control manager databases. And so again, we Google that and Microsoft comes to the"
    },
    {
      "Time_Start": 2456.2799999999997,
      "Time_End": 2460.52,
      "Text": " comes to the rescue with an actual document called the database of installed services."
    },
    {
      "Time_Start": 2461.08,
      "Time_End": 2466.92,
      "Text": " And so we looked this up, actually showed this in my talk earlier today. But they they're saying,"
    },
    {
      "Time_Start": 2466.92,
      "Time_End": 2473.4,
      "Text": " hey, the SCM maintains a database of installed services in the registry. The reason it does this"
    },
    {
      "Time_Start": 2473.4,
      "Time_End": 2479.64,
      "Text": " is the registry is a great place to store machine configuration, because register, because services"
    },
    {
      "Time_Start": 2479.64,
      "Time_End": 2484.92,
      "Text": " are supposed to survive reboots and like be consistent, then the registry is a good place"
    },
    {
      "Time_Start": 2484.92,
      "Time_End": 2489.64,
      "Text": " to store that information. And the place where it stores it is in the local machine hive,"
    },
    {
      "Time_Start": 2490.84,
      "Time_End": 2496.76,
      "Text": " or local machine system hive, current control set services. And so we might look into that."
    },
    {
      "Time_Start": 2496.92,
      "Time_End": 2502.76,
      "Text": " Right. And so now we know that there's this registry key that's being created. And so when"
    },
    {
      "Time_Start": 2502.76,
      "Time_End": 2507.08,
      "Text": " MITRE tells us, hey, you should monitor the registry, maybe you should monitor specifically"
    },
    {
      "Time_Start": 2507.64,
      "Time_End": 2514.92,
      "Text": " this registry key, right? Now, at this point, we've kind of answered most of our questions,"
    },
    {
      "Time_Start": 2514.92,
      "Time_End": 2518.84,
      "Text": " right? So we have, what are common utilities? Well, new service is one of them, we're looking"
    },
    {
      "Time_Start": 2518.84,
      "Time_End": 2522.6,
      "Text": " into that SC manager, sc.exe might be something else that we're interested in."
    },
    {
      "Time_Start": 2523.08,
      "Time_End": 2529.64,
      "Text": " Why should we monitor the registry for service creation? Well, the SCM or service control"
    },
    {
      "Time_Start": 2529.64,
      "Time_End": 2534.6,
      "Text": " manager maintains a database of installed services in the registry. What is the service control"
    },
    {
      "Time_Start": 2534.6,
      "Time_End": 2540.68,
      "Text": " manager? Well, it's a service that supports RPC, for remote service management, potentially local"
    },
    {
      "Time_Start": 2540.68,
      "Time_End": 2545.24,
      "Text": " service management as well. And then what is the service control database? Well, the service"
    },
    {
      "Time_Start": 2545.24,
      "Time_End": 2551.0,
      "Text": " control database contains all the installed services and it resides in the registry. Okay."
    },
    {
      "Time_Start": 2551.0,
      "Time_End": 2556.28,
      "Text": " And then lastly, we have a question about network, right? So we talked about the idea,"
    },
    {
      "Time_Start": 2556.28,
      "Time_End": 2561.48,
      "Text": " okay, I could call new service, I can call, I could create my own utility that calls"
    },
    {
      "Time_Start": 2562.04,
      "Time_End": 2568.12,
      "Text": " create service or open SC manager and create service, the API functions, I can bypass that by"
    },
    {
      "Time_Start": 2568.12,
      "Time_End": 2575.72,
      "Text": " creating my own RPC client, right? Like impact it, for example, or I could just do, you know,"
    },
    {
      "Time_Start": 2575.72,
      "Time_End": 2580.76,
      "Text": " the raw network requests potentially, right? So like, I don't even have to interact with RPC"
    },
    {
      "Time_Start": 2581.0800000000004,
      "Time_End": 2583.8,
      "Text": " if there's like a network protocol. So a good example of this would be,"
    },
    {
      "Time_Start": 2584.6000000000004,
      "Time_End": 2589.8,
      "Text": " Will Schroeder has a tool called Rubius, which makes raw Kerberos requests. And so it doesn't"
    },
    {
      "Time_Start": 2589.8,
      "Time_End": 2594.2000000000003,
      "Text": " even interact in the way that you necessarily would expect it. Like, it doesn't use the API"
    },
    {
      "Time_Start": 2594.2000000000003,
      "Time_End": 2599.7200000000003,
      "Text": " or anything like that. He just literally hand crafts the network packet that needs to request"
    },
    {
      "Time_Start": 2599.7200000000003,
      "Time_End": 2604.6000000000004,
      "Text": " like a Kerberos ticket and then sends it off on his own, right? And so that's kind of the next"
    },
    {
      "Time_Start": 2604.6000000000004,
      "Time_End": 2609.0,
      "Text": " layer of things that we should consider. So like, is there a port or a protocol that's being used?"
    },
    {
      "Time_Start": 2609.8,
      "Time_End": 2614.68,
      "Text": " Is network connectivity a thing we should even be worried about in this case? What specific"
    },
    {
      "Time_Start": 2614.68,
      "Time_End": 2620.04,
      "Text": " details about the protocol can be used to differentiate this from legitimate activity?"
    },
    {
      "Time_Start": 2620.04,
      "Time_End": 2628.04,
      "Text": " So in the Rubius example, if I'm doing, requesting a Kerberos ticket, generally that request flows"
    },
    {
      "Time_Start": 2628.04,
      "Time_End": 2634.04,
      "Text": " through LSAS, right? And so LSAS is the process that generally speaking makes Kerberos requests."
    },
    {
      "Time_Start": 2634.6,
      "Time_End": 2641.56,
      "Text": " But if I use Rubius and I just run it as Rubius.exe, now Rubius.exe is making a network request"
    },
    {
      "Time_Start": 2642.2,
      "Time_End": 2645.88,
      "Text": " for Kerberos, right? And so maybe what I might do is create a rule that says,"
    },
    {
      "Time_Start": 2646.68,
      "Time_End": 2652.36,
      "Text": " I want to be aware of every time that somebody talks over port 88 to the domain controller,"
    },
    {
      "Time_Start": 2652.36,
      "Time_End": 2657.8,
      "Text": " and the process is not LSAS.exe, because that would be indicative of like a third party tool"
    },
    {
      "Time_Start": 2657.8,
      "Time_End": 2666.2000000000003,
      "Text": " that's implementing Kerberos requests potentially. Okay. So now, unfortunately,"
    },
    {
      "Time_Start": 2666.92,
      "Time_End": 2674.04,
      "Text": " we do have the named pipe in the context of service creation, but we don't have like a raw"
    },
    {
      "Time_Start": 2675.1600000000003,
      "Time_End": 2681.1600000000003,
      "Text": " TCP socket that's making a request. And so that network is not relevant in the context of this"
    },
    {
      "Time_Start": 2681.1600000000003,
      "Time_End": 2687.1600000000003,
      "Text": " particular use case. But now we've kind of like done a really rough and tumble process of coming"
    },
    {
      "Time_Start": 2687.16,
      "Time_End": 2692.2,
      "Text": " up with, you know, what the abstraction layers look like. But we want to go through and actually"
    },
    {
      "Time_Start": 2692.2,
      "Time_End": 2697.96,
      "Text": " like verify that everything that we've read. So we've done this all by reading Microsoft"
    },
    {
      "Time_Start": 2697.96,
      "Time_End": 2703.24,
      "Text": " documentation. And so if I had a dollar for every time that the documentation didn't line up with"
    },
    {
      "Time_Start": 2703.24,
      "Time_End": 2707.08,
      "Text": " what was actually happening, I'd be pretty rich. And so we want to go through and actually"
    },
    {
      "Time_Start": 2707.8799999999997,
      "Time_End": 2713.7999999999997,
      "Text": " validate or verify that what we read is actually true. Okay. And so what we might start off with"
    },
    {
      "Time_Start": 2713.8,
      "Time_End": 2718.84,
      "Text": " is the Windows API functions, right, and actually go and validate that new services,"
    },
    {
      "Time_Start": 2718.84,
      "Time_End": 2723.8,
      "Text": " in fact, following those Windows API functions. And so at this point, I'll pass it over to Johnny"
    },
    {
      "Time_Start": 2723.8,
      "Time_End": 2730.36,
      "Text": " to go ahead and kind of walk through this API monitor lab. It's important to note that before"
    },
    {
      "Time_Start": 2730.36,
      "Time_End": 2735.7200000000003,
      "Text": " I pass it over, again, at the beginning of the presentation, we shared a GitHub pages,"
    },
    {
      "Time_Start": 2736.44,
      "Time_End": 2741.48,
      "Text": " wiki page that had these had these labs like the lab instructions on them. And so"
    },
    {
      "Time_Start": 2742.12,
      "Time_End": 2746.04,
      "Text": " after this workshop, if you want to go back and check that out, that'll be available"
    },
    {
      "Time_Start": 2746.04,
      "Time_End": 2751.2400000000002,
      "Text": " kind of perpetually. So, Johnny, I'll go ahead and stop sharing and let you take over, buddy."
    },
    {
      "Time_Start": 2752.04,
      "Time_End": 2758.6,
      "Text": " Thanks, man. How does that look, Jared? And Luke? Okay."
    },
    {
      "Time_Start": 2759.2400000000002,
      "Time_End": 2759.8,
      "Text": " Looking good."
    },
    {
      "Time_Start": 2760.52,
      "Time_End": 2765.56,
      "Text": " Awesome. All right, guys. So we're going to walk through kind of the analysis process that we'd"
    },
    {
      "Time_Start": 2765.56,
      "Time_End": 2771.32,
      "Text": " utilize in API monitor. If you've never utilized this tool, it's very nice for dynamic analysis."
    },
    {
      "Time_Start": 2771.32,
      "Time_End": 2778.04,
      "Text": " So what we are going to want to do is open up API monitor. And the first thing we have to do is"
    },
    {
      "Time_Start": 2778.04,
      "Time_End": 2783.88,
      "Text": " enable monitoring. Once this is possible, on the left-hand side, you see a couple different"
    },
    {
      "Time_Start": 2783.88,
      "Time_End": 2789.6400000000003,
      "Text": " options, one of which is the processes running on the system. And then also, you can see the"
    },
    {
      "Time_Start": 2789.6400000000003,
      "Time_End": 2795.8,
      "Text": " modules by which we can go and start to collect and monitor. So once we've done that, we want to"
    },
    {
      "Time_Start": 2796.6000000000004,
      "Time_End": 2801.1600000000003,
      "Text": " kind of capture in this specific example, we're going to be looking at new service still."
    },
    {
      "Time_Start": 2801.96,
      "Time_End": 2805.8,
      "Text": " So we want to go to our PowerShell window. We want to pull what the process ID is and just go"
    },
    {
      "Time_Start": 2805.8,
      "Time_End": 2810.36,
      "Text": " ahead and find that inside of the monitor. And as you can see down here on the left,"
    },
    {
      "Time_Start": 2811.1600000000003,
      "Time_End": 2816.92,
      "Text": " this aligns with our PowerShell PID right here. But we're not going to monitor quite yet,"
    },
    {
      "Time_Start": 2816.92,
      "Time_End": 2824.6800000000003,
      "Text": " because one thing to note about API monitor is you have to specify the module or the API sets"
    },
    {
      "Time_Start": 2824.68,
      "Time_End": 2829.7999999999997,
      "Text": " that you want to start collecting before you start capturing that process. Otherwise,"
    },
    {
      "Time_Start": 2829.7999999999997,
      "Time_End": 2834.6,
      "Text": " it just doesn't work. So that's what we're going to do. We're going to go into system services"
    },
    {
      "Time_Start": 2834.6,
      "Time_End": 2840.12,
      "Text": " on the modules. And again, like Jared said, if in the future, you want to walk through this process,"
    },
    {
      "Time_Start": 2840.12,
      "Time_End": 2845.16,
      "Text": " we do have this laid out very well. In his GitHub pages, we created some labs for the students."
    },
    {
      "Time_Start": 2845.96,
      "Time_End": 2853.16,
      "Text": " Right? So we're going to go and go ahead and start collecting the ADV API 32.dll. This was shown"
    },
    {
      "Time_Start": 2854.12,
      "Time_End": 2858.2799999999997,
      "Text": " earlier when Jared was walking through those APIs. So we're going to go ahead and start"
    },
    {
      "Time_Start": 2858.2799999999997,
      "Time_End": 2864.3599999999997,
      "Text": " collecting those. That way we can see any APIs that correlate with service creation specifically."
    },
    {
      "Time_Start": 2866.2,
      "Time_End": 2870.2,
      "Text": " Okay? And then you're going to go ahead and start monitoring the PowerShell process."
    },
    {
      "Time_Start": 2870.2,
      "Time_End": 2874.2799999999997,
      "Text": " And once this is done, you should see on the right-hand side underneath summary,"
    },
    {
      "Time_Start": 2875.0,
      "Time_End": 2879.56,
      "Text": " you'll see a lot of APIs start to propagate, depending on the behavior or what you're trying"
    },
    {
      "Time_Start": 2879.64,
      "Time_End": 2884.92,
      "Text": " to collect. Right? And this is showing the monitoring. This is when you know it actually"
    },
    {
      "Time_Start": 2884.92,
      "Time_End": 2890.04,
      "Text": " started monitoring the process. And then we're going to go ahead and create that service. And"
    },
    {
      "Time_Start": 2890.04,
      "Time_End": 2895.08,
      "Text": " here in our example, the service name is going to be abstraction. The binary path is going to be"
    },
    {
      "Time_Start": 2895.08,
      "Time_End": 2901.08,
      "Text": " notepad.exe. And the startup type is going to be automatic. Right? And as soon as this happens,"
    },
    {
      "Time_Start": 2901.08,
      "Time_End": 2908.12,
      "Text": " you can see that the new service PowerShell module or commandlet is going to propagate"
    },
    {
      "Time_Start": 2908.12,
      "Time_End": 2914.44,
      "Text": " different APIs on the right-hand side underneath the summary section. And in here, you can see"
    },
    {
      "Time_Start": 2914.44,
      "Time_End": 2922.92,
      "Text": " different APIs. Open SE manager W, create service W, change service config to W, et cetera. And the"
    },
    {
      "Time_Start": 2922.92,
      "Time_End": 2926.6,
      "Text": " cool thing with API monitor is it'll actually show you the parameters that are being passed through"
    },
    {
      "Time_Start": 2927.64,
      "Time_End": 2932.92,
      "Text": " as well. And the return value, which is really nice to see. Right? And in here, we can go ahead"
    },
    {
      "Time_Start": 2932.92,
      "Time_End": 2938.76,
      "Text": " and see that the open SE manager W is being called. And we can see the return value along"
    },
    {
      "Time_Start": 2938.76,
      "Time_End": 2943.8,
      "Text": " with the different parameters that are being used. And if you go and click on the actual API that"
    },
    {
      "Time_Start": 2943.8,
      "Time_End": 2949.0,
      "Text": " you're wanting to investigate, it'll pop down this parameter section and actually start to show you"
    },
    {
      "Time_Start": 2949.0,
      "Time_End": 2956.2000000000003,
      "Text": " all those different attributes. And we can see the same thing with create service W."
    },
    {
      "Time_Start": 2957.0,
      "Time_End": 2961.4,
      "Text": " And this is really nice to see whether you were learning how to code or you were just learning"
    },
    {
      "Time_Start": 2961.4,
      "Time_End": 2967.48,
      "Text": " in general how all of these different technologies work together. You can start to see because this"
    },
    {
      "Time_Start": 2967.48,
      "Time_End": 2972.28,
      "Text": " will correlate with Microsoft documentation, which the parameters it needs to actually execute or"
    },
    {
      "Time_Start": 2972.28,
      "Time_End": 2981.96,
      "Text": " perform the API effectively. So, in here, inside of the mapping, again, we're looking at new"
    },
    {
      "Time_Start": 2981.96,
      "Time_End": 2988.44,
      "Text": " service. We see we have identified the Windows API. We identified the RPC interface and the name"
    },
    {
      "Time_Start": 2988.44,
      "Time_End": 2995.8,
      "Text": " pipe. Right? And moving forward, now that we saw that create service W was being utilized inside"
    },
    {
      "Time_Start": 2995.8,
      "Time_End": 3000.6,
      "Text": " of new service, we want to start to break down that API. We want to go to Microsoft documentation."
    },
    {
      "Time_Start": 3000.6,
      "Time_End": 3004.52,
      "Text": " Just kind of go ahead and confirm that those parameters that we passed through match up with"
    },
    {
      "Time_Start": 3004.52,
      "Time_End": 3008.76,
      "Text": " Microsoft documentation. Like Jared said, there's been many times that we have come across"
    },
    {
      "Time_Start": 3009.48,
      "Time_End": 3012.52,
      "Text": " Microsoft documentation that doesn't actually correlate with the data that we see in front of us."
    },
    {
      "Time_Start": 3013.24,
      "Time_End": 3019.0,
      "Text": " So, we want to go ahead and make sure just verify our things there. And at the bottom and"
    },
    {
      "Time_Start": 3019.0,
      "Time_End": 3026.36,
      "Text": " underneath requirements, you'll see that the DLL where this API is, quote, unquote, stored is going"
    },
    {
      "Time_Start": 3026.36,
      "Time_End": 3033.0,
      "Text": " to be ADV API 32.DLL. So, the next thing that we're wanting to do is we're going to want to"
    },
    {
      "Time_Start": 3033.0,
      "Time_End": 3040.28,
      "Text": " open up IDA and break down the code inside of there to see if there's any more functions or"
    },
    {
      "Time_Start": 3040.28,
      "Time_End": 3046.84,
      "Text": " anything like that being utilized. Because if you're not if you don't know this, APIs are not"
    },
    {
      "Time_Start": 3046.84,
      "Time_End": 3053.5600000000004,
      "Text": " the lowest level by which a call can be done. A syscall is lowest where it talks to the kernel."
    },
    {
      "Time_Start": 3054.2000000000003,
      "Time_End": 3059.48,
      "Text": " But there's a big gap in between the Win32 API and that syscall that happens. And we want to start"
    },
    {
      "Time_Start": 3059.48,
      "Time_End": 3065.2400000000002,
      "Text": " to collect and identify what those other functions are. Because there's often times where whether"
    },
    {
      "Time_Start": 3065.2400000000002,
      "Time_End": 3071.32,
      "Text": " it's an EDR product or a logging telemetry source, they'll utilize those APIs by hooking on them."
    },
    {
      "Time_Start": 3071.32,
      "Time_End": 3075.88,
      "Text": " And that is a telemetry source that we can use inside of our detection. Because one of the things"
    },
    {
      "Time_Start": 3075.88,
      "Time_End": 3081.0000000000005,
      "Text": " that we want to identify during this abstraction process are pivot points and choke points that we"
    },
    {
      "Time_Start": 3081.0000000000005,
      "Time_End": 3086.76,
      "Text": " can utilize as detection engineers. And identifying these functions or these attributes help us get to"
    },
    {
      "Time_Start": 3086.76,
      "Time_End": 3093.4,
      "Text": " that point. And again, I'm about to move over to the IDA section. This is inside of the labs as"
    },
    {
      "Time_Start": 3093.4,
      "Time_End": 3100.28,
      "Text": " well if you are wanting to dive into that. Okay? So, this is going to be the ADV API export table."
    },
    {
      "Time_Start": 3100.84,
      "Time_End": 3107.8,
      "Text": " And in here we can go ahead and see the create service W, right? And double clicking on that and"
    },
    {
      "Time_Start": 3107.8,
      "Time_End": 3114.12,
      "Text": " doing like a cross reference, we can go ahead and see here we can see the definition of this API."
    },
    {
      "Time_Start": 3114.12,
      "Time_End": 3118.44,
      "Text": " We can see the parameters that it needs to pass through. A couple things I want to point out is"
    },
    {
      "Time_Start": 3118.44,
      "Time_End": 3127.08,
      "Text": " if you're just using a stock version of IDA and trying to open up this DLL, you won't see 90% of"
    },
    {
      "Time_Start": 3127.08,
      "Time_End": 3131.32,
      "Text": " the things that we're showing you here. You need to make sure you're loading the symbols correctly"
    },
    {
      "Time_Start": 3132.36,
      "Time_End": 3136.36,
      "Text": " that are provided by Microsoft. And that will get you to the point where you can see all these"
    },
    {
      "Time_Start": 3136.36,
      "Time_End": 3146.12,
      "Text": " functions in there. Right? So, in breaking this down, we want to try to dig through, see if this"
    },
    {
      "Time_Start": 3146.92,
      "Time_End": 3153.08,
      "Text": " create service W stub is going to call anything else. And in doing so, we can start to go back and"
    },
    {
      "Time_Start": 3153.08,
      "Time_End": 3163.4,
      "Text": " we can see that there is a forwarded export from the API MS win service management DLL. Right? And"
    },
    {
      "Time_Start": 3163.4,
      "Time_End": 3169.24,
      "Text": " so, this is going to be something that this is going to be like where it's stored as a forward"
    },
    {
      "Time_Start": 3169.6400000000003,
      "Time_End": 3178.2000000000003,
      "Text": " export within the API set. And so, we want to go and look at that API set. And in doing so,"
    },
    {
      "Time_Start": 3178.84,
      "Time_End": 3184.76,
      "Text": " at the very bottom inside the documentation, we can see that the schema redirection is going to"
    },
    {
      "Time_Start": 3184.76,
      "Time_End": 3192.2000000000003,
      "Text": " lead us into sechost.dll. Okay? So, now we want to go into sechost.dll and kind of dive into that"
    },
    {
      "Time_Start": 3192.2000000000003,
      "Time_End": 3200.76,
      "Text": " and see where that code kind of leads us. So, inside of sechost.dll in the exports table, again,"
    },
    {
      "Time_Start": 3200.76,
      "Time_End": 3206.84,
      "Text": " we can see create service W. This is going to be where the API is made available to other binaries"
    },
    {
      "Time_Start": 3206.84,
      "Time_End": 3214.0400000000004,
      "Text": " on the host. And so, in diving into this, we want to go and again, we can see the create service W"
    },
    {
      "Time_Start": 3215.0800000000004,
      "Time_End": 3218.5200000000004,
      "Text": " API here. We can see all the parameters, the function definition, et cetera."
    },
    {
      "Time_Start": 3219.0,
      "Time_End": 3223.4,
      "Text": " And this is kind of nice to see, again, because this will correlate directly with"
    },
    {
      "Time_Start": 3223.4,
      "Time_End": 3227.96,
      "Text": " Microsoft documentation. But we're not done yet. We need to still dive deeper. And so,"
    },
    {
      "Time_Start": 3227.96,
      "Time_End": 3233.16,
      "Text": " we need to see where this code is being called, why it's being called. And in doing so,"
    },
    {
      "Time_Start": 3234.2,
      "Time_End": 3241.64,
      "Text": " we can actually see that inside of IDA, if we start to follow the mapping, we see a call"
    },
    {
      "Time_Start": 3241.72,
      "Time_End": 3249.16,
      "Text": " called NDR client call 4. Okay? And this is interesting. And if whenever I first analyzed"
    },
    {
      "Time_Start": 3249.16,
      "Time_End": 3256.2799999999997,
      "Text": " this, I knew nothing about which this was. So, the first thing we want to do here is to"
    },
    {
      "Time_Start": 3256.2799999999997,
      "Time_End": 3261.8799999999997,
      "Text": " Google it and look at the Microsoft documentation. And in doing so, we see a couple different things."
    },
    {
      "Time_Start": 3261.8799999999997,
      "Time_End": 3267.0,
      "Text": " So, it's kind of honestly, I mean, this doesn't really tell you much. Which is kind of sad."
    },
    {
      "Time_Start": 3267.96,
      "Time_End": 3273.4,
      "Text": " This is, I mean, NDR client call 4 may be altered or unavailable. That doesn't really"
    },
    {
      "Time_Start": 3274.2,
      "Time_End": 3281.24,
      "Text": " tell me anything about this. So, now I need to look at the actual syntax of the code and see"
    },
    {
      "Time_Start": 3281.24,
      "Time_End": 3287.08,
      "Text": " and try to pull out different things. And at first view, I see a client call return RPC variable"
    },
    {
      "Time_Start": 3287.08,
      "Time_End": 3292.52,
      "Text": " entry. That's interesting. So, now I have another technology by which this correlates with."
    },
    {
      "Time_Start": 3293.24,
      "Time_End": 3300.92,
      "Text": " So, that's RPC. And then I see a stub descriptor. But before that, I see MIDL stub description."
    },
    {
      "Time_Start": 3301.56,
      "Time_End": 3307.48,
      "Text": " And I don't know what that is. So, now I need to Google that. And then looking at that structure,"
    },
    {
      "Time_Start": 3307.48,
      "Time_End": 3313.64,
      "Text": " that description structure, we can see that it's an MIDL generated structure that contains"
    },
    {
      "Time_Start": 3313.64,
      "Time_End": 3318.52,
      "Text": " information about the interface for the RPC call between the client and server. And inside the"
    },
    {
      "Time_Start": 3318.52,
      "Time_End": 3325.16,
      "Text": " syntax, there's some interesting information, RPC interface information, for example. Which,"
    },
    {
      "Time_Start": 3325.16,
      "Time_End": 3331.0,
      "Text": " as we've noted, by looking at Microsoft documentation, this service creation does"
    },
    {
      "Time_Start": 3331.0,
      "Time_End": 3337.72,
      "Text": " utilize RPC. And so, things are starting to come together by just following this code. So,"
    },
    {
      "Time_Start": 3337.72,
      "Time_End": 3342.36,
      "Text": " this is not only a verification process, but a learning process as we go. Right? Because there's"
    },
    {
      "Time_Start": 3342.36,
      "Time_End": 3347.08,
      "Text": " oftentimes that we might come across either a technology or we might come across code that"
    },
    {
      "Time_Start": 3347.08,
      "Time_End": 3353.08,
      "Text": " where we think we know what's going on. And in reality, we might not. Or we might just learn"
    },
    {
      "Time_Start": 3353.08,
      "Time_End": 3357.08,
      "Text": " different avenues by which things can be done. And that's going to give us additional context."
    },
    {
      "Time_Start": 3357.08,
      "Time_End": 3365.4,
      "Text": " Right? So, the deeper we go, the more valuable that information is to us. So, in seeing this,"
    },
    {
      "Time_Start": 3365.4,
      "Time_End": 3370.84,
      "Text": " now I want to see if I can find this information inside of IDA again. Right? So, I'm going to go"
    },
    {
      "Time_Start": 3370.84,
      "Time_End": 3379.1600000000003,
      "Text": " back to seco.dll. I'm going to look for that RPC interface information. Right? And we're going to"
    },
    {
      "Time_Start": 3379.1600000000003,
      "Time_End": 3386.36,
      "Text": " find this inside that NDR client call for. Right? And in here, a couple things to know is"
    },
    {
      "Time_Start": 3388.6800000000003,
      "Time_End": 3392.92,
      "Text": " they right here, you can see inside of this highlight, you can see open service here,"
    },
    {
      "Time_Start": 3392.92,
      "Time_End": 3398.6800000000003,
      "Text": " start service, and things like that. But then we start to see all these different"
    },
    {
      "Time_Start": 3400.28,
      "Time_End": 3404.44,
      "Text": " all these bytes. Right? And it's like, this is interesting because, I mean, this isn't really"
    },
    {
      "Time_Start": 3404.44,
      "Time_End": 3409.88,
      "Text": " human readable. So, now we need to do something with this. So, we're going to pull these up. And"
    },
    {
      "Time_Start": 3409.88,
      "Time_End": 3419.08,
      "Text": " if you're not familiar with this, the GUID or the UID for RPC interface is typically"
    },
    {
      "Time_Start": 3419.16,
      "Time_End": 3426.68,
      "Text": " 68 or 16 bytes or 128 bits. Right? And so, we're actually going to if you highlight this here,"
    },
    {
      "Time_Start": 3426.68,
      "Time_End": 3429.96,
      "Text": " you'll see that 44 is the first byte that's actually highlighted. We're actually going to"
    },
    {
      "Time_Start": 3429.96,
      "Time_End": 3434.12,
      "Text": " skip the first four bytes because that represents something else completely. And we're going to"
    },
    {
      "Time_Start": 3434.12,
      "Time_End": 3440.36,
      "Text": " start at the 81. Right? So, that's going to be where the UID or GUID can be found. And then we're"
    },
    {
      "Time_Start": 3440.36,
      "Time_End": 3447.16,
      "Text": " going to follow 16 bytes after that. And in doing so, we can then go to PowerShell and perform"
    },
    {
      "Time_Start": 3448.12,
      "Time_End": 3453.24,
      "Text": " this command where it's GUID byte and then those bytes. And then that's going to give us the GUID"
    },
    {
      "Time_Start": 3453.24,
      "Time_End": 3460.3599999999997,
      "Text": " for that RPC interface. And that leads us right back to SCMR inside of Microsoft documentation."
    },
    {
      "Time_Start": 3460.3599999999997,
      "Time_End": 3468.2,
      "Text": " Right? So, now we have verification just by literally running the API monitor, finding that"
    },
    {
      "Time_Start": 3468.2,
      "Time_End": 3475.72,
      "Text": " the create service W, leading that from the ADB API all the way over to Setcoast. Right? And then"
    },
    {
      "Time_Start": 3476.6800000000003,
      "Time_End": 3482.36,
      "Text": " looking inside of the code and now we have the RPC interface and we're back at the SCMR. Right?"
    },
    {
      "Time_Start": 3482.36,
      "Time_End": 3487.8,
      "Text": " So, that is not only about verification and validation, but that is a great learning point"
    },
    {
      "Time_Start": 3487.8,
      "Time_End": 3492.92,
      "Text": " for us because we've almost done a full circle here. But we've verified everything through the"
    },
    {
      "Time_Start": 3492.92,
      "Time_End": 3497.0000000000005,
      "Text": " code. Because the reality is the code isn't going to lie to us. And if we just rely on the"
    },
    {
      "Time_Start": 3497.0000000000005,
      "Time_End": 3504.1200000000003,
      "Text": " documentation purely, humans have flaws. And so, humans can be wrong. But the code's not going to"
    },
    {
      "Time_Start": 3504.12,
      "Time_End": 3509.48,
      "Text": " be wrong. It's going to tell us what's going on. Right? And so, now we can see inside the standard"
    },
    {
      "Time_Start": 3509.48,
      "Time_End": 3516.52,
      "Text": " assignments inside of this SCMR, we can see that that RPC interface does match that and we do have"
    },
    {
      "Time_Start": 3516.52,
      "Time_End": 3524.8399999999997,
      "Text": " that name pipe as well. So, that is going to be the endpoint by which this RPC interface is going"
    },
    {
      "Time_Start": 3524.92,
      "Time_End": 3534.6800000000003,
      "Text": " to communicate over. Right? And then Matt Nelson actually inside of a GitHub gist identified and"
    },
    {
      "Time_Start": 3535.88,
      "Time_End": 3540.92,
      "Text": " printed out a whole bunch of RPC servers and interfaces and the procedures and methods that"
    },
    {
      "Time_Start": 3540.92,
      "Time_End": 3546.36,
      "Text": " go along with them. And if we go inside of there and we utilize that UID and we look for it,"
    },
    {
      "Time_Start": 3547.32,
      "Time_End": 3554.52,
      "Text": " we see that the binary that correlates with that is going to be services.exe, which is going to"
    },
    {
      "Time_Start": 3554.52,
      "Time_End": 3561.32,
      "Text": " wind up being that RPC server or where the server code is actually stored. And then we see that"
    },
    {
      "Time_Start": 3561.32,
      "Time_End": 3570.76,
      "Text": " there's an opnum12 or function12 with R create services W, which looks similar to that API,"
    },
    {
      "Time_Start": 3570.76,
      "Time_End": 3574.76,
      "Text": " but it could be a level deeper. Right? So, let's look into that."
    },
    {
      "Time_Start": 3576.44,
      "Time_End": 3581.8,
      "Text": " And again, if you want to utilize NT object manager, amazing resource by James Foreshaw"
    },
    {
      "Time_Start": 3581.8,
      "Time_End": 3588.28,
      "Text": " that will actually filter out RPC servers, RPC clients, RPC interfaces, et cetera. And here,"
    },
    {
      "Time_Start": 3588.28,
      "Time_End": 3593.96,
      "Text": " we're just going to do a simple command to where we are going to list out the binary services.exe"
    },
    {
      "Time_Start": 3593.96,
      "Time_End": 3600.2000000000003,
      "Text": " and get the RPC server inside of it. And in here, we can verify that interface ID for that SCMR."
    },
    {
      "Time_Start": 3600.2000000000003,
      "Time_End": 3603.1600000000003,
      "Text": " Right? But in here, there's also cool information. Like, you'll see client false. So,"
    },
    {
      "Time_Start": 3603.16,
      "Time_End": 3607.08,
      "Text": " we can know that this is going to be a server for sure. We see the file path,"
    },
    {
      "Time_Start": 3607.8799999999997,
      "Time_End": 3611.56,
      "Text": " and there's just some other cool information in here as well."
    },
    {
      "Time_Start": 3615.56,
      "Time_End": 3622.3599999999997,
      "Text": " So, now we want to dive into services.exe in that exports table. And as you can see,"
    },
    {
      "Time_Start": 3622.3599999999997,
      "Time_End": 3625.96,
      "Text": " we don't see any exports table, especially anything with create service W like we did with"
    },
    {
      "Time_Start": 3625.96,
      "Time_End": 3631.08,
      "Text": " sechost and ADB API. But on the left-hand side, we do have functions. And again, in order to see"
    },
    {
      "Time_Start": 3631.08,
      "Time_End": 3637.96,
      "Text": " these functions, you have to load the symbols. And if you are interested in doing this, I highly"
    },
    {
      "Time_Start": 3637.96,
      "Time_End": 3643.72,
      "Text": " recommend doing it in 32-bit, especially if you've never done this before. 64-bit can get kind of"
    },
    {
      "Time_Start": 3643.72,
      "Time_End": 3651.96,
      "Text": " lost. Or you can get lost in 64-bit pretty easily. Right? So, at the bottom of this on the functions"
    },
    {
      "Time_Start": 3651.96,
      "Time_End": 3658.92,
      "Text": " table, we see our create service A. And we want to go to that and just kind of, like, look at all"
    },
    {
      "Time_Start": 3658.92,
      "Time_End": 3662.36,
      "Text": " those different functions that correlate with create service specifically. So, we're going to"
    },
    {
      "Time_Start": 3662.36,
      "Time_End": 3671.16,
      "Text": " filter on that. And in here, we can see our create service W, SC create service RPC. We can see SC"
    },
    {
      "Time_Start": 3671.16,
      "Time_End": 3677.0,
      "Text": " create service handle. We can see our create service Wow64A. That's going to be the 32-bit"
    },
    {
      "Time_Start": 3677.0,
      "Time_End": 3682.6800000000003,
      "Text": " version of the function, et cetera. All right? And so, now I'm going to want to dive deep into"
    },
    {
      "Time_Start": 3682.6800000000003,
      "Time_End": 3690.6800000000003,
      "Text": " that R create service W and see where that kind of leads me. So, in here, I can start to see,"
    },
    {
      "Time_Start": 3690.6800000000003,
      "Time_End": 3694.28,
      "Text": " again, this is going to be the function definition. This is going to be the parameters by which that"
    },
    {
      "Time_Start": 3694.28,
      "Time_End": 3699.9600000000005,
      "Text": " can be passed through. I mean, this is really good context for me. Because we originally had that"
    },
    {
      "Time_Start": 3699.9600000000005,
      "Time_End": 3704.76,
      "Text": " Win32 API for create service W. But now it looks like this is going to be calling an underlying"
    },
    {
      "Time_Start": 3704.76,
      "Time_End": 3723.88,
      "Text": " method or RPC method being R create service W. So, now we have here we have services.exe. And"
    },
    {
      "Time_Start": 3723.88,
      "Time_End": 3730.6000000000004,
      "Text": " then we're going to also look into that SC create service RPC. Because that's another function that"
    },
    {
      "Time_Start": 3730.6000000000004,
      "Time_End": 3733.96,
      "Text": " is inside of here. And that's going to be just kind of interesting. And we want to dive deep"
    },
    {
      "Time_Start": 3733.96,
      "Time_End": 3740.6,
      "Text": " into these. So, we're going to look at that SC create service. And the next thing I want to see"
    },
    {
      "Time_Start": 3740.6,
      "Time_End": 3746.36,
      "Text": " is where is this where is this function going to lead me to and where is the actual service going"
    },
    {
      "Time_Start": 3746.36,
      "Time_End": 3752.6,
      "Text": " to get logged at? Like, where is the function finally going to lead to a point to where the"
    },
    {
      "Time_Start": 3753.48,
      "Time_End": 3756.76,
      "Text": " service control manager is like, okay, log this service and let's go ahead and start it."
    },
    {
      "Time_Start": 3757.7200000000003,
      "Time_End": 3763.8,
      "Text": " And we can see that inside of here on this SC log service install event, right. And so this is going"
    },
    {
      "Time_Start": 3763.8,
      "Time_End": 3773.4,
      "Text": " to be that SC create service logging. Right, and then we're going to go ahead and look through this"
    },
    {
      "Time_Start": 3773.4,
      "Time_End": 3779.2400000000002,
      "Text": " again. And just this is going to lead us to the SC write start name. And when diving into this,"
    },
    {
      "Time_Start": 3779.2400000000002,
      "Time_End": 3783.6400000000003,
      "Text": " all this is just going to kind of flow together, it's just gonna be one big map. And it's just"
    },
    {
      "Time_Start": 3783.8799999999997,
      "Time_End": 3787.96,
      "Text": " going to validate and verify all those different aspects that we have when creating a service or"
    },
    {
      "Time_Start": 3787.96,
      "Time_End": 3794.6,
      "Text": " looking at these functions. Right. And again, we after looking at that SC write start name,"
    },
    {
      "Time_Start": 3794.6,
      "Time_End": 3802.04,
      "Text": " that's going to lead us to SC reg set value xw. And this is just going to keep going on"
    },
    {
      "Time_Start": 3802.04,
      "Time_End": 3807.7999999999997,
      "Text": " and showing us more and more information about this, right. And what's kind of interesting is"
    },
    {
      "Time_Start": 3807.8,
      "Time_End": 3814.92,
      "Text": " inside of this our SC reg set value xw, there's actually another function call in here to nt set"
    },
    {
      "Time_Start": 3814.92,
      "Time_End": 3824.6800000000003,
      "Text": " value or nt set value key, which is an nt API, which is going to be a Microsoft undocumented"
    },
    {
      "Time_Start": 3824.6800000000003,
      "Time_End": 3831.6400000000003,
      "Text": " quote unquote API, or internal function, right. So I'm going to pass this over to Luke to talk"
    },
    {
      "Time_Start": 3831.6400000000003,
      "Time_End": 3836.28,
      "Text": " about the event tracing for Windows, and how we can kind of take all that information that we just"
    },
    {
      "Time_Start": 3836.28,
      "Time_End": 3841.7200000000003,
      "Text": " looked through and validate that as well. But I actually start to see telemetry based off of that,"
    },
    {
      "Time_Start": 3841.7200000000003,
      "Time_End": 3848.28,
      "Text": " over to you, Luke. All right, if you could just stop sharing real quick, I will take over."
    },
    {
      "Time_Start": 3857.32,
      "Time_End": 3864.36,
      "Text": " Okay, so now, what Johnny has done is basically gone through the equivalent of Windows"
    },
    {
      "Time_Start": 3864.36,
      "Time_End": 3871.0,
      "Text": " documentation that we have for this RPC activity and this service creation activity, right."
    },
    {
      "Time_Start": 3871.0,
      "Time_End": 3876.52,
      "Text": " So we've gone through statically. And we've seen what should be happening when someone creates a"
    },
    {
      "Time_Start": 3876.52,
      "Time_End": 3882.76,
      "Text": " service, and how it should go in the background. But now we kind of want to walk through it in"
    },
    {
      "Time_Start": 3882.76,
      "Time_End": 3888.44,
      "Text": " person, we want to walk through it and actually see live what's happening when we start creating"
    },
    {
      "Time_Start": 3888.44,
      "Time_End": 3893.4,
      "Text": " these services and see if we can validate the assumptions and the information that we've"
    },
    {
      "Time_Start": 3894.04,
      "Time_End": 3903.48,
      "Text": " come across in IDA Pro by digging into this stuff. So what we're going to do is"
    },
    {
      "Time_Start": 3906.52,
      "Time_End": 3911.8,
      "Text": " use event tracing for Windows. So first, we want to level set on ETW and"
    },
    {
      "Time_Start": 3914.6800000000003,
      "Time_End": 3922.44,
      "Text": " and dive into that. So how does the event log in Windows receive events, and you may be aware of"
    },
    {
      "Time_Start": 3922.44,
      "Time_End": 3928.36,
      "Text": " this already, you may not, but it uses something called event tracing for Windows. So each event"
    },
    {
      "Time_Start": 3928.36,
      "Time_End": 3936.84,
      "Text": " log in Windows receives these events from a specific ETW provider. Each ETW provider is"
    },
    {
      "Time_Start": 3936.84,
      "Time_End": 3942.68,
      "Text": " going to be the source of the events, and has an installed manifest that we can view about the"
    },
    {
      "Time_Start": 3942.68,
      "Time_End": 3951.96,
      "Text": " events. So not all of these are designed to be consumed by anything, really, a lot of them are"
    },
    {
      "Time_Start": 3951.96,
      "Time_End": 3957.4,
      "Text": " specifically for debugging, and you can't just shove them into an event log and view them. So"
    },
    {
      "Time_Start": 3957.4,
      "Time_End": 3961.16,
      "Text": " we're going to need more specialized tooling in order to capture those events and see if there's"
    },
    {
      "Time_Start": 3961.16,
      "Time_End": 3967.08,
      "Text": " anything that we can use them for, from either a detection or an investigation perspective."
    },
    {
      "Time_Start": 3971.4,
      "Time_End": 3976.84,
      "Text": " So this is going to enable us to add some context to any current alerting structure that you may"
    },
    {
      "Time_Start": 3976.84,
      "Time_End": 3982.84,
      "Text": " have. If you've ever used Windows Vendor Advanced Threat Protection, it has a miscellaneous event"
    },
    {
      "Time_Start": 3983.4,
      "Time_End": 3989.6400000000003,
      "Text": " area that has a lot of really good kind of niche events in there, and actually these are all"
    },
    {
      "Time_Start": 3989.6400000000003,
      "Time_End": 3995.32,
      "Text": " derived of ETW events, and some of these events are ones that are not designed to be consumed by"
    },
    {
      "Time_Start": 3997.48,
      "Time_End": 4002.92,
      "Text": " by an event log, but since Microsoft implements these, they know how to pull them out and how to"
    },
    {
      "Time_Start": 4003.4,
      "Time_End": 4010.28,
      "Text": " ingest them into ATP to be searched. Unfortunately, they have not made that public for us, so we kind"
    },
    {
      "Time_Start": 4010.28,
      "Time_End": 4019.08,
      "Text": " of have to do it manually on our own. So some examples of this is an ETW provider will actually"
    },
    {
      "Time_Start": 4019.08,
      "Time_End": 4025.48,
      "Text": " log when a process is created in a suspended state, which can be used to show some things such"
    },
    {
      "Time_Start": 4025.48,
      "Time_End": 4030.52,
      "Text": " as a process hollowing, but they don't expose that in a searchable manner in the event log that we"
    },
    {
      "Time_Start": 4030.52,
      "Time_End": 4039.88,
      "Text": " can currently use. There is not a fantastic way to utilize these logs at scale. There are some"
    },
    {
      "Time_Start": 4039.88,
      "Time_End": 4047.72,
      "Text": " tools, there's a Crabs ETW, there's Silk ETW, and they do allow you to push some of the events to a"
    },
    {
      "Time_Start": 4047.72,
      "Time_End": 4053.32,
      "Text": " ELK stack, for instance, and do some analytics and some searching on them. Unfortunately, it has to"
    },
    {
      "Time_Start": 4053.32,
      "Time_End": 4059.88,
      "Text": " be installed per machine. There's not a enterprise level, you know, carbon black switch that you can"
    },
    {
      "Time_Start": 4059.88,
      "Time_End": 4066.2000000000003,
      "Text": " flip on that's going to grab ETW events for you and push them somewhere. So typically,"
    },
    {
      "Time_Start": 4066.2000000000003,
      "Time_End": 4070.12,
      "Text": " these can be implemented in PowerShell, and we're going to show you how to do that."
    },
    {
      "Time_Start": 4070.76,
      "Time_End": 4075.0,
      "Text": " So a lot of times, they're used more for investigation or research than they are for"
    },
    {
      "Time_Start": 4075.0,
      "Time_End": 4080.76,
      "Text": " actual detection, but they can definitely help you if you need a lower level look at something"
    },
    {
      "Time_Start": 4080.76,
      "Time_End": 4085.48,
      "Text": " along the process there. So that's just something to keep in mind moving forward."
    },
    {
      "Time_Start": 4086.04,
      "Time_End": 4090.84,
      "Text": " So event tracing for Windows is a kernel level tracing facility. It's baked into a lot of the"
    },
    {
      "Time_Start": 4090.84,
      "Time_End": 4097.4,
      "Text": " API calls and lower level calls that Windows is actually performing, as Johnny showed previously"
    },
    {
      "Time_Start": 4097.4,
      "Time_End": 4104.52,
      "Text": " in IDA. They allow consumption of events in real time or from a log file, and their intended use"
    },
    {
      "Time_Start": 4104.52,
      "Time_End": 4112.04,
      "Text": " outside of the actual Windows event log is for debugging an application, usually for performance"
    },
    {
      "Time_Start": 4113.0,
      "Time_End": 4118.6,
      "Text": " issues or something like that. These can be enabled and disabled dynamically without"
    },
    {
      "Time_Start": 4118.6,
      "Time_End": 4123.32,
      "Text": " any kind of reboot or application restart. So you can flip them on and off and get"
    },
    {
      "Time_Start": 4124.84,
      "Time_End": 4130.36,
      "Text": " information on the fly. And event tracing for Windows consists of three components. So you"
    },
    {
      "Time_Start": 4130.36,
      "Time_End": 4136.76,
      "Text": " have a controller, which is able to start and stop sessions and enable and disable providers."
    },
    {
      "Time_Start": 4137.400000000001,
      "Time_End": 4141.72,
      "Text": " Excuse me. So providers are going to be the actual thing that's responsible for generating"
    },
    {
      "Time_Start": 4141.72,
      "Time_End": 4149.8,
      "Text": " those events, except they don't necessarily go anywhere unless you have a consumer set up to"
    },
    {
      "Time_Start": 4149.8,
      "Time_End": 4153.96,
      "Text": " receive them. So the events don't get generated and pushed in a log for you to grab. They just"
    },
    {
      "Time_Start": 4153.96,
      "Time_End": 4159.8,
      "Text": " get generated, and they basically get sucked into nothingness if a consumer is not receiving them"
    },
    {
      "Time_Start": 4159.8,
      "Time_End": 4165.4800000000005,
      "Text": " and doing something with those logs. That's a vast generalization, but that's just a quick"
    },
    {
      "Time_Start": 4165.4800000000005,
      "Time_End": 4173.56,
      "Text": " breakdown of the three main components of this. Some examples of controllers that we have access"
    },
    {
      "Time_Start": 4173.56,
      "Time_End": 4180.120000000001,
      "Text": " to are the Logman tool from the command line. You can create and manage trace sessions there."
    },
    {
      "Time_Start": 4180.92,
      "Time_End": 4184.6,
      "Text": " You can also query providers and see what's available on your system, and you can do..."
    },
    {
      "Time_Start": 4188.200000000001,
      "Time_End": 4194.76,
      "Text": " It has a partner tool that you can use to do transformations of different types of"
    },
    {
      "Time_Start": 4195.56,
      "Time_End": 4200.84,
      "Text": " trace sessions. There's the Windows Performance System tool that's GUI-based instead of command"
    },
    {
      "Time_Start": 4200.84,
      "Time_End": 4205.88,
      "Text": " line. It gives roughly the same data that Logman has, and it has a little more."
    },
    {
      "Time_Start": 4207.96,
      "Time_End": 4213.24,
      "Text": " An example you can run on your system, if you have one set up, is Logman query-pts,"
    },
    {
      "Time_Start": 4214.12,
      "Time_End": 4217.88,
      "Text": " and it's going to deliver you the data collection set or the trace name,"
    },
    {
      "Time_Start": 4218.52,
      "Time_End": 4223.400000000001,
      "Text": " type of trace that's running, and then the status of a specific trace session."
    },
    {
      "Time_Start": 4225.4800000000005,
      "Time_End": 4232.2,
      "Text": " Trace sessions subscribe to a provider and usually bind it to a consumer of some kind."
    },
    {
      "Time_Start": 4233.24,
      "Time_End": 4238.04,
      "Text": " If you're using Logman, for example, it subscribes to the provider, delivers the"
    },
    {
      "Time_Start": 4238.92,
      "Time_End": 4244.360000000001,
      "Text": " events to the consumer, which is Logman, and then Logman is going to go ahead and write them to disk"
    },
    {
      "Time_Start": 4244.360000000001,
      "Time_End": 4251.16,
      "Text": " for you to do something with later. Here's an example of what it looks like when you query"
    },
    {
      "Time_Start": 4251.16,
      "Time_End": 4257.88,
      "Text": " the providers on a system. This is going to give you an alphabetical list of every ETW provider,"
    },
    {
      "Time_Start": 4257.88,
      "Time_End": 4263.639999999999,
      "Text": " whether it's going to be able to deliver you formatted events that you can use or not."
    },
    {
      "Time_Start": 4267.16,
      "Time_End": 4273.0,
      "Text": " If we want to investigate some supported provider events, you can do logman.exe"
    },
    {
      "Time_Start": 4273.8,
      "Time_End": 4280.28,
      "Text": " query providers Microsoft Windows PowerShell, and it's going to list all of the supported"
    },
    {
      "Time_Start": 4280.28,
      "Time_End": 4285.32,
      "Text": " keywords and logging levels for the Microsoft Windows PowerShell provider."
    },
    {
      "Time_Start": 4287.16,
      "Time_End": 4291.5599999999995,
      "Text": " And then if you want to dump specific schema information about how those events are broken down,"
    },
    {
      "Time_Start": 4292.28,
      "Time_End": 4300.28,
      "Text": " you can run webtutil, and then give it the name of that provider, and then dump the schema to"
    },
    {
      "Time_Start": 4300.28,
      "Time_End": 4307.88,
      "Text": " an XML file, and you can see that this is the ScriptLock logging event, and it gives you the"
    },
    {
      "Time_Start": 4307.88,
      "Time_End": 4317.96,
      "Text": " actual XML breakdown and schema therein. So, a lot of the built-in tools don't completely parse"
    },
    {
      "Time_Start": 4317.96,
      "Time_End": 4322.6,
      "Text": " out all the ETW manifests and give you all the fields and information that they contain,"
    },
    {
      "Time_Start": 4323.400000000001,
      "Time_End": 4327.88,
      "Text": " so either you have to do that manually, or you can use something like WebExplorer. However,"
    },
    {
      "Time_Start": 4327.88,
      "Time_End": 4333.96,
      "Text": " if I'm not mistaken, it has not been updated in a long time, so it's considered deprecated"
    },
    {
      "Time_Start": 4333.96,
      "Time_End": 4338.28,
      "Text": " at this point. It does still work, I believe, but it's not fully compatible"
    },
    {
      "Time_Start": 4339.56,
      "Time_End": 4347.56,
      "Text": " with all of the ETW manifests that are in Windows 10. Don't quote me on that,"
    },
    {
      "Time_Start": 4348.84,
      "Time_End": 4354.12,
      "Text": " but I believe, based on my research, that that's the case with WebExplorer."
    },
    {
      "Time_Start": 4354.36,
      "Time_End": 4361.08,
      "Text": " So, if an ETW event does not specify a channel, which is typically operational, administration,"
    },
    {
      "Time_Start": 4361.08,
      "Time_End": 4369.48,
      "Text": " or analytic, these logs are not designed to actually be sent to the event log, and they"
    },
    {
      "Time_Start": 4369.48,
      "Time_End": 4375.08,
      "Text": " won't be able to be viewed through that. For example, there is a LDAP client ETW provider,"
    },
    {
      "Time_Start": 4376.04,
      "Time_End": 4381.72,
      "Text": " but it will not give you operational, admin, or analytic. It gives you the"
    },
    {
      "Time_Start": 4382.280000000001,
      "Time_End": 4392.76,
      "Text": " errors, search, and performance, which won't be correctly imported into the event log if you wanted"
    },
    {
      "Time_Start": 4392.76,
      "Time_End": 4400.84,
      "Text": " to view them that way, and they're not logged to an EVTX file, which is the event log version."
    },
    {
      "Time_Start": 4400.84,
      "Time_End": 4408.52,
      "Text": " They're logged to a .ETL file instead, and so they cannot be zoomed and forwarded in that format."
    },
    {
      "Time_Start": 4409.400000000001,
      "Time_End": 4416.52,
      "Text": " However, we can manually investigate some of this stuff, and there's a lot of interesting"
    },
    {
      "Time_Start": 4416.52,
      "Time_End": 4423.160000000001,
      "Text": " information in here. So interesting, in fact, that, like I said, ATP has included it in some"
    },
    {
      "Time_Start": 4423.160000000001,
      "Time_End": 4431.0,
      "Text": " of their miscellaneous logs, which means there's actual actionable detection information within"
    },
    {
      "Time_Start": 4431.0,
      "Time_End": 4437.56,
      "Text": " those logs. Why they haven't made a good way to operationalize this and use it at scale is"
    },
    {
      "Time_Start": 4438.120000000001,
      "Time_End": 4441.64,
      "Text": " beyond me, but we can still do it manually for our research."
    },
    {
      "Time_Start": 4444.52,
      "Time_End": 4449.0,
      "Text": " So what if we don't have a channel for the provider, like I said, but we still want to use it,"
    },
    {
      "Time_Start": 4449.88,
      "Time_End": 4453.4800000000005,
      "Text": " and we want to be able to consume those events, and we want to be able to read the information?"
    },
    {
      "Time_Start": 4454.4400000000005,
      "Time_End": 4459.0,
      "Text": " We can do it, but it's not going to be in real time, meaning they cannot be forwarded"
    },
    {
      "Time_Start": 4459.56,
      "Time_End": 4466.360000000001,
      "Text": " live into the event log as in like Sysmon, right? So Sysmon creates logs, and they go into the"
    },
    {
      "Time_Start": 4466.36,
      "Time_End": 4472.04,
      "Text": " event log in real time. So as soon as you open a process, you can go find your Sysmon event ID one."
    },
    {
      "Time_Start": 4473.0,
      "Time_End": 4479.32,
      "Text": " We can still get them to the event log to view, we just have to do some transformations on them"
    },
    {
      "Time_Start": 4479.32,
      "Time_End": 4485.719999999999,
      "Text": " first. So we would actually manually create a trace session with something like Logman,"
    },
    {
      "Time_Start": 4486.679999999999,
      "Time_End": 4490.679999999999,
      "Text": " and then do our transformations on the file that it creates on disk, and then send them that way."
    },
    {
      "Time_Start": 4491.64,
      "Time_End": 4499.88,
      "Text": " An example of this is the .NET Runtime provider for Windows, we can use that, and we can"
    },
    {
      "Time_Start": 4499.88,
      "Time_End": 4507.16,
      "Text": " transform those events and push them to the event log. So again, a big stressor of all of this is"
    },
    {
      "Time_Start": 4507.72,
      "Time_End": 4515.8,
      "Text": " it's useful for research, it doesn't scale well at all. So we can do this on one system at a time"
    },
    {
      "Time_Start": 4515.8,
      "Time_End": 4521.0,
      "Text": " and view some information. So for research or investigation, adding some context around"
    },
    {
      "Time_Start": 4522.360000000001,
      "Time_End": 4529.0,
      "Text": " an actual detection, it can be done, but this has not been solved on a large scale yet."
    },
    {
      "Time_Start": 4530.52,
      "Time_End": 4534.68,
      "Text": " So here we're going to walk through one of the labs that we have available, which is actually"
    },
    {
      "Time_Start": 4534.68,
      "Time_End": 4541.72,
      "Text": " looking at the RPC logging that corresponds with what Johnny looked at in IDA using Logman."
    },
    {
      "Time_Start": 4542.12,
      "Time_End": 4547.4800000000005,
      "Text": " So step one, we're going to start PowerShell as administrator, hopefully everyone knows how to do"
    },
    {
      "Time_Start": 4547.4800000000005,
      "Time_End": 4553.400000000001,
      "Text": " that. If not, just hit that right click, run as administrator. And then we're going to run that"
    },
    {
      "Time_Start": 4554.04,
      "Time_End": 4560.68,
      "Text": " command that we talked about a second ago, logmanquery-ets, and we can see every trace"
    },
    {
      "Time_Start": 4560.68,
      "Time_End": 4565.56,
      "Text": " that is currently in the running status here. So we've got quite a few for Sysmon,"
    },
    {
      "Time_Start": 4565.64,
      "Time_End": 4571.96,
      "Text": " see we have Sysmon trace, Sysmon operational, we have one at the bottom that's a Sysmon DNS"
    },
    {
      "Time_Start": 4571.96,
      "Time_End": 4578.360000000001,
      "Text": " session. We see our normal system events, the event log dash system trace that's running."
    },
    {
      "Time_Start": 4581.320000000001,
      "Time_End": 4584.92,
      "Text": " So this just gives us a good glance on anything that's currently going on in the system."
    },
    {
      "Time_Start": 4587.160000000001,
      "Time_End": 4592.360000000001,
      "Text": " So if we want specific information about one of these, we can give it the name of the"
    },
    {
      "Time_Start": 4592.44,
      "Time_End": 4597.639999999999,
      "Text": " trace that we want to look at. So here we create the event log dash system, and we see that it's"
    },
    {
      "Time_Start": 4597.639999999999,
      "Time_End": 4603.24,
      "Text": " running, has a route path, and just some other information, and that the file mode at the bottom"
    },
    {
      "Time_Start": 4603.24,
      "Time_End": 4612.839999999999,
      "Text": " is currently in real time. So now instead of looking at the current trace sessions,"
    },
    {
      "Time_Start": 4612.839999999999,
      "Time_End": 4618.28,
      "Text": " we want to see what providers are available to us on the system. So if we wanted to start a"
    },
    {
      "Time_Start": 4618.28,
      "Time_End": 4626.679999999999,
      "Text": " trace session ourselves on one of these, we can do so. So we're going to use a different logman"
    },
    {
      "Time_Start": 4627.32,
      "Time_End": 4635.24,
      "Text": " command here. We're going to run logmanquery-providers, and now we have a list of all"
    },
    {
      "Time_Start": 4635.24,
      "Time_End": 4641.32,
      "Text": " of our providers and their corresponding GUID in alphabetical order. This is an extensive list if"
    },
    {
      "Time_Start": 4641.5599999999995,
      "Time_End": 4648.36,
      "Text": " you've ever run it on your system. There's quite a few to choose from. A lot of them are going to"
    },
    {
      "Time_Start": 4648.36,
      "Time_End": 4654.599999999999,
      "Text": " give you gibberish, but there are some that we can definitely use. So we want to kind of break this"
    },
    {
      "Time_Start": 4654.599999999999,
      "Time_End": 4662.599999999999,
      "Text": " down and find ones that are relevant to our RPC research here. So we're going to save the"
    },
    {
      "Time_Start": 4662.599999999999,
      "Time_End": 4668.84,
      "Text": " provider information to the $eqw variable, then we're going to run logmanquery-providers,"
    },
    {
      "Time_Start": 4668.92,
      "Time_End": 4674.360000000001,
      "Text": " the $eqw variable, then we're going to print that out to where object, and then we're going to"
    },
    {
      "Time_Start": 4674.360000000001,
      "Time_End": 4680.360000000001,
      "Text": " search for RPC. And we see that we have a few that we can choose from here. RPC, RPC events,"
    },
    {
      "Time_Start": 4680.360000000001,
      "Time_End": 4691.4800000000005,
      "Text": " firewall manager, proxy, and RPC SS. So now before we go further, we're going to pick the"
    },
    {
      "Time_Start": 4691.4800000000005,
      "Time_End": 4698.6,
      "Text": " Microsoft Windows RPC one, and we're going to run logman start RPC trace, which is just our name for"
    },
    {
      "Time_Start": 4698.6,
      "Time_End": 4705.8,
      "Text": " what we want to call it. It's arbitrary. And then we're going to grab the operational and then run"
    },
    {
      "Time_Start": 4705.8,
      "Time_End": 4710.84,
      "Text": " it. So it's going to say that it completed successfully. Then we're going to create a"
    },
    {
      "Time_Start": 4710.84,
      "Time_End": 4718.120000000001,
      "Text": " new service to test this using calculator.exe to make a test service, and then we're going to stop"
    },
    {
      "Time_Start": 4718.120000000001,
      "Time_End": 4723.4800000000005,
      "Text": " the trace. And so now we've started it, we've created our test service to generate some activity,"
    },
    {
      "Time_Start": 4723.4800000000005,
      "Time_End": 4728.68,
      "Text": " and then we've stopped it. And now kind of nothing has happened, right? We don't see any"
    },
    {
      "Time_Start": 4728.68,
      "Time_End": 4732.4400000000005,
      "Text": " events print out or anything like that, because we actually have to deal with the"
    },
    {
      "Time_Start": 4735.64,
      "Time_End": 4743.4800000000005,
      "Text": " logs. So it's created an RPC trace.etl, which is not useful, as we talked about, for actually"
    },
    {
      "Time_Start": 4743.4800000000005,
      "Time_End": 4750.92,
      "Text": " ingesting into the event log. So we're going to use trace.rpt, and we're going to give it that"
    },
    {
      "Time_Start": 4750.92,
      "Time_End": 4757.8,
      "Text": " file, we're going to tell it to change our file to an evtx, and then run it through. So now we have"
    },
    {
      "Time_Start": 4757.8,
      "Time_End": 4764.12,
      "Text": " an actual evtx file that we can import into the event log and take a look at."
    },
    {
      "Time_Start": 4766.12,
      "Time_End": 4771.32,
      "Text": " So now we're going to pop open event viewer. Up at the top, there's an option for action,"
    },
    {
      "Time_Start": 4771.32,
      "Time_End": 4777.72,
      "Text": " and then open a saved log. We're going to give it our evtx file that we used before."
    },
    {
      "Time_Start": 4778.6,
      "Time_End": 4785.320000000001,
      "Text": " And now we actually have under the saved logs tab in event viewer, we have our RPC information."
    },
    {
      "Time_Start": 4786.360000000001,
      "Time_End": 4793.16,
      "Text": " And so if we search through here, with our RPC interface GUID that we found in our previous"
    },
    {
      "Time_Start": 4793.16,
      "Time_End": 4798.6,
      "Text": " research, we can see that there was a server RPC call that was started to that interface"
    },
    {
      "Time_Start": 4798.6,
      "Time_End": 4804.2,
      "Text": " when we created our service. And so now we've validated the research that we did,"
    },
    {
      "Time_Start": 4805.16,
      "Time_End": 4811.08,
      "Text": " both in the logs and in IDA with that interface GUID, because we started our trace, we created a"
    },
    {
      "Time_Start": 4811.08,
      "Time_End": 4819.72,
      "Text": " service, and we see that that interface was actually used when that service was created."
    },
    {
      "Time_Start": 4819.72,
      "Time_End": 4828.599999999999,
      "Text": " So we would consider this kind of our validation of those steps. So now real quick, we are going to"
    },
    {
      "Time_Start": 4828.6,
      "Time_End": 4836.68,
      "Text": " do a dive into RPC and how it works. This is actually a kind of a personal research project"
    },
    {
      "Time_Start": 4836.68,
      "Time_End": 4842.120000000001,
      "Text": " of Johnny's. He's put out a lot of content and done a lot of great work internally on our team"
    },
    {
      "Time_Start": 4842.120000000001,
      "Time_End": 4848.84,
      "Text": " with RPC. So I thought it only fitting for me to step aside on this section and let him talk about"
    },
    {
      "Time_Start": 4848.84,
      "Time_End": 4853.4800000000005,
      "Text": " his baby. So I will stop my screen sharing. Or actually, no, I'm going to keep this up and just"
    },
    {
      "Time_Start": 4854.4400000000005,
      "Time_End": 4855.72,
      "Text": " let Johnny chat through it."
    },
    {
      "Time_Start": 4855.72,
      "Time_End": 4862.280000000001,
      "Text": " Cool. Thank you, Luke. Yeah. So a couple of things I want to point out is when diving into this RPC,"
    },
    {
      "Time_Start": 4862.280000000001,
      "Time_End": 4867.64,
      "Text": " the question is like, why is this important for us as analysts? And the reality is,"
    },
    {
      "Time_Start": 4867.64,
      "Time_End": 4874.4400000000005,
      "Text": " we've gotten to a point inside of this deep dive of different functions, different technologies,"
    },
    {
      "Time_Start": 4874.52,
      "Time_End": 4883.72,
      "Text": " et cetera. And we're at a layer by which this can become a good choke point for us as detection"
    },
    {
      "Time_Start": 4883.72,
      "Time_End": 4891.72,
      "Text": " engineers, meaning like this isn't going to change. In order for an attacker to interact with SCM,"
    },
    {
      "Time_Start": 4892.360000000001,
      "Time_End": 4898.84,
      "Text": " they need to utilize, they need to create a service or they need to create a value inside"
    },
    {
      "Time_Start": 4898.84,
      "Time_End": 4904.6,
      "Text": " the registry key. And this is going to be done by going over this interface. Now, sure,"
    },
    {
      "Time_Start": 4904.6,
      "Time_End": 4909.400000000001,
      "Text": " there might be a way possibly to do this via like a remote registry creation."
    },
    {
      "Time_Start": 4911.56,
      "Time_End": 4917.32,
      "Text": " And that would still use RPC. But if we go down to a layer deep enough, we start to identify these"
    },
    {
      "Time_Start": 4917.32,
      "Time_End": 4924.12,
      "Text": " RPC servers and RPC information. There's data that correlates with this specifically. I actually"
    },
    {
      "Time_Start": 4924.12,
      "Time_End": 4930.2,
      "Text": " talked about this in my talk today, that we can actually leverage as scalable telemetry inside of"
    },
    {
      "Time_Start": 4930.2,
      "Time_End": 4938.04,
      "Text": " our environment. So one thing I want to point out as well is earlier when we were looking at those"
    },
    {
      "Time_Start": 4938.04,
      "Time_End": 4946.599999999999,
      "Text": " Sigma rules, they showed some different event logging. But are we comfortable with A, those"
    },
    {
      "Time_Start": 4946.599999999999,
      "Time_End": 4952.84,
      "Text": " being captured and B, maybe how they're capturing those? By looking at those Sigma rules, they're"
    },
    {
      "Time_Start": 4952.84,
      "Time_End": 4959.16,
      "Text": " good for precise detections, but didn't look like they had much of a, I don't want to say"
    },
    {
      "Time_Start": 4959.8,
      "Time_End": 4965.0,
      "Text": " much of a reasoning, but maybe not much of a foundation as to why those are being collected."
    },
    {
      "Time_Start": 4965.0,
      "Time_End": 4968.84,
      "Text": " It's just more like, okay, we see this data. Now let's go ahead and start to utilize it."
    },
    {
      "Time_Start": 4968.84,
      "Time_End": 4975.32,
      "Text": " But now that we've gone to a deep dive and down to this deep layer, we know why we want to collect"
    },
    {
      "Time_Start": 4975.32,
      "Time_End": 4980.76,
      "Text": " and why we want to utilize this telemetry, which makes it even more powerful as us in the analysts."
    },
    {
      "Time_Start": 4981.64,
      "Time_End": 4989.4800000000005,
      "Text": " So moving into RPC, just kind of a quick overview over this. If you're interested in this more"
    },
    {
      "Time_Start": 4989.4800000000005,
      "Time_End": 4993.96,
      "Text": " deeply, again, I had a talk today and I did release a research paper. This has literally"
    },
    {
      "Time_Start": 4993.96,
      "Time_End": 5001.72,
      "Text": " taken up all of 2020 basically for me. That's why Luke mentioned that. So what is RPC? RPC"
    },
    {
      "Time_Start": 5001.72,
      "Time_End": 5006.04,
      "Text": " is a remote procedure call. It's used for distributed client and server programs,"
    },
    {
      "Time_Start": 5006.04,
      "Time_End": 5014.36,
      "Text": " applications. Protocols are going to be things that Microsoft, so Microsoft supports service-based"
    },
    {
      "Time_Start": 5014.36,
      "Time_End": 5019.8,
      "Text": " protocols on default on Windows. And so kind of think of these protocols as services that"
    },
    {
      "Time_Start": 5019.8,
      "Time_End": 5025.72,
      "Text": " Microsoft has defined, that can be interacted with via RPC. An interface is defined by something"
    },
    {
      "Time_Start": 5025.72,
      "Time_End": 5033.0,
      "Text": " known as the Microsoft Interface Definition Language or MIDL. MIDL includes what protocol"
    },
    {
      "Time_Start": 5033.0,
      "Time_End": 5040.6,
      "Text": " the interface is associated with, the methods, their parameters, et cetera. There's actually on"
    },
    {
      "Time_Start": 5040.6,
      "Time_End": 5046.44,
      "Text": " Windows, there's an MIDL compiler if someone wanted to create their own RPC communication."
    },
    {
      "Time_Start": 5047.08,
      "Time_End": 5051.24,
      "Text": " But this interface can kind of be thought of as a bridge for connection between that client and"
    },
    {
      "Time_Start": 5051.24,
      "Time_End": 5057.96,
      "Text": " server application or that client and server code more like, right? Method or function, so that"
    },
    {
      "Time_Start": 5057.96,
      "Time_End": 5064.68,
      "Text": " rcreateServiceW is actually going to be considered a method. And those are just functions that are"
    },
    {
      "Time_Start": 5064.68,
      "Time_End": 5072.2,
      "Text": " meant to implement a specific action. And typically, as Luke was mentioning inside the ETW capture, we"
    },
    {
      "Time_Start": 5072.2,
      "Time_End": 5079.96,
      "Text": " saw different opnums and those methods are going to correlate with an opnum. And what's kind of"
    },
    {
      "Time_Start": 5079.96,
      "Time_End": 5085.88,
      "Text": " neat about that is there's no rhyme or reason to those opnums besides the fact that that's the"
    },
    {
      "Time_Start": 5085.88,
      "Time_End": 5096.76,
      "Text": " layer by which they are set apart inside of that code. So if you had a RPC code that had a function"
    },
    {
      "Time_Start": 5096.76,
      "Time_End": 5105.0,
      "Text": " called Jared, Luke, Johnny, opnum zero would be Jared, opnum one would be Luke, opnum two would be"
    },
    {
      "Time_Start": 5105.0,
      "Time_End": 5112.4400000000005,
      "Text": " Johnny. That's just kind of how it works. Client and server stubs. So stubs are used to serialize"
    },
    {
      "Time_Start": 5112.52,
      "Time_End": 5118.6,
      "Text": " and deserialize the parameters being passed to the method, as well as interact with the RPC runtime"
    },
    {
      "Time_Start": 5119.240000000001,
      "Time_End": 5125.4800000000005,
      "Text": " to send and receive data over a transport. When the client wants to use a method, it will actually"
    },
    {
      "Time_Start": 5125.4800000000005,
      "Time_End": 5130.76,
      "Text": " pass the parameters needed for that method to perform that specific task. But before the"
    },
    {
      "Time_Start": 5130.76,
      "Time_End": 5137.160000000001,
      "Text": " transport can actually happen, the client stub must serialize the parameters, so basically almost"
    },
    {
      "Time_Start": 5137.16,
      "Time_End": 5144.04,
      "Text": " pack them. Think of it as packing. The server stub will deserialize or quote-unquote unpack"
    },
    {
      "Time_Start": 5144.68,
      "Time_End": 5149.5599999999995,
      "Text": " the parameter before feeding it to the exposed method function that is being invoked. So basically"
    },
    {
      "Time_Start": 5149.5599999999995,
      "Time_End": 5157.0,
      "Text": " it'll call that method, the parameters that it wants to pass to that method are going to be"
    },
    {
      "Time_Start": 5157.0,
      "Time_End": 5162.68,
      "Text": " serialized or quote-unquote packed into quote-unquote kind of the NDR format which is going"
    },
    {
      "Time_Start": 5162.68,
      "Time_End": 5167.88,
      "Text": " to be sent over, server accepts it, and says, hey, let me unpack this, and I'll pass that to the"
    },
    {
      "Time_Start": 5167.88,
      "Time_End": 5175.8,
      "Text": " method and invoke that method. The NDR engine is going to stand for the network data representation"
    },
    {
      "Time_Start": 5175.8,
      "Time_End": 5183.56,
      "Text": " engine, and it's responsible for the marshaling of DCOM and RPC components. This transportation"
    },
    {
      "Time_Start": 5183.56,
      "Time_End": 5188.6,
      "Text": " is done through the runtime, which is actually driven by the NDR engine itself. What is the"
    },
    {
      "Time_Start": 5188.6,
      "Time_End": 5195.72,
      "Text": " RPC runtime? The RPC runtime holds the operating system's core RPC services, such as the endpoint"
    },
    {
      "Time_Start": 5195.72,
      "Time_End": 5202.360000000001,
      "Text": " mapper. The RPC runtime is also responsible for the transportation of the serialized parameters"
    },
    {
      "Time_Start": 5202.360000000001,
      "Time_End": 5207.88,
      "Text": " from the client stub to the server stub itself. Then you have the RPC endpoint mapper,"
    },
    {
      "Time_Start": 5209.64,
      "Time_End": 5213.88,
      "Text": " which is going to be just basically a service that maintains the database of endpoints that"
    },
    {
      "Time_Start": 5213.88,
      "Time_End": 5220.04,
      "Text": " the client uses to map an interface to endpoints. And then the endpoint itself is going to be things"
    },
    {
      "Time_Start": 5220.04,
      "Time_End": 5225.88,
      "Text": " like TCP IP ports or name pipes that the client will use to communicate with the server."
    },
    {
      "Time_Start": 5226.92,
      "Time_End": 5232.12,
      "Text": " And to kind of walk through this process itself, I wrote a nice little diagram to break this down"
    },
    {
      "Time_Start": 5232.12,
      "Time_End": 5235.64,
      "Text": " pretty easily. If you want to go to the next slide, Lucas. I'm just kidding, it's not Lucas,"
    },
    {
      "Time_Start": 5235.64,
      "Time_End": 5240.92,
      "Text": " I just call him Lucas. So in here, or actually, it's kind of, I don't want to say it's backwards,"
    },
    {
      "Time_Start": 5240.92,
      "Time_End": 5245.88,
      "Text": " but the server side is actually going to load first. That's going to be on the right-hand side."
    },
    {
      "Time_Start": 5246.68,
      "Time_End": 5252.2,
      "Text": " And the process loads an RPC server and registers it with the runtime. And then the client is going"
    },
    {
      "Time_Start": 5252.2,
      "Time_End": 5258.04,
      "Text": " to implement an RPC interface. Now, the RPC interface can be implemented in many different"
    },
    {
      "Time_Start": 5258.04,
      "Time_End": 5264.04,
      "Text": " ways. I'm not going to get into that. I mentioned that in my talk today. But as in this specific"
    },
    {
      "Time_Start": 5264.04,
      "Time_End": 5271.72,
      "Text": " example, one way that inside of service creation, that RPC communication is actually kicked off or"
    },
    {
      "Time_Start": 5271.72,
      "Time_End": 5278.5199999999995,
      "Text": " implemented was through calling createServiceW, which then would call our createServiceW, which"
    },
    {
      "Time_Start": 5278.5199999999995,
      "Time_End": 5284.76,
      "Text": " kicked off that whole interface interaction, right? And then it's going to pass the parameters"
    },
    {
      "Time_Start": 5284.76,
      "Time_End": 5289.72,
      "Text": " to the method it wants to invoke. Parameters are serialized via the client stub in the NDR format."
    },
    {
      "Time_Start": 5290.280000000001,
      "Time_End": 5295.64,
      "Text": " The NDR engine will drive the RPC runtime, which transports the serialized data to the server"
    },
    {
      "Time_Start": 5295.64,
      "Time_End": 5301.400000000001,
      "Text": " applications. It's going to map to the specified endpoint. In this specific example, that's going"
    },
    {
      "Time_Start": 5301.400000000001,
      "Time_End": 5309.0,
      "Text": " to be that SVCC TL name pipe. And then the remote machine's RPC runtime accepts the incoming"
    },
    {
      "Time_Start": 5309.0,
      "Time_End": 5315.88,
      "Text": " communication and passes serialized data to the RPC server stub. The server stub will deserialize"
    },
    {
      "Time_Start": 5315.88,
      "Time_End": 5320.92,
      "Text": " or unpack the parameters. After that, the parameters are passed to the method. Methods are"
    },
    {
      "Time_Start": 5320.92,
      "Time_End": 5325.96,
      "Text": " invoked. And then if there is a reply, the server stub serializes the outgoing information and"
    },
    {
      "Time_Start": 5325.96,
      "Time_End": 5331.400000000001,
      "Text": " transmits it back through the runtime. And then the binding is freed. One thing I didn't mention"
    },
    {
      "Time_Start": 5331.400000000001,
      "Time_End": 5338.28,
      "Text": " is the binding is actually created once the server accepts that connection from the client."
    },
    {
      "Time_Start": 5339.32,
      "Time_End": 5343.64,
      "Text": " Right? This is good information to kind of just know in general when it comes to"
    },
    {
      "Time_Start": 5344.200000000001,
      "Time_End": 5352.6,
      "Text": " diving into RPC because RPC is one of the core Windows components. It is utilized quite a bit."
    },
    {
      "Time_Start": 5352.6,
      "Time_End": 5356.68,
      "Text": " And at us as analysts, if we can start to understand these servers a little bit more,"
    },
    {
      "Time_Start": 5356.68,
      "Time_End": 5363.0,
      "Text": " we can start to map these and start to actually utilize them inside of detections. But"
    },
    {
      "Time_Start": 5363.0,
      "Time_End": 5367.08,
      "Text": " not to get into that too much, I will pass it back over to you, Luke, to finish the map."
    },
    {
      "Time_Start": 5367.8,
      "Time_End": 5376.44,
      "Text": " Thank you so much, Jenny. So now that we've kind of walked through the Windows API and the RPC"
    },
    {
      "Time_Start": 5376.44,
      "Time_End": 5382.6,
      "Text": " interface steps of our abstraction map here, kind of the last thing that we want to verify"
    },
    {
      "Time_Start": 5382.6,
      "Time_End": 5387.72,
      "Text": " is the registry service database. So we know that we've been told that it's an HKLM system"
    },
    {
      "Time_Start": 5387.72,
      "Time_End": 5393.64,
      "Text": " current control set services. We just need a actual some kind of logging or some kind of"
    },
    {
      "Time_Start": 5393.88,
      "Time_End": 5399.72,
      "Text": " verification that this is actually the case. So what we're going to use for this is ProcMon."
    },
    {
      "Time_Start": 5399.72,
      "Time_End": 5403.88,
      "Text": " And again, there's another lab for this that we can walk through. You can walk through on your"
    },
    {
      "Time_Start": 5403.88,
      "Time_End": 5409.160000000001,
      "Text": " own if you pull that up. I'm pretty sure that's a GitHub pages site that's available in perpetuity."
    },
    {
      "Time_Start": 5409.160000000001,
      "Time_End": 5414.92,
      "Text": " So if you want to walk through that, you certainly can. So the first thing we're going to do is grab"
    },
    {
      "Time_Start": 5414.92,
      "Time_End": 5421.8,
      "Text": " our system terminal suite and open ProcMon or ProcMon64, depending on your system."
    },
    {
      "Time_Start": 5422.76,
      "Time_End": 5429.320000000001,
      "Text": " And here we have a whole bunch of stuff that's happening on the system. We can see there's"
    },
    {
      "Time_Start": 5429.320000000001,
      "Time_End": 5434.84,
      "Text": " 500,000 events if you just leave it running and do stuff on your system. So we want to"
    },
    {
      "Time_Start": 5436.84,
      "Time_End": 5440.76,
      "Text": " narrow this down. So we're going to go up to the top and we're going to create a filter."
    },
    {
      "Time_Start": 5443.08,
      "Time_End": 5448.28,
      "Text": " And so since we're going to create our service in using the PowerShell create service command,"
    },
    {
      "Time_Start": 5448.44,
      "Time_End": 5451.08,
      "Text": " we're going to filter for PowerShell and see what that shows us."
    },
    {
      "Time_Start": 5451.88,
      "Time_End": 5456.679999999999,
      "Text": " So we're going to put in process name is PowerShell and apply. We're going to pop open"
    },
    {
      "Time_Start": 5456.679999999999,
      "Time_End": 5462.5199999999995,
      "Text": " a administrative PowerShell window and create another test service using Notepad this time,"
    },
    {
      "Time_Start": 5463.16,
      "Time_End": 5473.5599999999995,
      "Text": " just to see. And nothing happened. So this sometimes can stump some people as to why,"
    },
    {
      "Time_Start": 5474.280000000001,
      "Time_End": 5480.280000000001,
      "Text": " but if you go back through everything that we've talked about, we've actually discovered that"
    },
    {
      "Time_Start": 5481.080000000001,
      "Time_End": 5486.76,
      "Text": " PowerShell does not implement the creation of the service. It just gives you a method in which to"
    },
    {
      "Time_Start": 5486.76,
      "Time_End": 5492.120000000001,
      "Text": " ask for the creation to take place. And then it reaches out to the service control manager"
    },
    {
      "Time_Start": 5492.120000000001,
      "Time_End": 5500.4400000000005,
      "Text": " using RPC to actually get the service created. So if we search for this activity a different way"
    },
    {
      "Time_Start": 5501.400000000001,
      "Time_End": 5508.92,
      "Text": " by actually filtering for the registry path that we've been told, which is system current control"
    },
    {
      "Time_Start": 5508.92,
      "Time_End": 5515.400000000001,
      "Text": " set and services, we're going to see that we actually have information here that ProcMon"
    },
    {
      "Time_Start": 5515.400000000001,
      "Time_End": 5522.68,
      "Text": " did capture. We see some create keys and values being set, but the process is services.exe."
    },
    {
      "Time_Start": 5522.68,
      "Time_End": 5529.080000000001,
      "Text": " So this is just something that verifies a lot of our research that the service control manager,"
    },
    {
      "Time_Start": 5529.4,
      "Time_End": 5536.2,
      "Text": " which is services.exe, is actually handling that request and creating the registry keys in the"
    },
    {
      "Time_Start": 5536.2,
      "Time_End": 5545.0,
      "Text": " database for you without PowerShell actually reaching out and doing that. So now we verify"
    },
    {
      "Time_Start": 5545.0,
      "Time_End": 5550.92,
      "Text": " that indeed this is where the services are created in the registry. So we've kind of"
    },
    {
      "Time_Start": 5550.92,
      "Time_End": 5558.92,
      "Text": " validated that step. Some takeaways of the abstraction process, right? There's no single"
    },
    {
      "Time_Start": 5558.92,
      "Time_End": 5567.32,
      "Text": " best place or layer in our abstraction map for you to actually build your detection. It depends"
    },
    {
      "Time_Start": 5567.32,
      "Time_End": 5572.84,
      "Text": " on your monitoring posture in your organization, right? Are you capable of monitoring when there's"
    },
    {
      "Time_Start": 5572.84,
      "Time_End": 5581.24,
      "Text": " API calls at scale? Probably not. Are you capable of monitoring registry key creation at scale?"
    },
    {
      "Time_Start": 5581.24,
      "Time_End": 5587.0,
      "Text": " Probably, given most of the tools that exist out there. So that's definitely something to think"
    },
    {
      "Time_Start": 5587.0,
      "Time_End": 5592.360000000001,
      "Text": " about. And as Jared mentioned, you probably don't want to rely on just a single detection"
    },
    {
      "Time_Start": 5592.360000000001,
      "Time_End": 5599.8,
      "Text": " or analytic or layer as we've discussed in this talk. You probably want a more layered approach"
    },
    {
      "Time_Start": 5599.8,
      "Time_End": 5606.92,
      "Text": " if you want to get a full coverage detection on something. When you're developing your detection"
    },
    {
      "Time_Start": 5606.92,
      "Time_End": 5611.400000000001,
      "Text": " logic, we definitely encourage you to understand as much about the attack as you can."
    },
    {
      "Time_Start": 5612.12,
      "Time_End": 5619.0,
      "Text": " A lot of times defenders end up just relying on some research that someone else told them"
    },
    {
      "Time_Start": 5619.0,
      "Time_End": 5625.8,
      "Text": " or the current best way to do something. A lot of times defenders don't do this process and"
    },
    {
      "Time_Start": 5625.8,
      "Time_End": 5631.400000000001,
      "Text": " they don't actually run the attack that they're trying to detect on their system and break it down"
    },
    {
      "Time_Start": 5631.400000000001,
      "Time_End": 5637.400000000001,
      "Text": " to this specific of a level. A lot of times they'll take something for granted or make an"
    },
    {
      "Time_Start": 5637.400000000001,
      "Time_End": 5642.4400000000005,
      "Text": " assumption that they haven't verified, which is why we wanted to take you from the beginning of"
    },
    {
      "Time_Start": 5642.4400000000005,
      "Time_End": 5647.88,
      "Text": " the process of just wanting to detect service creation to actually deeply understanding how"
    },
    {
      "Time_Start": 5647.88,
      "Time_End": 5653.24,
      "Text": " service creation works. Because when attackers are implementing some of these, that's exactly"
    },
    {
      "Time_Start": 5653.24,
      "Time_End": 5656.599999999999,
      "Text": " what they're doing. They're breaking it down on this level to figure out if there's a new way they"
    },
    {
      "Time_Start": 5656.599999999999,
      "Time_End": 5661.96,
      "Text": " can do it. If there's a new way they can bypass the detection. So as defenders, a lot of times"
    },
    {
      "Time_Start": 5661.96,
      "Time_End": 5667.4,
      "Text": " it's on us to step up our game to that same level that the attackers have. So we can start building"
    },
    {
      "Time_Start": 5667.4,
      "Time_End": 5678.2,
      "Text": " our detections just as knowledgeably. One thing that you can do is take the easy wins or"
    },
    {
      "Time_Start": 5679.08,
      "Time_End": 5684.679999999999,
      "Text": " quick and dirty, if you will, detections when possible, but make sure that you do keep"
    },
    {
      "Time_Start": 5684.679999999999,
      "Time_End": 5693.5599999999995,
      "Text": " the full scope of a technique or detection in mind. And then this all boils down to kind of"
    },
    {
      "Time_Start": 5693.5599999999995,
      "Time_End": 5697.88,
      "Text": " one thing, which is there likely is not one single answer that's going to cover everything"
    },
    {
      "Time_Start": 5697.88,
      "Time_End": 5707.16,
      "Text": " that you're trying to talk about. So this is kind of a Rachel Ray pulling it out of the oven moment."
    },
    {
      "Time_Start": 5708.12,
      "Time_End": 5716.2,
      "Text": " For you, but we've walked through just the PowerShell new service way to create a service"
    },
    {
      "Time_Start": 5716.2,
      "Time_End": 5721.8,
      "Text": " and break it down into these different layers. If you actually went and tried to compile a full"
    },
    {
      "Time_Start": 5721.8,
      "Time_End": 5728.92,
      "Text": " list, this was my weekend research version of a full list of ways that you can create a service,"
    },
    {
      "Time_Start": 5728.92,
      "Time_End": 5735.8,
      "Text": " but there are probably twice as many as this. But when you start breaking down a tool,"
    },
    {
      "Time_Start": 5735.8,
      "Time_End": 5743.72,
      "Text": " I guess, C.exe or using PsExec or the 7,000 different implementations of PsExec that exist"
    },
    {
      "Time_Start": 5743.72,
      "Time_End": 5753.8,
      "Text": " out in the world, you'll start to see that some of them boil down to the same APIs, the same RPC"
    },
    {
      "Time_Start": 5753.8,
      "Time_End": 5760.360000000001,
      "Text": " interfaces, the same RPC method, and the same registry service database. And you might ask,"
    },
    {
      "Time_Start": 5761.24,
      "Time_End": 5769.24,
      "Text": " why do we have reg.exe on the list of ways to install a service? And that's because a lot of"
    },
    {
      "Time_Start": 5769.24,
      "Time_End": 5776.36,
      "Text": " people know this, but some people aren't aware is that there are ways to actually bypass the default"
    },
    {
      "Time_Start": 5776.36,
      "Time_End": 5784.92,
      "Text": " service logging in Windows. So there's actually a Windows event that's generated when you install a"
    },
    {
      "Time_Start": 5784.92,
      "Time_End": 5790.52,
      "Text": " service, but it's actually implemented in the RPC interface that Johnny walked through in IDA."
    },
    {
      "Time_Start": 5791.56,
      "Time_End": 5798.28,
      "Text": " So if you never actually interact with that interface or that API call to create the service,"
    },
    {
      "Time_Start": 5798.28,
      "Time_End": 5804.04,
      "Text": " it doesn't get logged. And we've learned that there's a registry service database that sits"
    },
    {
      "Time_Start": 5804.04,
      "Time_End": 5811.64,
      "Text": " in the registry. So you can actually go to the registry, copy a bunch of keys and make it laid"
    },
    {
      "Time_Start": 5811.64,
      "Time_End": 5817.320000000001,
      "Text": " out the way that a current installed service is, reboot the machine, which is currently the only"
    },
    {
      "Time_Start": 5817.320000000001,
      "Time_End": 5824.4400000000005,
      "Text": " known way to me, or I think anyone on the team, we've talked about it a lot internally, is the"
    },
    {
      "Time_Start": 5824.4400000000005,
      "Time_End": 5831.56,
      "Text": " only way to force the service control manager to rebuild its internal database with the one"
    },
    {
      "Time_Start": 5832.200000000001,
      "Time_End": 5837.88,
      "Text": " in the registry. Because the service control manager actually keeps a copy of the database"
    },
    {
      "Time_Start": 5837.88,
      "Time_End": 5843.16,
      "Text": " in memory when it's running. And so when you ask it to create a service, it creates it there and"
    },
    {
      "Time_Start": 5843.16,
      "Time_End": 5848.04,
      "Text": " then copies it to the registry as a backup. So the only way to do that process in reverse and"
    },
    {
      "Time_Start": 5848.04,
      "Time_End": 5855.400000000001,
      "Text": " take it from the registry and go back into memory is to reboot the system. So if it's a system"
    },
    {
      "Time_Start": 5855.400000000001,
      "Time_End": 5860.76,
      "Text": " that you're trying to install a service on that you know you can reboot and gain your command"
    },
    {
      "Time_Start": 5860.76,
      "Time_End": 5865.64,
      "Text": " and control back, that's a viable way for an attacker to install a malicious service on a box."
    },
    {
      "Time_Start": 5866.360000000001,
      "Time_End": 5870.6,
      "Text": " So when we talk about actually detecting service creation,"
    },
    {
      "Time_Start": 5872.4400000000005,
      "Time_End": 5879.0,
      "Text": " it doesn't involve just the way that SD or PowerShell's new service do it. It involves"
    },
    {
      "Time_Start": 5879.0,
      "Time_End": 5883.96,
      "Text": " every possible way to get a service running on that system, which actually involves just editing"
    },
    {
      "Time_Start": 5883.96,
      "Time_End": 5891.320000000001,
      "Text": " the registry. So that's why we have reg.exe, regedit, and then the direct edit that PowerShell"
    },
    {
      "Time_Start": 5891.32,
      "Time_End": 5899.24,
      "Text": " allows you to do in there. And then you can actually do that remotely using the remote"
    },
    {
      "Time_Start": 5899.24,
      "Time_End": 5906.44,
      "Text": " registry protocol, which is why we have RPC interface and then RPC method as well. So these"
    },
    {
      "Time_Start": 5906.44,
      "Time_End": 5911.48,
      "Text": " are just some things to consider. Just don't make the assumption that the only way to install a"
    },
    {
      "Time_Start": 5911.48,
      "Time_End": 5916.599999999999,
      "Text": " service is the way that you did it or the only way to accomplish a technique is the one way that"
    },
    {
      "Time_Start": 5916.6,
      "Time_End": 5921.4800000000005,
      "Text": " you've researched or the way that the majority of the tools implement it, because attackers will"
    },
    {
      "Time_Start": 5921.4800000000005,
      "Time_End": 5930.6,
      "Text": " find a way. With that being said, these are some ways that you could further your research into"
    },
    {
      "Time_Start": 5930.6,
      "Time_End": 5936.360000000001,
      "Text": " this topic that we didn't necessarily have the time to cover. But if we were actually creating"
    },
    {
      "Time_Start": 5936.360000000001,
      "Time_End": 5943.08,
      "Text": " this detection in production, we would go through these research steps of looking at SD.exe, which"
    },
    {
      "Time_Start": 5943.08,
      "Time_End": 5948.6,
      "Text": " is Microsoft's other basic way to create a service, using Impacket to actually create the"
    },
    {
      "Time_Start": 5948.6,
      "Time_End": 5953.72,
      "Text": " service through direct RPC calls, like Jared mentioned, direct manipulation of the services"
    },
    {
      "Time_Start": 5953.72,
      "Time_End": 5959.4,
      "Text": " database that I just talked about, or a tool such as PsExec, which creates a service that does it"
    },
    {
      "Time_Start": 5959.4,
      "Time_End": 5964.12,
      "Text": " from a remote system, which typically you wouldn't be doing with PowerShell's new service."
    },
    {
      "Time_Start": 5965.72,
      "Time_End": 5972.6,
      "Text": " And then one thing that we like to always say is to try everything that you do on a remote system,"
    },
    {
      "Time_Start": 5973.8,
      "Time_End": 5977.08,
      "Text": " and see if it behaves differently, because a lot of times Windows implements things"
    },
    {
      "Time_Start": 5978.44,
      "Time_End": 5985.16,
      "Text": " in two different fashions for a local or remote action of the same type. So it's not always good"
    },
    {
      "Time_Start": 5985.16,
      "Time_End": 5989.48,
      "Text": " to just assume that the thing that worked on your box in the lab is going to work if an attacker is"
    },
    {
      "Time_Start": 5989.48,
      "Time_End": 5996.6,
      "Text": " doing it from one box to another, trying to gain a foothold on. So that's just something to keep"
    },
    {
      "Time_Start": 5996.6,
      "Time_End": 6002.5199999999995,
      "Text": " in mind. So for any closing comments, I'm going to go ahead and pass it back to Jared."
    },
    {
      "Time_Start": 6003.0,
      "Time_End": 6005.56,
      "Text": " Yeah, before we go, can you go back to the Rachel Ray?"
    },
    {
      "Time_Start": 6007.56,
      "Time_End": 6009.240000000001,
      "Text": " Let me pull that out of that one for you."
    },
    {
      "Time_Start": 6009.240000000001,
      "Time_End": 6014.4400000000005,
      "Text": " Thanks, buddy. Yeah, so that's kind of the end of the content that we have. Hopefully,"
    },
    {
      "Time_Start": 6014.4400000000005,
      "Time_End": 6019.0,
      "Text": " everybody gets a chance to go and check out the labs if they so are interested."
    },
    {
      "Time_Start": 6019.8,
      "Time_End": 6025.400000000001,
      "Text": " What we hope, so there's kind of like two goals that we had with this workshop. So one was to"
    },
    {
      "Time_Start": 6025.400000000001,
      "Time_End": 6034.120000000001,
      "Text": " hopefully help everybody understand that detecting, you know, the use of a specific"
    },
    {
      "Time_Start": 6034.120000000001,
      "Time_End": 6040.68,
      "Text": " attack tool is not sufficient to comprehensively detect an attack technique, right? And so,"
    },
    {
      "Time_Start": 6041.56,
      "Time_End": 6047.960000000001,
      "Text": " generally speaking, you're going to want to create a what I call detection in depth, which is"
    },
    {
      "Time_Start": 6047.960000000001,
      "Time_End": 6052.920000000001,
      "Text": " a layered detection strategy that approaches it from different perspectives, right? So"
    },
    {
      "Time_Start": 6052.92,
      "Time_End": 6057.8,
      "Text": " if you know something bad, some bad implementation exists, you probably want a precise indicator that"
    },
    {
      "Time_Start": 6057.8,
      "Time_End": 6062.28,
      "Text": " helps you identify that. But you also want to supplement that with a more broad approach,"
    },
    {
      "Time_Start": 6062.28,
      "Time_End": 6067.4800000000005,
      "Text": " which will hopefully detect the things that you don't explicitly know about. So that would be"
    },
    {
      "Time_Start": 6067.4800000000005,
      "Time_End": 6075.32,
      "Text": " something like using identifying services created in the registry. Now, if you want to, like see"
    },
    {
      "Time_Start": 6075.32,
      "Time_End": 6080.04,
      "Text": " my approach to that, I talked about that in my talk earlier today, which was rethinking detection"
    },
    {
      "Time_Start": 6080.04,
      "Time_End": 6084.28,
      "Text": " engineering, false positives are bad, false negatives are worse. And I talked about how"
    },
    {
      "Time_Start": 6084.28,
      "Time_End": 6089.16,
      "Text": " we want to create a base or identify a base condition, which would be that registry key"
    },
    {
      "Time_Start": 6089.16,
      "Time_End": 6096.04,
      "Text": " being created, and then kind of approach our detection from there. Now, with that said, kind of"
    },
    {
      "Time_Start": 6096.04,
      "Time_End": 6101.96,
      "Text": " this, and the fact that an attacker can enter at any level of this abstraction and implement"
    },
    {
      "Time_Start": 6101.96,
      "Time_End": 6108.68,
      "Text": " the attack. Now, with that said, the kind of other thing that we wanted to get across was oftentimes"
    },
    {
      "Time_Start": 6108.92,
      "Time_End": 6113.8,
      "Text": " we'll talk through this, and we kind of present this Rachel Ray, we pull the turkey out of the"
    },
    {
      "Time_Start": 6113.8,
      "Time_End": 6117.8,
      "Text": " oven, and we say, this is what the final product looks like. And when we're teaching our training"
    },
    {
      "Time_Start": 6117.8,
      "Time_End": 6123.08,
      "Text": " classes, we often will have a student say, hey, we have had in the past anyway, we've had a student"
    },
    {
      "Time_Start": 6123.08,
      "Time_End": 6130.200000000001,
      "Text": " say, hey, you know, it's great that you were able to produce this service creation abstraction map,"
    },
    {
      "Time_Start": 6130.200000000001,
      "Time_End": 6135.96,
      "Text": " and it's really useful to me. However, it would be more useful if I knew how if I could understand"
    },
    {
      "Time_Start": 6136.44,
      "Time_End": 6140.36,
      "Text": " how you created this in the first place. And so hopefully, what we demonstrated is"
    },
    {
      "Time_Start": 6141.32,
      "Time_End": 6146.28,
      "Text": " kind of an inquisitive approach. So it's really hard to really hard for people to"
    },
    {
      "Time_Start": 6147.4800000000005,
      "Time_End": 6153.96,
      "Text": " take something that they know, in their head, like I know how to, I know how services work,"
    },
    {
      "Time_Start": 6153.96,
      "Time_End": 6159.56,
      "Text": " right? And then how do you, like, unravel that abstraction of how I learned that and be able to"
    },
    {
      "Time_Start": 6159.56,
      "Time_End": 6165.4800000000005,
      "Text": " relate that to, you know, other people of this is how you might learn this knowledge also. And so"
    },
    {
      "Time_Start": 6165.4800000000005,
      "Time_End": 6171.240000000001,
      "Text": " what we try to do is kind of provide a framework by which you can investigate these types of"
    },
    {
      "Time_Start": 6171.240000000001,
      "Time_End": 6179.160000000001,
      "Text": " problems. And so again, the idea of you have tools, you have functions, you have files, registry,"
    },
    {
      "Time_Start": 6179.160000000001,
      "Time_End": 6183.320000000001,
      "Text": " networks, so on and so forth. And that helps you kind of look through and say, where are the"
    },
    {
      "Time_Start": 6183.320000000001,
      "Time_End": 6189.240000000001,
      "Text": " indicators that I might be able to, to interact with and create detections off of and how can I"
    },
    {
      "Time_Start": 6189.240000000001,
      "Time_End": 6194.92,
      "Text": " identify what the base condition is. And so when I say base condition, I say, no matter what tool"
    },
    {
      "Time_Start": 6194.92,
      "Time_End": 6199.88,
      "Text": " you use at the very top, right, we have like, was that nine different tools that we've identified,"
    },
    {
      "Time_Start": 6199.88,
      "Time_End": 6205.08,
      "Text": " there's technically infinite tools, they all share one thing at the bottom, right? And that's the"
    },
    {
      "Time_Start": 6205.08,
      "Time_End": 6210.76,
      "Text": " fact that no matter how you create the service, there's going to be a registry key created at the"
    },
    {
      "Time_Start": 6210.76,
      "Time_End": 6219.4,
      "Text": " end, right? And so if, if I want to be comprehensive, and how I detect potential abuse,"
    },
    {
      "Time_Start": 6219.4,
      "Time_End": 6223.8,
      "Text": " then I want to write my detection at the bottom and then work my way up and identify what's"
    },
    {
      "Time_Start": 6223.8,
      "Time_End": 6230.68,
      "Text": " different. And so for instance, if somebody uses path, right, sc.exe, this registry key is going to"
    },
    {
      "Time_Start": 6230.68,
      "Time_End": 6236.2,
      "Text": " be created by services.exe. If somebody uses this path, then the registry key will be created by"
    },
    {
      "Time_Start": 6236.2,
      "Time_End": 6240.84,
      "Text": " svchost, for example. And so that might be indicative of something that we're interested in."
    },
    {
      "Time_Start": 6240.84,
      "Time_End": 6246.92,
      "Text": " Why, why was this service created by svchost instead of services.exe, which is the appropriate"
    },
    {
      "Time_Start": 6246.92,
      "Time_End": 6253.0,
      "Text": " path for creating a service? Why was this service created remotely instead of locally, right? There"
    },
    {
      "Time_Start": 6253.0,
      "Time_End": 6257.72,
      "Text": " may be legitimate reasons for that. But as Josh Prager talked about in his, in his talk today,"
    },
    {
      "Time_Start": 6258.68,
      "Time_End": 6264.68,
      "Text": " that is a rare phenomenon in, based on our observation in our, in client environments,"
    },
    {
      "Time_Start": 6264.68,
      "Time_End": 6269.8,
      "Text": " right? And so that may be a good opportunity for us to build detections. So that's, that's all I"
    },
    {
      "Time_Start": 6269.8,
      "Time_End": 6273.56,
      "Text": " had. I don't know, Johnny or Luke, if you guys had anything that you wanted to add to that before we"
    },
    {
      "Time_Start": 6273.56,
      "Time_End": 6279.64,
      "Text": " go. I just had one, one closing comment, which is, this is kind of the perfect example of this,"
    },
    {
      "Time_Start": 6279.64,
      "Time_End": 6285.88,
      "Text": " which is why we use it to teach because it makes sense. But sometimes when you complete this map,"
    },
    {
      "Time_Start": 6285.88,
      "Time_End": 6291.240000000001,
      "Text": " you're not going to have the pretty, like orange bar across the bottom that covers every single"
    },
    {
      "Time_Start": 6291.240000000001,
      "Time_End": 6299.400000000001,
      "Text": " tool that you're trying to detect, right? You may actually have a line that splits all the way down,"
    },
    {
      "Time_Start": 6299.400000000001,
      "Time_End": 6307.0,
      "Text": " like you have between the two RPC interfaces. So you may have to end up with two detections to"
    },
    {
      "Time_Start": 6307.0,
      "Time_End": 6311.96,
      "Text": " detect every instance of something, which is why you can't assume that there's going to be"
    },
    {
      "Time_Start": 6311.96,
      "Time_End": 6315.8,
      "Text": " kind of a one-size-fits-all at the end of the detections that you're creating."
    },
    {
      "Time_Start": 6317.16,
      "Time_End": 6320.76,
      "Text": " Just one thing about that I wanted to point out."
    },
    {
      "Time_Start": 6337.96,
      "Time_End": 6342.76,
      "Text": " Well, anyway, what I was saying is now it's 14 minutes instead of 15 minutes, but we'll stick"
    },
    {
      "Time_Start": 6342.76,
      "Time_End": 6348.6,
      "Text": " around for another 14 or so, 15 minutes to answer any questions that anybody has. Hopefully, if you"
    },
    {
      "Time_Start": 6348.6,
      "Time_End": 6354.68,
      "Text": " get a chance, run through those labs if they, if they so interest you, and kind of give this,"
    },
    {
      "Time_Start": 6354.68,
      "Time_End": 6360.84,
      "Text": " give this a whirl yourself. We also encourage you to, we talked about new service, but it may be"
    },
    {
      "Time_Start": 6361.56,
      "Time_End": 6368.04,
      "Text": " interesting to take reg.exe, create a service manually by editing the registry and kind of"
    },
    {
      "Time_Start": 6368.04,
      "Time_End": 6371.88,
      "Text": " learning how that works and trying to unravel that abstraction. We've kind of given you a hint"
    },
    {
      "Time_Start": 6371.88,
      "Time_End": 6376.92,
      "Text": " here, but it might be interesting, or maybe picking a completely different attack technique and trying"
    },
    {
      "Time_Start": 6376.92,
      "Time_End": 6381.64,
      "Text": " to run through this process and seeing how it works. And we're happy to, happy to hear feedback,"
    },
    {
      "Time_Start": 6381.64,
      "Time_End": 6386.28,
      "Text": " answer questions, all that kind of stuff. So thank you for everybody's time and have a good weekend"
    },
    {
      "Time_Start": 6386.92,
      "Time_End": 6387.5599999999995,
      "Text": " and a good night."
    },
    {
      "Time_Start": 6389.96,
      "Time_End": 6390.599999999999,
      "Text": " Thanks, everyone."
    },
    {
      "Time_Start": 6391.8,
      "Time_End": 6396.04,
      "Text": " Thanks, everybody. And one thing I want to note too, is if anybody ever has any questions about"
    },
    {
      "Time_Start": 6396.04,
      "Time_End": 6400.12,
      "Text": " this process, feel free to reach out to us via Twitter or Slack or whatever that might be."
    },
    {
      "Time_Start": 6400.759999999999,
      "Time_End": 6409.8,
      "Text": " Thank you for coming."
    }
  ]
}