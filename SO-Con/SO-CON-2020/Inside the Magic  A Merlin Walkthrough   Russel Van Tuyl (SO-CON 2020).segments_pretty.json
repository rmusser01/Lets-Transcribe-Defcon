{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 20.400000000000002,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Hello and welcome to my talk, Inside the Magic, a Merlin walkthrough, where today we will"
    },
    {
      "Time_Start": 20.400000000000002,
      "Time_End": 24.96,
      "Text": " talk about a post-exploitation command and control tool I wrote that leverages several"
    },
    {
      "Time_Start": 24.96,
      "Time_End": 30.080000000000002,
      "Text": " versions of the HTTP protocol."
    },
    {
      "Time_Start": 30.080000000000002,
      "Time_End": 34.24,
      "Text": " Quick introduction, my name is Russell Bantile and I'm an Offensive Security Operator at"
    },
    {
      "Time_Start": 34.24,
      "Time_End": 35.24,
      "Text": " SpectreOps."
    },
    {
      "Time_Start": 35.24,
      "Time_End": 41.44,
      "Text": " I can be reached on Twitter under the handle NeonDog, but I use the Twitter handle Merlin"
    },
    {
      "Time_Start": 41.44,
      "Time_End": 45.28,
      "Text": " underscore C2 for all information about this tool."
    },
    {
      "Time_Start": 45.28,
      "Time_End": 50.28,
      "Text": " If you want to chat about Merlin, please stop by the Bloodhound Gang Slack space and visit"
    },
    {
      "Time_Start": 50.28,
      "Time_End": 51.28,
      "Text": " the Merlin channel."
    },
    {
      "Time_Start": 52.0,
      "Time_End": 56.64,
      "Text": " It's a much better place to start a conversation, as opposed to using something like a GitHub"
    },
    {
      "Time_Start": 56.64,
      "Time_End": 57.64,
      "Text": " issue."
    },
    {
      "Time_Start": 57.64,
      "Time_End": 63.24,
      "Text": " Today, we're going to start by talking through the various versions of the HTTP protocol"
    },
    {
      "Time_Start": 63.24,
      "Time_End": 67.32,
      "Text": " because they are the protocols that Merlin uses for command and control traffic."
    },
    {
      "Time_Start": 67.32,
      "Time_End": 72.76,
      "Text": " Next, we'll move into a deep dive of the underlying concepts and protocols that Merlin uses for"
    },
    {
      "Time_Start": 72.76,
      "Time_End": 74.8,
      "Text": " authentication and encryption."
    },
    {
      "Time_Start": 74.8,
      "Time_End": 81.08,
      "Text": " I'll also do a demo of interacting with the various Merlin server menus and commands."
    },
    {
      "Time_Start": 81.08,
      "Time_End": 85.6,
      "Text": " To wrap things up, I'll show some power usage examples for working with the Merlin agents"
    },
    {
      "Time_Start": 85.6,
      "Time_End": 92.32,
      "Text": " such as dynamic JA3 hash configurations and a simple trick to bypass Windows Defender."
    },
    {
      "Time_Start": 92.32,
      "Time_End": 94.67999999999999,
      "Text": " So what is Merlin?"
    },
    {
      "Time_Start": 94.67999999999999,
      "Time_End": 99.6,
      "Text": " Merlin is a cross-platform post-exploitation command and control tool that I wrote in the"
    },
    {
      "Time_Start": 99.6,
      "Time_End": 101.75999999999999,
      "Text": " Go language."
    },
    {
      "Time_Start": 101.75999999999999,
      "Time_End": 106.56,
      "Text": " One thing that I like about Go is that it cross-compiles easily to 10 different operating"
    },
    {
      "Time_Start": 106.56,
      "Time_End": 108.84,
      "Text": " systems and 9 different architectures."
    },
    {
      "Time_Start": 109.60000000000001,
      "Time_End": 114.24000000000001,
      "Text": " If you ever find yourself needing to get an agent on something like an ARM host, Go's"
    },
    {
      "Time_Start": 114.24000000000001,
      "Time_End": 115.24000000000001,
      "Text": " got you covered."
    },
    {
      "Time_Start": 115.24000000000001,
      "Time_End": 121.52000000000001,
      "Text": " I originally wrote this tool when I was taking a look at the HTTP2 protocol."
    },
    {
      "Time_Start": 121.52000000000001,
      "Time_End": 126.80000000000001,
      "Text": " Originally Merlin only supported the HTTP2 protocol and it was developed to bypass network"
    },
    {
      "Time_Start": 126.80000000000001,
      "Time_End": 128.72,
      "Text": " detections."
    },
    {
      "Time_Start": 128.72,
      "Time_End": 134.84,
      "Text": " Because the HTTP2 protocol only uses ephemeral cipher suites and perfect forward secrecy"
    },
    {
      "Time_Start": 134.84,
      "Time_End": 140.48,
      "Text": " enabled cipher suites, it makes it hard for proxies to decrypt traffic in line by using"
    },
    {
      "Time_Start": 140.48,
      "Time_End": 143.12,
      "Text": " something like an RSA key."
    },
    {
      "Time_Start": 143.12,
      "Time_End": 149.76,
      "Text": " The only option is to terminate the connection and restart a new one or simply deny it."
    },
    {
      "Time_Start": 149.76,
      "Time_End": 155.52,
      "Text": " Additionally, many network tools did not have the ability to decode the binary-based HTTP2"
    },
    {
      "Time_Start": 155.52,
      "Time_End": 161.08,
      "Text": " protocol at the time, so it made it a good candidate to get past detections."
    },
    {
      "Time_Start": 161.08,
      "Time_End": 166.12,
      "Text": " I later came around to adding support for HTTP version 1.1 to enable domain fronting"
    },
    {
      "Time_Start": 166.12,
      "Time_End": 170.04000000000002,
      "Text": " as well as the HTTP3 protocol."
    },
    {
      "Time_Start": 170.04000000000002,
      "Time_End": 176.4,
      "Text": " If you ever have any questions about Merlin or want to look up additional information"
    },
    {
      "Time_Start": 176.4,
      "Time_End": 180.04000000000002,
      "Text": " for it, I recommend that you stop by the wiki at readthedocs."
    },
    {
      "Time_Start": 180.04000000000002,
      "Time_End": 184.92000000000002,
      "Text": " I try to do my best to keep that thing updated with all the questions I get asked by people."
    },
    {
      "Time_Start": 184.92000000000002,
      "Time_End": 188.0,
      "Text": " If you find it's missing a piece of information you'd like, please let me know and I'll get"
    },
    {
      "Time_Start": 188.0,
      "Time_End": 188.52,
      "Text": " it updated."
    },
    {
      "Time_Start": 191.32000000000002,
      "Time_End": 195.96,
      "Text": " So let's do a quick talk through the different versions of HTTP."
    },
    {
      "Time_Start": 195.96,
      "Time_End": 199.16000000000003,
      "Text": " This slide quickly depicts the various versions of the protocol that have come out over the"
    },
    {
      "Time_Start": 199.16000000000003,
      "Time_End": 200.92000000000002,
      "Text": " years."
    },
    {
      "Time_Start": 200.92000000000002,
      "Time_End": 204.8,
      "Text": " The very first version of HTTP did not even have a version number."
    },
    {
      "Time_Start": 204.8,
      "Time_End": 209.8,
      "Text": " It was retroactively assigned to separate it from version 1."
    },
    {
      "Time_Start": 209.8,
      "Time_End": 216.4,
      "Text": " Version 1 was the first official version and dates back to 1996."
    },
    {
      "Time_Start": 216.4,
      "Time_End": 221.72,
      "Text": " Not too long thereafter, version 1.1 was released in 1997 and made a couple updates"
    },
    {
      "Time_Start": 221.72,
      "Time_End": 224.72,
      "Text": " to the protocol."
    },
    {
      "Time_Start": 224.72,
      "Time_End": 230.76,
      "Text": " There were several problems with HTTP version 1.1 that reduced its efficiency, such as one"
    },
    {
      "Time_Start": 230.76,
      "Time_End": 236.8,
      "Text": " TCP connection per resource that a web page loads and head-of-line blocking."
    },
    {
      "Time_Start": 236.8,
      "Time_End": 242.68,
      "Text": " Head-of-line blocking is when a server requests a large file like a big image or a large JavaScript"
    },
    {
      "Time_Start": 242.68,
      "Time_End": 246.56,
      "Text": " and it blocks all the rest of the components from loading until that one loads first."
    },
    {
      "Time_Start": 246.56,
      "Time_End": 250.68,
      "Text": " So oftentimes, web pages don't render quickly because of this."
    },
    {
      "Time_Start": 250.68,
      "Time_End": 257.44,
      "Text": " To fix this, Google started testing a new protocol they were calling Speedy at the time."
    },
    {
      "Time_Start": 257.44,
      "Time_End": 262.12,
      "Text": " Google's preliminary protocol later became the basis for the official HTTP2 protocol"
    },
    {
      "Time_Start": 262.12,
      "Time_End": 268.16,
      "Text": " found in RFC 7540 in 2015."
    },
    {
      "Time_Start": 268.16,
      "Time_End": 273.16,
      "Text": " Not too long after this, Google started working on another new protocol called QUIC for QUIC"
    },
    {
      "Time_Start": 273.16,
      "Time_End": 275.64000000000004,
      "Text": " UDP internet connection."
    },
    {
      "Time_Start": 275.64000000000004,
      "Time_End": 281.72,
      "Text": " This protocol is still an IETF draft and is not official yet."
    },
    {
      "Time_Start": 281.72,
      "Time_End": 288.76000000000005,
      "Text": " Let's take a look at the HTTP2 version of the protocol."
    },
    {
      "Time_Start": 288.76000000000005,
      "Time_End": 294.8,
      "Text": " This version of HTTP is multiplexed and bidirectional, meaning it can have multiple conversations"
    },
    {
      "Time_Start": 294.84000000000003,
      "Time_End": 301.28000000000003,
      "Text": " over one connection and traffic can flow back and forth between the server and the client."
    },
    {
      "Time_Start": 301.28000000000003,
      "Time_End": 306.16,
      "Text": " This version of the protocol also only supports ephemeral Cypher suites and perfect forward"
    },
    {
      "Time_Start": 306.16,
      "Time_End": 311.56,
      "Text": " secrecy enabled Cypher suites, and it also has a server push feature."
    },
    {
      "Time_Start": 311.56,
      "Time_End": 315.28000000000003,
      "Text": " This is where if the server knows you're going to request a resource, it will go ahead and"
    },
    {
      "Time_Start": 315.28000000000003,
      "Time_End": 319.8,
      "Text": " send it to you so that way you don't have to request it."
    },
    {
      "Time_Start": 319.8,
      "Time_End": 324.68,
      "Text": " Originally when HTTP2 was coming about, there was some debate on whether there should be"
    },
    {
      "Time_Start": 324.68,
      "Time_End": 328.8,
      "Text": " a cleartext version of HTTP2 or not."
    },
    {
      "Time_Start": 328.8,
      "Time_End": 334.96,
      "Text": " The RFC does document a cleartext version denoted as H2C, however, none of the major"
    },
    {
      "Time_Start": 334.96,
      "Time_End": 337.88,
      "Text": " browsers support this protocol."
    },
    {
      "Time_Start": 337.88,
      "Time_End": 342.02,
      "Text": " In some of my limited testing, I have found this an interesting way to have traffic leave"
    },
    {
      "Time_Start": 342.02,
      "Time_End": 346.32,
      "Text": " a network on port 80."
    },
    {
      "Time_Start": 346.32,
      "Time_End": 350.96000000000004,
      "Text": " There are two ways that a client can establish an upgrade to an HTTP2 connection."
    },
    {
      "Time_Start": 350.96,
      "Time_End": 354.84,
      "Text": " With no prior knowledge, the client does not know if the server supports version two"
    },
    {
      "Time_Start": 354.84,
      "Time_End": 356.94,
      "Text": " of the protocol or not."
    },
    {
      "Time_Start": 356.94,
      "Time_End": 362.23999999999995,
      "Text": " For cleartext HTTP URIs, the client sends an upgrade header, and if the server supports"
    },
    {
      "Time_Start": 362.23999999999995,
      "Time_End": 367.35999999999996,
      "Text": " that version, it will respond with a 101 status code for switching protocols."
    },
    {
      "Time_Start": 367.35999999999996,
      "Time_End": 374.84,
      "Text": " For HTTPS URIs, a client advertises what protocol version it supports through the TLS 1.2 ALPN"
    },
    {
      "Time_Start": 374.84,
      "Time_End": 375.84,
      "Text": " extension."
    },
    {
      "Time_Start": 375.84,
      "Time_End": 380.03999999999996,
      "Text": " I have a couple images showing you these here in a second."
    },
    {
      "Time_Start": 380.04,
      "Time_End": 384.48,
      "Text": " When an HTTP 1.1 client is communicating with the server that supports version two"
    },
    {
      "Time_Start": 384.48,
      "Time_End": 389.6,
      "Text": " of the protocol, the server will respond with the alt services header."
    },
    {
      "Time_Start": 389.6,
      "Time_End": 394.08000000000004,
      "Text": " This tells the client that the server supports other versions of the protocol."
    },
    {
      "Time_Start": 394.08000000000004,
      "Time_End": 397.64000000000004,
      "Text": " Now that the client has knowledge, it will start a conversation with the server using"
    },
    {
      "Time_Start": 397.64000000000004,
      "Time_End": 404.28000000000003,
      "Text": " that protocol directly and does not have to negotiate an upgrade."
    },
    {
      "Time_Start": 404.28000000000003,
      "Time_End": 409.88,
      "Text": " An HTTP client uses the upgrade header to switch from version 1.1 to another protocol"
    },
    {
      "Time_Start": 409.88,
      "Time_End": 414.6,
      "Text": " and is only used for the cleartext version of HTTP2, which again is not supported by"
    },
    {
      "Time_Start": 414.6,
      "Time_End": 416.88,
      "Text": " the major browsers."
    },
    {
      "Time_Start": 416.88,
      "Time_End": 422.08,
      "Text": " If the server supports that protocol, then it again responds with that 101 status code."
    },
    {
      "Time_Start": 422.08,
      "Time_End": 427.08,
      "Text": " The client begins the conversation by responding with what's known as the connection preface"
    },
    {
      "Time_Start": 427.08,
      "Time_End": 436.92,
      "Text": " or the magic stream, which consists of the letters PRI asterisk space HTTP2, some new"
    },
    {
      "Time_Start": 436.92,
      "Time_End": 443.0,
      "Text": " lines SM, and then some more new lines, or just simply prism."
    },
    {
      "Time_Start": 443.0,
      "Time_End": 447.68,
      "Text": " I decided to name my program Merlin as a play on the words magic string that is unique to"
    },
    {
      "Time_Start": 447.68,
      "Time_End": 451.92,
      "Text": " the HTTP2 protocol."
    },
    {
      "Time_Start": 451.92,
      "Time_End": 460.08000000000004,
      "Text": " This is an image of a TLS 1.2 ALPN extension advertising that this client supports the"
    },
    {
      "Time_Start": 460.08,
      "Time_End": 468.2,
      "Text": " HTTP2 protocol, the speedy protocol, and regular HTTP 1.1 protocol."
    },
    {
      "Time_Start": 468.2,
      "Time_End": 472.96,
      "Text": " And lastly, here is an image depicting what an alt services header looks like when a server"
    },
    {
      "Time_Start": 472.96,
      "Time_End": 475.0,
      "Text": " responds to a client."
    },
    {
      "Time_Start": 475.0,
      "Time_End": 480.44,
      "Text": " In this image it is saying that it supports the HTTP3 protocol and the HTTP2 protocol"
    },
    {
      "Time_Start": 480.44,
      "Time_End": 484.68,
      "Text": " and they can both be found on port 443."
    },
    {
      "Time_Start": 484.68,
      "Time_End": 489.59999999999997,
      "Text": " Let's take a quick look at HTTP3."
    },
    {
      "Time_Start": 489.6,
      "Time_End": 497.28000000000003,
      "Text": " So QUIC or QUIC UDP internet connection is a UDP based protocol."
    },
    {
      "Time_Start": 497.28000000000003,
      "Time_End": 503.08000000000004,
      "Text": " QUIC can transport many other protocols on it, not just HTTP2, but is the one that was"
    },
    {
      "Time_Start": 503.08000000000004,
      "Time_End": 505.88,
      "Text": " primarily being used."
    },
    {
      "Time_Start": 505.88,
      "Time_End": 512.0,
      "Text": " During some conversations, it was decided that it was best to name this version of HTTP"
    },
    {
      "Time_Start": 512.0,
      "Time_End": 516.1600000000001,
      "Text": " over QUIC, just simply HTTP3."
    },
    {
      "Time_Start": 516.16,
      "Time_End": 521.6,
      "Text": " What's interesting about QUIC is that it's UDP based, but acts like TCP and it does this"
    },
    {
      "Time_Start": 521.6,
      "Time_End": 528.16,
      "Text": " in user land space, which is a part of the application that the application can control,"
    },
    {
      "Time_Start": 528.16,
      "Time_End": 531.4399999999999,
      "Text": " unlike the kernel space for TCP."
    },
    {
      "Time_Start": 531.4399999999999,
      "Time_End": 535.8,
      "Text": " QUIC has some unique features that make it very valuable, such as zero round trip time,"
    },
    {
      "Time_Start": 535.8,
      "Time_End": 542.24,
      "Text": " congestion control, connection migration, and it starts off supporting TLS 1.3."
    },
    {
      "Time_Start": 542.24,
      "Time_End": 547.32,
      "Text": " I personally find connection migration interesting because what happens is when you establish"
    },
    {
      "Time_Start": 547.32,
      "Time_End": 554.84,
      "Text": " an HTTP3 connection, you're assigned a connection ID and you can switch networks multiple times,"
    },
    {
      "Time_Start": 554.84,
      "Time_End": 559.48,
      "Text": " whether it's from your cellular interface to a Wi-Fi interface, to a hardwired connection,"
    },
    {
      "Time_Start": 559.48,
      "Time_End": 564.36,
      "Text": " and you can maintain the same HTTP3 connection due to that connection ID."
    },
    {
      "Time_Start": 564.36,
      "Time_End": 568.6800000000001,
      "Text": " Additionally, QUIC has multiplexing without head of line blocking because it can send"
    },
    {
      "Time_Start": 568.6800000000001,
      "Time_End": 570.96,
      "Text": " multiple streams."
    },
    {
      "Time_Start": 570.96,
      "Time_End": 577.6,
      "Text": " And just like we showed in the last slide, you can negotiate HTTP3 using the alt service header."
    },
    {
      "Time_Start": 577.6,
      "Time_End": 581.9200000000001,
      "Text": " Here's a QUIC image from Daniel Stenberg, the creator of Curl, and from his book,"
    },
    {
      "Time_Start": 581.9200000000001,
      "Time_End": 584.5600000000001,
      "Text": " HTTP3 Explained."
    },
    {
      "Time_Start": 584.5600000000001,
      "Time_End": 591.6,
      "Text": " Notice the parts in yellow on the right hand side that kind of show how QUIC fits on a stack."
    },
    {
      "Time_Start": 591.6,
      "Time_End": 596.36,
      "Text": " And then I quickly wanted to show kind of how HTTP3 is beneficial."
    },
    {
      "Time_Start": 596.36,
      "Time_End": 600.72,
      "Text": " On the far left hand side of this image, you see three arrows going back and forth,"
    },
    {
      "Time_Start": 600.72,
      "Time_End": 604.12,
      "Text": " and that is your normal TCP connection setup."
    },
    {
      "Time_Start": 604.12,
      "Time_End": 610.76,
      "Text": " To make things more complicated for HTTPS, you have your three connections for your TCP setup,"
    },
    {
      "Time_Start": 610.76,
      "Time_End": 615.0400000000001,
      "Text": " then your three pieces of traffic back and forth for your TLS handshake,"
    },
    {
      "Time_Start": 615.0400000000001,
      "Time_End": 617.8000000000001,
      "Text": " and then you can start your conversation."
    },
    {
      "Time_Start": 617.8000000000001,
      "Time_End": 622.44,
      "Text": " With QUIC, the very first message that a client sends to a server has everything it needs"
    },
    {
      "Time_Start": 622.44,
      "Time_End": 629.0400000000001,
      "Text": " to set up a connection and does not need multiple trips back and forth to establish the connection."
    },
    {
      "Time_Start": 629.04,
      "Time_End": 633.48,
      "Text": " This image quickly illustrates the difference between HTTP2 head-of-line blocking"
    },
    {
      "Time_Start": 633.48,
      "Time_End": 637.24,
      "Text": " versus how it is circumvented in QUIC."
    },
    {
      "Time_Start": 637.24,
      "Time_End": 641.24,
      "Text": " The failure of one of the connections, let's say the red connection,"
    },
    {
      "Time_Start": 641.24,
      "Time_End": 646.4399999999999,
      "Text": " doesn't prevent the connections in blue and green from continuing on like they do on HTTP2."
    },
    {
      "Time_Start": 646.4399999999999,
      "Time_End": 649.0,
      "Text": " So this makes it valuable."
    },
    {
      "Time_Start": 649.0,
      "Time_End": 655.4399999999999,
      "Text": " I will say that most organizations do not actually allow UDP to leave their network,"
    },
    {
      "Time_Start": 655.44,
      "Time_End": 664.44,
      "Text": " but the Google Chrome browser does often try to talk over QUIC, especially for sites like YouTube."
    },
    {
      "Time_Start": 664.44,
      "Time_End": 667.8000000000001,
      "Text": " Let's take a deep dive into the key components of Merlin's application concepts,"
    },
    {
      "Time_Start": 667.8000000000001,
      "Time_End": 672.2800000000001,
      "Text": " such as its message structure, the opaque key exchange protocol,"
    },
    {
      "Time_Start": 672.2800000000001,
      "Time_End": 678.96,
      "Text": " HTTP payload encryption through JWEs, and JWT authentication and authorization."
    },
    {
      "Time_Start": 678.96,
      "Time_End": 683.32,
      "Text": " I did want to say that the HTTP payload that is used with Merlin"
    },
    {
      "Time_Start": 683.32,
      "Time_End": 687.36,
      "Text": " leverages the Golang-specific Gob encoding."
    },
    {
      "Time_Start": 687.36,
      "Time_End": 694.08,
      "Text": " This encoding only works when both the server and the client are Go-based."
    },
    {
      "Time_Start": 694.08,
      "Time_End": 699.84,
      "Text": " So here's an example of a message that goes between a Merlin client and server."
    },
    {
      "Time_Start": 699.84,
      "Time_End": 703.44,
      "Text": " Every message starts with a message base like this one."
    },
    {
      "Time_Start": 703.44,
      "Time_End": 706.44,
      "Text": " The base has some key fields, such as the version number,"
    },
    {
      "Time_Start": 706.44,
      "Time_End": 709.6400000000001,
      "Text": " the ID that represents the agent it belongs to,"
    },
    {
      "Time_Start": 709.64,
      "Time_End": 715.6,
      "Text": " and the type is the embedded or nested message that goes inside of it."
    },
    {
      "Time_Start": 715.6,
      "Time_End": 719.24,
      "Text": " In this example, you can see that the embedded message is an agent control"
    },
    {
      "Time_Start": 719.24,
      "Time_End": 724.04,
      "Text": " with a job ID that is sending the kill command to an agent to exit."
    },
    {
      "Time_Start": 724.04,
      "Time_End": 728.68,
      "Text": " Another unique feature of Merlin is message padding."
    },
    {
      "Time_Start": 728.68,
      "Time_End": 734.16,
      "Text": " I heard that oftentimes command and control detection is picked up based on"
    },
    {
      "Time_Start": 734.1999999999999,
      "Time_End": 737.04,
      "Text": " constant message sizes going out of regular intervals,"
    },
    {
      "Time_Start": 737.04,
      "Time_End": 740.0799999999999,
      "Text": " especially when the agent is just checking in."
    },
    {
      "Time_Start": 740.0799999999999,
      "Time_End": 744.1999999999999,
      "Text": " One trick that Merlin uses to get around this is it adds a random pad"
    },
    {
      "Time_Start": 744.1999999999999,
      "Time_End": 748.9599999999999,
      "Text": " to every single message that goes back and forth up to the configurable size."
    },
    {
      "Time_Start": 748.9599999999999,
      "Time_End": 751.6,
      "Text": " By default, that is 4096."
    },
    {
      "Time_Start": 751.6,
      "Time_End": 756.48,
      "Text": " So it will send a string of characters somewhere in that range every single time."
    },
    {
      "Time_Start": 756.48,
      "Time_End": 760.56,
      "Text": " This keeps the command and control traffic messages from not being the same size"
    },
    {
      "Time_Start": 760.5600000000001,
      "Time_End": 764.6400000000001,
      "Text": " over and over again, especially when it's just doing a status check-in."
    },
    {
      "Time_Start": 764.6400000000001,
      "Time_End": 766.48,
      "Text": " And the last field is the token field."
    },
    {
      "Time_Start": 766.48,
      "Time_End": 769.9200000000001,
      "Text": " And this is where the server passes a JWT to the agent,"
    },
    {
      "Time_Start": 769.9200000000001,
      "Time_End": 773.72,
      "Text": " which we'll talk about more later."
    },
    {
      "Time_Start": 773.72,
      "Time_End": 777.12,
      "Text": " One goal of command and control traffic is to add another layer of traffic"
    },
    {
      "Time_Start": 777.12,
      "Time_End": 782.5600000000001,
      "Text": " encryption on top of transport layer security like SSL TLS."
    },
    {
      "Time_Start": 782.5600000000001,
      "Time_End": 786.2,
      "Text": " This prevents defenders from inspecting traffic contents."
    },
    {
      "Time_Start": 786.2,
      "Time_End": 789.32,
      "Text": " In order to do this, the client and the server need to agree on a secret key"
    },
    {
      "Time_Start": 789.32,
      "Time_End": 793.48,
      "Text": " so that way they can both encrypt and decrypt traffic."
    },
    {
      "Time_Start": 793.48,
      "Time_End": 798.0400000000001,
      "Text": " One popular method is to configure the agent with a pre-shared asymmetric key"
    },
    {
      "Time_Start": 798.0400000000001,
      "Time_End": 799.5200000000001,
      "Text": " at compile time."
    },
    {
      "Time_Start": 799.5200000000001,
      "Time_End": 803.2,
      "Text": " This is seen in tools like Cobalt Strike."
    },
    {
      "Time_Start": 803.2,
      "Time_End": 807.44,
      "Text": " When a client and server use a weak pre-shared symmetric key to start a"
    },
    {
      "Time_Start": 807.44,
      "Time_End": 812.2800000000001,
      "Text": " conversation that later results in exchanging asymmetric keys,"
    },
    {
      "Time_Start": 812.2800000000001,
      "Time_End": 816.4000000000001,
      "Text": " it is known as a password authenticated key exchange."
    },
    {
      "Time_Start": 816.4,
      "Time_End": 819.92,
      "Text": " The encrypted key exchange is a subtype of that,"
    },
    {
      "Time_Start": 819.92,
      "Time_End": 824.28,
      "Text": " as well as the opaque key exchange protocol."
    },
    {
      "Time_Start": 824.28,
      "Time_End": 830.64,
      "Text": " This protocol is still an IETF draft and has unique features such as registration,"
    },
    {
      "Time_Start": 830.64,
      "Time_End": 836.0799999999999,
      "Text": " mutual authentication, leverages a secret salt, and an encrypted envelope,"
    },
    {
      "Time_Start": 836.0799999999999,
      "Time_End": 841.0,
      "Text": " which we will talk about those here in the next section."
    },
    {
      "Time_Start": 841.0,
      "Time_End": 843.88,
      "Text": " Okay, it's time for everyone to buckle up because we're going to talk a little bit"
    },
    {
      "Time_Start": 843.88,
      "Time_End": 845.12,
      "Text": " about crypto."
    },
    {
      "Time_Start": 845.12,
      "Time_End": 849.32,
      "Text": " Even though I mostly understand this, I will admit that talking about crypto often"
    },
    {
      "Time_Start": 849.32,
      "Time_End": 852.32,
      "Text": " hurts my head and I can get lost quickly."
    },
    {
      "Time_Start": 852.32,
      "Time_End": 857.28,
      "Text": " I do have a blog post on this where you can walk through the steps individually."
    },
    {
      "Time_Start": 857.28,
      "Time_End": 861.24,
      "Text": " Also, if you'd like, the RFC does a good job of explaining each of the pieces,"
    },
    {
      "Time_Start": 861.24,
      "Time_End": 864.92,
      "Text": " but I'm going to walk through and tell you the Merlin implementation"
    },
    {
      "Time_Start": 864.92,
      "Time_End": 868.28,
      "Text": " of the opaque key exchange."
    },
    {
      "Time_Start": 868.28,
      "Time_End": 873.28,
      "Text": " So to begin with, the Merlin agent has a password."
    },
    {
      "Time_Start": 873.28,
      "Time_End": 879.12,
      "Text": " This password is randomly generated and 30 characters long and is run through 5,000"
    },
    {
      "Time_Start": 879.12,
      "Time_End": 882.56,
      "Text": " iterations of the PBK-DF2."
    },
    {
      "Time_Start": 882.56,
      "Time_End": 887.92,
      "Text": " This password, known as PWDU, is never transmitted across a network ever."
    },
    {
      "Time_Start": 887.92,
      "Time_End": 892.48,
      "Text": " The next component we have is the pre-shared key, which can be specified when calling"
    },
    {
      "Time_Start": 892.48,
      "Time_End": 894.28,
      "Text": " the Merlin agent on the command line."
    },
    {
      "Time_Start": 894.28,
      "Time_End": 898.48,
      "Text": " By default, this is Merlin."
    },
    {
      "Time_Start": 898.48,
      "Time_End": 902.1999999999999,
      "Text": " You can see off to the right this image where the client is sending a message"
    },
    {
      "Time_Start": 902.2,
      "Time_End": 903.72,
      "Text": " to the server."
    },
    {
      "Time_Start": 903.72,
      "Time_End": 910.24,
      "Text": " What happens is the client generates what's known as an alpha, which is derived from PWDU"
    },
    {
      "Time_Start": 910.24,
      "Time_End": 916.6800000000001,
      "Text": " and is sent to the server along with the user ID, which in this case is just the agent's UUID."
    },
    {
      "Time_Start": 916.6800000000001,
      "Time_End": 921.2800000000001,
      "Text": " This is not an opaque requirement, but it is a Merlin implementation."
    },
    {
      "Time_Start": 921.2800000000001,
      "Time_End": 925.4000000000001,
      "Text": " Those two pieces of information are encrypted with the pre-shared key before they are"
    },
    {
      "Time_Start": 925.4000000000001,
      "Time_End": 927.32,
      "Text": " sent to the server."
    },
    {
      "Time_Start": 927.4000000000001,
      "Time_End": 932.6400000000001,
      "Text": " If an attacker happens to capture the user ID or alpha in transit, that is not a problem."
    },
    {
      "Time_Start": 932.6400000000001,
      "Time_End": 937.2,
      "Text": " The opaque protocol is resistant to all of the pieces of information being transferred"
    },
    {
      "Time_Start": 937.2,
      "Time_End": 941.5600000000001,
      "Text": " back and forth, being captured by an attacker."
    },
    {
      "Time_Start": 941.5600000000001,
      "Time_End": 948.12,
      "Text": " The server begins registration by creating a private key, or PrivS, a public key, which"
    },
    {
      "Time_Start": 948.12,
      "Time_End": 956.08,
      "Text": " is PubS, and a per-user oblivious pseudo-random function key known as KU."
    },
    {
      "Time_Start": 956.08,
      "Time_End": 961.0400000000001,
      "Text": " This is what's called a secret salt and is stored on the server."
    },
    {
      "Time_Start": 961.0400000000001,
      "Time_End": 966.0400000000001,
      "Text": " With opaque, the server never has the user's password or hash."
    },
    {
      "Time_Start": 966.0400000000001,
      "Time_End": 970.1600000000001,
      "Text": " The only thing that the server has is this secret salt value, KU."
    },
    {
      "Time_Start": 970.1600000000001,
      "Time_End": 974.36,
      "Text": " It is never transmitted to the client."
    },
    {
      "Time_Start": 974.36,
      "Time_End": 983.0400000000001,
      "Text": " This key, KU, is used to compute salt2, or also known as V in this diagram."
    },
    {
      "Time_Start": 983.04,
      "Time_End": 990.24,
      "Text": " You can think of salt2 like a public key to the private key, KU."
    },
    {
      "Time_Start": 990.24,
      "Time_End": 996.12,
      "Text": " What the server does is it also generates beta, which is derived from both the alpha"
    },
    {
      "Time_Start": 996.12,
      "Time_End": 999.52,
      "Text": " the client sent and the secret salt."
    },
    {
      "Time_Start": 999.52,
      "Time_End": 1006.76,
      "Text": " The server sends back to the client the server's public key, V, and beta."
    },
    {
      "Time_Start": 1006.76,
      "Time_End": 1012.12,
      "Text": " Finishing up the last step of registration, the user executes an oblivious pseudo-random"
    },
    {
      "Time_Start": 1012.12,
      "Time_End": 1017.88,
      "Text": " function, providing it the password, PWDU, which was generated in the first step, along"
    },
    {
      "Time_Start": 1017.88,
      "Time_End": 1022.5600000000001,
      "Text": " with beta, which was just sent by the server, and the V values returned from the server"
    },
    {
      "Time_Start": 1022.5600000000001,
      "Time_End": 1024.0,
      "Text": " as well."
    },
    {
      "Time_Start": 1024.0,
      "Time_End": 1029.94,
      "Text": " The oblivious pseudo-random function outputs a random password known as RWDU."
    },
    {
      "Time_Start": 1029.94,
      "Time_End": 1033.0,
      "Text": " This password is only known to the user."
    },
    {
      "Time_Start": 1033.0,
      "Time_End": 1036.12,
      "Text": " This RWD value cannot be calculated by the server."
    },
    {
      "Time_Start": 1036.12,
      "Time_End": 1038.16,
      "Text": " It does not have enough information."
    },
    {
      "Time_Start": 1038.16,
      "Time_End": 1043.52,
      "Text": " It needs the PWDU piece, which it does not have."
    },
    {
      "Time_Start": 1043.52,
      "Time_End": 1050.96,
      "Text": " The client generates its own public key, known as PUBU, as well as a private key, PRIVU."
    },
    {
      "Time_Start": 1050.96,
      "Time_End": 1057.1200000000001,
      "Text": " Both of these are encrypted with the random password, RWDU, into a single envelope, denoted"
    },
    {
      "Time_Start": 1057.1200000000001,
      "Time_End": 1059.3200000000002,
      "Text": " as ENVU."
    },
    {
      "Time_Start": 1059.3200000000002,
      "Time_End": 1065.1200000000001,
      "Text": " This is the encrypted envelope that will be sent back to the server for storage."
    },
    {
      "Time_Start": 1065.1200000000001,
      "Time_End": 1071.64,
      "Text": " What the user does is it takes this encrypted envelope and its public key and sends it back"
    },
    {
      "Time_Start": 1071.64,
      "Time_End": 1073.2800000000002,
      "Text": " to the server for storage."
    },
    {
      "Time_Start": 1073.2800000000002,
      "Time_End": 1077.96,
      "Text": " Again, the Merlin implementation encrypts this information with the pre-shared key,"
    },
    {
      "Time_Start": 1077.96,
      "Time_End": 1083.6000000000001,
      "Text": " but if the values are recovered by an attacker in transit, that is not a problem."
    },
    {
      "Time_Start": 1083.6000000000001,
      "Time_End": 1086.4,
      "Text": " So here's all these steps of registration."
    },
    {
      "Time_Start": 1086.4,
      "Time_End": 1092.68,
      "Text": " At this point in the conversation, the agent has a password, the server has a salt, and"
    },
    {
      "Time_Start": 1092.68,
      "Time_End": 1094.72,
      "Text": " they both know about each other."
    },
    {
      "Time_Start": 1094.72,
      "Time_End": 1099.16,
      "Text": " But the server does not have the agent's password, and the agent does not have the"
    },
    {
      "Time_Start": 1099.16,
      "Time_End": 1101.72,
      "Text": " secret salt value."
    },
    {
      "Time_Start": 1101.72,
      "Time_End": 1106.3600000000001,
      "Text": " After opaque registration is complete, then we have to move into authentication."
    },
    {
      "Time_Start": 1106.3600000000001,
      "Time_End": 1112.44,
      "Text": " A lot of these steps are the same as registration, with some key differences."
    },
    {
      "Time_Start": 1112.44,
      "Time_End": 1119.08,
      "Text": " The opaque authentication step uses the authenticated Diffie-Hellman key exchange Sigma-I protocol"
    },
    {
      "Time_Start": 1119.08,
      "Time_End": 1120.88,
      "Text": " for key exchange."
    },
    {
      "Time_Start": 1120.88,
      "Time_End": 1124.64,
      "Text": " I'm not going to dive deep into the Sigma-I protocol, but if you want to know more, you"
    },
    {
      "Time_Start": 1124.64,
      "Time_End": 1128.8400000000001,
      "Text": " can find details in the opaque key exchange RFC."
    },
    {
      "Time_Start": 1128.8400000000001,
      "Time_End": 1133.3200000000002,
      "Text": " What happens is the client generates an alpha just like it did during registration and sends"
    },
    {
      "Time_Start": 1133.3200000000002,
      "Time_End": 1137.8400000000001,
      "Text": " key exchange message one, the alpha, and the user ID back to the server."
    },
    {
      "Time_Start": 1137.8400000000001,
      "Time_End": 1142.2,
      "Text": " All this information is encrypted with a pre-shared key."
    },
    {
      "Time_Start": 1142.2,
      "Time_End": 1146.16,
      "Text": " The server receives alpha from the user and calculates beta using the same method defined"
    },
    {
      "Time_Start": 1146.16,
      "Time_End": 1148.16,
      "Text": " in registration."
    },
    {
      "Time_Start": 1148.16,
      "Time_End": 1154.8000000000002,
      "Text": " The server will look up the per-user oblivious pseudo-random function key, or secret salt,"
    },
    {
      "Time_Start": 1154.8000000000002,
      "Time_End": 1159.6000000000001,
      "Text": " and use it to generate salt two, just like it did during registration."
    },
    {
      "Time_Start": 1159.6000000000001,
      "Time_End": 1165.1200000000001,
      "Text": " Additionally, the server will look up the encrypted envelope that it got from the agent"
    },
    {
      "Time_Start": 1165.1200000000001,
      "Time_End": 1166.68,
      "Text": " during registration."
    },
    {
      "Time_Start": 1166.68,
      "Time_End": 1170.52,
      "Text": " The server will go ahead and calculate the second key exchange message, which is key"
    },
    {
      "Time_Start": 1170.52,
      "Time_End": 1177.4,
      "Text": " two, that is derived from the server's private key and key exchange message one."
    },
    {
      "Time_Start": 1177.4,
      "Time_End": 1183.1200000000001,
      "Text": " At this point, the server is able to derive a symmetric secret from key exchange messages"
    },
    {
      "Time_Start": 1183.1200000000001,
      "Time_End": 1185.0800000000002,
      "Text": " one and two."
    },
    {
      "Time_Start": 1185.0800000000002,
      "Time_End": 1190.24,
      "Text": " What happens is the server sends back to the client V, beta, the encrypted envelope, and"
    },
    {
      "Time_Start": 1190.24,
      "Time_End": 1194.0,
      "Text": " key exchange message two."
    },
    {
      "Time_Start": 1194.0,
      "Time_End": 1200.92,
      "Text": " The user receives beta and V from the server and again calculates the random password RWDU,"
    },
    {
      "Time_Start": 1200.92,
      "Time_End": 1203.6000000000001,
      "Text": " just like it did during registration."
    },
    {
      "Time_Start": 1203.6000000000001,
      "Time_End": 1208.4,
      "Text": " Now that the agent has the random password RWDU and the encrypted envelope, it is able"
    },
    {
      "Time_Start": 1208.4,
      "Time_End": 1213.4800000000002,
      "Text": " to decrypt the encrypted envelope and extract out the information, which contained the user's"
    },
    {
      "Time_Start": 1213.4800000000002,
      "Time_End": 1218.1200000000001,
      "Text": " private key, the user's public key, and the server's public key."
    },
    {
      "Time_Start": 1218.1200000000001,
      "Time_End": 1222.96,
      "Text": " To finish authentication, the user will send the third and last key exchange message to"
    },
    {
      "Time_Start": 1222.96,
      "Time_End": 1225.2400000000002,
      "Text": " the server."
    },
    {
      "Time_Start": 1225.2400000000002,
      "Time_End": 1232.3200000000002,
      "Text": " At this point, the agent has all the information it needs to also derive the same symmetric"
    },
    {
      "Time_Start": 1232.32,
      "Time_End": 1235.2,
      "Text": " key S that the server did."
    },
    {
      "Time_Start": 1235.2,
      "Time_End": 1240.76,
      "Text": " So through key exchange messages one and two, they've both been able to derive a shared"
    },
    {
      "Time_Start": 1240.76,
      "Time_End": 1242.4399999999998,
      "Text": " secret."
    },
    {
      "Time_Start": 1242.4399999999998,
      "Time_End": 1247.12,
      "Text": " At this point, all traffic going back and forth between the agent and the client is"
    },
    {
      "Time_Start": 1247.12,
      "Time_End": 1255.08,
      "Text": " now encrypted with the symmetric secret and no longer encrypted with the pre-shared key."
    },
    {
      "Time_Start": 1255.08,
      "Time_End": 1260.4399999999998,
      "Text": " And here's a final look at all the steps going back and forth for opaque authentication."
    },
    {
      "Time_Start": 1260.56,
      "Time_End": 1265.48,
      "Text": " A pre-positioned attacker that captures the alpha, beta, and V values that traverse the"
    },
    {
      "Time_Start": 1265.48,
      "Time_End": 1269.04,
      "Text": " network will not be able to derive the random password view."
    },
    {
      "Time_Start": 1269.04,
      "Time_End": 1273.8,
      "Text": " And without that password, an attacker can't decrypt a captured encrypted envelope even"
    },
    {
      "Time_Start": 1273.8,
      "Time_End": 1277.1200000000001,
      "Text": " if it wanted to."
    },
    {
      "Time_Start": 1277.1200000000001,
      "Time_End": 1281.8,
      "Text": " The default pre-shared key for Merlin is simply merlin in lowercase."
    },
    {
      "Time_Start": 1281.8,
      "Time_End": 1286.6000000000001,
      "Text": " I did not intend for people to actually use that pre-shared key when operating Merlin."
    },
    {
      "Time_Start": 1286.6000000000001,
      "Time_End": 1289.64,
      "Text": " And I wanted a way to discourage individuals from using that pre-shared key."
    },
    {
      "Time_Start": 1289.64,
      "Time_End": 1292.2800000000002,
      "Text": " So I created a program called Prism."
    },
    {
      "Time_Start": 1292.2800000000002,
      "Time_End": 1296.6000000000001,
      "Text": " This name continues on the HTTP2 connection preface magic string that we talked about"
    },
    {
      "Time_Start": 1296.6000000000001,
      "Time_End": 1299.8400000000001,
      "Text": " a couple of slides back."
    },
    {
      "Time_Start": 1299.8400000000001,
      "Time_End": 1304.1200000000001,
      "Text": " The Prism application can be used to fingerprint a Merlin server using the default pre-shared"
    },
    {
      "Time_Start": 1304.1200000000001,
      "Time_End": 1310.68,
      "Text": " key by completing the first step of opaque authentication."
    },
    {
      "Time_Start": 1310.68,
      "Time_End": 1315.0800000000002,
      "Text": " If the target server is using Merlin and is using the Merlin pre-shared key, then the"
    },
    {
      "Time_Start": 1315.12,
      "Time_End": 1321.84,
      "Text": " Prism will be able to decrypt and decode traffic validating what's going on."
    },
    {
      "Time_Start": 1321.84,
      "Time_End": 1325.9199999999998,
      "Text": " In order for this to work, you must know both the URL and the pre-shared key."
    },
    {
      "Time_Start": 1325.9199999999998,
      "Time_End": 1329.8799999999999,
      "Text": " The reason this is, is because if you send traffic to Merlin and you don't know the correct"
    },
    {
      "Time_Start": 1329.8799999999999,
      "Time_End": 1334.24,
      "Text": " URL, then it will just respond with a 404."
    },
    {
      "Time_Start": 1334.24,
      "Time_End": 1339.08,
      "Text": " Prism will also fingerprint versions prior to version 8 when there was no opaque key"
    },
    {
      "Time_Start": 1339.08,
      "Time_End": 1340.08,
      "Text": " exchange."
    },
    {
      "Time_Start": 1340.08,
      "Time_End": 1343.08,
      "Text": " And it does this just by simply looking at the JSON message structure."
    },
    {
      "Time_Start": 1343.08,
      "Time_End": 1347.24,
      "Text": " And if it understands it, then it knows that it's a Merlin server."
    },
    {
      "Time_Start": 1347.24,
      "Time_End": 1351.48,
      "Text": " This image here on the bottom shows a quick example of using the Prism to prove that this"
    },
    {
      "Time_Start": 1351.48,
      "Time_End": 1355.6799999999998,
      "Text": " target server is actually using Merlin."
    },
    {
      "Time_Start": 1355.6799999999998,
      "Time_End": 1360.4399999999998,
      "Text": " Merlin leverages several JavaScript object notations for its web traffic."
    },
    {
      "Time_Start": 1360.4399999999998,
      "Time_End": 1367.1599999999999,
      "Text": " Today we're just going to talk about JSON web encryption and JSON web tokens."
    },
    {
      "Time_Start": 1367.1599999999999,
      "Time_End": 1373.04,
      "Text": " So the traffic going back and forth between a Merlin agent and the Merlin server is encrypted"
    },
    {
      "Time_Start": 1373.2,
      "Time_End": 1378.92,
      "Text": " using that derived secret that we talked about during opaque authentication."
    },
    {
      "Time_Start": 1378.92,
      "Time_End": 1388.04,
      "Text": " That secret is used to encrypt data into a structure known as a JSON web encryption format."
    },
    {
      "Time_Start": 1388.04,
      "Time_End": 1395.6399999999999,
      "Text": " Merlin uses the PBK-DF2 with HMAC SHA-512 and AES-256 GCM key wrap."
    },
    {
      "Time_Start": 1395.6399999999999,
      "Time_End": 1397.84,
      "Text": " I know that's a lot of stuff to talk about."
    },
    {
      "Time_Start": 1397.84,
      "Time_End": 1401.6,
      "Text": " In a second, we'll try and talk about the individual pieces."
    },
    {
      "Time_Start": 1401.6000000000001,
      "Time_End": 1405.7600000000002,
      "Text": " What you need to take away is that every single message that goes back and forth between"
    },
    {
      "Time_Start": 1405.7600000000002,
      "Time_End": 1413.1200000000001,
      "Text": " the agent and client has its own unique per-message content encryption key known as the keg."
    },
    {
      "Time_Start": 1413.1200000000001,
      "Time_End": 1419.44,
      "Text": " Initially, this per-message content encryption key is derived from the pre-shared key, which"
    },
    {
      "Time_Start": 1419.44,
      "Time_End": 1421.4,
      "Text": " is just Merlin lowercase."
    },
    {
      "Time_Start": 1421.4,
      "Time_End": 1426.8000000000002,
      "Text": " But after the agent has authenticated, it uses the opaque secret."
    },
    {
      "Time_Start": 1426.8,
      "Time_End": 1433.08,
      "Text": " This JWE uses the JSON compact serialization format shown in this image below."
    },
    {
      "Time_Start": 1433.08,
      "Time_End": 1437.32,
      "Text": " I did want to highlight before we start looking at actual network traffic that the JWE itself"
    },
    {
      "Time_Start": 1437.32,
      "Time_End": 1442.2,
      "Text": " is also GOM encoded, which is unique to the Go language."
    },
    {
      "Time_Start": 1442.2,
      "Time_End": 1447.04,
      "Text": " So we can see here down at the bottom that the JSON compact serialization format consists"
    },
    {
      "Time_Start": 1447.04,
      "Time_End": 1452.56,
      "Text": " of five parts, the header, the encrypted key, the initialization vector, the ciphertext,"
    },
    {
      "Time_Start": 1452.56,
      "Time_End": 1454.3999999999999,
      "Text": " and the authentication tag."
    },
    {
      "Time_Start": 1454.4,
      "Time_End": 1457.3200000000002,
      "Text": " The important part is the red ciphertext block."
    },
    {
      "Time_Start": 1457.3200000000002,
      "Time_End": 1460.44,
      "Text": " That is where all of our actual C2 data will go."
    },
    {
      "Time_Start": 1460.44,
      "Time_End": 1464.24,
      "Text": " Let's take a quick look at the header."
    },
    {
      "Time_Start": 1464.24,
      "Time_End": 1469.2,
      "Text": " The header itself gets broken down into several different pieces."
    },
    {
      "Time_Start": 1469.2,
      "Time_End": 1477.68,
      "Text": " We can see here that this JWE is using the algorithm, which again is the PBKDF2 through"
    },
    {
      "Time_Start": 1477.68,
      "Time_End": 1481.8400000000001,
      "Text": " HMAC SHA-512 with AES-256 key wrapping."
    },
    {
      "Time_Start": 1481.84,
      "Time_End": 1491.36,
      "Text": " This uses 500,000 iterations of PBKDF2, which you can see in the P2C parameter."
    },
    {
      "Time_Start": 1491.36,
      "Time_End": 1497.56,
      "Text": " The data itself is also AES-256 GCM encrypted."
    },
    {
      "Time_Start": 1497.56,
      "Time_End": 1503.24,
      "Text": " And this last field, the PS2, is a random 128-bit."
    },
    {
      "Time_Start": 1503.24,
      "Time_End": 1508.76,
      "Text": " This is an example of what actual Merlin traffic looks like going back and forth."
    },
    {
      "Time_Start": 1508.76,
      "Time_End": 1513.44,
      "Text": " This is the server responding to a status check-in with an agent kill message."
    },
    {
      "Time_Start": 1513.44,
      "Time_End": 1517.8799999999999,
      "Text": " I've highlighted the dot separators between the different parts of the JWE."
    },
    {
      "Time_Start": 1517.8799999999999,
      "Time_End": 1522.28,
      "Text": " The last section, the authentication tag, was trimmed off the output because the image"
    },
    {
      "Time_Start": 1522.28,
      "Time_End": 1528.64,
      "Text": " was too long, but the bulk of this message is the red block or the ciphertext."
    },
    {
      "Time_Start": 1528.64,
      "Time_End": 1536.64,
      "Text": " So that covers how the Merlin HTTP payload traffic is encrypted going back and forth."
    },
    {
      "Time_Start": 1536.64,
      "Time_End": 1541.48,
      "Text": " Previous versions of Merlin did not have any type of message authentication or authorization."
    },
    {
      "Time_Start": 1541.48,
      "Time_End": 1546.44,
      "Text": " This allowed anyone to send a crafted message, a JSON structure, to the server and it would"
    },
    {
      "Time_Start": 1546.44,
      "Time_End": 1548.4,
      "Text": " attempt to process it."
    },
    {
      "Time_Start": 1548.4,
      "Time_End": 1553.76,
      "Text": " The integration of the opaque protocol provided authentication, but it did not provide message"
    },
    {
      "Time_Start": 1553.76,
      "Time_End": 1555.24,
      "Text": " authorization."
    },
    {
      "Time_Start": 1555.24,
      "Time_End": 1561.44,
      "Text": " To combat this, JSON web tokens were implemented in the HTTP authorization header."
    },
    {
      "Time_Start": 1561.44,
      "Time_End": 1567.6000000000001,
      "Text": " The Merlin server will now return a 404 for all messages that do not contain a JWT."
    },
    {
      "Time_Start": 1567.6000000000001,
      "Time_End": 1573.28,
      "Text": " Merlin uses encrypted and signed JSON web tokens in the compact serialization format"
    },
    {
      "Time_Start": 1573.28,
      "Time_End": 1576.4,
      "Text": " for authentication and authorization."
    },
    {
      "Time_Start": 1576.4,
      "Time_End": 1580.56,
      "Text": " This structure will look just like the JWEs we talked about for the HTTP payload a minute"
    },
    {
      "Time_Start": 1580.56,
      "Time_End": 1582.04,
      "Text": " ago."
    },
    {
      "Time_Start": 1582.04,
      "Time_End": 1585.8,
      "Text": " So there are two different processes that Merlin leverages when generating and using"
    },
    {
      "Time_Start": 1585.8,
      "Time_End": 1586.8,
      "Text": " JWTs."
    },
    {
      "Time_Start": 1586.8,
      "Time_End": 1593.76,
      "Text": " When an agent first starts, it generates its own JWT before it has registered or authenticated"
    },
    {
      "Time_Start": 1593.76,
      "Time_End": 1596.0,
      "Text": " to the server."
    },
    {
      "Time_Start": 1596.0,
      "Time_End": 1600.6,
      "Text": " This JWT will only allow the agent to send opaque registration and authentication messages"
    },
    {
      "Time_Start": 1600.6,
      "Time_End": 1604.24,
      "Text": " and nothing else."
    },
    {
      "Time_Start": 1604.24,
      "Time_End": 1610.9199999999998,
      "Text": " The JWTs are encrypted with AES-256 using the direct algorithm."
    },
    {
      "Time_Start": 1610.9199999999998,
      "Time_End": 1616.2,
      "Text": " This means that there is not a per-message content encryption key."
    },
    {
      "Time_Start": 1616.2,
      "Time_End": 1620.56,
      "Text": " When the agent generates a JWT, it is only valid for 10 seconds."
    },
    {
      "Time_Start": 1620.56,
      "Time_End": 1625.56,
      "Text": " And if the Merlin PSK is still the same, which is just lowercase Merlin, you can see down"
    },
    {
      "Time_Start": 1625.56,
      "Time_End": 1631.48,
      "Text": " here this string that starts with GCU is what the key will be for the JWTs going back and"
    },
    {
      "Time_Start": 1631.48,
      "Time_End": 1633.56,
      "Text": " forth."
    },
    {
      "Time_Start": 1633.56,
      "Time_End": 1638.1200000000001,
      "Text": " After the agent has completed opaque authentication, the server will create a JWT and return it"
    },
    {
      "Time_Start": 1638.1200000000001,
      "Time_End": 1641.04,
      "Text": " to the agent in a message."
    },
    {
      "Time_Start": 1641.08,
      "Time_End": 1646.92,
      "Text": " From this point forward, the agent only uses the JWTs issued by the server."
    },
    {
      "Time_Start": 1646.92,
      "Time_End": 1651.32,
      "Text": " The JWTs created by the Merlin server have a very limited lifetime."
    },
    {
      "Time_Start": 1651.32,
      "Time_End": 1655.6399999999999,
      "Text": " The JWTs lifetime is calculated by adding the agent's sleep time to the maximum possible"
    },
    {
      "Time_Start": 1655.6399999999999,
      "Time_End": 1658.0,
      "Text": " skew value."
    },
    {
      "Time_Start": 1658.0,
      "Time_End": 1662.24,
      "Text": " This value is then multiplied by the agent's max retry value."
    },
    {
      "Time_Start": 1662.24,
      "Time_End": 1668.76,
      "Text": " For an agent using default configuration, this turns out to be 3 minutes and 51 seconds."
    },
    {
      "Time_Start": 1668.8,
      "Time_End": 1675.08,
      "Text": " I do want to highlight that the key used to encrypt the JWTs that are sent from the server"
    },
    {
      "Time_Start": 1675.08,
      "Time_End": 1678.04,
      "Text": " to the agent are unique per interface."
    },
    {
      "Time_Start": 1678.04,
      "Time_End": 1684.92,
      "Text": " So if you start two or three different interfaces, they will all have their own JWT key and that"
    },
    {
      "Time_Start": 1684.92,
      "Time_End": 1687.64,
      "Text": " key is randomly generated when the interface starts."
    },
    {
      "Time_Start": 1687.64,
      "Time_End": 1689.8799999999999,
      "Text": " They are not hardcoded."
    },
    {
      "Time_Start": 1689.8799999999999,
      "Time_End": 1695.08,
      "Text": " When I first rolled out JWTs, I did have problems when people were using virtual machines because"
    },
    {
      "Time_Start": 1695.1599999999999,
      "Time_End": 1701.32,
      "Text": " the virtual machines did not use NTP and the 10 second lifetime was a little bit too quick"
    },
    {
      "Time_Start": 1701.32,
      "Time_End": 1705.3999999999999,
      "Text": " and would get out of sync and it would cause an agent and server to fail checking in."
    },
    {
      "Time_Start": 1705.3999999999999,
      "Time_End": 1711.8799999999999,
      "Text": " Here's another quick example of the JWT, but like I mentioned, because it's encrypted,"
    },
    {
      "Time_Start": 1711.8799999999999,
      "Time_End": 1714.1999999999998,
      "Text": " it is still using the JWE format."
    },
    {
      "Time_Start": 1714.1999999999998,
      "Time_End": 1717.24,
      "Text": " This is the same format we talked about earlier."
    },
    {
      "Time_Start": 1717.24,
      "Time_End": 1721.1599999999999,
      "Text": " You'll notice this part over here between the purple and yellow text is just a dot and"
    },
    {
      "Time_Start": 1721.1599999999999,
      "Time_End": 1723.0,
      "Text": " a dot with nothing in there."
    },
    {
      "Time_Start": 1723.0,
      "Time_End": 1727.48,
      "Text": " That is because we are using the direct encryption algorithm, meaning there is no content encryption"
    },
    {
      "Time_Start": 1727.48,
      "Time_End": 1728.48,
      "Text": " key."
    },
    {
      "Time_Start": 1728.48,
      "Time_End": 1732.68,
      "Text": " It is just encrypted with the pre-shared key and an initialization vector."
    },
    {
      "Time_Start": 1732.68,
      "Time_End": 1736.12,
      "Text": " It's still a JWE overall."
    },
    {
      "Time_Start": 1736.12,
      "Time_End": 1739.88,
      "Text": " This is what it looks like when a JWT is going back and forth in Merlin traffic."
    },
    {
      "Time_Start": 1739.88,
      "Time_End": 1742.44,
      "Text": " This is an agent sending a message to the server for check-in."
    },
    {
      "Time_Start": 1742.44,
      "Time_End": 1749.16,
      "Text": " I just want to quickly highlight some of the more notable features that the Merlin server"
    },
    {
      "Time_Start": 1749.16,
      "Time_End": 1753.5600000000002,
      "Text": " has, such as tab completion, which always helps if you're not sure what to run, as well"
    },
    {
      "Time_Start": 1753.5600000000002,
      "Time_End": 1757.16,
      "Text": " as help menus that I've put a lot of time in making sure are documented well."
    },
    {
      "Time_Start": 1757.16,
      "Time_End": 1765.16,
      "Text": " Additionally, it has module support and does well with creating server logs and UTC timestamps."
    },
    {
      "Time_Start": 1765.16,
      "Time_End": 1770.44,
      "Text": " Probably my favorite feature is the host system command execution."
    },
    {
      "Time_Start": 1770.44,
      "Time_End": 1775.16,
      "Text": " This is where any command that you type that is not a valid Merlin command will end up"
    },
    {
      "Time_Start": 1775.16,
      "Time_End": 1777.88,
      "Text": " executing that program on the host operating system."
    },
    {
      "Time_Start": 1779.0,
      "Time_End": 1783.64,
      "Text": " This can be useful for doing things like finding out your network interface address while you're"
    },
    {
      "Time_Start": 1783.64,
      "Time_End": 1786.28,
      "Text": " using the Merlin server without having to switch to another screen."
    },
    {
      "Time_Start": 1787.48,
      "Time_End": 1792.68,
      "Text": " And lastly, the Merlin server will always generate a self-signed TLS certificate if you don't"
    },
    {
      "Time_Start": 1792.68,
      "Time_End": 1794.92,
      "Text": " provide it one that's signed by a trusted authority."
    },
    {
      "Time_Start": 1797.3200000000002,
      "Time_End": 1802.6000000000001,
      "Text": " Merlin has four menu systems, the main menu, the listener menu, which is where you configure"
    },
    {
      "Time_Start": 1802.6000000000001,
      "Time_End": 1807.3200000000002,
      "Text": " your listeners to receive agent traffic, the agent menu, which is where you interact with"
    },
    {
      "Time_Start": 1807.3200000000002,
      "Time_End": 1809.4,
      "Text": " agents, and a modules menu."
    },
    {
      "Time_Start": 1810.6000000000001,
      "Time_End": 1817.3200000000002,
      "Text": " Modules are just composed of a JSON file that can be loaded at runtime or beforehand, and"
    },
    {
      "Time_Start": 1817.3200000000002,
      "Time_End": 1820.5200000000002,
      "Text": " there are two different types of modules, both standard and extended."
    },
    {
      "Time_Start": 1821.16,
      "Time_End": 1827.4800000000002,
      "Text": " Standard modules simply use a series of commands like a script, while extended modules leverage"
    },
    {
      "Time_Start": 1827.4800000000002,
      "Time_End": 1829.8000000000002,
      "Text": " native Go code that is compiled already."
    },
    {
      "Time_Start": 1830.2,
      "Time_End": 1832.84,
      "Text": " I wanted the Merlin agent to be easy for people to use."
    },
    {
      "Time_Start": 1832.84,
      "Time_End": 1837.24,
      "Text": " Because of that, I made it to where you can pass an agent configuration both at execution"
    },
    {
      "Time_Start": 1837.24,
      "Time_End": 1838.76,
      "Text": " time or at compile time."
    },
    {
      "Time_Start": 1839.72,
      "Time_End": 1843.3999999999999,
      "Text": " The Merlin agent has a couple of native commands that keep you from having to run binaries"
    },
    {
      "Time_Start": 1843.3999999999999,
      "Time_End": 1848.6,
      "Text": " on the host operating system, such as LS and print working directory, and also comes with"
    },
    {
      "Time_Start": 1848.6,
      "Time_End": 1850.52,
      "Text": " verbose and debug output should you need it."
    },
    {
      "Time_Start": 1851.8799999999999,
      "Time_End": 1856.68,
      "Text": " The Merlin agent does have a Windows DLL component that can be useful for doing things like"
    },
    {
      "Time_Start": 1856.8400000000001,
      "Time_End": 1860.44,
      "Text": " application whitelist bypassing using live-off-the-land binaries."
    },
    {
      "Time_Start": 1862.44,
      "Time_End": 1866.8400000000001,
      "Text": " And another favorite feature of mine is the dynamic JA3 hash modification that allows"
    },
    {
      "Time_Start": 1866.8400000000001,
      "Time_End": 1870.8400000000001,
      "Text": " you to change the client's fingerprint at any given time, which we will go through later."
    },
    {
      "Time_Start": 1873.64,
      "Time_End": 1878.1200000000001,
      "Text": " You can download a pre-compiled version of Merlin from the GitHub page."
    },
    {
      "Time_Start": 1878.1200000000001,
      "Time_End": 1881.96,
      "Text": " I do recommend that as it's easy to use, but sometimes you might find yourself in a"
    },
    {
      "Time_Start": 1881.96,
      "Time_End": 1884.3600000000001,
      "Text": " situation where you'd like to compile the agent yourself."
    },
    {
      "Time_Start": 1884.5200000000002,
      "Time_End": 1888.2800000000002,
      "Text": " This is useful when you want all of your values hard-coded in, so that way you don't have"
    },
    {
      "Time_Start": 1888.2800000000002,
      "Time_End": 1890.8400000000001,
      "Text": " to pass command line parameters when executing it."
    },
    {
      "Time_Start": 1892.0400000000002,
      "Time_End": 1895.64,
      "Text": " There are some prerequisites for getting started to building your own agent, such as"
    },
    {
      "Time_Start": 1895.64,
      "Time_End": 1900.0400000000002,
      "Text": " having Go installed, Git, and then MinGW if you'd like to compile the DLL."
    },
    {
      "Time_Start": 1901.8000000000002,
      "Time_End": 1907.4,
      "Text": " Merlin comes with a makefile that you can pass command line arguments, such as the URL,"
    },
    {
      "Time_Start": 1907.8000000000002,
      "Time_End": 1914.3600000000001,
      "Text": " pre-shared-key, proxy, host, protocol, and JA3 hash, that will compile you an agent with"
    },
    {
      "Time_Start": 1914.3600000000001,
      "Time_End": 1917.48,
      "Text": " those settings already configured in the agent for execution."
    },
    {
      "Time_Start": 1921.0,
      "Time_End": 1925.0,
      "Text": " In this video, I will show you how to build a Merlin agent from source with a hard-coded"
    },
    {
      "Time_Start": 1925.0,
      "Time_End": 1928.76,
      "Text": " configuration, so that way you can execute the agent without passing any command line"
    },
    {
      "Time_Start": 1928.76,
      "Time_End": 1929.3200000000002,
      "Text": " parameters."
    },
    {
      "Time_Start": 1931.24,
      "Time_End": 1934.44,
      "Text": " To get started, we need to make sure that a few applications are installed."
    },
    {
      "Time_Start": 1935.4,
      "Time_End": 1946.1200000000001,
      "Text": " We need to make sure that make, Git, and MinGW are installed, with the last one only being"
    },
    {
      "Time_Start": 1946.1200000000001,
      "Time_End": 1948.92,
      "Text": " used to compile the Windows DLL."
    },
    {
      "Time_Start": 1951.88,
      "Time_End": 1954.68,
      "Text": " We also need to make sure that Go is installed."
    },
    {
      "Time_Start": 1954.68,
      "Time_End": 1956.52,
      "Text": " I've already installed Go on this host."
    },
    {
      "Time_Start": 1956.92,
      "Time_End": 1961.6399999999999,
      "Text": " Let's go ahead and grab a copy of the Merlin source code from GitHub, using the go get"
    },
    {
      "Time_Start": 1961.6399999999999,
      "Time_End": 1967.6399999999999,
      "Text": " command."
    },
    {
      "Time_Start": 1967.6399999999999,
      "Time_End": 1981.6399999999999,
      "Text": " All right, let's go to this directory."
    },
    {
      "Time_Start": 1982.1200000000001,
      "Time_End": 1994.76,
      "Text": " The Merlin source code contains a makefile, which has build targets for the agent and"
    },
    {
      "Time_Start": 1994.76,
      "Time_End": 1995.3200000000002,
      "Text": " the server."
    },
    {
      "Time_Start": 1995.88,
      "Time_End": 2001.0800000000002,
      "Text": " To use the makefile, you issue make, followed by the build target, which in this case will"
    },
    {
      "Time_Start": 2001.0800000000002,
      "Time_End": 2004.6000000000001,
      "Text": " be agent, dash, and then the operating system you'd like to build for."
    },
    {
      "Time_Start": 2004.6000000000001,
      "Time_End": 2008.2,
      "Text": " If you're not sure, you can give a double tab, and it will list out the different targets."
    },
    {
      "Time_Start": 2009.0,
      "Time_End": 2010.6000000000001,
      "Text": " We're going to make a Linux agent."
    },
    {
      "Time_Start": 2012.6000000000001,
      "Time_End": 2017.24,
      "Text": " When using make, you can also pass command line arguments to make to hard code in certain"
    },
    {
      "Time_Start": 2017.24,
      "Time_End": 2017.72,
      "Text": " values."
    },
    {
      "Time_Start": 2018.3600000000001,
      "Time_End": 2024.76,
      "Text": " I'll go ahead and set up the URL value."
    },
    {
      "Time_Start": 2035.0,
      "Time_End": 2038.76,
      "Text": " We'll hard code the pre-shared key."
    },
    {
      "Time_Start": 2042.0400000000002,
      "Time_End": 2043.72,
      "Text": " And we'll hard code the protocol."
    },
    {
      "Time_Start": 2045.88,
      "Time_End": 2049.2400000000002,
      "Text": " We're going to use the clear text version of HTTP2."
    },
    {
      "Time_Start": 2051.32,
      "Time_End": 2054.84,
      "Text": " This is going to build the agent, and I'll put it to the data temp directory, followed"
    },
    {
      "Time_Start": 2054.84,
      "Time_End": 2059.48,
      "Text": " by a folder that matches the current Merlin version number, as well as another folder"
    },
    {
      "Time_Start": 2059.48,
      "Time_End": 2063.08,
      "Text": " that is a hash of the Git commit for the source code we're working with."
    },
    {
      "Time_Start": 2064.36,
      "Time_End": 2065.96,
      "Text": " Let's go ahead and execute this agent."
    },
    {
      "Time_Start": 2072.3599999999997,
      "Time_End": 2075.7999999999997,
      "Text": " I'm going to use the verbose flag just so we can see what's going on, but otherwise"
    },
    {
      "Time_Start": 2075.7999999999997,
      "Time_End": 2078.2799999999997,
      "Text": " I'm not passing any other configure information."
    },
    {
      "Time_Start": 2079.72,
      "Time_End": 2082.6,
      "Text": " I've already pre-set up a Merlin server to receive this traffic."
    },
    {
      "Time_Start": 2093.0,
      "Time_End": 2097.24,
      "Text": " All right, we can see the agent successfully checked in to our hard coded information using"
    },
    {
      "Time_Start": 2097.24,
      "Time_End": 2098.2799999999997,
      "Text": " this URL right here."
    },
    {
      "Time_Start": 2098.36,
      "Time_End": 2104.84,
      "Text": " One of the downsides to using this way to hard configure settings is that when you look"
    },
    {
      "Time_Start": 2104.84,
      "Time_End": 2109.96,
      "Text": " at the Merlin executable help menu, our hard coded information shows up here."
    },
    {
      "Time_Start": 2109.96,
      "Time_End": 2116.2000000000003,
      "Text": " So you can see our pre-shared key, it shows up in the help menu, as well as our target"
    },
    {
      "Time_Start": 2116.2000000000003,
      "Time_End": 2116.76,
      "Text": " URL."
    },
    {
      "Time_Start": 2118.28,
      "Time_End": 2121.48,
      "Text": " This can be a problem if a defender manages to get a hold of your executable, because"
    },
    {
      "Time_Start": 2121.48,
      "Time_End": 2124.36,
      "Text": " they can use this to easily grab out this information."
    },
    {
      "Time_Start": 2124.76,
      "Time_End": 2127.96,
      "Text": " One thing that we can do to get around this is to modify the source code."
    },
    {
      "Time_Start": 2128.76,
      "Time_End": 2134.76,
      "Text": " We'll do that by editing the package agent and then agent.go file."
    },
    {
      "Time_Start": 2135.96,
      "Time_End": 2137.8,
      "Text": " This is the source code for the agent itself."
    },
    {
      "Time_Start": 2138.6800000000003,
      "Time_End": 2143.88,
      "Text": " If you come down here to line 112 in the new function, this is where you'll find some"
    },
    {
      "Time_Start": 2143.88,
      "Time_End": 2145.8,
      "Text": " of the settings we can hard configure."
    },
    {
      "Time_Start": 2148.76,
      "Time_End": 2150.92,
      "Text": " Let's start by setting the protocol."
    },
    {
      "Time_Start": 2151.88,
      "Time_End": 2153.2400000000002,
      "Text": " Set it to H2C."
    },
    {
      "Time_Start": 2154.52,
      "Time_End": 2159.7200000000003,
      "Text": " We'll also take advantage of modifying this user agent here, since this one is for Windows."
    },
    {
      "Time_Start": 2159.7200000000003,
      "Time_End": 2161.7200000000003,
      "Text": " We'll set it to match a Linux host."
    },
    {
      "Time_Start": 2162.5200000000004,
      "Time_End": 2166.76,
      "Text": " We can also come down here and set it to a different type of protocol."
    },
    {
      "Time_Start": 2166.76,
      "Time_End": 2169.2400000000002,
      "Text": " This is where you'll find all the different protocols."
    },
    {
      "Time_Start": 2170.28,
      "Time_End": 2171.5600000000004,
      "Text": " So we'll use this one."
    },
    {
      "Time_Start": 2173.0000000000005,
      "Time_End": 2173.96,
      "Text": " We'll use H2C."
    },
    {
      "Time_Start": 2176.2000000000003,
      "Time_End": 2177.5600000000004,
      "Text": " Set it to H2C."
    },
    {
      "Time_Start": 2178.6000000000004,
      "Time_End": 2179.8,
      "Text": " We'll set it to H2C."
    },
    {
      "Time_Start": 2181.0000000000005,
      "Time_End": 2183.0800000000004,
      "Text": " Let's type in the name of the protocol."
    },
    {
      "Time_Start": 2184.0400000000004,
      "Time_End": 2184.92,
      "Text": " We'll use H2C."
    },
    {
      "Time_Start": 2185.88,
      "Time_End": 2187.2400000000002,
      "Text": " We'll also set it to H1."
    },
    {
      "Time_Start": 2188.44,
      "Time_End": 2190.6000000000004,
      "Text": " We'll set it to H1, H2C."
    },
    {
      "Time_Start": 2191.7200000000003,
      "Time_End": 2196.92,
      "Text": " and hard code in a kill date, which is an epoch timestamp."
    },
    {
      "Time_Start": 2196.92,
      "Time_End": 2201.0800000000004,
      "Text": " I've already created one for a date in the future, November"
    },
    {
      "Time_Start": 2201.0800000000004,
      "Time_End": 2201.5800000000004,
      "Text": " 24th."
    },
    {
      "Time_Start": 2206.92,
      "Time_End": 2208.6400000000003,
      "Text": " We can also hard code in our URL."
    },
    {
      "Time_Start": 2221.7200000000003,
      "Time_End": 2223.6400000000003,
      "Text": " And if we scroll down just a couple more lines,"
    },
    {
      "Time_Start": 2223.6400000000003,
      "Time_End": 2225.5600000000004,
      "Text": " we can hard code in the pre-shared key as well."
    },
    {
      "Time_Start": 2242.88,
      "Time_End": 2245.5600000000004,
      "Text": " Let's save this file."
    },
    {
      "Time_Start": 2245.5600000000004,
      "Time_End": 2249.1600000000003,
      "Text": " This time we'll call make, but we won't pass any arguments"
    },
    {
      "Time_Start": 2249.1600000000003,
      "Time_End": 2249.84,
      "Text": " to make itself."
    },
    {
      "Time_Start": 2252.32,
      "Time_End": 2254.2000000000003,
      "Text": " We'll rebuild the Linux binary."
    },
    {
      "Time_Start": 2261.32,
      "Time_End": 2262.92,
      "Text": " And let's check out the Help menu again"
    },
    {
      "Time_Start": 2262.92,
      "Time_End": 2264.96,
      "Text": " to see what that looks like."
    },
    {
      "Time_Start": 2264.96,
      "Time_End": 2267.1200000000003,
      "Text": " All right, we can see the default information"
    },
    {
      "Time_Start": 2267.1200000000003,
      "Time_End": 2268.6000000000004,
      "Text": " is back again."
    },
    {
      "Time_Start": 2268.6000000000004,
      "Time_End": 2272.88,
      "Text": " We cannot see the information we hard coded in the Help menu."
    },
    {
      "Time_Start": 2272.88,
      "Time_End": 2274.5200000000004,
      "Text": " I will say that this doesn't mean"
    },
    {
      "Time_Start": 2274.5200000000004,
      "Time_End": 2275.92,
      "Text": " that it can never be recovered."
    },
    {
      "Time_Start": 2275.92,
      "Time_End": 2278.4800000000005,
      "Text": " It just makes it a little bit harder."
    },
    {
      "Time_Start": 2278.4800000000005,
      "Time_End": 2280.0000000000005,
      "Text": " Let's go ahead and execute the agent"
    },
    {
      "Time_Start": 2280.0,
      "Time_End": 2281.52,
      "Text": " without any command line arguments,"
    },
    {
      "Time_Start": 2281.52,
      "Time_End": 2283.68,
      "Text": " except for I'll use the verbose flag just so we can"
    },
    {
      "Time_Start": 2283.68,
      "Time_End": 2286.28,
      "Text": " see that it's checking in."
    },
    {
      "Time_Start": 2286.28,
      "Time_End": 2287.84,
      "Text": " So we can see here that is, again,"
    },
    {
      "Time_Start": 2287.84,
      "Time_End": 2291.92,
      "Text": " talking to our hard coded URL that we put in earlier."
    },
    {
      "Time_Start": 2291.92,
      "Time_End": 2295.4,
      "Text": " So using these tips, you can pre-build a custom Merlin"
    },
    {
      "Time_Start": 2295.4,
      "Time_End": 2297.6,
      "Text": " agent so that way you can execute it on target"
    },
    {
      "Time_Start": 2297.6,
      "Time_End": 2301.16,
      "Text": " without having to pass any command line parameters."
    },
    {
      "Time_Start": 2301.16,
      "Time_End": 2303.88,
      "Text": " This comes useful to try and maybe evade detection"
    },
    {
      "Time_Start": 2303.88,
      "Time_End": 2305.48,
      "Text": " from process create or when you're"
    },
    {
      "Time_Start": 2305.48,
      "Time_End": 2309.44,
      "Text": " embedding Merlin in another tool to execute the binary itself."
    },
    {
      "Time_Start": 2311.0,
      "Time_End": 2315.64,
      "Text": " Content delivery networks support the HTTP2 protocol"
    },
    {
      "Time_Start": 2315.64,
      "Time_End": 2318.8,
      "Text": " from the client to the CDN itself."
    },
    {
      "Time_Start": 2318.8,
      "Time_End": 2321.84,
      "Text": " So from my computer to something like Amazon CloudFront,"
    },
    {
      "Time_Start": 2321.84,
      "Time_End": 2326.88,
      "Text": " it works, but the CDN does not use the HTTP2 protocol going"
    },
    {
      "Time_Start": 2326.88,
      "Time_End": 2329.2,
      "Text": " from the content delivery network"
    },
    {
      "Time_Start": 2329.2,
      "Time_End": 2331.52,
      "Text": " back to the origin server where traffic has actually"
    },
    {
      "Time_Start": 2331.52,
      "Time_End": 2333.04,
      "Text": " received that."
    },
    {
      "Time_Start": 2333.04,
      "Time_End": 2336.48,
      "Text": " Because of this, you can only accomplish domain fronting"
    },
    {
      "Time_Start": 2336.48,
      "Time_End": 2339.76,
      "Text": " using the HTTP 1.1 protocol."
    },
    {
      "Time_Start": 2339.92,
      "Time_End": 2343.6800000000003,
      "Text": " I added support for this version back in Merlin version 0.8"
    },
    {
      "Time_Start": 2343.6800000000003,
      "Time_End": 2345.96,
      "Text": " just so we could take advantage of the domain fronting"
    },
    {
      "Time_Start": 2345.96,
      "Time_End": 2348.88,
      "Text": " technique for command and control."
    },
    {
      "Time_Start": 2348.88,
      "Time_End": 2352.0,
      "Text": " This is done by adding in the host header feature, which"
    },
    {
      "Time_Start": 2352.0,
      "Time_End": 2356.76,
      "Text": " allows you to specify your own origin server."
    },
    {
      "Time_Start": 2356.76,
      "Time_End": 2359.2000000000003,
      "Text": " Domain fronting can take place over HTTPS"
    },
    {
      "Time_Start": 2359.2000000000003,
      "Time_End": 2362.0800000000004,
      "Text": " for a few number of CDNs."
    },
    {
      "Time_Start": 2362.0800000000004,
      "Time_End": 2364.6400000000003,
      "Text": " However, Amazon's CloudFront mitigated domain fronting"
    },
    {
      "Time_Start": 2364.6400000000003,
      "Time_End": 2367.36,
      "Text": " for HTTPS connections, but you can still"
    },
    {
      "Time_Start": 2367.36,
      "Time_End": 2371.48,
      "Text": " leverage the technique if you're using plain text HTTP."
    },
    {
      "Time_Start": 2371.48,
      "Time_End": 2373.6800000000003,
      "Text": " Depending on your situation, this risk"
    },
    {
      "Time_Start": 2373.6800000000003,
      "Time_End": 2375.28,
      "Text": " could be acceptable because Merlin"
    },
    {
      "Time_Start": 2375.28,
      "Time_End": 2380.1600000000003,
      "Text": " uses HTTP payload encryption through the encrypted JWE"
    },
    {
      "Time_Start": 2380.1600000000003,
      "Time_End": 2383.04,
      "Text": " messages we talked about earlier."
    },
    {
      "Time_Start": 2383.04,
      "Time_End": 2384.6,
      "Text": " In this video, I'm going to show you"
    },
    {
      "Time_Start": 2384.6,
      "Time_End": 2386.84,
      "Text": " how to configure Merlin to leverage a domain fronting"
    },
    {
      "Time_Start": 2386.84,
      "Time_End": 2390.28,
      "Text": " technique through Amazon's CloudFront CDN."
    },
    {
      "Time_Start": 2390.28,
      "Time_End": 2392.36,
      "Text": " To get started, we need to find a target domain"
    },
    {
      "Time_Start": 2392.36,
      "Time_End": 2394.96,
      "Text": " to send traffic through."
    },
    {
      "Time_Start": 2394.96,
      "Time_End": 2398.4,
      "Text": " To find a good target, you can look for DNS records"
    },
    {
      "Time_Start": 2398.4,
      "Time_End": 2401.36,
      "Text": " with a CNAME entry that ends in CloudFront.net,"
    },
    {
      "Time_Start": 2401.36,
      "Time_End": 2403.84,
      "Text": " which is Amazon CDN."
    },
    {
      "Time_Start": 2403.84,
      "Time_End": 2405.04,
      "Text": " I have a good one to target."
    },
    {
      "Time_Start": 2405.04,
      "Time_End": 2406.56,
      "Text": " Let's look up its DNS record."
    },
    {
      "Time_Start": 2419.96,
      "Time_End": 2423.08,
      "Text": " We can see here that status.semantic.com"
    },
    {
      "Time_Start": 2423.12,
      "Time_End": 2429.72,
      "Text": " uses the CloudFront CDN with the endpoint that starts with D14."
    },
    {
      "Time_Start": 2429.72,
      "Time_End": 2433.4,
      "Text": " I have already pre-set up my own CloudFront distribution"
    },
    {
      "Time_Start": 2433.4,
      "Time_End": 2435.68,
      "Text": " and EC2 instance for this demo."
    },
    {
      "Time_Start": 2435.68,
      "Time_End": 2437.16,
      "Text": " You will need to do this yourself"
    },
    {
      "Time_Start": 2437.16,
      "Time_End": 2441.08,
      "Text": " if you want to leverage the domain fronting technique."
    },
    {
      "Time_Start": 2441.08,
      "Time_End": 2444.08,
      "Text": " In this tab over here, I've configured the Merlin server"
    },
    {
      "Time_Start": 2444.08,
      "Time_End": 2447.92,
      "Text": " on the EC2 instance to listen on all interfaces."
    },
    {
      "Time_Start": 2447.92,
      "Time_End": 2450.04,
      "Text": " And the CloudFront distribution I've already set up"
    },
    {
      "Time_Start": 2450.04,
      "Time_End": 2453.24,
      "Text": " points to this EC2 instance."
    },
    {
      "Time_Start": 2453.24,
      "Time_End": 2456.96,
      "Text": " Let's go ahead and execute an agent really quick."
    },
    {
      "Time_Start": 2456.96,
      "Time_End": 2459.24,
      "Text": " On this host, I've configured the Merlin agent"
    },
    {
      "Time_Start": 2459.24,
      "Time_End": 2464.96,
      "Text": " to connect to HTTP colon slash slash status.semantic.com"
    },
    {
      "Time_Start": 2464.96,
      "Time_End": 2465.92,
      "Text": " forward slash updates."
    },
    {
      "Time_Start": 2468.84,
      "Time_End": 2471.48,
      "Text": " Using the pre-shared key, I configured the Merlin interface"
    },
    {
      "Time_Start": 2471.48,
      "Time_End": 2474.0,
      "Text": " with."
    },
    {
      "Time_Start": 2474.0,
      "Time_End": 2476.6,
      "Text": " Using the plain text HTTP protocol,"
    },
    {
      "Time_Start": 2476.6,
      "Time_End": 2480.36,
      "Text": " which is required to do domain fronting through Amazon."
    },
    {
      "Time_Start": 2480.36,
      "Time_End": 2482.68,
      "Text": " And I've set the host header of the traffic"
    },
    {
      "Time_Start": 2482.68,
      "Time_End": 2485.68,
      "Text": " to match my CloudFront distribution."
    },
    {
      "Time_Start": 2485.68,
      "Time_End": 2488.3199999999997,
      "Text": " This is a different endpoint from the one"
    },
    {
      "Time_Start": 2488.3199999999997,
      "Time_End": 2491.92,
      "Text": " we recovered when we looked up the DNS record for Symantec."
    },
    {
      "Time_Start": 2491.92,
      "Time_End": 2494.64,
      "Text": " I've also set the sleep to five seconds to make it go quicker,"
    },
    {
      "Time_Start": 2494.64,
      "Time_End": 2496.2799999999997,
      "Text": " and I've turned on verbose output."
    },
    {
      "Time_Start": 2500.0,
      "Time_End": 2503.48,
      "Text": " You can see here that traffic is going to status.semantic.com"
    },
    {
      "Time_Start": 2503.48,
      "Time_End": 2505.12,
      "Text": " forward slash updates, like we expect."
    },
    {
      "Time_Start": 2508.4,
      "Time_End": 2510.92,
      "Text": " All right, looks like the agent has successfully checked in."
    },
    {
      "Time_Start": 2510.92,
      "Time_End": 2512.56,
      "Text": " Let's go to the Merlin server."
    },
    {
      "Time_Start": 2516.96,
      "Time_End": 2519.8,
      "Text": " All right, we can see here that our Merlin agent checked in,"
    },
    {
      "Time_Start": 2519.8,
      "Time_End": 2524.36,
      "Text": " and it is using the status.semantic.com domain"
    },
    {
      "Time_Start": 2524.36,
      "Time_End": 2526.96,
      "Text": " to send traffic through."
    },
    {
      "Time_Start": 2526.96,
      "Time_End": 2530.0,
      "Text": " Let's go ahead and interact with the agent really quick."
    },
    {
      "Time_Start": 2530.0,
      "Time_End": 2533.08,
      "Text": " We can see the agent's configuration."
    },
    {
      "Time_Start": 2533.08,
      "Time_End": 2534.72,
      "Text": " Let's issue a quick command to it"
    },
    {
      "Time_Start": 2534.72,
      "Time_End": 2536.92,
      "Text": " to list the print working directory."
    },
    {
      "Time_Start": 2541.7599999999998,
      "Time_End": 2544.2799999999997,
      "Text": " Let's also use a module on this agent really quick."
    },
    {
      "Time_Start": 2551.36,
      "Time_End": 2556.72,
      "Text": " We'll go ahead and use the SwiftBelt module."
    },
    {
      "Time_Start": 2556.72,
      "Time_End": 2558.7999999999997,
      "Text": " This module leverages a tool written"
    },
    {
      "Time_Start": 2558.84,
      "Time_End": 2563.32,
      "Text": " by Cedric Owens that does some macOS enumeration."
    },
    {
      "Time_Start": 2563.32,
      "Time_End": 2565.4,
      "Text": " The only thing that we need to set is the agent."
    },
    {
      "Time_Start": 2576.92,
      "Time_End": 2579.1200000000003,
      "Text": " All right, we can see here that the SwiftBelt output"
    },
    {
      "Time_Start": 2579.1200000000003,
      "Time_End": 2580.0800000000004,
      "Text": " was returned to us."
    },
    {
      "Time_Start": 2582.8,
      "Time_End": 2584.28,
      "Text": " These are some of the commands that"
    },
    {
      "Time_Start": 2584.28,
      "Time_End": 2585.48,
      "Text": " were ran on the host last."
    },
    {
      "Time_Start": 2589.6400000000003,
      "Time_End": 2592.88,
      "Text": " And this was just a demo of setting up Merlin"
    },
    {
      "Time_Start": 2592.88,
      "Time_End": 2596.52,
      "Text": " to do domain fronting using Amazon CDN"
    },
    {
      "Time_Start": 2596.52,
      "Time_End": 2600.28,
      "Text": " by sending traffic through status.semantic.com."
    },
    {
      "Time_Start": 2600.28,
      "Time_End": 2602.7200000000003,
      "Text": " Windows Defender will flag pre-compiled versions"
    },
    {
      "Time_Start": 2602.7200000000003,
      "Time_End": 2605.1600000000003,
      "Text": " of Merlin as a threat."
    },
    {
      "Time_Start": 2605.1600000000003,
      "Time_End": 2606.92,
      "Text": " But there is a simple trick you can use"
    },
    {
      "Time_Start": 2606.92,
      "Time_End": 2609.7200000000003,
      "Text": " to circumvent this detection."
    },
    {
      "Time_Start": 2609.7200000000003,
      "Time_End": 2611.84,
      "Text": " In this video, I'm going to show you a simple trick"
    },
    {
      "Time_Start": 2611.84,
      "Time_End": 2614.48,
      "Text": " to get the Merlin agent past Windows Defender."
    },
    {
      "Time_Start": 2614.48,
      "Time_End": 2616.04,
      "Text": " I'm going to show you how to do that."
    },
    {
      "Time_Start": 2619.1600000000003,
      "Time_End": 2621.6800000000003,
      "Text": " Let's get started by going to the Merlin GitHub page"
    },
    {
      "Time_Start": 2621.6800000000003,
      "Time_End": 2624.2400000000002,
      "Text": " and downloading a pre-compiled version of the agent."
    },
    {
      "Time_Start": 2628.92,
      "Time_End": 2630.76,
      "Text": " All of the files here are password protected"
    },
    {
      "Time_Start": 2630.76,
      "Time_End": 2632.7200000000003,
      "Text": " with a lowercase string merlin."
    },
    {
      "Time_Start": 2632.7200000000003,
      "Time_End": 2635.5600000000004,
      "Text": " This is just to prevent inline proxies from inspecting"
    },
    {
      "Time_Start": 2635.5600000000004,
      "Time_End": 2636.36,
      "Text": " the file contents."
    },
    {
      "Time_Start": 2648.8,
      "Time_End": 2651.4,
      "Text": " And we can see that Windows Defender has detected a threat."
    },
    {
      "Time_Start": 2656.44,
      "Time_End": 2661.96,
      "Text": " The Merlin agent is marked here as this virus tool win32 merdin."
    },
    {
      "Time_Start": 2661.96,
      "Time_End": 2663.96,
      "Text": " Let's go ahead and turn off real-time protection"
    },
    {
      "Time_Start": 2663.96,
      "Time_End": 2666.1200000000003,
      "Text": " for just a second so we can do some troubleshooting."
    },
    {
      "Time_Start": 2666.2799999999997,
      "Time_End": 2668.3599999999997,
      "Text": " We're going to use a program called Defender Check"
    },
    {
      "Time_Start": 2668.3599999999997,
      "Time_End": 2669.6,
      "Text": " by Matt Hand."
    },
    {
      "Time_Start": 2669.6,
      "Time_End": 2672.2,
      "Text": " What this program does is it basically takes a file"
    },
    {
      "Time_Start": 2672.2,
      "Time_End": 2674.7999999999997,
      "Text": " and it splits it up into chunks and submits it to Defender"
    },
    {
      "Time_Start": 2674.7999999999997,
      "Time_End": 2676.56,
      "Text": " to figure out where the bad bytes are."
    },
    {
      "Time_Start": 2679.72,
      "Time_End": 2681.96,
      "Text": " I already have a compiled version of Defender Check"
    },
    {
      "Time_Start": 2681.96,
      "Time_End": 2683.08,
      "Text": " on my desktop."
    },
    {
      "Time_Start": 2683.08,
      "Time_End": 2684.6,
      "Text": " So I'm going to go ahead and run it."
    },
    {
      "Time_Start": 2684.6,
      "Time_End": 2686.96,
      "Text": " And as you can see, I'm getting a lot of bad bytes."
    },
    {
      "Time_Start": 2686.96,
      "Time_End": 2688.52,
      "Text": " So I'm going to go ahead and run it."
    },
    {
      "Time_Start": 2688.52,
      "Time_End": 2690.7999999999997,
      "Text": " And as you can see, I'm getting a lot of bad bytes."
    },
    {
      "Time_Start": 2690.7999999999997,
      "Time_End": 2692.3199999999997,
      "Text": " So I'm going to go ahead and run it."
    },
    {
      "Time_Start": 2692.3199999999997,
      "Time_End": 2694.64,
      "Text": " And as you can see, I'm getting a lot of bad bytes."
    },
    {
      "Time_Start": 2694.64,
      "Time_End": 2696.6,
      "Text": " So I'm going to go ahead and run Defender Check"
    },
    {
      "Time_Start": 2696.6,
      "Time_End": 2697.3199999999997,
      "Text": " on my desktop."
    },
    {
      "Time_Start": 2700.8799999999997,
      "Time_End": 2703.7999999999997,
      "Text": " To run Defender Check, you just have to pass it one argument."
    },
    {
      "Time_Start": 2703.7999999999997,
      "Time_End": 2706.2799999999997,
      "Text": " And that is the file path of the file you want to evaluate."
    },
    {
      "Time_Start": 2711.7999999999997,
      "Time_End": 2713.3599999999997,
      "Text": " I'm not actually going to run it here,"
    },
    {
      "Time_Start": 2713.3599999999997,
      "Time_End": 2715.4,
      "Text": " because last time I did it took about three minutes"
    },
    {
      "Time_Start": 2715.4,
      "Time_End": 2716.96,
      "Text": " on this virtual machine."
    },
    {
      "Time_Start": 2716.96,
      "Time_End": 2720.2,
      "Text": " But I've gone ahead and ran Defender Check in this tab"
    },
    {
      "Time_Start": 2720.2,
      "Time_End": 2721.7599999999998,
      "Text": " over here."
    },
    {
      "Time_Start": 2721.7599999999998,
      "Time_End": 2724.6,
      "Text": " You can see that Defender Check identified the bad bytes"
    },
    {
      "Time_Start": 2725.56,
      "Time_End": 2731.44,
      "Text": " cd6067 with the same signature we saw a second ago."
    },
    {
      "Time_Start": 2731.44,
      "Time_End": 2733.16,
      "Text": " Looking at the end of the bytes over here,"
    },
    {
      "Time_Start": 2733.16,
      "Time_End": 2735.56,
      "Text": " I'm willing to bet that it's flagging on either my handle"
    },
    {
      "Time_Start": 2735.56,
      "Time_End": 2736.52,
      "Text": " or the string Merlin."
    },
    {
      "Time_Start": 2739.68,
      "Time_End": 2742.24,
      "Text": " Let's go ahead and modify the file with hxd."
    },
    {
      "Time_Start": 2743.0400000000004,
      "Time_End": 2745.2400000000002,
      "Text": " hxd has a neat feature where you can just"
    },
    {
      "Time_Start": 2745.2400000000002,
      "Time_End": 2749.0400000000004,
      "Text": " jump straight to the offset that Defender Check told us about."
    },
    {
      "Time_Start": 2753.44,
      "Time_End": 2755.6000000000004,
      "Text": " It's kind of hard to see, but if you look down here,"
    },
    {
      "Time_Start": 2755.6000000000004,
      "Time_End": 2757.28,
      "Text": " you can see that that offset takes us"
    },
    {
      "Time_Start": 2757.28,
      "Time_End": 2760.32,
      "Text": " to this period at the end of the string of Neon Dog Merlin."
    },
    {
      "Time_Start": 2765.32,
      "Time_End": 2768.0000000000005,
      "Text": " So I'm going to go ahead and run Defender Check on my desktop."
    },
    {
      "Time_Start": 2768.0000000000005,
      "Time_End": 2770.0800000000004,
      "Text": " And as you can see, I'm getting a lot of bad bytes."
    },
    {
      "Time_Start": 2770.08,
      "Time_End": 2773.2799999999997,
      "Text": " So I'm going to go ahead and replace the string of Neon Dog"
    },
    {
      "Time_Start": 2773.2799999999997,
      "Time_End": 2777.7999999999997,
      "Text": " Merlin package core, core.go."
    },
    {
      "Time_Start": 2777.7999999999997,
      "Time_End": 2782.04,
      "Text": " What we're going to do is a simple find and replace."
    },
    {
      "Time_Start": 2782.04,
      "Time_End": 2786.04,
      "Text": " We're going to find all instances of the string Merlin"
    },
    {
      "Time_Start": 2786.04,
      "Time_End": 2788.84,
      "Text": " and replace it with magix."
    },
    {
      "Time_Start": 2788.84,
      "Time_End": 2790.84,
      "Text": " The replacement string length does"
    },
    {
      "Time_Start": 2790.84,
      "Time_End": 2792.56,
      "Text": " need to match the source string length."
    },
    {
      "Time_Start": 2795.96,
      "Time_End": 2798.44,
      "Text": " All right, we've replaced 52 occurrences of the string"
    },
    {
      "Time_Start": 2798.44,
      "Time_End": 2798.96,
      "Text": " Merlin."
    },
    {
      "Time_Start": 2800.08,
      "Time_End": 2803.16,
      "Text": " We can save our executable."
    },
    {
      "Time_Start": 2803.16,
      "Time_End": 2806.12,
      "Text": " hxd likes to save a backup copy of the binary."
    },
    {
      "Time_Start": 2806.12,
      "Time_End": 2807.7999999999997,
      "Text": " We're going to delete that so that way it"
    },
    {
      "Time_Start": 2807.7999999999997,
      "Time_End": 2810.08,
      "Text": " doesn't get detected when we turn Defender back on."
    },
    {
      "Time_Start": 2816.48,
      "Time_End": 2819.48,
      "Text": " All right, let's resubmit our file with Defender Check."
    },
    {
      "Time_Start": 2822.64,
      "Time_End": 2823.6,
      "Text": " And perfect."
    },
    {
      "Time_Start": 2823.6,
      "Time_End": 2826.2,
      "Text": " No threats found this time."
    },
    {
      "Time_Start": 2826.2,
      "Time_End": 2828.4,
      "Text": " Let's go ahead and turn Realtime Protection back on."
    },
    {
      "Time_Start": 2831.08,
      "Time_End": 2834.6,
      "Text": " We also need to make the same modification to the Merlin"
    },
    {
      "Time_Start": 2834.6,
      "Time_End": 2836.36,
      "Text": " server itself."
    },
    {
      "Time_Start": 2836.36,
      "Time_End": 2839.12,
      "Text": " The reason is because when we changed the string Merlin"
    },
    {
      "Time_Start": 2839.12,
      "Time_End": 2842.72,
      "Text": " to magix, it modified the gob encoding message structure,"
    },
    {
      "Time_Start": 2842.72,
      "Time_End": 2845.44,
      "Text": " and we need to tell the server about it as well."
    },
    {
      "Time_Start": 2845.44,
      "Time_End": 2848.3199999999997,
      "Text": " To do this, we're just going to use sed to find and replace"
    },
    {
      "Time_Start": 2848.3199999999997,
      "Time_End": 2850.44,
      "Text": " that value in the server executable."
    },
    {
      "Time_Start": 2850.44,
      "Time_End": 2855.44,
      "Text": " And do a global replace on the Merlin server executable,"
    },
    {
      "Time_Start": 2855.44,
      "Time_End": 2862.12,
      "Text": " and we'll save that as Merlin server modified."
    },
    {
      "Time_Start": 2862.12,
      "Time_End": 2867.92,
      "Text": " We'll make that file executable, and we'll go ahead"
    },
    {
      "Time_Start": 2867.92,
      "Time_End": 2868.92,
      "Text": " and start the server."
    },
    {
      "Time_Start": 2880.8,
      "Time_End": 2882.48,
      "Text": " I'm going to copy in a set of commands"
    },
    {
      "Time_Start": 2882.48,
      "Time_End": 2885.0,
      "Text": " that will start us up a listener so we can check in an agent."
    },
    {
      "Time_Start": 2892.2000000000003,
      "Time_End": 2894.56,
      "Text": " Go back to our Windows host and fire off an agent."
    },
    {
      "Time_Start": 2897.76,
      "Time_End": 2900.32,
      "Text": " This is the command I'm going to use to check in an agent"
    },
    {
      "Time_Start": 2900.32,
      "Time_End": 2903.56,
      "Text": " to the server that we just started a second ago."
    },
    {
      "Time_Start": 2903.56,
      "Time_End": 2905.76,
      "Text": " Do want to note that the Windows agent will not"
    },
    {
      "Time_Start": 2905.76,
      "Time_End": 2908.84,
      "Text": " output any information to standard out,"
    },
    {
      "Time_Start": 2908.84,
      "Time_End": 2910.2400000000002,
      "Text": " but it does start its own process."
    },
    {
      "Time_Start": 2915.1200000000003,
      "Time_End": 2919.1600000000003,
      "Text": " We can verify that it's running in the task manager."
    },
    {
      "Time_Start": 2919.1600000000003,
      "Time_End": 2923.32,
      "Text": " You can see right here that the Merlin agent is running."
    },
    {
      "Time_Start": 2923.32,
      "Time_End": 2925.4,
      "Text": " Go back to the server and verify that it's there."
    },
    {
      "Time_Start": 2931.36,
      "Time_End": 2935.32,
      "Text": " All right, our agent has checked in."
    },
    {
      "Time_Start": 2935.36,
      "Time_End": 2939.84,
      "Text": " Issue a simple command like print working directory,"
    },
    {
      "Time_Start": 2939.84,
      "Time_End": 2943.2400000000002,
      "Text": " and then we'll issue the kill command after that."
    },
    {
      "Time_Start": 2943.2400000000002,
      "Time_End": 2945.04,
      "Text": " We can see that the print working directory command"
    },
    {
      "Time_Start": 2945.04,
      "Time_End": 2948.0800000000004,
      "Text": " finished just fine, and the agent was also killed and removed"
    },
    {
      "Time_Start": 2948.0800000000004,
      "Time_End": 2951.04,
      "Text": " from the server."
    },
    {
      "Time_Start": 2951.04,
      "Time_End": 2954.4,
      "Text": " Looking back over here, real-time protection is still on,"
    },
    {
      "Time_Start": 2954.4,
      "Time_End": 2957.6400000000003,
      "Text": " and no threat was found."
    },
    {
      "Time_Start": 2957.6400000000003,
      "Time_End": 2958.28,
      "Text": " So there you go."
    },
    {
      "Time_Start": 2958.28,
      "Time_End": 2962.0,
      "Text": " Simple find and replace on the string Merlin with magics,"
    },
    {
      "Time_Start": 2962.0,
      "Time_End": 2963.28,
      "Text": " and you can get past Defender."
    },
    {
      "Time_Start": 2965.52,
      "Time_End": 2967.36,
      "Text": " When network traffic uses TLS, it's"
    },
    {
      "Time_Start": 2967.36,
      "Time_End": 2969.1200000000003,
      "Text": " not easy to inspect the message contents"
    },
    {
      "Time_Start": 2969.1200000000003,
      "Time_End": 2971.1600000000003,
      "Text": " to determine if it's from a command control"
    },
    {
      "Time_Start": 2971.1600000000003,
      "Time_End": 2973.0800000000004,
      "Text": " client running a network."
    },
    {
      "Time_Start": 2973.0800000000004,
      "Time_End": 2975.76,
      "Text": " However, the client and server's TLS configuration"
    },
    {
      "Time_Start": 2975.76,
      "Time_End": 2979.0800000000004,
      "Text": " are sent in the clear and can be unique and specific"
    },
    {
      "Time_Start": 2979.0800000000004,
      "Time_End": 2981.0800000000004,
      "Text": " to a client."
    },
    {
      "Time_Start": 2981.0800000000004,
      "Time_End": 2984.0,
      "Text": " JA3 is a tool for fingerprinting clients and servers"
    },
    {
      "Time_Start": 2984.0,
      "Time_End": 2987.2000000000003,
      "Text": " based on these accessible TLS settings, which I'll"
    },
    {
      "Time_Start": 2987.2000000000003,
      "Time_End": 2989.2000000000003,
      "Text": " show you on the next slide."
    },
    {
      "Time_Start": 2989.2000000000003,
      "Time_End": 2992.8,
      "Text": " The tool calculates an MD5 hash based on the client's TLS"
    },
    {
      "Time_Start": 2992.8,
      "Time_End": 2996.6800000000003,
      "Text": " settings from these five key fields, the SSL TLS version"
    },
    {
      "Time_Start": 2996.6800000000003,
      "Time_End": 2999.5600000000004,
      "Text": " number, the supported cipher suites,"
    },
    {
      "Time_Start": 2999.5600000000004,
      "Time_End": 3002.92,
      "Text": " the supported TLS extensions, the elliptic curves,"
    },
    {
      "Time_Start": 3002.92,
      "Time_End": 3004.6400000000003,
      "Text": " and the elliptic curve point format."
    },
    {
      "Time_Start": 3008.52,
      "Time_End": 3011.28,
      "Text": " I do want to highlight that there is a JA3 fingerprint"
    },
    {
      "Time_Start": 3011.28,
      "Time_End": 3014.4,
      "Text": " database that contains a list of all known JA3"
    },
    {
      "Time_Start": 3014.4,
      "Time_End": 3017.36,
      "Text": " hashes and another data set that matches them"
    },
    {
      "Time_Start": 3017.36,
      "Time_End": 3020.2400000000002,
      "Text": " to known user agent strings."
    },
    {
      "Time_Start": 3020.2400000000002,
      "Time_End": 3022.88,
      "Text": " Now keep in mind, Merlin is just a TLS client"
    },
    {
      "Time_Start": 3022.88,
      "Time_End": 3026.0800000000004,
      "Text": " as well that uses its own unique configuration."
    },
    {
      "Time_Start": 3026.0800000000004,
      "Time_End": 3028.8,
      "Text": " A network Defender could detect Merlin traffic"
    },
    {
      "Time_Start": 3028.8,
      "Time_End": 3031.44,
      "Text": " based solely on its JA3 hash without having"
    },
    {
      "Time_Start": 3031.44,
      "Time_End": 3035.32,
      "Text": " to view the actual message traffic itself."
    },
    {
      "Time_Start": 3035.32,
      "Time_End": 3038.48,
      "Text": " This slide shows over here in green and purple"
    },
    {
      "Time_Start": 3038.48,
      "Time_End": 3043.1600000000003,
      "Text": " what the Merlin default JA3 hash is."
    },
    {
      "Time_Start": 3043.1600000000003,
      "Time_End": 3044.84,
      "Text": " One of my co-workers, Max Harley,"
    },
    {
      "Time_Start": 3044.84,
      "Time_End": 3047.0800000000004,
      "Text": " has developed a library that allows a client"
    },
    {
      "Time_Start": 3047.0800000000004,
      "Time_End": 3049.6400000000003,
      "Text": " to dynamically change its configuration"
    },
    {
      "Time_Start": 3049.64,
      "Time_End": 3052.48,
      "Text": " by providing it the unhashed configuration"
    },
    {
      "Time_Start": 3052.48,
      "Time_End": 3055.08,
      "Text": " settings used with JA3."
    },
    {
      "Time_Start": 3055.08,
      "Time_End": 3057.08,
      "Text": " This has been integrated into Merlin"
    },
    {
      "Time_Start": 3057.08,
      "Time_End": 3060.3599999999997,
      "Text": " and can be used to change the client while it's already"
    },
    {
      "Time_Start": 3060.3599999999997,
      "Time_End": 3063.16,
      "Text": " running or by passing it a command line"
    },
    {
      "Time_Start": 3063.16,
      "Time_End": 3066.0,
      "Text": " parameter when it starts."
    },
    {
      "Time_Start": 3066.0,
      "Time_End": 3067.6,
      "Text": " Here's an example of some of the fields"
    },
    {
      "Time_Start": 3067.6,
      "Time_End": 3070.64,
      "Text": " that JA3 uses to calculate the hash."
    },
    {
      "Time_Start": 3070.64,
      "Time_End": 3072.64,
      "Text": " Not all of the fields are displayed in this image."
    },
    {
      "Time_Start": 3076.56,
      "Time_End": 3078.0,
      "Text": " In this video, I'm going to show you"
    },
    {
      "Time_Start": 3078.0,
      "Time_End": 3081.92,
      "Text": " how to detect Merlin traffic based off its JA3 fingerprint."
    },
    {
      "Time_Start": 3081.92,
      "Time_End": 3086.28,
      "Text": " JA3 is a method for creating SSL TLS client fingerprints"
    },
    {
      "Time_Start": 3086.28,
      "Time_End": 3089.44,
      "Text": " based on information such as the SSL TLS version"
    },
    {
      "Time_Start": 3089.44,
      "Time_End": 3091.88,
      "Text": " number, cipher suites, extensions,"
    },
    {
      "Time_Start": 3091.88,
      "Time_End": 3094.36,
      "Text": " and a couple other fields as well."
    },
    {
      "Time_Start": 3094.36,
      "Time_End": 3096.44,
      "Text": " Following this, I'll show you how we can dynamically"
    },
    {
      "Time_Start": 3096.44,
      "Time_End": 3101.72,
      "Text": " change our JA3 fingerprint on the fly to evade detections."
    },
    {
      "Time_Start": 3101.72,
      "Time_End": 3104.24,
      "Text": " To get started, we'll execute a packet capture."
    },
    {
      "Time_Start": 3108.96,
      "Time_End": 3111.8,
      "Text": " We'll switch over to this tab and check in an agent."
    },
    {
      "Time_Start": 3114.72,
      "Time_End": 3117.4,
      "Text": " We'll wait for it to finish opaque registration"
    },
    {
      "Time_Start": 3117.4,
      "Time_End": 3118.32,
      "Text": " and authentication."
    },
    {
      "Time_Start": 3133.24,
      "Time_End": 3134.6,
      "Text": " All right, we can kill this."
    },
    {
      "Time_Start": 3135.6,
      "Time_End": 3137.12,
      "Text": " And we can stop our packet capture."
    },
    {
      "Time_Start": 3140.72,
      "Time_End": 3144.7599999999998,
      "Text": " Now let's use the JA3 tool to calculate the default Merlin"
    },
    {
      "Time_Start": 3144.7599999999998,
      "Time_End": 3147.72,
      "Text": " client hash."
    },
    {
      "Time_Start": 3147.72,
      "Time_End": 3149.8399999999997,
      "Text": " What I'm going to do is use the Python script,"
    },
    {
      "Time_Start": 3149.8399999999997,
      "Time_End": 3152.48,
      "Text": " and I'm going to pass in the PCAP that we just made."
    },
    {
      "Time_Start": 3156.24,
      "Time_End": 3160.2799999999997,
      "Text": " And you can see here, this is the Merlin client default TLS"
    },
    {
      "Time_Start": 3160.2799999999997,
      "Time_End": 3160.92,
      "Text": " fingerprint."
    },
    {
      "Time_Start": 3165.6,
      "Time_End": 3167.52,
      "Text": " We're going to use a site called JA3er."
    },
    {
      "Time_Start": 3167.52,
      "Time_End": 3170.4,
      "Text": " And here, this site will tell you what your current JA3"
    },
    {
      "Time_Start": 3170.4,
      "Time_End": 3171.88,
      "Text": " fingerprint is."
    },
    {
      "Time_Start": 3171.88,
      "Time_End": 3175.68,
      "Text": " It also provides you the ability to check a hash."
    },
    {
      "Time_Start": 3175.68,
      "Time_End": 3176.92,
      "Text": " Let's check the Merlin client."
    },
    {
      "Time_Start": 3180.7599999999998,
      "Time_End": 3183.2,
      "Text": " All right, Merlin client was not found in the database."
    },
    {
      "Time_Start": 3186.7999999999997,
      "Time_End": 3188.7999999999997,
      "Text": " This website also provides you the opportunity"
    },
    {
      "Time_Start": 3188.7999999999997,
      "Time_End": 3191.0,
      "Text": " to download the JA3 fingerprint."
    },
    {
      "Time_Start": 3192.0,
      "Time_End": 3193.96,
      "Text": " This website also provides you the opportunity"
    },
    {
      "Time_Start": 3193.96,
      "Time_End": 3197.08,
      "Text": " to download a copy of its database or JA3"
    },
    {
      "Time_Start": 3197.08,
      "Time_End": 3200.56,
      "Text": " hashes with their associated user agent strings."
    },
    {
      "Time_Start": 3200.56,
      "Time_End": 3203.16,
      "Text": " I've gone ahead and loaded up a copy of one of the JSON files"
    },
    {
      "Time_Start": 3203.16,
      "Time_End": 3205.32,
      "Text": " over here."
    },
    {
      "Time_Start": 3205.32,
      "Time_End": 3207.6,
      "Text": " We're going to use this JA3 string"
    },
    {
      "Time_Start": 3207.6,
      "Time_End": 3209.28,
      "Text": " to configure the Merlin agent with."
    },
    {
      "Time_Start": 3210.28,
      "Time_End": 3211.4,
      "Text": " Come back over here."
    },
    {
      "Time_Start": 3211.4,
      "Time_End": 3212.76,
      "Text": " We'll start a new packet capture."
    },
    {
      "Time_Start": 3216.0400000000004,
      "Time_End": 3217.52,
      "Text": " And we will check an agent in."
    },
    {
      "Time_Start": 3221.92,
      "Time_End": 3225.0400000000004,
      "Text": " Let's go to the server and wait for the agent to check in."
    },
    {
      "Time_Start": 3225.0400000000004,
      "Time_End": 3227.6000000000004,
      "Text": " This one you see here is from the test we did a minute ago."
    },
    {
      "Time_Start": 3231.6000000000004,
      "Time_End": 3232.48,
      "Text": " And we'll check in."
    },
    {
      "Time_Start": 3232.48,
      "Time_End": 3233.32,
      "Text": " And we'll check in."
    },
    {
      "Time_Start": 3233.32,
      "Time_End": 3234.1200000000003,
      "Text": " And we'll check in."
    },
    {
      "Time_Start": 3234.1200000000003,
      "Time_End": 3234.96,
      "Text": " And we'll check in."
    },
    {
      "Time_Start": 3234.96,
      "Time_End": 3235.76,
      "Text": " And we'll check in."
    },
    {
      "Time_Start": 3235.76,
      "Time_End": 3236.5600000000004,
      "Text": " And we'll check in."
    },
    {
      "Time_Start": 3236.5600000000004,
      "Time_End": 3237.36,
      "Text": " And we'll check in."
    },
    {
      "Time_Start": 3237.36,
      "Time_End": 3238.1600000000003,
      "Text": " And we'll check in."
    },
    {
      "Time_Start": 3238.2799999999997,
      "Time_End": 3239.6,
      "Text": " And we'll check in."
    },
    {
      "Time_Start": 3239.6,
      "Time_End": 3240.3999999999996,
      "Text": " And we'll check in."
    },
    {
      "Time_Start": 3240.3999999999996,
      "Time_End": 3241.2,
      "Text": " And we'll check in."
    },
    {
      "Time_Start": 3246.2,
      "Time_End": 3254.04,
      "Text": " By issuing the set JA3 command, you can paste in a JA3 string."
    },
    {
      "Time_Start": 3254.04,
      "Time_End": 3256.96,
      "Text": " And the agent will use it to configure itself with that."
    },
    {
      "Time_Start": 3256.96,
      "Time_End": 3259.52,
      "Text": " Let's visit over here to make sure the agent receives"
    },
    {
      "Time_Start": 3259.52,
      "Time_End": 3260.04,
      "Text": " the command."
    },
    {
      "Time_Start": 3263.52,
      "Time_End": 3265.0,
      "Text": " And you can see right here that I did."
    },
    {
      "Time_Start": 3268.16,
      "Time_End": 3272.92,
      "Text": " Now, I've pre-selected another JA3 string out of the database."
    },
    {
      "Time_Start": 3272.92,
      "Time_End": 3275.0,
      "Text": " We'll configure the Merlin client again."
    },
    {
      "Time_Start": 3282.8399999999997,
      "Time_End": 3284.3999999999996,
      "Text": " Again, we'll go to the agent and wait"
    },
    {
      "Time_Start": 3284.3999999999996,
      "Time_End": 3292.7999999999997,
      "Text": " for it to receive the command, which it has."
    },
    {
      "Time_Start": 3292.7999999999997,
      "Time_End": 3294.2,
      "Text": " Let's go ahead and kill the agent."
    },
    {
      "Time_Start": 3299.16,
      "Time_End": 3301.16,
      "Text": " And we can also stop our packet capture."
    },
    {
      "Time_Start": 3306.8799999999997,
      "Time_End": 3308.68,
      "Text": " Let's go ahead and use the JA3 tool"
    },
    {
      "Time_Start": 3308.68,
      "Time_End": 3310.3999999999996,
      "Text": " to calculate the hashes again."
    },
    {
      "Time_Start": 3315.12,
      "Time_End": 3320.3199999999997,
      "Text": " So you can see here, this is the default Merlin client TLS"
    },
    {
      "Time_Start": 3320.3199999999997,
      "Time_End": 3323.24,
      "Text": " JA3 fingerprint."
    },
    {
      "Time_Start": 3323.24,
      "Time_End": 3325.56,
      "Text": " And here is the fingerprint after we"
    },
    {
      "Time_Start": 3325.56,
      "Time_End": 3328.96,
      "Text": " changed it the first time."
    },
    {
      "Time_Start": 3328.96,
      "Time_End": 3332.08,
      "Text": " And you can see we changed it again to a different hash."
    },
    {
      "Time_Start": 3332.08,
      "Time_End": 3333.7999999999997,
      "Text": " So out of all the captured traffic,"
    },
    {
      "Time_Start": 3333.7999999999997,
      "Time_End": 3338.7599999999998,
      "Text": " it was one Merlin client, but it had three different hashes."
    },
    {
      "Time_Start": 3338.7599999999998,
      "Time_End": 3342.56,
      "Text": " Another useful thing you can do is you can take this hash."
    },
    {
      "Time_Start": 3342.56,
      "Time_End": 3344.56,
      "Text": " You can visit this database."
    },
    {
      "Time_Start": 3344.56,
      "Time_End": 3346.7999999999997,
      "Text": " And you can look up the user agent string"
    },
    {
      "Time_Start": 3346.7999999999997,
      "Time_End": 3348.72,
      "Text": " that it was associated with."
    },
    {
      "Time_Start": 3348.72,
      "Time_End": 3350.44,
      "Text": " So we can see here that this hash"
    },
    {
      "Time_Start": 3350.48,
      "Time_End": 3356.36,
      "Text": " was used with this user agent string in 2019."
    },
    {
      "Time_Start": 3356.36,
      "Time_End": 3358.2000000000003,
      "Text": " I will say that you have to be careful when"
    },
    {
      "Time_Start": 3358.2000000000003,
      "Time_End": 3362.32,
      "Text": " you configure the Merlin agent to use a specific JA3 string,"
    },
    {
      "Time_Start": 3362.32,
      "Time_End": 3365.12,
      "Text": " because you could ask the agent to configure itself"
    },
    {
      "Time_Start": 3365.12,
      "Time_End": 3368.32,
      "Text": " and use Cypher suites or TLS extensions"
    },
    {
      "Time_Start": 3368.32,
      "Time_End": 3369.68,
      "Text": " that it does not support."
    },
    {
      "Time_Start": 3369.68,
      "Time_End": 3372.2400000000002,
      "Text": " And if you do this, it will end up breaking the agent"
    },
    {
      "Time_Start": 3372.2400000000002,
      "Time_End": 3373.68,
      "Text": " from communicating with the server."
    },
    {
      "Time_Start": 3373.68,
      "Time_End": 3376.52,
      "Text": " So be careful when you do that."
    },
    {
      "Time_Start": 3376.52,
      "Time_End": 3378.6,
      "Text": " This is also useful for evading detection"
    },
    {
      "Time_Start": 3378.64,
      "Time_End": 3380.88,
      "Text": " when a defender is looking for traffic"
    },
    {
      "Time_Start": 3380.88,
      "Time_End": 3384.4,
      "Text": " based off of a JA3 hash."
    },
    {
      "Time_Start": 3384.4,
      "Time_End": 3386.96,
      "Text": " One last thing."
    },
    {
      "Time_Start": 3386.96,
      "Time_End": 3388.96,
      "Text": " We didn't go through it in here, but you can also"
    },
    {
      "Time_Start": 3388.96,
      "Time_End": 3392.92,
      "Text": " specify a JA3 string at execution time,"
    },
    {
      "Time_Start": 3392.92,
      "Time_End": 3397.08,
      "Text": " if you would like, using this command line argument."
    },
    {
      "Time_Start": 3397.08,
      "Time_End": 3399.0,
      "Text": " In today's presentation, we talked about Merlin,"
    },
    {
      "Time_Start": 3399.0,
      "Time_End": 3401.24,
      "Text": " a cross-platform post-exploitation"
    },
    {
      "Time_Start": 3401.24,
      "Time_End": 3405.68,
      "Text": " command and control server and agent written in Go."
    },
    {
      "Time_Start": 3405.6800000000003,
      "Time_End": 3411.5600000000004,
      "Text": " This tool leverages both the HTTP 1, 2, and 3 protocols."
    },
    {
      "Time_Start": 3411.5600000000004,
      "Time_End": 3414.0400000000004,
      "Text": " Additionally, Merlin uses the opaque authenticated key"
    },
    {
      "Time_Start": 3414.0400000000004,
      "Time_End": 3417.4800000000005,
      "Text": " exchange message to establish a symmetric secret"
    },
    {
      "Time_Start": 3417.4800000000005,
      "Time_End": 3420.6400000000003,
      "Text": " between the server and the client."
    },
    {
      "Time_Start": 3420.6400000000003,
      "Time_End": 3424.6000000000004,
      "Text": " Merlin also leverages JWTs for authentication"
    },
    {
      "Time_Start": 3424.6000000000004,
      "Time_End": 3427.1600000000003,
      "Text": " and authorization to facilitate which"
    },
    {
      "Time_Start": 3427.1600000000003,
      "Time_End": 3431.2400000000002,
      "Text": " messages it's allowed to talk with the server about."
    },
    {
      "Time_Start": 3431.2400000000002,
      "Time_End": 3434.7200000000003,
      "Text": " Merlin leverages payload encryption through JWEs,"
    },
    {
      "Time_Start": 3434.7200000000003,
      "Time_End": 3436.6400000000003,
      "Text": " so that way a defender looking at traffic"
    },
    {
      "Time_Start": 3436.6400000000003,
      "Time_End": 3438.76,
      "Text": " will not actually be able to decrypt the message"
    },
    {
      "Time_Start": 3438.76,
      "Time_End": 3441.28,
      "Text": " contents itself."
    },
    {
      "Time_Start": 3441.28,
      "Time_End": 3443.2400000000002,
      "Text": " The Merlin server has the ability"
    },
    {
      "Time_Start": 3443.2400000000002,
      "Time_End": 3445.36,
      "Text": " to instantiate multiple listeners using"
    },
    {
      "Time_Start": 3445.36,
      "Time_End": 3449.0400000000004,
      "Text": " multiple protocols all at the same time."
    },
    {
      "Time_Start": 3449.0400000000004,
      "Time_End": 3451.6400000000003,
      "Text": " We also did a quick walkthrough on customizing agents"
    },
    {
      "Time_Start": 3451.6400000000003,
      "Time_End": 3454.96,
      "Text": " by hard coding in values at compile time,"
    },
    {
      "Time_Start": 3454.96,
      "Time_End": 3457.4800000000005,
      "Text": " as well as evasion tips, such as ways"
    },
    {
      "Time_Start": 3457.4800000000005,
      "Time_End": 3460.76,
      "Text": " to bypass Windows Defender threat detection"
    },
    {
      "Time_Start": 3460.76,
      "Time_End": 3464.1200000000003,
      "Text": " and changing the JA3 hash of the Merlin client on the fly."
    },
    {
      "Time_Start": 3465.7200000000003,
      "Time_End": 3467.6800000000003,
      "Text": " Thank you for attending my presentation,"
    },
    {
      "Time_Start": 3467.6800000000003,
      "Time_End": 3470.4800000000005,
      "Text": " and I'll stick around for any questions."
    },
    {
      "Time_Start": 3470.4800000000005,
      "Time_End": 3478.4800000000005,
      "Text": " \u266a\u266a\u266a"
    }
  ]
}