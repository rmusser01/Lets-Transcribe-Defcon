{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 17.64,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Hey, everyone, welcome to my talk, always watching, macOS eavesdropping."
    },
    {
      "Time_Start": 17.64,
      "Time_End": 22.98,
      "Text": " I'm Justin Bui, and my handle is at slide dog."
    },
    {
      "Time_Start": 22.98,
      "Time_End": 26.92,
      "Text": " So a quick introduction on to who I am before I start the presentation."
    },
    {
      "Time_Start": 26.92,
      "Time_End": 30.040000000000003,
      "Text": " Like I said, I go by the handle at slide dog."
    },
    {
      "Time_Start": 30.040000000000003,
      "Time_End": 33.38,
      "Text": " You can find me on GitHub, Twitter, and Medium."
    },
    {
      "Time_Start": 33.38,
      "Time_End": 35.56,
      "Text": " I'm currently a red teamer at Specter Ops."
    },
    {
      "Time_Start": 35.56,
      "Time_End": 40.88,
      "Text": " I work on red teams, pen tests, web app pen tests, and everything in between."
    },
    {
      "Time_Start": 40.88,
      "Time_End": 44.84,
      "Text": " I'm interested in all things security and skateboarding, as you can see from my little"
    },
    {
      "Time_Start": 44.84,
      "Time_End": 46.540000000000006,
      "Text": " picture here."
    },
    {
      "Time_Start": 46.540000000000006,
      "Time_End": 52.28,
      "Text": " And I write non-pretty code that works."
    },
    {
      "Time_Start": 52.28,
      "Time_End": 55.24,
      "Text": " So a quick overview of my presentation."
    },
    {
      "Time_Start": 55.24,
      "Time_End": 62.32,
      "Text": " First I'll be going over Transparency Consent and Control, or TCC, on macOS."
    },
    {
      "Time_Start": 62.32,
      "Time_End": 66.62,
      "Text": " Next I'll be going over a couple of the different languages that you could write post-exploitation"
    },
    {
      "Time_Start": 66.62,
      "Time_End": 70.56,
      "Text": " capability in on macOS."
    },
    {
      "Time_Start": 70.56,
      "Time_End": 76.04,
      "Text": " After that, I'll be diving into three different TTPs, clipboard monitoring, key logging, and"
    },
    {
      "Time_Start": 76.04,
      "Time_End": 77.72,
      "Text": " screen capturing."
    },
    {
      "Time_Start": 77.72,
      "Time_End": 83.92,
      "Text": " I'll be diving into these at the API level to show exactly how these are done under the"
    },
    {
      "Time_Start": 83.92,
      "Time_End": 84.92,
      "Text": " hood."
    },
    {
      "Time_Start": 84.92,
      "Time_End": 89.8,
      "Text": " Lastly, I'll wrap up with a demo of a new tool I'm dropping called Swift Spy."
    },
    {
      "Time_Start": 89.8,
      "Time_End": 93.32000000000001,
      "Text": " All right, let's begin."
    },
    {
      "Time_Start": 93.32000000000001,
      "Time_End": 100.6,
      "Text": " So Transparency Consent and Control, or TCC, on macOS was introduced in macOS on 10.14"
    },
    {
      "Time_Start": 100.6,
      "Time_End": 106.52000000000001,
      "Text": " during the Mojave update, and then further expanded in 10.15 during the Catalina update."
    },
    {
      "Time_Start": 106.52000000000001,
      "Time_End": 113.24000000000001,
      "Text": " TCC is essentially like privacy preferences or privacy controls on macOS."
    },
    {
      "Time_Start": 113.24000000000001,
      "Time_End": 118.32000000000001,
      "Text": " It stops apps from talking to each other and sandboxes them from accessing specific"
    },
    {
      "Time_Start": 118.32000000000001,
      "Time_End": 120.52000000000001,
      "Text": " OS data or functionality."
    },
    {
      "Time_Start": 120.52000000000001,
      "Time_End": 127.24000000000001,
      "Text": " TCC will require user consent in the form of pop-ups when applications access certain"
    },
    {
      "Time_Start": 127.24000000000001,
      "Time_End": 130.0,
      "Text": " data or certain system resources."
    },
    {
      "Time_Start": 130.0,
      "Time_End": 135.76000000000002,
      "Text": " The TCC daemon, or TCCD, is what handles these TCC requests."
    },
    {
      "Time_Start": 135.76000000000002,
      "Time_End": 140.60000000000002,
      "Text": " So it listens for these requests and will check that access in an underlying database"
    },
    {
      "Time_Start": 140.68,
      "Time_End": 147.64,
      "Text": " to approve or deny an application's ability to do something."
    },
    {
      "Time_Start": 147.64,
      "Time_End": 151.72,
      "Text": " If you have worked on macOS before, you might be familiar with all these pop-ups."
    },
    {
      "Time_Start": 151.72,
      "Time_End": 153.68,
      "Text": " These are all due to TCC."
    },
    {
      "Time_Start": 153.68,
      "Time_End": 157.92,
      "Text": " So like Slack requesting access to your downloads folder, or Zoom requesting access to your"
    },
    {
      "Time_Start": 157.92,
      "Time_End": 163.48,
      "Text": " downloads folder, or Zoom needing access to your microphone, things like that, all require"
    },
    {
      "Time_Start": 163.48,
      "Time_End": 168.16,
      "Text": " approval by the user in the form of a pop-up."
    },
    {
      "Time_Start": 168.16,
      "Time_End": 172.04,
      "Text": " And so even if you deny it initially, you can always go back into security and privacy"
    },
    {
      "Time_Start": 172.04,
      "Time_End": 175.0,
      "Text": " settings and enable it from there."
    },
    {
      "Time_Start": 175.0,
      "Time_End": 179.92,
      "Text": " So it's not a permanent setting."
    },
    {
      "Time_Start": 179.92,
      "Time_End": 183.76,
      "Text": " So here are a couple of the languages that you can write post-exploitation tooling in"
    },
    {
      "Time_Start": 183.76,
      "Time_End": 184.76,
      "Text": " for macOS."
    },
    {
      "Time_Start": 184.76,
      "Time_End": 194.48,
      "Text": " Swift, Golang, Python 3, Objective-C, AppleScript, JavaScript for Automation, or JXA, and C or"
    },
    {
      "Time_Start": 194.48,
      "Time_End": 195.48,
      "Text": " C++."
    },
    {
      "Time_Start": 195.48000000000002,
      "Time_End": 201.48000000000002,
      "Text": " I went with Swift over some of the others just because I wanted more OS-specific support."
    },
    {
      "Time_Start": 201.48000000000002,
      "Time_End": 208.32000000000002,
      "Text": " I wanted direct access to the macOS APIs, and also just found it a good opportunity"
    },
    {
      "Time_Start": 208.32000000000002,
      "Time_End": 213.48000000000002,
      "Text": " to learn Swift, as I've seen other post-exploitation tooling written in Swift, such as Cedric Owen's"
    },
    {
      "Time_Start": 213.48000000000002,
      "Time_End": 217.96,
      "Text": " Swift belt."
    },
    {
      "Time_Start": 217.96,
      "Time_End": 221.40000000000003,
      "Text": " So this is the MITRE ATT&CK knowledge base for macOS."
    },
    {
      "Time_Start": 221.4,
      "Time_End": 225.56,
      "Text": " You'll see that the TTPs, or Techniques, Tactics, and Procedures, are broken up into"
    },
    {
      "Time_Start": 225.56,
      "Time_End": 232.20000000000002,
      "Text": " categories such as initial access, execution, persistence, or privilege escalation."
    },
    {
      "Time_Start": 232.20000000000002,
      "Time_End": 237.84,
      "Text": " Normally when I want to learn more about a new operating system, or a new tactic, or"
    },
    {
      "Time_Start": 237.84,
      "Time_End": 243.08,
      "Text": " basically just a new language, I'll try to choose one of these TTPs and implement it."
    },
    {
      "Time_Start": 243.08,
      "Time_End": 247.36,
      "Text": " I've written Sharp Clipboard in the past, which is a C-sharp clipboard monitor targeting"
    },
    {
      "Time_Start": 247.36,
      "Time_End": 251.88000000000002,
      "Text": " the Windows operating system, and decided that would be cool to figure out how to make"
    },
    {
      "Time_Start": 251.88000000000002,
      "Time_End": 256.32,
      "Text": " that work on macOS as well."
    },
    {
      "Time_Start": 256.32,
      "Time_End": 261.26,
      "Text": " So here's the MITRE ATT&CK entry for clipboard data, or clipboard theft."
    },
    {
      "Time_Start": 261.26,
      "Time_End": 266.64,
      "Text": " It says that OSX provides a native command, pbpaste, to grab the clipboard contents."
    },
    {
      "Time_Start": 266.64,
      "Time_End": 270.28000000000003,
      "Text": " So we could definitely grab the clipboard contents using these native binaries, but"
    },
    {
      "Time_Start": 270.28000000000003,
      "Time_End": 272.32,
      "Text": " how is it working at the API level?"
    },
    {
      "Time_Start": 272.32,
      "Time_End": 277.08000000000004,
      "Text": " Could we implement this ourselves?"
    },
    {
      "Time_Start": 277.08,
      "Time_End": 282.68,
      "Text": " Before I dive into exactly how clipboard monitoring works, I want to dive into how"
    },
    {
      "Time_Start": 282.68,
      "Time_End": 287.0,
      "Text": " to determine the current user's active application on macOS."
    },
    {
      "Time_Start": 287.0,
      "Time_End": 292.4,
      "Text": " I think this is extremely useful for just general context as an attacker, to see what"
    },
    {
      "Time_Start": 292.4,
      "Time_End": 296.59999999999997,
      "Text": " application the user is currently sending keystrokes to, or what application they're"
    },
    {
      "Time_Start": 296.59999999999997,
      "Time_End": 298.84,
      "Text": " clicking around on, or whatnot."
    },
    {
      "Time_Start": 298.84,
      "Time_End": 303.47999999999996,
      "Text": " So I decided to implement this first, before implementing a keylogger, or clipboard monitor,"
    },
    {
      "Time_Start": 303.47999999999996,
      "Time_End": 305.26,
      "Text": " or anything."
    },
    {
      "Time_Start": 305.26,
      "Time_End": 309.76,
      "Text": " So the nice thing about determining the active application is that it doesn't require any"
    },
    {
      "Time_Start": 309.76,
      "Time_End": 311.09999999999997,
      "Text": " special permissions."
    },
    {
      "Time_Start": 311.09999999999997,
      "Time_End": 315.64,
      "Text": " So there's going to be no TCC pop-up to the end user."
    },
    {
      "Time_Start": 315.64,
      "Time_End": 320.42,
      "Text": " To determine the active application, we use the NotificationCenter class."
    },
    {
      "Time_Start": 320.42,
      "Time_End": 323.5,
      "Text": " This class is used to receive NS notifications."
    },
    {
      "Time_Start": 323.5,
      "Time_End": 329.58,
      "Text": " NS notifications are essentially operating system messages on macOS."
    },
    {
      "Time_Start": 329.58,
      "Time_End": 336.3,
      "Text": " We register an observer that listens for the DidActivateApplicationNotification message."
    },
    {
      "Time_Start": 336.3,
      "Time_End": 340.65999999999997,
      "Text": " This message is sent when the user changes their primary application."
    },
    {
      "Time_Start": 340.65999999999997,
      "Time_End": 345.65999999999997,
      "Text": " And when we register this observer, we can essentially receive that NS notification when"
    },
    {
      "Time_Start": 345.65999999999997,
      "Time_End": 347.26,
      "Text": " this event occurs."
    },
    {
      "Time_Start": 347.26,
      "Time_End": 351.5,
      "Text": " And when that event occurs, we'll just print out the current active application."
    },
    {
      "Time_Start": 351.5,
      "Time_End": 355.46,
      "Text": " So in the image on the right, you'll see me running SwiftSpy, and I'm just demoing the"
    },
    {
      "Time_Start": 355.46,
      "Time_End": 357.29999999999995,
      "Text": " active application functionality."
    },
    {
      "Time_Start": 357.3,
      "Time_End": 361.82,
      "Text": " So I clicked on PowerPoint, then went to Slack, then opened up the Bear app, then Google"
    },
    {
      "Time_Start": 361.82,
      "Time_End": 366.46000000000004,
      "Text": " Chrome, Finder, and iTerm."
    },
    {
      "Time_Start": 366.46000000000004,
      "Time_End": 370.3,
      "Text": " So here's the code on determining the active application."
    },
    {
      "Time_Start": 370.3,
      "Time_End": 375.62,
      "Text": " In the first line, we're just creating that NotificationCenter object for us to interact with."
    },
    {
      "Time_Start": 375.62,
      "Time_End": 380.38,
      "Text": " Then we'll use the AddObserver class, and then we're going to listen specifically for"
    },
    {
      "Time_Start": 380.38,
      "Time_End": 384.46000000000004,
      "Text": " this DidActivateApplicationNotification message."
    },
    {
      "Time_Start": 384.46000000000004,
      "Time_End": 388.74,
      "Text": " That message is the one that is going to tell us when the user changes their current"
    },
    {
      "Time_Start": 388.74,
      "Time_End": 390.46000000000004,
      "Text": " active application."
    },
    {
      "Time_Start": 390.46000000000004,
      "Time_End": 399.1,
      "Text": " And then when that occurs, we're just going to print out the current running application."
    },
    {
      "Time_Start": 399.1,
      "Time_End": 402.86,
      "Text": " So next, we'll go into monitoring the clipboard."
    },
    {
      "Time_Start": 402.86,
      "Time_End": 406.82000000000005,
      "Text": " To monitor the clipboard, we can use the NSPaceboard class."
    },
    {
      "Time_Start": 406.82000000000005,
      "Time_End": 411.46000000000004,
      "Text": " The NSPaceboard class is used to interact with the clipboard."
    },
    {
      "Time_Start": 411.46000000000004,
      "Time_End": 417.42,
      "Text": " Similar to the active application implementation, this doesn't require any special permissions,"
    },
    {
      "Time_Start": 417.42,
      "Time_End": 421.1,
      "Text": " so there won't be any TCC popup as well."
    },
    {
      "Time_Start": 421.1,
      "Time_End": 427.50000000000006,
      "Text": " Unlike the active application implementation, there's no message we can listen to for when"
    },
    {
      "Time_Start": 427.50000000000006,
      "Time_End": 429.22,
      "Text": " the clipboard has changed."
    },
    {
      "Time_Start": 429.22,
      "Time_End": 434.22,
      "Text": " So we kind of have to resort to polling, which is a little less than ideal, but we can make"
    },
    {
      "Time_Start": 434.22,
      "Time_End": 436.06000000000006,
      "Text": " it work."
    },
    {
      "Time_Start": 436.06000000000006,
      "Time_End": 440.20000000000005,
      "Text": " The NSPaceboard class has a changeCount property."
    },
    {
      "Time_Start": 440.2,
      "Time_End": 444.24,
      "Text": " This property increases when the clipboard ownership changes."
    },
    {
      "Time_Start": 444.24,
      "Time_End": 449.32,
      "Text": " So essentially, we can poll for this value continuously, and then when this value changes,"
    },
    {
      "Time_Start": 449.32,
      "Time_End": 454.46,
      "Text": " we can determine that the clipboard contents have changed and poll the clipboard contents."
    },
    {
      "Time_Start": 454.46,
      "Time_End": 458.44,
      "Text": " So on the right side of the image here, you see that from Google Chrome, I was able to"
    },
    {
      "Time_Start": 458.44,
      "Time_End": 463.88,
      "Text": " just copy and paste the YouTube URL, and then from 1Password, I was able to capture the"
    },
    {
      "Time_Start": 463.88,
      "Time_End": 468.71999999999997,
      "Text": " copy-paste of this password."
    },
    {
      "Time_Start": 468.72,
      "Time_End": 474.32000000000005,
      "Text": " So one thing to note is that monitoring the clipboard as root is actually not possible."
    },
    {
      "Time_Start": 474.32000000000005,
      "Time_End": 477.8,
      "Text": " Root does not have access to the general Pasteboard."
    },
    {
      "Time_Start": 477.8,
      "Time_End": 483.92,
      "Text": " If you look at the examples on the right image, in the first two examples, I'm able to obtain"
    },
    {
      "Time_Start": 483.92,
      "Time_End": 486.0,
      "Text": " a handle to NSPaceboard."
    },
    {
      "Time_Start": 486.0,
      "Time_End": 489.40000000000003,
      "Text": " So I get a handle here and a handle here."
    },
    {
      "Time_Start": 489.40000000000003,
      "Time_End": 495.8,
      "Text": " However, when I run sudo su tack L, this creates an interactive logon as root."
    },
    {
      "Time_Start": 495.88,
      "Time_End": 500.84000000000003,
      "Text": " And then when I run the same commands, I actually cannot obtain a handle to NSPaceboard."
    },
    {
      "Time_Start": 500.84000000000003,
      "Time_End": 506.48,
      "Text": " So if you run SwiftSpy as root, you actually will not be able to capture any clipboard"
    },
    {
      "Time_Start": 506.48,
      "Time_End": 509.28000000000003,
      "Text": " data."
    },
    {
      "Time_Start": 509.28000000000003,
      "Time_End": 514.04,
      "Text": " So as an attacker, this is interesting because if we have original execution through root"
    },
    {
      "Time_Start": 514.04,
      "Time_End": 517.5600000000001,
      "Text": " persistence, we won't have access to the Pasteboard."
    },
    {
      "Time_Start": 517.5600000000001,
      "Time_End": 525.16,
      "Text": " However, if a user kicked us off as root, we likely still have access to the Pasteboard."
    },
    {
      "Time_Start": 525.16,
      "Time_End": 528.76,
      "Text": " So this is how I implemented the clipboard monitor."
    },
    {
      "Time_Start": 528.76,
      "Time_End": 533.16,
      "Text": " In the first two lines here, Pasteboard and ChangeCount, we're initializing that NSPaceboard"
    },
    {
      "Time_Start": 533.16,
      "Time_End": 534.16,
      "Text": " object."
    },
    {
      "Time_Start": 534.16,
      "Time_End": 538.6,
      "Text": " We're registering that ChangeCount value."
    },
    {
      "Time_Start": 538.6,
      "Time_End": 544.64,
      "Text": " And then after that, we're essentially running a while loop that will check this ChangeCount"
    },
    {
      "Time_Start": 544.64,
      "Time_End": 546.3199999999999,
      "Text": " value every second."
    },
    {
      "Time_Start": 546.3199999999999,
      "Time_End": 550.92,
      "Text": " And if the ChangeCount value has changed, then we'll print out the current value that"
    },
    {
      "Time_Start": 550.92,
      "Time_End": 555.0,
      "Text": " is on the clipboard, as well as update the ChangeCount value."
    },
    {
      "Time_Start": 555.0,
      "Time_End": 558.0,
      "Text": " And so we just loop continuously and continuously."
    },
    {
      "Time_Start": 558.0,
      "Time_End": 562.08,
      "Text": " And anytime that ChangeCount value is updated, we'll grab the updated clipboard contents"
    },
    {
      "Time_Start": 562.08,
      "Time_End": 565.2,
      "Text": " as well."
    },
    {
      "Time_Start": 565.2,
      "Time_End": 569.0,
      "Text": " The next TTP I want to cover is Keylogging."
    },
    {
      "Time_Start": 569.0,
      "Time_End": 573.88,
      "Text": " Keylogging is invaluable to attackers to just gather more information on what the user is"
    },
    {
      "Time_Start": 573.88,
      "Time_End": 579.7,
      "Text": " doing, what they're typing, who they're talking to, and things of that nature."
    },
    {
      "Time_Start": 579.7,
      "Time_End": 585.0600000000001,
      "Text": " So Keylogging on macOS uses the IOHidManager API."
    },
    {
      "Time_Start": 585.0600000000001,
      "Time_End": 591.94,
      "Text": " The IOHidManager API is used to interact with HID devices, or Human Interface Devices."
    },
    {
      "Time_Start": 591.94,
      "Time_End": 598.1400000000001,
      "Text": " One advantage of using the IOHidManager API versus CGEventTap keyloggers is that the IOHidManager"
    },
    {
      "Time_Start": 598.1400000000001,
      "Time_End": 603.82,
      "Text": " API can be run from low privilege, unlike the CGEventTap keyloggers."
    },
    {
      "Time_Start": 603.94,
      "Time_End": 610.22,
      "Text": " Unfortunately, Keylogging on macOS is locked down with TCC and requires input monitoring"
    },
    {
      "Time_Start": 610.22,
      "Time_End": 615.5,
      "Text": " permissions from TCC."
    },
    {
      "Time_Start": 615.5,
      "Time_End": 621.2600000000001,
      "Text": " These are the API calls that we need to perform keylogging on macOS."
    },
    {
      "Time_Start": 621.2600000000001,
      "Time_End": 626.5400000000001,
      "Text": " First we'll use the IOHidManager Create API to create the HIDManager object that we're"
    },
    {
      "Time_Start": 626.5400000000001,
      "Time_End": 630.7,
      "Text": " going to be interacting with in further API calls."
    },
    {
      "Time_Start": 630.7,
      "Time_End": 634.82,
      "Text": " Next we'll use IOHidManager SetDeviceMatching."
    },
    {
      "Time_Start": 634.82,
      "Time_End": 641.4200000000001,
      "Text": " We're going to pass in a pattern to match specifically on keyboard devices."
    },
    {
      "Time_Start": 641.4200000000001,
      "Time_End": 646.86,
      "Text": " After we've matched in on just specifically keyboard devices, we'll use IOHidManager register"
    },
    {
      "Time_Start": 646.86,
      "Time_End": 652.86,
      "Text": " input value callback to receive a callback anytime an enumerated device sends input."
    },
    {
      "Time_Start": 652.86,
      "Time_End": 658.7,
      "Text": " So anytime a user presses some keys on their HID device, we're able to capture that input."
    },
    {
      "Time_Start": 658.7,
      "Time_End": 665.4200000000001,
      "Text": " Lastly, we'll use IOHidManager open and IOHidManager schedule with run loop to begin listening"
    },
    {
      "Time_Start": 665.4200000000001,
      "Time_End": 668.58,
      "Text": " for callbacks."
    },
    {
      "Time_Start": 668.58,
      "Time_End": 673.38,
      "Text": " Here's a more graphical view of the API calls necessary for keylogging."
    },
    {
      "Time_Start": 673.38,
      "Time_End": 678.7800000000001,
      "Text": " So first we'll use IOHidManager Create to create that HIDManager object."
    },
    {
      "Time_Start": 678.7800000000001,
      "Time_End": 684.1,
      "Text": " With that HIDManager object, we can pass it to IOHidManager SetDeviceMatching."
    },
    {
      "Time_Start": 684.1,
      "Time_End": 687.7,
      "Text": " Here we're going to match specifically on keyboard devices because that's where we're"
    },
    {
      "Time_Start": 687.7,
      "Time_End": 689.86,
      "Text": " interested in."
    },
    {
      "Time_Start": 689.86,
      "Time_End": 695.4200000000001,
      "Text": " If we pass in that HIDManager object to IOHidManager CopyDevices, we can enumerate all of the keyboard"
    },
    {
      "Time_Start": 695.4200000000001,
      "Time_End": 700.0200000000001,
      "Text": " devices currently attached to the computer."
    },
    {
      "Time_Start": 700.0200000000001,
      "Time_End": 704.46,
      "Text": " Going down here, we can use IOHidManager register input value callback."
    },
    {
      "Time_Start": 704.46,
      "Time_End": 709.74,
      "Text": " So after we've applied that device matching filter, we can add a callback function to"
    },
    {
      "Time_Start": 709.74,
      "Time_End": 715.62,
      "Text": " be performed when any input is received from an enumerated device."
    },
    {
      "Time_Start": 715.62,
      "Time_End": 720.82,
      "Text": " Next we'll use IOHidManager open to just open any currently enumerated devices."
    },
    {
      "Time_Start": 720.82,
      "Time_End": 725.34,
      "Text": " And lastly, we'll use IOHidManager schedule with run loop to kick off a run loop that"
    },
    {
      "Time_Start": 725.34,
      "Time_End": 729.82,
      "Text": " uses that device matching filter on keyboards that we've specified as well as with the callback"
    },
    {
      "Time_Start": 729.82,
      "Time_End": 734.74,
      "Text": " applied."
    },
    {
      "Time_Start": 734.74,
      "Time_End": 737.3,
      "Text": " So here's what the callback function looks like."
    },
    {
      "Time_Start": 737.3,
      "Time_End": 743.58,
      "Text": " In this first image, you see that IOHidManager register input value callback."
    },
    {
      "Time_Start": 743.58,
      "Time_End": 748.5,
      "Text": " The second parameter into this is the callback function that we want to call any time an"
    },
    {
      "Time_Start": 748.5,
      "Time_End": 751.14,
      "Text": " enumerated device sends input."
    },
    {
      "Time_Start": 751.14,
      "Time_End": 757.34,
      "Text": " And so when an enumerated device sends input, this function is triggered and then we can"
    },
    {
      "Time_Start": 757.34,
      "Time_End": 760.26,
      "Text": " do post-processing on the event."
    },
    {
      "Time_Start": 760.26,
      "Time_End": 765.2800000000001,
      "Text": " So we can figure out exactly what the user pressed and things of that nature."
    },
    {
      "Time_Start": 765.2800000000001,
      "Time_End": 767.2800000000001,
      "Text": " So here's kind of what that looks like."
    },
    {
      "Time_Start": 767.2800000000001,
      "Time_End": 772.9000000000001,
      "Text": " With IOHidValueCallback, the callback function has this IOHidValueRef value variable right"
    },
    {
      "Time_Start": 772.9,
      "Time_End": 774.86,
      "Text": " here."
    },
    {
      "Time_Start": 774.86,
      "Time_End": 780.02,
      "Text": " That can be passed to IOHidValueGetIntegerValue."
    },
    {
      "Time_Start": 780.02,
      "Time_End": 784.9399999999999,
      "Text": " And then the output of that is going to be a 1 when a key is pressed or a 0 when a key"
    },
    {
      "Time_Start": 784.9399999999999,
      "Time_End": 785.9399999999999,
      "Text": " is released."
    },
    {
      "Time_Start": 785.9399999999999,
      "Time_End": 792.14,
      "Text": " Alternatively, we can pass in that IOHidValue to IOHidValueGetElement."
    },
    {
      "Time_Start": 792.14,
      "Time_End": 798.34,
      "Text": " This will return an IOHidElement, which is usable with IOHidElementGetUsage."
    },
    {
      "Time_Start": 798.34,
      "Time_End": 804.22,
      "Text": " IOHidElementGetUsage will return an integer between 4 and 231 that specifies the key that"
    },
    {
      "Time_Start": 804.22,
      "Time_End": 806.1800000000001,
      "Text": " was pressed."
    },
    {
      "Time_Start": 806.1800000000001,
      "Time_End": 811.3000000000001,
      "Text": " So now we know when a key was pressed or released and the value of the key."
    },
    {
      "Time_Start": 811.3000000000001,
      "Time_End": 815.5,
      "Text": " So we have everything we need to create our keylogger."
    },
    {
      "Time_Start": 815.5,
      "Time_End": 817.82,
      "Text": " So here's an example of keylogging on macOS."
    },
    {
      "Time_Start": 817.82,
      "Time_End": 824.0600000000001,
      "Text": " You'll see that I created the hidden manager, I enumerated the devices, I didn't print anything"
    },
    {
      "Time_Start": 824.0600000000001,
      "Time_End": 829.7,
      "Text": " for essentially setting up the device matching filter or setting up the callback function."
    },
    {
      "Time_Start": 829.7,
      "Time_End": 834.22,
      "Text": " But if you look here, you'll see that I opened up Google Chrome, I browsed to google.com,"
    },
    {
      "Time_Start": 834.22,
      "Time_End": 841.3800000000001,
      "Text": " I searched doggos, and then I opened up Slack, and then I typed my fake AD password into"
    },
    {
      "Time_Start": 841.3800000000001,
      "Time_End": 843.6600000000001,
      "Text": " Slack."
    },
    {
      "Time_Start": 843.6600000000001,
      "Time_End": 847.72,
      "Text": " The last UTP I want to cover is screen capturing."
    },
    {
      "Time_Start": 847.72,
      "Time_End": 852.94,
      "Text": " Screen capturing can be done on macOS using the screen capture binary, but again, I want"
    },
    {
      "Time_Start": 852.94,
      "Time_End": 857.62,
      "Text": " to figure out what this is doing under the hood and figure out if I can just implement"
    },
    {
      "Time_Start": 857.62,
      "Time_End": 863.0600000000001,
      "Text": " it myself using macOS APIs."
    },
    {
      "Time_Start": 863.0600000000001,
      "Time_End": 867.4200000000001,
      "Text": " So screen capturing on macOS uses the Core Graphics API."
    },
    {
      "Time_Start": 867.4200000000001,
      "Time_End": 872.58,
      "Text": " The Core Graphics API actually requires the screen recording permission from TCC."
    },
    {
      "Time_Start": 872.58,
      "Time_End": 876.7,
      "Text": " So if we don't have it, the user will be prompted."
    },
    {
      "Time_Start": 876.7,
      "Time_End": 879.5,
      "Text": " Screen capturing on macOS is fairly simple."
    },
    {
      "Time_Start": 879.5,
      "Time_End": 883.66,
      "Text": " First you use the cgGetActiveDisplayList API call."
    },
    {
      "Time_Start": 883.66,
      "Time_End": 888.1,
      "Text": " You pass in a null to the active displays parameter, and this will actually return the"
    },
    {
      "Time_Start": 888.1,
      "Time_End": 892.3,
      "Text": " number of active displays that the user has."
    },
    {
      "Time_Start": 892.3,
      "Time_End": 898.22,
      "Text": " We call cgGetActiveDisplayList again, passing in that number of active displays, and we"
    },
    {
      "Time_Start": 898.22,
      "Time_End": 902.74,
      "Text": " get a list of active displays that we can interact with."
    },
    {
      "Time_Start": 902.74,
      "Time_End": 909.26,
      "Text": " Next we'll loop through this list of active displays and grab an image with cgDisplayCreateImage."
    },
    {
      "Time_Start": 910.02,
      "Time_End": 913.9399999999999,
      "Text": " And we'll write that image to disk."
    },
    {
      "Time_Start": 913.9399999999999,
      "Time_End": 915.14,
      "Text": " So this is what that looks like."
    },
    {
      "Time_Start": 915.14,
      "Time_End": 918.9,
      "Text": " So first there's that cgGetActiveDisplayList."
    },
    {
      "Time_Start": 918.9,
      "Time_End": 924.16,
      "Text": " We're going to pass a null to this second parameter, which will actually fill this third"
    },
    {
      "Time_Start": 924.16,
      "Time_End": 927.3,
      "Text": " parameter with the number of active displays."
    },
    {
      "Time_Start": 927.3,
      "Time_End": 932.62,
      "Text": " Once we have the number of active displays, we'll pass it back into cgGetActiveDisplayList"
    },
    {
      "Time_Start": 932.62,
      "Time_End": 936.78,
      "Text": " to obtain a list of all of the active displays."
    },
    {
      "Time_Start": 936.78,
      "Time_End": 942.22,
      "Text": " Next we'll use cgDisplayCreateImage to take a picture of that display and then write that"
    },
    {
      "Time_Start": 942.22,
      "Time_End": 943.22,
      "Text": " image to disk."
    },
    {
      "Time_Start": 943.22,
      "Time_End": 950.38,
      "Text": " And then we'll repeat this for all the active displays."
    },
    {
      "Time_Start": 950.38,
      "Time_End": 955.3,
      "Text": " So I want to introduce Swift Spy, which incorporates all of these different techniques that I've"
    },
    {
      "Time_Start": 955.3,
      "Time_End": 956.9,
      "Text": " talked about."
    },
    {
      "Time_Start": 956.9,
      "Time_End": 961.8199999999999,
      "Text": " Swift Spy is a macOS keylogger, clipboard monitor, and screen capture tool written in"
    },
    {
      "Time_Start": 961.8199999999999,
      "Time_End": 963.18,
      "Text": " Swift."
    },
    {
      "Time_Start": 963.1800000000001,
      "Time_End": 967.7800000000001,
      "Text": " The code can be found on my GitHub at github.com slash slide dog slash Swift Spy."
    },
    {
      "Time_Start": 967.7800000000001,
      "Time_End": 970.7,
      "Text": " And I've showed the help menu in the image below."
    },
    {
      "Time_Start": 970.7,
      "Time_End": 975.5400000000001,
      "Text": " So you can see that Swift Spy has keylog functionality, clipboard functionality."
    },
    {
      "Time_Start": 975.5400000000001,
      "Time_End": 980.9000000000001,
      "Text": " I've combined the keylog and clipboard module with the all keys flag."
    },
    {
      "Time_Start": 980.9000000000001,
      "Time_End": 985.4200000000001,
      "Text": " So this will run both of those modules to capture all the user's keystrokes."
    },
    {
      "Time_Start": 985.4200000000001,
      "Time_End": 990.94,
      "Text": " It has a screenshot module, and you can specify the folder that you want to save screenshots"
    },
    {
      "Time_Start": 990.94,
      "Time_End": 991.94,
      "Text": " to."
    },
    {
      "Time_Start": 991.94,
      "Time_End": 996.3000000000001,
      "Text": " Additionally, you can specify a number, and this will basically run the screenshot module"
    },
    {
      "Time_Start": 996.3000000000001,
      "Time_End": 1001.82,
      "Text": " on a loop and continuously take photos of the user's current active display."
    },
    {
      "Time_Start": 1001.82,
      "Time_End": 1003.9000000000001,
      "Text": " So we're going to get into a quick demo here."
    },
    {
      "Time_Start": 1003.9000000000001,
      "Time_End": 1007.34,
      "Text": " Today I'll be demoing to you Swift Spy."
    },
    {
      "Time_Start": 1007.34,
      "Time_End": 1012.5400000000001,
      "Text": " If you run Swift Spy without any command line arguments, or if you pass in the tech-h or"
    },
    {
      "Time_Start": 1012.5400000000001,
      "Time_End": 1016.7800000000001,
      "Text": " tech-help flag, the help menu will be printed."
    },
    {
      "Time_Start": 1016.7800000000001,
      "Time_End": 1021.0600000000001,
      "Text": " Some of the modules that Swift Spy has are the keylog module, which will record all keystrokes"
    },
    {
      "Time_Start": 1021.0600000000001,
      "Time_End": 1028.7,
      "Text": " using those IOHID manager APIs, the clipboard module, which will record any copy-paste events."
    },
    {
      "Time_Start": 1028.7,
      "Time_End": 1033.6200000000001,
      "Text": " You can combine the keylog and clipboard module with the all keys flag, and all keys will"
    },
    {
      "Time_Start": 1033.6200000000001,
      "Time_End": 1037.8600000000001,
      "Text": " basically simultaneously run both of those modules to capture all keystrokes."
    },
    {
      "Time_Start": 1037.8600000000001,
      "Time_End": 1040.8600000000001,
      "Text": " Lastly, there's the screenshot module."
    },
    {
      "Time_Start": 1040.8600000000001,
      "Time_End": 1045.42,
      "Text": " Screenshot you can pass in the folder, and that's the folder that the screenshot module"
    },
    {
      "Time_Start": 1045.42,
      "Time_End": 1051.22,
      "Text": " will save all of the screenshots of the user's active displays to."
    },
    {
      "Time_Start": 1051.22,
      "Time_End": 1055.98,
      "Text": " Additionally, you can pass in a number to the screenshots module, and the screenshot"
    },
    {
      "Time_Start": 1055.98,
      "Time_End": 1060.74,
      "Text": " module will run on a timed loop and continuously take a picture of the user's active displays."
    },
    {
      "Time_Start": 1060.74,
      "Time_End": 1064.8200000000002,
      "Text": " All right, let's dive into some of the functionality."
    },
    {
      "Time_Start": 1064.8200000000002,
      "Time_End": 1068.74,
      "Text": " So first I'll demonstrate the keylog functionality."
    },
    {
      "Time_Start": 1068.74,
      "Time_End": 1075.3400000000001,
      "Text": " And so if you do Swift Spy and you pass in the keylog flag, we'll see here that we could"
    },
    {
      "Time_Start": 1075.34,
      "Time_End": 1080.62,
      "Text": " not open the HID manager, and this is because we haven't enabled the input monitoring permission"
    },
    {
      "Time_Start": 1080.62,
      "Time_End": 1081.8999999999999,
      "Text": " within TCC."
    },
    {
      "Time_Start": 1081.8999999999999,
      "Time_End": 1084.8999999999999,
      "Text": " So if we do that now, we can get past that."
    },
    {
      "Time_Start": 1084.8999999999999,
      "Time_End": 1090.78,
      "Text": " So if we enable that for iTerm here, I will have to restart iTerm."
    },
    {
      "Time_Start": 1090.78,
      "Time_End": 1096.86,
      "Text": " So if we restart iTerm here, and we again do SwiftSpy-keylog, we'll see that this time"
    },
    {
      "Time_Start": 1096.86,
      "Time_End": 1099.6999999999998,
      "Text": " the HID manager was successfully opened."
    },
    {
      "Time_Start": 1099.7,
      "Time_End": 1110.66,
      "Text": " And so now I'll go here, go to google.com, and then I'll Google Kickflips."
    },
    {
      "Time_Start": 1110.66,
      "Time_End": 1114.7,
      "Text": " And so you'll see right here that we were able to record me browsing to google.com as"
    },
    {
      "Time_Start": 1114.7,
      "Time_End": 1119.06,
      "Text": " well as Kickflips."
    },
    {
      "Time_Start": 1119.06,
      "Time_End": 1122.18,
      "Text": " So that kind of wraps up the keylog module."
    },
    {
      "Time_Start": 1122.18,
      "Time_End": 1127.02,
      "Text": " The next module I'd like to show is the Clipboard module."
    },
    {
      "Time_Start": 1127.02,
      "Time_End": 1135.9,
      "Text": " So if we do SwiftSpy and we pass in the Clipboard flag, this will monitor continuously for any"
    },
    {
      "Time_Start": 1135.9,
      "Time_End": 1137.82,
      "Text": " new items on the Clipboard."
    },
    {
      "Time_Start": 1137.82,
      "Time_End": 1144.18,
      "Text": " So if we click over to 1Pass here, you'll see that SwiftSpy notified us of the 1Password"
    },
    {
      "Time_Start": 1144.18,
      "Time_End": 1146.82,
      "Text": " application being the main application."
    },
    {
      "Time_Start": 1146.82,
      "Time_End": 1153.78,
      "Text": " And if we go down to the password here and we hit copy, SwiftSpy is able to detect this"
    },
    {
      "Time_Start": 1153.78,
      "Time_End": 1163.22,
      "Text": " copy event and shows us the Clipboard data here."
    },
    {
      "Time_Start": 1163.22,
      "Time_End": 1167.76,
      "Text": " Last module I'd like to show is the Screenshot module."
    },
    {
      "Time_Start": 1167.76,
      "Time_End": 1180.02,
      "Text": " So if we do SwiftSpy-tagscreenshot, and let's say we want to save them to temp."
    },
    {
      "Time_Start": 1180.02,
      "Time_End": 1188.06,
      "Text": " Since we didn't enable screen recording within TCC, we're now getting a prompt."
    },
    {
      "Time_Start": 1188.06,
      "Time_End": 1189.54,
      "Text": " So it hasn't been enabled yet."
    },
    {
      "Time_Start": 1189.54,
      "Time_End": 1197.46,
      "Text": " However, if we do an ls on temp, start up JPEG, and we'll see that there are three images."
    },
    {
      "Time_Start": 1197.46,
      "Time_End": 1208.34,
      "Text": " If we do open, so these are the three images that the Screenshot module is able to capture."
    },
    {
      "Time_Start": 1208.34,
      "Time_End": 1212.6999999999998,
      "Text": " This is because when TCC has not enabled this permission, you can still take a picture"
    },
    {
      "Time_Start": 1212.6999999999998,
      "Time_End": 1217.6599999999999,
      "Text": " of the user's active displays, but you won't capture any useful information like the windows"
    },
    {
      "Time_Start": 1217.6599999999999,
      "Time_End": 1220.1,
      "Text": " or applications that they currently have open."
    },
    {
      "Time_Start": 1220.1,
      "Time_End": 1225.1799999999998,
      "Text": " So let's try again with enabling that privilege in TCC."
    },
    {
      "Time_Start": 1225.18,
      "Time_End": 1240.3400000000001,
      "Text": " So if we enable it here, it's going to make us restart iTerm again."
    },
    {
      "Time_Start": 1240.3400000000001,
      "Time_End": 1249.8600000000001,
      "Text": " We're going to remove those old JPEGs and we're going to do SwiftSpy."
    },
    {
      "Time_Start": 1249.8600000000001,
      "Time_End": 1255.0600000000002,
      "Text": " So now we're going to check for the existence of our new images, and we're going to open"
    },
    {
      "Time_Start": 1255.06,
      "Time_End": 1259.4199999999998,
      "Text": " them."
    },
    {
      "Time_Start": 1259.4199999999998,
      "Time_End": 1263.82,
      "Text": " So you can see here now that once we've enabled the permission within TCC, we're able to capture"
    },
    {
      "Time_Start": 1263.82,
      "Time_End": 1268.5,
      "Text": " all of the different windows that the user currently has open."
    },
    {
      "Time_Start": 1268.5,
      "Time_End": 1270.1399999999999,
      "Text": " So that concludes my demo."
    },
    {
      "Time_Start": 1270.1399999999999,
      "Time_End": 1274.6399999999999,
      "Text": " I want to give a huge shout out to Cody Thomas or at It's A Feature on Twitter, and Chris"
    },
    {
      "Time_Start": 1274.6399999999999,
      "Time_End": 1279.7,
      "Text": " Ross at XOrior on Twitter for answering all of my new macOS questions."
    },
    {
      "Time_Start": 1279.7,
      "Time_End": 1283.1,
      "Text": " Here are some of my references, and yeah, I'll open the floor to any questions."
    }
  ]
}