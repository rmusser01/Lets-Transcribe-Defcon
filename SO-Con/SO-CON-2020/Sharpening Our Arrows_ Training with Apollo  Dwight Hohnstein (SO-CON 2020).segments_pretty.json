{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 15.72,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Welcome to Sharpening Our Arrows, Training with Apollo."
    },
    {
      "Time_Start": 15.72,
      "Time_End": 20.52,
      "Text": " My name is Dwight Ohnstein, and I was the lead software developer for this project."
    },
    {
      "Time_Start": 20.52,
      "Time_End": 25.28,
      "Text": " Apollo is a .NET framework application that interfaces with the Mythic Command and Control"
    },
    {
      "Time_Start": 25.28,
      "Time_End": 31.520000000000003,
      "Text": " framework in order to help facilitate our new training classes."
    },
    {
      "Time_Start": 31.520000000000003,
      "Time_End": 32.52,
      "Text": " So who I am?"
    },
    {
      "Time_Start": 32.52,
      "Time_End": 36.160000000000004,
      "Text": " I'm an author and contributor of various tools on GitHub."
    },
    {
      "Time_Start": 36.160000000000004,
      "Time_End": 42.44,
      "Text": " A lot of the tools that I wrote way back when were part of the Sharp wave of tools, so Sharpsploit"
    },
    {
      "Time_Start": 42.44,
      "Time_End": 45.96,
      "Text": " or Sharp Chrome, things of that nature."
    },
    {
      "Time_Start": 45.96,
      "Time_End": 51.400000000000006,
      "Text": " I'm an annoying and persistent twit on Slack to Lee Christensen and Cody Thomas, Tifkin"
    },
    {
      "Time_Start": 51.400000000000006,
      "Time_End": 54.34,
      "Text": " and It's a Feature, respectively, on Twitter."
    },
    {
      "Time_Start": 54.34,
      "Time_End": 58.580000000000005,
      "Text": " I'm a senior consultant at Spectra Ops, and I'm the one who wrote this thing."
    },
    {
      "Time_Start": 58.580000000000005,
      "Time_End": 63.220000000000006,
      "Text": " My main claim to fame is that Raphael Mudge once said my name in a video, and I created"
    },
    {
      "Time_Start": 63.220000000000006,
      "Time_End": 68.9,
      "Text": " a full-length mixtape that I distributed to my closest friends and family at Christmastime."
    },
    {
      "Time_Start": 68.9,
      "Time_End": 71.78,
      "Text": " Who I am not, though, is a computer science major."
    },
    {
      "Time_Start": 71.78,
      "Time_End": 76.38,
      "Text": " I majored in mathematics, and as such, I am not a professional software developer."
    },
    {
      "Time_Start": 76.38,
      "Time_End": 78.58000000000001,
      "Text": " I'm not even a professional .NET developer."
    },
    {
      "Time_Start": 78.58000000000001,
      "Time_End": 82.22,
      "Text": " It's just something I did in my free time that happened to turn into a career."
    },
    {
      "Time_Start": 82.22,
      "Time_End": 86.34,
      "Text": " I'm also not a front-end designer, so there's going to be quirks and things about this project"
    },
    {
      "Time_Start": 86.34,
      "Time_End": 91.38,
      "Text": " that you may or may not agree with, or may that seem clunky to you on a UI perspective."
    },
    {
      "Time_Start": 91.38,
      "Time_End": 94.02,
      "Text": " And I'm also not someone who designs bug-free code."
    },
    {
      "Time_Start": 94.02,
      "Time_End": 97.42,
      "Text": " Certainly there's going to be something in this project that breaks for somebody, and"
    },
    {
      "Time_Start": 97.42,
      "Time_End": 104.42,
      "Text": " if that happens, please do open up an issue, or even better, open up a pull request."
    },
    {
      "Time_Start": 104.42,
      "Time_End": 108.1,
      "Text": " So let's talk a little bit about Mythic and the design and architecture of it."
    },
    {
      "Time_Start": 108.1,
      "Time_End": 109.1,
      "Text": " So what is Mythic?"
    },
    {
      "Time_Start": 109.10000000000001,
      "Time_End": 113.98,
      "Text": " Mythic is an open-source C2 framework by Cody Thomas, and it's designed with modularity in mind."
    },
    {
      "Time_Start": 113.98,
      "Time_End": 115.74000000000001,
      "Text": " You can think of it somewhat in three parts."
    },
    {
      "Time_Start": 115.74000000000001,
      "Time_End": 119.34,
      "Text": " There's profiles, which is the network communication profile that the agent's going to talk to"
    },
    {
      "Time_Start": 119.34,
      "Time_End": 121.10000000000001,
      "Text": " the Mythic server with."
    },
    {
      "Time_Start": 121.10000000000001,
      "Time_End": 126.42000000000002,
      "Text": " There's payloads, which is the agent that is going to be created on the Mythic server,"
    },
    {
      "Time_Start": 126.42000000000002,
      "Time_End": 129.62,
      "Text": " and that payload will support a variety of profiles."
    },
    {
      "Time_Start": 129.62,
      "Time_End": 130.78,
      "Text": " And taskings."
    },
    {
      "Time_Start": 130.78,
      "Time_End": 135.9,
      "Text": " Taskings live within payload containers, and those tasking files pre-process commands,"
    },
    {
      "Time_Start": 135.9,
      "Time_End": 138.82,
      "Text": " send them to the agent, and do some post-processing."
    },
    {
      "Time_Start": 138.82,
      "Time_End": 144.02,
      "Text": " Moreover, each of those taskings have structured input and output, so that when the agent reports"
    },
    {
      "Time_Start": 144.02,
      "Time_End": 147.62,
      "Text": " back data, it's not just some text blob."
    },
    {
      "Time_Start": 147.62,
      "Time_End": 154.42000000000002,
      "Text": " It's formatted JSON that allows us to hook output and do some really cool things on the front end."
    },
    {
      "Time_Start": 154.42000000000002,
      "Time_End": 158.82,
      "Text": " Mythic also has an easy-to-use and well-documented API that allows developers like myself to"
    },
    {
      "Time_Start": 158.82,
      "Time_End": 163.82,
      "Text": " interface with, and allows us to hook into some cool native functionality of the command"
    },
    {
      "Time_Start": 163.82,
      "Time_End": 165.18,
      "Text": " and control framework."
    },
    {
      "Time_Start": 165.5,
      "Time_End": 170.54000000000002,
      "Text": " Moreover, there's a built-in documentation server that allows we, agent developers, to"
    },
    {
      "Time_Start": 170.54000000000002,
      "Time_End": 176.3,
      "Text": " document agent commands clearly, precisely, and with more details about command usage,"
    },
    {
      "Time_Start": 176.3,
      "Time_End": 178.3,
      "Text": " offset considerations, and the like."
    },
    {
      "Time_Start": 180.06,
      "Time_End": 181.54000000000002,
      "Text": " What are payload containers?"
    },
    {
      "Time_Start": 181.54000000000002,
      "Time_End": 186.38,
      "Text": " Payload containers are Docker containers that control all of the actions related to payload."
    },
    {
      "Time_Start": 186.38,
      "Time_End": 188.02,
      "Text": " It's split into two components."
    },
    {
      "Time_Start": 188.02,
      "Time_End": 190.46,
      "Text": " The first component is the agent source code."
    },
    {
      "Time_Start": 190.46,
      "Time_End": 194.26000000000002,
      "Text": " This source code is responsible for compilation and the like."
    },
    {
      "Time_Start": 194.26,
      "Time_End": 196.57999999999998,
      "Text": " The second part is Mythic interfaces."
    },
    {
      "Time_Start": 196.57999999999998,
      "Time_End": 202.66,
      "Text": " This allows Mythic to task the Docker container to, say, execute the ls command."
    },
    {
      "Time_Start": 202.66,
      "Time_End": 208.7,
      "Text": " And that ls command Python file will pre-process data from the Mythic server, and then send the"
    },
    {
      "Time_Start": 208.7,
      "Time_End": 213.73999999999998,
      "Text": " formatted input to the agent back to the server to be delivered to the agent."
    },
    {
      "Time_Start": 213.73999999999998,
      "Time_End": 218.66,
      "Text": " In general, tasking flow goes from operator to Mythic, Mythic to payload container,"
    },
    {
      "Time_Start": 218.66,
      "Time_End": 222.45999999999998,
      "Text": " payload container to agent."
    },
    {
      "Time_Start": 222.46,
      "Time_End": 229.46,
      "Text": " You can control how your payload is built in this builder.py file as part of the Mythic interfaces."
    },
    {
      "Time_Start": 229.46,
      "Time_End": 233.86,
      "Text": " This is exciting for a variety of reasons because you could, say, do some sort of import"
    },
    {
      "Time_Start": 233.86,
      "Time_End": 239.18,
      "Text": " obfuscation or the like within that builder file if you were to create your own custom agent."
    },
    {
      "Time_Start": 239.18,
      "Time_End": 244.06,
      "Text": " But for the sake of this demo and for the sake of this agent, it's relatively straightforward .NET"
    },
    {
      "Time_Start": 244.06,
      "Time_End": 245.82,
      "Text": " compilation."
    },
    {
      "Time_Start": 245.82,
      "Time_End": 250.02,
      "Text": " Commands are registered as individual Python files within the container."
    },
    {
      "Time_Start": 250.02,
      "Time_End": 256.1,
      "Text": " And they take JSON on the input, and they output JSON as well."
    },
    {
      "Time_Start": 256.1,
      "Time_End": 260.42,
      "Text": " And this allows us to customize displays of task output via browser scripts when the agent"
    },
    {
      "Time_Start": 260.42,
      "Time_End": 262.98,
      "Text": " reports back data from a command."
    },
    {
      "Time_Start": 262.98,
      "Time_End": 268.66,
      "Text": " This is useful to draw the attention of students to certain files and folders."
    },
    {
      "Time_Start": 268.66,
      "Time_End": 273.02,
      "Text": " It allows us to pull more verbose information and make the GUI, in general, more"
    },
    {
      "Time_Start": 273.02,
      "Time_End": 277.46000000000004,
      "Text": " interactable than just copy and pasting text out of the terminal."
    },
    {
      "Time_Start": 277.5,
      "Time_End": 281.06,
      "Text": " So let's go over the basic task workflow for Mythic."
    },
    {
      "Time_Start": 281.06,
      "Time_End": 285.85999999999996,
      "Text": " An operator sits on the left-hand side who's interacting with the Mythic front-end UI."
    },
    {
      "Time_Start": 285.85999999999996,
      "Time_End": 289.38,
      "Text": " The operator submits a task like ls the C drive."
    },
    {
      "Time_Start": 289.38,
      "Time_End": 293.34,
      "Text": " That command is sent to Mythic, which dispatches that command to the Apollo payload"
    },
    {
      "Time_Start": 293.34,
      "Time_End": 295.14,
      "Text": " Docker container."
    },
    {
      "Time_Start": 295.14,
      "Time_End": 300.06,
      "Text": " That Docker container contains an ls.py file, which will do some preprocessing on the"
    },
    {
      "Time_Start": 300.06,
      "Time_End": 301.9,
      "Text": " command line it was fed."
    },
    {
      "Time_Start": 301.90000000000003,
      "Time_End": 308.38000000000005,
      "Text": " It will separate that command line into a JSON blob, such as on the top right-hand side"
    },
    {
      "Time_Start": 308.38000000000005,
      "Time_End": 309.50000000000006,
      "Text": " we see."
    },
    {
      "Time_Start": 309.50000000000006,
      "Time_End": 315.94000000000005,
      "Text": " And Mythic will feed that new tasking to the victim on the right-hand side in step three."
    },
    {
      "Time_Start": 315.94000000000005,
      "Time_End": 321.34000000000003,
      "Text": " The agent performs some tasking and reports back formatted data to Mythic in step four."
    },
    {
      "Time_Start": 321.34000000000003,
      "Time_End": 327.14000000000004,
      "Text": " In step five, the results of the tasking is processed by the front-end browser, where"
    },
    {
      "Time_Start": 327.14000000000004,
      "Time_End": 330.02000000000004,
      "Text": " applicable, so long as there is a browser script displayed."
    },
    {
      "Time_Start": 330.02,
      "Time_End": 332.29999999999995,
      "Text": " Otherwise, it returns just the standard out of that task."
    },
    {
      "Time_Start": 335.21999999999997,
      "Time_End": 338.38,
      "Text": " What's exciting about Mythic is that we are allowed to control every bullet point"
    },
    {
      "Time_Start": 338.38,
      "Time_End": 339.97999999999996,
      "Text": " highlighted in red."
    },
    {
      "Time_Start": 339.97999999999996,
      "Time_End": 343.38,
      "Text": " We're allowed to transform the command line in any way that we choose."
    },
    {
      "Time_Start": 343.38,
      "Time_End": 348.85999999999996,
      "Text": " We can ensure that the command line is of a proper format."
    },
    {
      "Time_Start": 348.85999999999996,
      "Time_End": 351.94,
      "Text": " We can raise errors before it's sent to the agent."
    },
    {
      "Time_Start": 351.94,
      "Time_End": 358.5,
      "Text": " We can even do, if you were so inclined, to do some neat preprocessing tasks like, for"
    },
    {
      "Time_Start": 358.5,
      "Time_End": 362.62,
      "Text": " example, convert a DLL to shell code and obfuscate that shell code before delivering"
    },
    {
      "Time_Start": 362.62,
      "Time_End": 365.98,
      "Text": " it to the agent."
    },
    {
      "Time_Start": 365.98,
      "Time_End": 367.86,
      "Text": " So what does this allow us to do?"
    },
    {
      "Time_Start": 367.86,
      "Time_End": 371.5,
      "Text": " We can do preprocessing on commands like we've already talked about."
    },
    {
      "Time_Start": 371.5,
      "Time_End": 375.06,
      "Text": " Apart from just command line in the web UI, we also have modal pop-ups, which will prompt"
    },
    {
      "Time_Start": 375.06,
      "Time_End": 379.22,
      "Text": " the user for each argument that's required, along with short descriptions about what those"
    },
    {
      "Time_Start": 379.22,
      "Time_End": 380.22,
      "Text": " arguments mean."
    },
    {
      "Time_Start": 380.22,
      "Time_End": 385.3,
      "Text": " The pop-ups are, in general, more user-friendly for new users who don't necessarily know what"
    },
    {
      "Time_Start": 385.3,
      "Time_End": 387.62,
      "Text": " the command does or what the arguments mean."
    },
    {
      "Time_Start": 387.74,
      "Time_End": 391.82,
      "Text": " Moreover, we have that documentation container that allows them to interrogate each command"
    },
    {
      "Time_Start": 391.82,
      "Time_End": 392.82,
      "Text": " more vigorously."
    },
    {
      "Time_Start": 392.82,
      "Time_End": 397.9,
      "Text": " And it ensures that the data that we send down to the agent is always properly formatted."
    },
    {
      "Time_Start": 397.9,
      "Time_End": 400.22,
      "Text": " No more fussing around with quotes and double quotes."
    },
    {
      "Time_Start": 400.22,
      "Time_End": 404.38,
      "Text": " We can ensure that it's always of a uniform type."
    },
    {
      "Time_Start": 404.38,
      "Time_End": 406.98,
      "Text": " There's also post-processing on commands that we can do."
    },
    {
      "Time_Start": 406.98,
      "Time_End": 410.46,
      "Text": " We can return either basic strings or more verbose JSON output."
    },
    {
      "Time_Start": 410.46,
      "Time_End": 414.5,
      "Text": " And when we have these JSON outputs, we can do more of these browser scripts, which I"
    },
    {
      "Time_Start": 414.5,
      "Time_End": 418.74,
      "Text": " know I've talked a lot about and we'll see in the demo shortly that'll be coming up."
    },
    {
      "Time_Start": 418.74,
      "Time_End": 423.22,
      "Text": " These are highly customizable and they allow you to focus a user's attention on what's"
    },
    {
      "Time_Start": 423.22,
      "Time_End": 424.22,
      "Text": " important."
    },
    {
      "Time_Start": 424.22,
      "Time_End": 428.34,
      "Text": " Say if you wanted to highlight a file that was returned from LS that has the word password"
    },
    {
      "Time_Start": 428.34,
      "Time_End": 430.22,
      "Text": " in it, you can do that with a browser script."
    },
    {
      "Time_Start": 430.22,
      "Time_End": 434.02,
      "Text": " If you want to sort processes by ID, you can do that now."
    },
    {
      "Time_Start": 434.02,
      "Time_End": 438.36,
      "Text": " There's just a lot of functionality that browser scripts enable and empower you as a developer"
    },
    {
      "Time_Start": 438.36,
      "Time_End": 442.3,
      "Text": " to ensure that you have the best user experience or operator experience."
    },
    {
      "Time_Start": 442.3,
      "Time_End": 443.3,
      "Text": " So what is Apollo?"
    },
    {
      "Time_Start": 443.3,
      "Time_End": 447.62,
      "Text": " Apollo is specifically a .NET framework agent for Mythic and it's designed with training"
    },
    {
      "Time_Start": 447.62,
      "Time_End": 452.18,
      "Text": " in mind, meaning that it's all open source, that the commands are relatively straightforward"
    },
    {
      "Time_Start": 452.18,
      "Time_End": 456.54,
      "Text": " to implement, and it has a transparent implementation of attack techniques."
    },
    {
      "Time_Start": 456.54,
      "Time_End": 459.90000000000003,
      "Text": " So if a student wanted to know how something worked under the hood, or if they wanted to"
    },
    {
      "Time_Start": 459.90000000000003,
      "Time_End": 463.94,
      "Text": " replicate it or build out their own customized version, they all can."
    },
    {
      "Time_Start": 463.94,
      "Time_End": 468.06,
      "Text": " It leverages features of the Mythic framework, such as browser scripts, wrapper payloads,"
    },
    {
      "Time_Start": 468.06,
      "Time_End": 469.7,
      "Text": " which we haven't talked about yet."
    },
    {
      "Time_Start": 469.7,
      "Time_End": 472.3,
      "Text": " This allows us to modify the base payload."
    },
    {
      "Time_Start": 472.3,
      "Time_End": 475.9,
      "Text": " So in this case, our agent Apollo into different formats."
    },
    {
      "Time_Start": 475.9,
      "Time_End": 479.74,
      "Text": " It has built in lateral movement as per operator task locking."
    },
    {
      "Time_Start": 479.74,
      "Time_End": 484.36,
      "Text": " So you can ensure that only one operator is operating through a task at a time."
    },
    {
      "Time_Start": 484.36,
      "Time_End": 488.34,
      "Text": " You can even filter down that output to your user."
    },
    {
      "Time_Start": 488.34,
      "Time_End": 493.46,
      "Text": " And it also implements a full SOCKS functionality, and it should be usable by students before"
    },
    {
      "Time_Start": 493.46,
      "Time_End": 494.86,
      "Text": " and after training."
    },
    {
      "Time_Start": 494.86,
      "Time_End": 501.02000000000004,
      "Text": " Oftentimes our trainings implemented commercial tools that couldn't necessarily be easily"
    },
    {
      "Time_Start": 501.02000000000004,
      "Time_End": 503.7,
      "Text": " retrievable by students after our trainings."
    },
    {
      "Time_Start": 503.7,
      "Time_End": 509.5,
      "Text": " And so in this way, we can ensure that there's a uniform experience before and after."
    },
    {
      "Time_Start": 509.5,
      "Time_End": 511.7,
      "Text": " So what does it mean to be designed for training?"
    },
    {
      "Time_Start": 511.7,
      "Time_End": 516.26,
      "Text": " Mostly we just want to ensure there's several quality of life improvements that we can make"
    },
    {
      "Time_Start": 516.26,
      "Time_End": 518.1800000000001,
      "Text": " for newcoming students."
    },
    {
      "Time_Start": 518.1800000000001,
      "Time_End": 521.98,
      "Text": " There's operator specific command history and filtering, which makes this extremely"
    },
    {
      "Time_Start": 521.98,
      "Time_End": 524.58,
      "Text": " useful for multiplayer operations."
    },
    {
      "Time_Start": 524.58,
      "Time_End": 527.1800000000001,
      "Text": " It's all interacting with the same front end UI."
    },
    {
      "Time_Start": 527.1800000000001,
      "Time_End": 532.5,
      "Text": " So you can say filter tasks, taskings down to only student one, or if you wanted to look"
    },
    {
      "Time_Start": 532.5,
      "Time_End": 536.74,
      "Text": " for commands that only contain a certain command line, you can do that."
    },
    {
      "Time_Start": 536.74,
      "Time_End": 541.82,
      "Text": " Moreover, each time you spawn a new agent or say inject your agent somewhere else, you"
    },
    {
      "Time_Start": 541.82,
      "Time_End": 546.94,
      "Text": " can track what the spawned agent was and who spawned it so that you can claim each callback"
    },
    {
      "Time_Start": 546.94,
      "Time_End": 547.94,
      "Text": " easily."
    },
    {
      "Time_Start": 547.94,
      "Time_End": 553.7,
      "Text": " Moreover, there's token impersonation tracking, an issue that we run into our RTO classes"
    },
    {
      "Time_Start": 553.82,
      "Time_End": 559.3000000000001,
      "Text": " a lot is who is this person impersonating and it's somewhat hard to tell."
    },
    {
      "Time_Start": 559.3000000000001,
      "Time_End": 563.98,
      "Text": " In this way, we have token impersonation tracking for both local and remote operations."
    },
    {
      "Time_Start": 563.98,
      "Time_End": 566.46,
      "Text": " They try to debug some of those issues."
    },
    {
      "Time_Start": 566.46,
      "Time_End": 570.7800000000001,
      "Text": " We have assembly and script tracking so we can see what assemblies and PowerShell scripts"
    },
    {
      "Time_Start": 570.7800000000001,
      "Time_End": 573.0200000000001,
      "Text": " are currently loaded into the agent."
    },
    {
      "Time_Start": 573.0200000000001,
      "Time_End": 579.3000000000001,
      "Text": " We can also go back through a task history and see what commands led up to say a student's"
    },
    {
      "Time_Start": 579.3000000000001,
      "Time_End": 581.62,
      "Text": " potential problem area."
    },
    {
      "Time_Start": 581.62,
      "Time_End": 585.3,
      "Text": " There's also a verbose command output that's sortable, meaning that we can have a full"
    },
    {
      "Time_Start": 585.3,
      "Time_End": 587.76,
      "Text": " file listing with full paths."
    },
    {
      "Time_Start": 587.76,
      "Time_End": 589.78,
      "Text": " We can copy those paths to clipboards."
    },
    {
      "Time_Start": 589.78,
      "Time_End": 595.14,
      "Text": " We can store permission information from those files and make it more easily accessible to"
    },
    {
      "Time_Start": 595.14,
      "Time_End": 598.58,
      "Text": " see where potential vulnerabilities might lie on disk."
    },
    {
      "Time_Start": 598.58,
      "Time_End": 602.62,
      "Text": " Moreover, when we say it's designed for training, it's that it's non-evasive."
    },
    {
      "Time_Start": 602.62,
      "Time_End": 608.64,
      "Text": " A lot of the evasive egress channels that might be in other agents, such as like web"
    },
    {
      "Time_Start": 608.64,
      "Time_End": 614.1999999999999,
      "Text": " sockets or external C2, that is not built in at the moment."
    },
    {
      "Time_Start": 614.1999999999999,
      "Time_End": 619.76,
      "Text": " And so we only call back over the basic HTTP profile for mythic, which means we hit a static"
    },
    {
      "Time_Start": 619.76,
      "Time_End": 621.28,
      "Text": " endpoint."
    },
    {
      "Time_Start": 621.28,
      "Time_End": 625.12,
      "Text": " And it's so there's several static indicators, essentially."
    },
    {
      "Time_Start": 625.12,
      "Time_End": 628.3199999999999,
      "Text": " And there's no obfuscation done to the agent at compile time."
    },
    {
      "Time_Start": 628.3199999999999,
      "Time_End": 632.68,
      "Text": " It's all should be introspective by AMSI."
    },
    {
      "Time_Start": 632.68,
      "Time_End": 636.72,
      "Text": " But it is extensible, which means that students are encouraged to design new features and"
    },
    {
      "Time_Start": 636.72,
      "Time_End": 639.5600000000001,
      "Text": " learn coding in a way that they might find fun."
    },
    {
      "Time_Start": 639.5600000000001,
      "Time_End": 643.72,
      "Text": " And it allows them to interact with the code that they used in the training offering after"
    },
    {
      "Time_Start": 643.72,
      "Time_End": 646.76,
      "Text": " the course."
    },
    {
      "Time_Start": 646.76,
      "Time_End": 649.0,
      "Text": " So what are some of the notable features of Apollo?"
    },
    {
      "Time_Start": 649.0,
      "Time_End": 652.9200000000001,
      "Text": " There's third party tool execution, which means that we have the ability to execute"
    },
    {
      "Time_Start": 652.9200000000001,
      "Time_End": 655.02,
      "Text": " .NET and PowerShell scripts."
    },
    {
      "Time_Start": 655.02,
      "Time_End": 659.32,
      "Text": " We execute .NET assemblies using the fork and run architecture, as well as the injection"
    },
    {
      "Time_Start": 659.32,
      "Time_End": 660.32,
      "Text": " method."
    },
    {
      "Time_Start": 660.32,
      "Time_End": 663.6800000000001,
      "Text": " So we can spawn a sacrificial process and inject the .NET assembly into there."
    },
    {
      "Time_Start": 663.6800000000001,
      "Time_End": 667.98,
      "Text": " Or we can inject the .NET assembly into any other remote process."
    },
    {
      "Time_Start": 667.98,
      "Time_End": 672.48,
      "Text": " We have PowerShell script tracking, which means that you can import one or more PowerShell"
    },
    {
      "Time_Start": 672.48,
      "Time_End": 678.4000000000001,
      "Text": " scripts into the agent and the agent can then load any command from those scripts when it"
    },
    {
      "Time_Start": 678.4000000000001,
      "Time_End": 682.44,
      "Text": " executes any of the PowerShell commands that it knows about."
    },
    {
      "Time_Start": 682.44,
      "Time_End": 687.6800000000001,
      "Text": " You can do PowerShell in its current process, fork and run, and inject just like assemblies."
    },
    {
      "Time_Start": 687.6800000000001,
      "Time_End": 691.8000000000001,
      "Text": " There's automated payload compilation and built in lateral movement."
    },
    {
      "Time_Start": 691.8000000000001,
      "Time_End": 697.08,
      "Text": " So what this means is for tasks that go and require another payload to be generated, such"
    },
    {
      "Time_Start": 697.08,
      "Time_End": 703.96,
      "Text": " as spawn, inject, or PS exec, it will generate a new payload that is specific to that task."
    },
    {
      "Time_Start": 703.96,
      "Time_End": 708.36,
      "Text": " And that payload can be tracked in artifacts and you can associate each payload with each"
    },
    {
      "Time_Start": 708.36,
      "Time_End": 712.8000000000001,
      "Text": " tasking so that you have a good history of what's going on."
    },
    {
      "Time_Start": 712.8000000000001,
      "Time_End": 717.32,
      "Text": " This is also true for the UAC bypass that is also built in."
    },
    {
      "Time_Start": 717.32,
      "Time_End": 721.4000000000001,
      "Text": " There's also SOCKS 5 support and the end, meaning that you can enable the SOCKS server"
    },
    {
      "Time_Start": 721.4,
      "Time_End": 723.36,
      "Text": " on the remote endpoint."
    },
    {
      "Time_Start": 723.36,
      "Time_End": 728.8,
      "Text": " And as an operator on, say, a VM, you can SSH and create a binding tunnel to your remote"
    },
    {
      "Time_Start": 728.8,
      "Time_End": 734.64,
      "Text": " C2 server and you can proxy traffic down through the target environment."
    },
    {
      "Time_Start": 734.64,
      "Time_End": 740.16,
      "Text": " So now let's go over a demo of building Apollo and Mythic."
    },
    {
      "Time_Start": 740.16,
      "Time_End": 745.5799999999999,
      "Text": " In this video, we're going to go over how to build and deploy Apollo."
    },
    {
      "Time_Start": 745.5799999999999,
      "Time_End": 750.54,
      "Text": " This video is going to assume that you've already installed Mythic on a server of your"
    },
    {
      "Time_Start": 750.54,
      "Time_End": 753.8199999999999,
      "Text": " choice and the installation succeeded."
    },
    {
      "Time_Start": 753.8199999999999,
      "Time_End": 758.9399999999999,
      "Text": " If you need help installing Mythic, refer to Cody Thomas's videos on how to install"
    },
    {
      "Time_Start": 758.9399999999999,
      "Time_End": 759.9399999999999,
      "Text": " it."
    },
    {
      "Time_Start": 759.9399999999999,
      "Time_End": 770.3,
      "Text": " I'm going to first log in using the default administrative username and password."
    },
    {
      "Time_Start": 770.3,
      "Time_End": 775.06,
      "Text": " Once we're within the main landing page, we want to ensure that the Apollo payload type"
    },
    {
      "Time_Start": 775.06,
      "Time_End": 776.36,
      "Text": " is running."
    },
    {
      "Time_Start": 776.36,
      "Time_End": 782.2,
      "Text": " To do that, you go to global configurations, payload types, and you should see the green"
    },
    {
      "Time_Start": 782.2,
      "Time_End": 784.2,
      "Text": " status indicator light up."
    },
    {
      "Time_Start": 784.2,
      "Time_End": 789.76,
      "Text": " If the status indicator is red, that means that the container is not running."
    },
    {
      "Time_Start": 789.76,
      "Time_End": 795.54,
      "Text": " Each payload runs in a container that is responsible for building a new iteration of the payload."
    },
    {
      "Time_Start": 795.54,
      "Time_End": 798.88,
      "Text": " So if this is not green, your payload will fail to build."
    },
    {
      "Time_Start": 798.88,
      "Time_End": 803.28,
      "Text": " If it hasn't started yet, you can go to the command line of the Mythic server and you"
    },
    {
      "Time_Start": 803.28,
      "Time_End": 808.28,
      "Text": " can restart it via the start payload types command."
    },
    {
      "Time_Start": 808.28,
      "Time_End": 813.6,
      "Text": " In this case, it would be Apollo, in which case it will stop the container and then restart"
    },
    {
      "Time_Start": 813.6,
      "Time_End": 816.6,
      "Text": " it."
    },
    {
      "Time_Start": 816.6,
      "Time_End": 822.36,
      "Text": " To create a new payload type, we go to create components, create payload."
    },
    {
      "Time_Start": 822.36,
      "Time_End": 825.16,
      "Text": " Here we need to select our operating system."
    },
    {
      "Time_Start": 825.16,
      "Time_End": 829.68,
      "Text": " Because Apollo is a Windows agent, we choose the Windows operating system."
    },
    {
      "Time_Start": 829.6800000000001,
      "Time_End": 835.0000000000001,
      "Text": " Each payload type supports one or more C2 profiles."
    },
    {
      "Time_Start": 835.0000000000001,
      "Time_End": 840.8000000000001,
      "Text": " Apollo currently supports the default HTTP profile and an SMB profile."
    },
    {
      "Time_Start": 840.8000000000001,
      "Time_End": 845.6400000000001,
      "Text": " For this demo, we're going to use the HTTP profile."
    },
    {
      "Time_Start": 845.6400000000001,
      "Time_End": 849.6400000000001,
      "Text": " Once you've selected a profile, a number of options will appear."
    },
    {
      "Time_Start": 849.6400000000001,
      "Time_End": 854.44,
      "Text": " Here only a few options are required and the rest are optionally stamped into the agent"
    },
    {
      "Time_Start": 854.44,
      "Time_End": 855.9200000000001,
      "Text": " at compile time."
    },
    {
      "Time_Start": 856.1600000000001,
      "Time_End": 867.8000000000001,
      "Text": " In this case, my domain is Mythic and we have other URIs that we can specify."
    },
    {
      "Time_Start": 867.8000000000001,
      "Time_End": 874.6400000000001,
      "Text": " After that, we can select the name of the agent that we're building as well as the type"
    },
    {
      "Time_Start": 874.6400000000001,
      "Time_End": 877.1200000000001,
      "Text": " that we are building."
    },
    {
      "Time_Start": 877.1200000000001,
      "Time_End": 882.48,
      "Text": " We can select compile options such as x64, x86."
    },
    {
      "Time_Start": 882.48,
      "Time_End": 887.36,
      "Text": " Currently we only support the release build of Apollo."
    },
    {
      "Time_Start": 887.36,
      "Time_End": 892.9200000000001,
      "Text": " And as for the output type, we can select three options, an executable, raw shellcode,"
    },
    {
      "Time_Start": 892.9200000000001,
      "Time_End": 894.76,
      "Text": " or a DLL."
    },
    {
      "Time_Start": 894.76,
      "Time_End": 898.5600000000001,
      "Text": " We're going to start with an executable."
    },
    {
      "Time_Start": 898.5600000000001,
      "Time_End": 903.0,
      "Text": " And then you can also select the type of .NET framework you wish to compile for."
    },
    {
      "Time_Start": 903.0,
      "Time_End": 909.04,
      "Text": " In this case, 4.0 is the minimum version required for certain options."
    },
    {
      "Time_Start": 909.04,
      "Time_End": 911.96,
      "Text": " You can select your payload name here."
    },
    {
      "Time_Start": 911.96,
      "Time_End": 915.96,
      "Text": " We're going to leave it as default Apollo.exe."
    },
    {
      "Time_Start": 915.96,
      "Time_End": 919.48,
      "Text": " After that, you can select the payload's default description."
    },
    {
      "Time_Start": 919.48,
      "Time_End": 922.96,
      "Text": " And this will give you the description of the callback when it returns and beacons back"
    },
    {
      "Time_Start": 922.96,
      "Time_End": 924.52,
      "Text": " to the server."
    },
    {
      "Time_Start": 924.52,
      "Time_End": 932.88,
      "Text": " In this case, we'll say demo for SOCON 2020."
    },
    {
      "Time_Start": 932.88,
      "Time_End": 936.5600000000001,
      "Text": " After that, we can choose what commands are compiled into the agent."
    },
    {
      "Time_Start": 937.1600000000001,
      "Time_End": 944.0400000000001,
      "Text": " For the sake of this demo, we're going to select all commands and then create."
    },
    {
      "Time_Start": 944.0400000000001,
      "Time_End": 947.7600000000001,
      "Text": " This will submit the payload to the container with build options and make sure that the"
    },
    {
      "Time_Start": 947.7600000000001,
      "Time_End": 956.2,
      "Text": " chosen C2 profile has started so that the Mythic server is listening for new connections."
    },
    {
      "Time_Start": 956.2,
      "Time_End": 963.96,
      "Text": " Once it's compiled, we can see here at the operational views created payloads page, which"
    },
    {
      "Time_Start": 963.96,
      "Time_End": 966.1200000000001,
      "Text": " brings us here."
    },
    {
      "Time_Start": 966.12,
      "Time_End": 968.16,
      "Text": " We can download our payload."
    },
    {
      "Time_Start": 968.16,
      "Time_End": 973.12,
      "Text": " We can see the status of if it succeeded, who created it, what type, and what time it"
    },
    {
      "Time_Start": 973.12,
      "Time_End": 975.2,
      "Text": " was created."
    },
    {
      "Time_Start": 975.2,
      "Time_End": 979.16,
      "Text": " If you want to look at more options for this payload, such as what commands have been compiled"
    },
    {
      "Time_Start": 979.16,
      "Time_End": 984.72,
      "Text": " into it, you can go to the payload actions and view payload configuration to see the"
    },
    {
      "Time_Start": 984.72,
      "Time_End": 993.44,
      "Text": " commands that were compiled in, the version number, the base64 AES key, the payload UID,"
    },
    {
      "Time_Start": 993.44,
      "Time_End": 996.5200000000001,
      "Text": " and otherwise."
    },
    {
      "Time_Start": 996.5200000000001,
      "Time_End": 1002.96,
      "Text": " Additionally, there are payload wrappers that Mythic supports."
    },
    {
      "Time_Start": 1002.96,
      "Time_End": 1007.5600000000001,
      "Text": " Payload wrappers are much like payloads in the sense that they are executables deployed"
    },
    {
      "Time_Start": 1007.5600000000001,
      "Time_End": 1012.0400000000001,
      "Text": " to the target, but with certain modifications."
    },
    {
      "Time_Start": 1012.0400000000001,
      "Time_End": 1017.2,
      "Text": " In this case, Apollo supports one service wrapper."
    },
    {
      "Time_Start": 1017.2,
      "Time_End": 1024.64,
      "Text": " In this case, service wrapper creates a service executable for the supported payload types."
    },
    {
      "Time_Start": 1024.64,
      "Time_End": 1029.92,
      "Text": " Here we see on the right-hand side, Apollo and Atlas are both supported."
    },
    {
      "Time_Start": 1029.92,
      "Time_End": 1034.8400000000001,
      "Text": " To create a service wrapper, we will need shellcode to compile."
    },
    {
      "Time_Start": 1034.8400000000001,
      "Time_End": 1040.68,
      "Text": " We can do this again by going back to our create payload under create components, select"
    },
    {
      "Time_Start": 1040.68,
      "Time_End": 1047.4,
      "Text": " our operating system and profile, ensure that the callback domain is proper and other"
    },
    {
      "Time_Start": 1047.4,
      "Time_End": 1055.4,
      "Text": " options that we wish to select, ensure that when we build our payload that we select raw"
    },
    {
      "Time_Start": 1055.4,
      "Time_End": 1056.68,
      "Text": " shellcode here."
    },
    {
      "Time_Start": 1056.68,
      "Time_End": 1058.3200000000002,
      "Text": " Do not choose executable."
    },
    {
      "Time_Start": 1058.3200000000002,
      "Time_End": 1062.6000000000001,
      "Text": " If you choose executable, the service wrapper will fail to build and it will not generate"
    },
    {
      "Time_Start": 1062.6000000000001,
      "Time_End": 1065.5600000000002,
      "Text": " a service executable."
    },
    {
      "Time_Start": 1065.5600000000002,
      "Time_End": 1069.24,
      "Text": " Here we'll rename the payload to something more descriptive so that we know that the"
    },
    {
      "Time_Start": 1069.32,
      "Time_End": 1071.56,
      "Text": " payload name is shellcode."
    },
    {
      "Time_Start": 1071.56,
      "Time_End": 1080.44,
      "Text": " So we'll say Apollo.bin and we'll say shellcode demo for SOCON 2020 as the description."
    },
    {
      "Time_Start": 1080.44,
      "Time_End": 1088.52,
      "Text": " Again, we'll compile in all commands."
    },
    {
      "Time_Start": 1088.52,
      "Time_End": 1095.32,
      "Text": " Once this successfully builds, we'll be able to go back to the create wrapper under create"
    },
    {
      "Time_Start": 1095.32,
      "Time_End": 1101.1599999999999,
      "Text": " components, select our service wrapper, select the version of the .NET framework."
    },
    {
      "Time_Start": 1101.1599999999999,
      "Time_End": 1107.96,
      "Text": " In this case, since Apollo runs 4.0, we should select 4.0 so that the proper CLR is selected"
    },
    {
      "Time_Start": 1107.96,
      "Time_End": 1111.8,
      "Text": " when this service executable launches."
    },
    {
      "Time_Start": 1111.8,
      "Time_End": 1115.8,
      "Text": " Create the same matching architecture and build."
    },
    {
      "Time_Start": 1115.8,
      "Time_End": 1119.36,
      "Text": " In this case, we're selecting our Apollo.bin file."
    },
    {
      "Time_Start": 1119.36,
      "Time_End": 1123.3999999999999,
      "Text": " In this dropdown, you can select any number of payloads, but if you do not select the"
    },
    {
      "Time_Start": 1123.4,
      "Time_End": 1128.8400000000001,
      "Text": " shellcode file, the service wrapper will fail to generate."
    },
    {
      "Time_Start": 1128.8400000000001,
      "Time_End": 1135.5600000000002,
      "Text": " We'll name this ApolloService.exe because this is a service executable."
    },
    {
      "Time_Start": 1135.5600000000002,
      "Time_End": 1144.5600000000002,
      "Text": " Let's say service executable demo for SOCON 2020 and click create."
    },
    {
      "Time_Start": 1144.5600000000002,
      "Time_End": 1149.2,
      "Text": " Once created, it will take this generated shellcode file, which was created using the"
    },
    {
      "Time_Start": 1149.2,
      "Time_End": 1157.04,
      "Text": " Woevers donut project and embed it into the service wrapper project as an embedded resource."
    },
    {
      "Time_Start": 1157.04,
      "Time_End": 1161.96,
      "Text": " When the service starts, it simply does create thread and points to the shellcode that you"
    },
    {
      "Time_Start": 1161.96,
      "Time_End": 1165.24,
      "Text": " provided."
    },
    {
      "Time_Start": 1165.24,
      "Time_End": 1166.6000000000001,
      "Text": " And that's it."
    },
    {
      "Time_Start": 1166.6000000000001,
      "Time_End": 1173.1200000000001,
      "Text": " We now know how to create a payload wrapper, a payload, generate raw executables, and how"
    },
    {
      "Time_Start": 1173.1200000000001,
      "Time_End": 1175.72,
      "Text": " to generate shellcode."
    },
    {
      "Time_Start": 1175.72,
      "Time_End": 1181.32,
      "Text": " To see all of these created payloads, we simply go to operational views, created payloads,"
    },
    {
      "Time_Start": 1181.32,
      "Time_End": 1187.48,
      "Text": " and here we can see all of our newly created payloads with the option to download them."
    },
    {
      "Time_Start": 1187.48,
      "Time_End": 1192.04,
      "Text": " So what are the commands in Apollo and how are they placed in there?"
    },
    {
      "Time_Start": 1192.04,
      "Time_End": 1197.08,
      "Text": " Well, commands are compiled into the agent via some preprocessor definitions that are"
    },
    {
      "Time_Start": 1197.08,
      "Time_End": 1201.04,
      "Text": " stamped in through the builder.py file."
    },
    {
      "Time_Start": 1201.04,
      "Time_End": 1206.08,
      "Text": " Commands when they're sent down to the agent are dispatched via reflection through some"
    },
    {
      "Time_Start": 1206.08,
      "Time_End": 1209.0,
      "Text": " task management functionality."
    },
    {
      "Time_Start": 1209.0,
      "Time_End": 1212.12,
      "Text": " There's managed commands and unmanaged commands."
    },
    {
      "Time_Start": 1212.12,
      "Time_End": 1217.3999999999999,
      "Text": " Since Apollo is written in the .NET framework, the code base core is of managed type, meaning"
    },
    {
      "Time_Start": 1217.3999999999999,
      "Time_End": 1222.76,
      "Text": " that garbage disposal happens for us without us ever having to think about it."
    },
    {
      "Time_Start": 1222.76,
      "Time_End": 1227.3799999999999,
      "Text": " And we are able to interact nicely with some of the .NET framework APIs provided."
    },
    {
      "Time_Start": 1227.38,
      "Time_End": 1233.46,
      "Text": " And so we can use like all of the system.io functions, directory listings, et cetera."
    },
    {
      "Time_Start": 1233.46,
      "Time_End": 1239.3000000000002,
      "Text": " So managed commands are things like process listings, file listings, shell, and the like."
    },
    {
      "Time_Start": 1239.3000000000002,
      "Time_End": 1244.2,
      "Text": " And there's no other pre-command processing that needs to be required for these commands."
    },
    {
      "Time_Start": 1244.2,
      "Time_End": 1247.46,
      "Text": " We just send down the command line and the agent can execute."
    },
    {
      "Time_Start": 1247.46,
      "Time_End": 1252.98,
      "Text": " For unmanaged commands, such as execute assembly, Mimikatz, PowerPick, and et cetera, there"
    },
    {
      "Time_Start": 1252.98,
      "Time_End": 1259.1200000000001,
      "Text": " are pre-built DLLs that live server side, and those DLLs are sent down to the agent"
    },
    {
      "Time_Start": 1259.1200000000001,
      "Time_End": 1261.18,
      "Text": " on task issuing."
    },
    {
      "Time_Start": 1261.18,
      "Time_End": 1266.8,
      "Text": " Those DLLs are compiled into shell code each time that task is issued and they communicate"
    },
    {
      "Time_Start": 1266.8,
      "Time_End": 1269.78,
      "Text": " over a name pipe."
    },
    {
      "Time_Start": 1269.78,
      "Time_End": 1274.6,
      "Text": " So let's go over some basic taskings and quality of life improvements that Apollo makes using"
    },
    {
      "Time_Start": 1274.6,
      "Time_End": 1279.16,
      "Text": " the Mythic framework."
    },
    {
      "Time_Start": 1279.16,
      "Time_End": 1282.92,
      "Text": " In this video, we're going to be covering some of the basic quality of life improvements"
    },
    {
      "Time_Start": 1282.92,
      "Time_End": 1287.16,
      "Text": " Apollo is able to make by interfacing with the Mythic framework."
    },
    {
      "Time_Start": 1287.16,
      "Time_End": 1291.0,
      "Text": " In the upper half of the screen, we see two callbacks beaconing out."
    },
    {
      "Time_Start": 1291.0,
      "Time_End": 1296.2,
      "Text": " We have a medium integrity callback from workstation one on keyboard interactive one."
    },
    {
      "Time_Start": 1296.2,
      "Time_End": 1300.88,
      "Text": " On the left hand side, the blue icon represents a medium integrity callback, while the red"
    },
    {
      "Time_Start": 1300.88,
      "Time_End": 1303.16,
      "Text": " indicates a high integrity."
    },
    {
      "Time_Start": 1303.16,
      "Time_End": 1308.16,
      "Text": " If the callback is high integrity, the username will have an asterisk next to their name."
    },
    {
      "Time_Start": 1308.16,
      "Time_End": 1313.0,
      "Text": " For each callback, we can see what payload was used to execute on the endpoint based"
    },
    {
      "Time_Start": 1313.0,
      "Time_End": 1315.8400000000001,
      "Text": " on the description that we generated in the first video."
    },
    {
      "Time_Start": 1315.8400000000001,
      "Time_End": 1320.0800000000002,
      "Text": " Here we see that this is the Apollo.exe because the description is set for a demo for SOCON"
    },
    {
      "Time_Start": 1320.0800000000002,
      "Time_End": 1321.0800000000002,
      "Text": " 2020."
    },
    {
      "Time_Start": 1321.0800000000002,
      "Time_End": 1323.52,
      "Text": " Let's start interacting with our first callback."
    },
    {
      "Time_Start": 1323.52,
      "Time_End": 1326.52,
      "Text": " If we want to interact with that callback, simply click the keyboard icon and it will"
    },
    {
      "Time_Start": 1326.52,
      "Time_End": 1329.5600000000002,
      "Text": " bring up the pane in the bottom half of your screen."
    },
    {
      "Time_Start": 1329.5600000000002,
      "Time_End": 1331.92,
      "Text": " Let's sleep this agent down to zero."
    },
    {
      "Time_Start": 1331.92,
      "Time_End": 1335.44,
      "Text": " If you had questions regarding command syntax, you can always issue the help command followed"
    },
    {
      "Time_Start": 1335.44,
      "Time_End": 1337.52,
      "Text": " by the command name, in this case sleep."
    },
    {
      "Time_Start": 1337.96,
      "Time_End": 1341.84,
      "Text": " At the top right of your screen, you'll see a balloon pop-up that will list the command"
    },
    {
      "Time_Start": 1341.84,
      "Time_End": 1344.52,
      "Text": " syntax as well as a short description."
    },
    {
      "Time_Start": 1344.52,
      "Time_End": 1348.04,
      "Text": " If you want more verbose information, click on the hyperlink in the balloon for the help"
    },
    {
      "Time_Start": 1348.04,
      "Time_End": 1349.28,
      "Text": " container."
    },
    {
      "Time_Start": 1349.28,
      "Time_End": 1353.32,
      "Text": " This will open the mythic documentation server, which you'll see on the left hand side a list"
    },
    {
      "Time_Start": 1353.32,
      "Time_End": 1355.0,
      "Text": " of supported agents."
    },
    {
      "Time_Start": 1355.0,
      "Time_End": 1359.6399999999999,
      "Text": " If you click into Apollo, you'll see a table of contents followed by a list of commands,"
    },
    {
      "Time_Start": 1359.6399999999999,
      "Time_End": 1361.8799999999999,
      "Text": " offset considerations, et cetera."
    },
    {
      "Time_Start": 1361.8799999999999,
      "Time_End": 1365.36,
      "Text": " Each command in this table of contents has more verbose information such as what the"
    },
    {
      "Time_Start": 1365.3600000000001,
      "Time_End": 1370.2400000000002,
      "Text": " parameter is expecting, how it works under the hood, and additional considerations you"
    },
    {
      "Time_Start": 1370.2400000000002,
      "Time_End": 1374.88,
      "Text": " may need to make."
    },
    {
      "Time_Start": 1374.88,
      "Time_End": 1379.0000000000002,
      "Text": " Swapping back to our callback page, another issue that we tried to tackle with Apollo"
    },
    {
      "Time_Start": 1379.0000000000002,
      "Time_End": 1382.8000000000002,
      "Text": " is who's doing what on what beacon."
    },
    {
      "Time_Start": 1382.8000000000002,
      "Time_End": 1385.7600000000002,
      "Text": " Mythics tries to solve this problem via the task filtering."
    },
    {
      "Time_Start": 1385.7600000000002,
      "Time_End": 1389.96,
      "Text": " You can filter tasks on the bottom right of your screen by clicking the filter icon here"
    },
    {
      "Time_Start": 1389.96,
      "Time_End": 1391.92,
      "Text": " next to submit task."
    },
    {
      "Time_Start": 1391.92,
      "Time_End": 1395.52,
      "Text": " Here you'll have a variety of different filter options such as what operator."
    },
    {
      "Time_Start": 1395.52,
      "Time_End": 1397.92,
      "Text": " So this could be the username of the user."
    },
    {
      "Time_Start": 1397.92,
      "Time_End": 1404.04,
      "Text": " If a student logs in, they can filter this down to only tasks by student one, for example."
    },
    {
      "Time_Start": 1404.04,
      "Time_End": 1408.6000000000001,
      "Text": " You can filter it by task ID, which we've done in this demo, or you can do it by what"
    },
    {
      "Time_Start": 1408.6000000000001,
      "Time_End": 1414.3600000000001,
      "Text": " type of command or the command that includes certain arguments."
    },
    {
      "Time_Start": 1414.3600000000001,
      "Time_End": 1418.24,
      "Text": " Apollo solves this by implementing the spawn and inject commands."
    },
    {
      "Time_Start": 1418.24,
      "Time_End": 1423.1200000000001,
      "Text": " Each of these spawn and inject commands will populate a description for the newly injected"
    },
    {
      "Time_Start": 1423.1200000000001,
      "Time_End": 1428.48,
      "Text": " agent that is related to the user who issued the task as well as the payload that is associated"
    },
    {
      "Time_Start": 1428.48,
      "Time_End": 1431.28,
      "Text": " with it and the task ID."
    },
    {
      "Time_Start": 1431.28,
      "Time_End": 1433.56,
      "Text": " Let's see how that works now."
    },
    {
      "Time_Start": 1433.56,
      "Time_End": 1437.56,
      "Text": " Here we'll do spawn, and this will create a modal pop-up."
    },
    {
      "Time_Start": 1437.56,
      "Time_End": 1442.04,
      "Text": " We'll have to select the shellcode that's required, and we'll submit."
    },
    {
      "Time_Start": 1442.04,
      "Time_End": 1446.64,
      "Text": " This generates a new payload based on the payload template specified here."
    },
    {
      "Time_Start": 1446.64,
      "Time_End": 1450.8400000000001,
      "Text": " We generated this shellcode payload template in the first video."
    },
    {
      "Time_Start": 1450.8400000000001,
      "Time_End": 1456.0,
      "Text": " It'll build new shellcode, and this callback is now associated with this task."
    },
    {
      "Time_Start": 1456.0,
      "Time_End": 1461.2,
      "Text": " So for artifact tracking, and if someone were to wonder what exactly the PE you injected"
    },
    {
      "Time_Start": 1461.2,
      "Time_End": 1462.92,
      "Text": " was, you could retrieve that."
    },
    {
      "Time_Start": 1462.92,
      "Time_End": 1467.2800000000002,
      "Text": " And we see that we have a new session spawned here on callback five."
    },
    {
      "Time_Start": 1467.2800000000002,
      "Time_End": 1470.68,
      "Text": " Mythic admin spawned session from task 66."
    },
    {
      "Time_Start": 1470.68,
      "Time_End": 1474.4,
      "Text": " I logged in with the username mythicadmin, so I know this session is mine."
    },
    {
      "Time_Start": 1474.4,
      "Time_End": 1477.6000000000001,
      "Text": " And this is analogous to inject as well."
    },
    {
      "Time_Start": 1477.6000000000001,
      "Time_End": 1484.8000000000002,
      "Text": " Let's exit out of that callback for the sake of cleanliness."
    },
    {
      "Time_Start": 1484.8000000000002,
      "Time_End": 1488.6000000000001,
      "Text": " If you want to hide a callback from your view, like the agent we just exited out of, we can"
    },
    {
      "Time_Start": 1488.6000000000001,
      "Time_End": 1492.8000000000002,
      "Text": " always click the dropdown here and go to hide callback."
    },
    {
      "Time_Start": 1492.8000000000002,
      "Time_End": 1497.0800000000002,
      "Text": " If you want to hide more than one callback, you can select each individual callback that"
    },
    {
      "Time_Start": 1497.0800000000002,
      "Time_End": 1502.0,
      "Text": " you want and then click hide selected."
    },
    {
      "Time_Start": 1502.0,
      "Time_End": 1507.04,
      "Text": " Another issue we try to solve with Apollo is how can we draw students' attention to"
    },
    {
      "Time_Start": 1507.04,
      "Time_End": 1510.24,
      "Text": " interesting files and folders?"
    },
    {
      "Time_Start": 1510.24,
      "Time_End": 1512.44,
      "Text": " We can do this in a couple different ways."
    },
    {
      "Time_Start": 1512.44,
      "Time_End": 1517.4,
      "Text": " First let's lsc$ just to see what we have."
    },
    {
      "Time_Start": 1517.4,
      "Time_End": 1521.8,
      "Text": " We notice here that this output is not the typical standard in out that we're used to"
    },
    {
      "Time_Start": 1521.8,
      "Time_End": 1523.8,
      "Text": " from a variety of frameworks."
    },
    {
      "Time_Start": 1523.8,
      "Time_End": 1529.08,
      "Text": " Because Mythic allows us to hook task output with browser scripts, and that each task output"
    },
    {
      "Time_Start": 1529.08,
      "Time_End": 1533.08,
      "Text": " is structured JSON, we can manipulate it on the front end to give a nice display to"
    },
    {
      "Time_Start": 1533.08,
      "Time_End": 1534.8799999999999,
      "Text": " the user."
    },
    {
      "Time_Start": 1534.8799999999999,
      "Time_End": 1538.72,
      "Text": " We see on the far left side a clipboard icon, which will copy the full path to the file"
    },
    {
      "Time_Start": 1538.72,
      "Time_End": 1540.96,
      "Text": " or folder that you're looking at."
    },
    {
      "Time_Start": 1540.96,
      "Time_End": 1545.32,
      "Text": " Each of these columns is also sortable, such as you can sort by the last access date, the"
    },
    {
      "Time_Start": 1545.32,
      "Time_End": 1547.6399999999999,
      "Text": " creation, etc."
    },
    {
      "Time_Start": 1547.6399999999999,
      "Time_End": 1552.6399999999999,
      "Text": " Moreover, each file that it retrieves will also pull the associated permissions for that"
    },
    {
      "Time_Start": 1552.6399999999999,
      "Time_End": 1553.9199999999998,
      "Text": " object."
    },
    {
      "Time_Start": 1554.48,
      "Time_End": 1559.3600000000001,
      "Text": " Moreover, if we try to click on the access control list for one of these files or objects,"
    },
    {
      "Time_Start": 1559.3600000000001,
      "Time_End": 1562.24,
      "Text": " we can see the associated permissions for each account."
    },
    {
      "Time_Start": 1562.24,
      "Time_End": 1567.16,
      "Text": " So we can see the rights that are associated with it, so we can say that system and administrators"
    },
    {
      "Time_Start": 1567.16,
      "Time_End": 1571.64,
      "Text": " are both assigned full control of this recycle bin."
    },
    {
      "Time_Start": 1571.64,
      "Time_End": 1574.3200000000002,
      "Text": " But the functionality doesn't necessarily stop there."
    },
    {
      "Time_Start": 1574.3200000000002,
      "Time_End": 1583.0,
      "Text": " If we wanted to list, say, this user's documents folders, we can do that right now."
    },
    {
      "Time_Start": 1583.0,
      "Time_End": 1587.88,
      "Text": " We see that icons are based on the type of extension that the object is."
    },
    {
      "Time_Start": 1587.88,
      "Time_End": 1592.96,
      "Text": " So for example, office documents have their associated office icon, along with a different"
    },
    {
      "Time_Start": 1592.96,
      "Time_End": 1595.84,
      "Text": " colored icon instead of the basic white."
    },
    {
      "Time_Start": 1595.84,
      "Time_End": 1602.0,
      "Text": " This is associated with archive formats, PDFs, office documents, secret keys, and code files."
    },
    {
      "Time_Start": 1602.0,
      "Time_End": 1605.28,
      "Text": " If you have a question about what the icon means, you can always hover to see what it"
    },
    {
      "Time_Start": 1605.28,
      "Time_End": 1606.88,
      "Text": " means."
    },
    {
      "Time_Start": 1606.88,
      "Time_End": 1610.48,
      "Text": " Outside of the LS command itself, Mythic has a built-in file browser."
    },
    {
      "Time_Start": 1610.48,
      "Time_End": 1614.84,
      "Text": " You can access this by clicking the drop-down icon next to the callback and going to the"
    },
    {
      "Time_Start": 1614.84,
      "Time_End": 1617.04,
      "Text": " file browser."
    },
    {
      "Time_Start": 1617.04,
      "Time_End": 1622.32,
      "Text": " We can see here on the left-hand side, the files and folders that we've listed are populated."
    },
    {
      "Time_Start": 1622.32,
      "Time_End": 1625.96,
      "Text": " Mythic stores these objects server-side so that for each client that connects to the"
    },
    {
      "Time_Start": 1625.96,
      "Time_End": 1629.68,
      "Text": " server, they're able to browse this file browser cache."
    },
    {
      "Time_Start": 1629.68,
      "Time_End": 1634.0,
      "Text": " If we wanted to look at a folder such as documents, we click it, and we see that it's populated"
    },
    {
      "Time_Start": 1634.0,
      "Time_End": 1635.76,
      "Text": " all of the associated files and folders."
    },
    {
      "Time_Start": 1635.76,
      "Time_End": 1639.72,
      "Text": " If we wanted to hide this from a view, we click the folder icon, and it minimizes that"
    },
    {
      "Time_Start": 1639.72,
      "Time_End": 1640.72,
      "Text": " view."
    },
    {
      "Time_Start": 1640.72,
      "Time_End": 1643.76,
      "Text": " Next, let's move on to process listings."
    },
    {
      "Time_Start": 1643.76,
      "Time_End": 1647.32,
      "Text": " Apollo has two different process listing commands that are built in within it."
    },
    {
      "Time_Start": 1647.32,
      "Time_End": 1649.16,
      "Text": " There's first the basic PS command."
    },
    {
      "Time_Start": 1649.16,
      "Time_End": 1651.4,
      "Text": " This is what most people are used to."
    },
    {
      "Time_Start": 1651.4,
      "Time_End": 1656.72,
      "Text": " We have process ID, parent process ID, architecture, and name user."
    },
    {
      "Time_Start": 1656.72,
      "Time_End": 1660.84,
      "Text": " We can sort each of these columns again by numerical hierarchy, the architecture associated"
    },
    {
      "Time_Start": 1660.84,
      "Time_End": 1665.96,
      "Text": " with it, such as if we wanted to find a target for injection, and more."
    },
    {
      "Time_Start": 1665.96,
      "Time_End": 1668.92,
      "Text": " Apollo implements a secondary command called PS full."
    },
    {
      "Time_Start": 1668.92,
      "Time_End": 1672.96,
      "Text": " What this command will do is it will try to retrieve process information in a more"
    },
    {
      "Time_Start": 1672.96,
      "Time_End": 1674.44,
      "Text": " verbose manner."
    },
    {
      "Time_Start": 1674.44,
      "Time_End": 1677.68,
      "Text": " It'll pull things such as the description of the executable and the company name if"
    },
    {
      "Time_Start": 1677.68,
      "Time_End": 1683.24,
      "Text": " it can, along with several other items that we can examine in this informational pane."
    },
    {
      "Time_Start": 1683.24,
      "Time_End": 1687.0800000000002,
      "Text": " If we click one of these informational icons, a new pop-up will appear that will tell you"
    },
    {
      "Time_Start": 1687.0800000000002,
      "Time_End": 1691.44,
      "Text": " the integrity level of the process, the process path, the command line that it was launched"
    },
    {
      "Time_Start": 1691.44,
      "Time_End": 1695.76,
      "Text": " with, and what desktop session it's running in."
    },
    {
      "Time_Start": 1695.76,
      "Time_End": 1699.96,
      "Text": " Let's see how this PS full command works in high integrity, because it's only slightly"
    },
    {
      "Time_Start": 1699.96,
      "Time_End": 1701.72,
      "Text": " different."
    },
    {
      "Time_Start": 1701.72,
      "Time_End": 1705.8799999999999,
      "Text": " This differs only by the sense that we were able to retrieve more information from processes"
    },
    {
      "Time_Start": 1705.8799999999999,
      "Time_End": 1710.2,
      "Text": " with our high integrity, because we're able to open more handles and interrogate them."
    },
    {
      "Time_Start": 1710.2,
      "Time_End": 1714.08,
      "Text": " If a process is running in high or system level integrity, you'll notice that the informational"
    },
    {
      "Time_Start": 1714.08,
      "Time_End": 1716.0,
      "Text": " icon is now turned red."
    },
    {
      "Time_Start": 1716.0,
      "Time_End": 1720.0,
      "Text": " This allows you to easily identify what processes are running in high integrity, and we see"
    },
    {
      "Time_Start": 1720.0,
      "Time_End": 1723.4,
      "Text": " that, indeed, it is running with a high mandatory level."
    },
    {
      "Time_Start": 1723.4,
      "Time_End": 1727.68,
      "Text": " On the left-hand side, as was with the previous model, each of these things is copyable, so"
    },
    {
      "Time_Start": 1727.68,
      "Time_End": 1733.0800000000002,
      "Text": " if you wanted to, say, change your spawn to this process path, you could."
    },
    {
      "Time_Start": 1733.0800000000002,
      "Time_End": 1737.48,
      "Text": " Once the PS full command has been issued, the process browser inside of Mythic will"
    },
    {
      "Time_Start": 1737.48,
      "Time_End": 1738.88,
      "Text": " be populated."
    },
    {
      "Time_Start": 1738.88,
      "Time_End": 1743.3200000000002,
      "Text": " This is, again, accessible by going to the drop-down and viewing processes."
    },
    {
      "Time_Start": 1743.3200000000002,
      "Time_End": 1747.44,
      "Text": " Here you'll be able to see the full process tree hierarchy if you wanted to see what parent"
    },
    {
      "Time_Start": 1747.44,
      "Time_End": 1752.3600000000001,
      "Text": " process has what child processes and more."
    },
    {
      "Time_Start": 1752.3600000000001,
      "Time_End": 1753.72,
      "Text": " Next let's move on to the net commands."
    },
    {
      "Time_Start": 1753.72,
      "Time_End": 1758.72,
      "Text": " The net commands try to mimic net.exe, except its only job is to query information, not"
    },
    {
      "Time_Start": 1758.72,
      "Time_End": 1759.72,
      "Text": " modify."
    },
    {
      "Time_Start": 1759.72,
      "Time_End": 1763.92,
      "Text": " If you're curious about what commands are implemented, you can always type net, and"
    },
    {
      "Time_Start": 1763.92,
      "Time_End": 1766.68,
      "Text": " the list of pre-populated commands will appear above."
    },
    {
      "Time_Start": 1766.68,
      "Time_End": 1769.96,
      "Text": " Let's start with net dclist."
    },
    {
      "Time_Start": 1769.96,
      "Time_End": 1773.5200000000002,
      "Text": " Net dclist lists the domain controllers in the domain, and we see that we have one computer"
    },
    {
      "Time_Start": 1773.5200000000002,
      "Time_End": 1775.5600000000002,
      "Text": " return, this win3d host."
    },
    {
      "Time_Start": 1775.5600000000002,
      "Time_End": 1779.7600000000002,
      "Text": " We have the IP address, what domain and forest it's part of, as well as the operating system"
    },
    {
      "Time_Start": 1779.7600000000002,
      "Time_End": 1780.7600000000002,
      "Text": " it's running."
    },
    {
      "Time_Start": 1781.2,
      "Time_End": 1784.64,
      "Text": " The book on the left-hand side indicates that this domain controller is a global catalog."
    },
    {
      "Time_Start": 1784.64,
      "Time_End": 1788.48,
      "Text": " If you wanted to use PowerView's functionality to search the global catalog instead of just"
    },
    {
      "Time_Start": 1788.48,
      "Time_End": 1791.32,
      "Text": " querying Active Directory."
    },
    {
      "Time_Start": 1791.32,
      "Time_End": 1793.2,
      "Text": " Next let's move on to net local group."
    },
    {
      "Time_Start": 1793.2,
      "Time_End": 1798.98,
      "Text": " We can see these command syntax for this by doing help net local group, and you can specify"
    },
    {
      "Time_Start": 1798.98,
      "Time_End": 1801.0,
      "Text": " computer optionally."
    },
    {
      "Time_Start": 1801.0,
      "Time_End": 1805.24,
      "Text": " So let's do net local group and just see what we return."
    },
    {
      "Time_Start": 1805.24,
      "Time_End": 1809.12,
      "Text": " We have a list of group names, as well as the comments that are associated with them."
    },
    {
      "Time_Start": 1809.1200000000001,
      "Time_End": 1810.1200000000001,
      "Text": " These again are sortable."
    },
    {
      "Time_Start": 1810.1200000000001,
      "Time_End": 1814.8400000000001,
      "Text": " If we wanted to say find administrators, users, or maybe even look for interesting groups"
    },
    {
      "Time_Start": 1814.8400000000001,
      "Time_End": 1815.8400000000001,
      "Text": " that are abnormal."
    },
    {
      "Time_Start": 1815.8400000000001,
      "Time_End": 1820.7600000000002,
      "Text": " If we wanted to see who was a part of this administrator's group, we could do net local"
    },
    {
      "Time_Start": 1820.7600000000002,
      "Time_End": 1824.0800000000002,
      "Text": " group member, as well as the group name."
    },
    {
      "Time_Start": 1824.0800000000002,
      "Time_End": 1827.0400000000002,
      "Text": " Let's do administrators."
    },
    {
      "Time_Start": 1827.0400000000002,
      "Time_End": 1832.16,
      "Text": " Here we see that the administrator account is in the administrators, this user, as well"
    },
    {
      "Time_Start": 1832.16,
      "Time_End": 1835.92,
      "Text": " as this domain account, low priv, and domain admins."
    },
    {
      "Time_Start": 1835.92,
      "Time_End": 1840.0,
      "Text": " On the left hand side, a user icon is specified if it's a user, and the group icon is specified"
    },
    {
      "Time_Start": 1840.0,
      "Time_End": 1841.0,
      "Text": " if it's a group."
    },
    {
      "Time_Start": 1841.0,
      "Time_End": 1846.04,
      "Text": " We have the domain sit as well, the group name, and computer."
    },
    {
      "Time_Start": 1846.04,
      "Time_End": 1848.22,
      "Text": " Lastly let's move on to the registry commands."
    },
    {
      "Time_Start": 1848.22,
      "Time_End": 1853.76,
      "Text": " The registry can kind of be an opaque data store for new students to try to comprehend."
    },
    {
      "Time_Start": 1853.76,
      "Time_End": 1859.16,
      "Text": " We try to simplify this down into three functions, querying subkeys, querying values, and writing"
    },
    {
      "Time_Start": 1859.16,
      "Time_End": 1861.48,
      "Text": " values."
    },
    {
      "Time_Start": 1861.48,
      "Time_End": 1863.88,
      "Text": " Let's see what querying subkeys might look like."
    },
    {
      "Time_Start": 1863.88,
      "Time_End": 1870.0400000000002,
      "Text": " We can do reg query subkeys hkcu."
    },
    {
      "Time_Start": 1870.0400000000002,
      "Time_End": 1874.16,
      "Text": " Here a list of subkeys is returned, and if we wanted to see copy out the subkey in particular,"
    },
    {
      "Time_Start": 1874.16,
      "Time_End": 1878.92,
      "Text": " the full path, and further interrogate it, we can by copying the clipboard icon, and"
    },
    {
      "Time_Start": 1878.92,
      "Time_End": 1885.3200000000002,
      "Text": " then doing the command again of reg query, and then pasting the new key."
    },
    {
      "Time_Start": 1885.3200000000002,
      "Time_End": 1891.4,
      "Text": " If we wanted to see values of a particular key, we can do that as well by doing reg query"
    },
    {
      "Time_Start": 1891.4,
      "Time_End": 1892.4,
      "Text": " values."
    },
    {
      "Time_Start": 1892.4,
      "Time_End": 1897.1200000000001,
      "Text": " We can return all the values stored in that registry key."
    },
    {
      "Time_Start": 1897.1200000000001,
      "Time_End": 1901.68,
      "Text": " Here we see all of the colors, and the control panel, we can see the type of data being stored"
    },
    {
      "Time_Start": 1901.68,
      "Time_End": 1907.3200000000002,
      "Text": " in there, in this case strings, these are RGB values, as well as the default value."
    },
    {
      "Time_Start": 1907.3200000000002,
      "Time_End": 1910.5600000000002,
      "Text": " If this is a byte array, it would also tell you so, and you can try to copy that data"
    },
    {
      "Time_Start": 1910.5600000000002,
      "Time_End": 1915.92,
      "Text": " out and further parse it."
    },
    {
      "Time_Start": 1915.92,
      "Time_End": 1919.0,
      "Text": " So let's talk more about unmanaged commands."
    },
    {
      "Time_Start": 1919.0,
      "Time_End": 1923.96,
      "Text": " Unmanaged commands are built as command name underscore architecture dot DLL."
    },
    {
      "Time_Start": 1923.96,
      "Time_End": 1928.4,
      "Text": " This is because each unmanaged command needs to have each architecture specific DLL built,"
    },
    {
      "Time_Start": 1928.4,
      "Time_End": 1932.72,
      "Text": " so that the agent knows when it's injecting which DLL to inject."
    },
    {
      "Time_Start": 1932.72,
      "Time_End": 1939.08,
      "Text": " On tasking, Mythic will find the architecture appropriate DLL, and convert that DLL to shellcode"
    },
    {
      "Time_Start": 1939.08,
      "Time_End": 1941.24,
      "Text": " using sRDI."
    },
    {
      "Time_Start": 1941.24,
      "Time_End": 1945.08,
      "Text": " Each of these unmanaged commands retrieves standard input and output from a name pipe"
    },
    {
      "Time_Start": 1945.08,
      "Time_End": 1949.12,
      "Text": " until it reads an end of file indicator."
    },
    {
      "Time_Start": 1949.12,
      "Time_End": 1955.1599999999999,
      "Text": " Each of these unmanaged command files implement an Apollo SMB server file."
    },
    {
      "Time_Start": 1955.1599999999999,
      "Time_End": 1960.0,
      "Text": " These are added to all the unmanaged projects, and they export a function without name mangling."
    },
    {
      "Time_Start": 1960.0,
      "Time_End": 1966.36,
      "Text": " This is so that it plays nicely with the sRDI project when we compile it to shellcode."
    },
    {
      "Time_Start": 1966.36,
      "Time_End": 1970.8,
      "Text": " This function within this file is responsible for creating the name pipe server, and ensuring"
    },
    {
      "Time_Start": 1970.8,
      "Time_End": 1975.96,
      "Text": " that it redirects all of the input and output from that process to the name pipe."
    },
    {
      "Time_Start": 1975.96,
      "Time_End": 1981.9199999999998,
      "Text": " Moreover, each of these unmanaged commands can set their injection techniques dynamically,"
    },
    {
      "Time_Start": 1981.9199999999998,
      "Time_End": 1986.8,
      "Text": " meaning that by default, Apollo uses create remote thread for processes that are going"
    },
    {
      "Time_Start": 1986.8,
      "Time_End": 1989.3999999999999,
      "Text": " to use the fork run architecture."
    },
    {
      "Time_Start": 1989.3999999999999,
      "Time_End": 1994.68,
      "Text": " It also uses the create remote thread technique for PS inject and assembly inject."
    },
    {
      "Time_Start": 1994.68,
      "Time_End": 1998.8799999999999,
      "Text": " However, there's also one additional injection technique currently built in if users wanted"
    },
    {
      "Time_Start": 1998.88,
      "Time_End": 2001.72,
      "Text": " to play with it, such as queue user APC."
    },
    {
      "Time_Start": 2001.72,
      "Time_End": 2006.5200000000002,
      "Text": " This uses the early bird technique, so that for fork and run, it will work fine."
    },
    {
      "Time_Start": 2006.5200000000002,
      "Time_End": 2010.8000000000002,
      "Text": " But if you were to inject into a remote process that's already running, it would most likely"
    },
    {
      "Time_Start": 2010.8000000000002,
      "Time_End": 2011.8000000000002,
      "Text": " fail."
    },
    {
      "Time_Start": 2011.8000000000002,
      "Time_End": 2016.44,
      "Text": " So let's go over the workflow of unmanaged taskings."
    },
    {
      "Time_Start": 2016.44,
      "Time_End": 2021.4,
      "Text": " So on the first step, an unmanaged task is sent to the Apollo payload container, something"
    },
    {
      "Time_Start": 2021.4,
      "Time_End": 2024.88,
      "Text": " like Mimikatz Sakrosa logon passwords."
    },
    {
      "Time_Start": 2024.88,
      "Time_End": 2031.0400000000002,
      "Text": " The payload container then will go and find the Mimikatz underscore architecture dot DLL."
    },
    {
      "Time_Start": 2031.0400000000002,
      "Time_End": 2033.3200000000002,
      "Text": " This architecture is callback specific."
    },
    {
      "Time_Start": 2033.3200000000002,
      "Time_End": 2037.8400000000001,
      "Text": " So if your callback is 64 bit, it will find a 64 bit version of Mimikatz from the file"
    },
    {
      "Time_Start": 2037.8400000000001,
      "Time_End": 2039.42,
      "Text": " system."
    },
    {
      "Time_Start": 2039.42,
      "Time_End": 2046.0800000000002,
      "Text": " It will convert that DLL to shellcode using sRDI, using the exported function name that's"
    },
    {
      "Time_Start": 2046.0800000000002,
      "Time_End": 2049.2000000000003,
      "Text": " in that Apollo SMB server file."
    },
    {
      "Time_Start": 2049.2000000000003,
      "Time_End": 2054.8,
      "Text": " That function takes one argument, and that is a pipe name to open and bind to."
    },
    {
      "Time_Start": 2055.7200000000003,
      "Time_End": 2060.34,
      "Text": " Once that DLL has been converted to shellcode, that shellcode will register itself as a file"
    },
    {
      "Time_Start": 2060.34,
      "Time_End": 2065.3,
      "Text": " within mythic, and it will finish processing the rest of the command parameters."
    },
    {
      "Time_Start": 2065.3,
      "Time_End": 2069.36,
      "Text": " As we see towards the middle of our screen, we have a JSON blob, and this is what the"
    },
    {
      "Time_Start": 2069.36,
      "Time_End": 2072.1200000000003,
      "Text": " rough arguments to the Mimikatz command look like."
    },
    {
      "Time_Start": 2072.1200000000003,
      "Time_End": 2077.04,
      "Text": " We have the command that we want Mimikatz to run, the pipe name for which to communicate"
    },
    {
      "Time_Start": 2077.04,
      "Time_End": 2083.1600000000003,
      "Text": " input and output, as well as the file ID and loader stub ID that is correlating to the"
    },
    {
      "Time_Start": 2083.16,
      "Time_End": 2085.6,
      "Text": " Mimikatz shellcode."
    },
    {
      "Time_Start": 2085.6,
      "Time_End": 2091.08,
      "Text": " After that, we submit the task to the agent, and we'll go from there."
    },
    {
      "Time_Start": 2091.08,
      "Time_End": 2093.92,
      "Text": " This is what the task workflow looks like from the client side."
    },
    {
      "Time_Start": 2093.92,
      "Time_End": 2098.0,
      "Text": " In the previous slide, we saw what happens when the operator issues the Mimikatz command,"
    },
    {
      "Time_Start": 2098.0,
      "Time_End": 2101.64,
      "Text": " and this is what happens when the Apollo agent pulls."
    },
    {
      "Time_Start": 2101.64,
      "Time_End": 2106.68,
      "Text": " So when the Apollo agent receives a task, such as Mimikatz, it'll fetch the file specified"
    },
    {
      "Time_Start": 2106.68,
      "Time_End": 2109.68,
      "Text": " by the loader stub ID argument."
    },
    {
      "Time_Start": 2109.68,
      "Time_End": 2113.64,
      "Text": " It'll start a sacrificial process that you can specify by spawn to, but by default uses"
    },
    {
      "Time_Start": 2113.64,
      "Time_End": 2119.68,
      "Text": " run DLL 32, and will suspend and inject the modified Mimikatz shellcode into that remote"
    },
    {
      "Time_Start": 2119.68,
      "Time_End": 2120.68,
      "Text": " process."
    },
    {
      "Time_Start": 2120.68,
      "Time_End": 2124.3999999999996,
      "Text": " It injects it using the injection technique that's currently active, and by default uses"
    },
    {
      "Time_Start": 2124.3999999999996,
      "Time_End": 2127.2799999999997,
      "Text": " create remote thread."
    },
    {
      "Time_Start": 2127.2799999999997,
      "Time_End": 2131.48,
      "Text": " Once the shellcode has been executed, it will open up a name pipe server that is specified"
    },
    {
      "Time_Start": 2131.48,
      "Time_End": 2136.52,
      "Text": " by the named pipe in the command arguments and wait for a new connection."
    },
    {
      "Time_Start": 2136.52,
      "Time_End": 2139.96,
      "Text": " Apollo will then connect to the name pipe server, sending various Mimikatz commands"
    },
    {
      "Time_Start": 2139.96,
      "Time_End": 2142.12,
      "Text": " that it was told to send."
    },
    {
      "Time_Start": 2142.12,
      "Time_End": 2147.2,
      "Text": " The process will then read commands from that pipe, and then write the output of that Mimikatz"
    },
    {
      "Time_Start": 2147.2,
      "Time_End": 2149.28,
      "Text": " command back to the name pipe."
    },
    {
      "Time_Start": 2149.28,
      "Time_End": 2153.92,
      "Text": " And then when it finishes executing, write the end of file indicator."
    },
    {
      "Time_Start": 2153.92,
      "Time_End": 2157.96,
      "Text": " Once the agent reads the end of file, it will submit the results back up to Mythic, and"
    },
    {
      "Time_Start": 2157.96,
      "Time_End": 2160.68,
      "Text": " that will be that."
    },
    {
      "Time_Start": 2160.68,
      "Time_End": 2164.56,
      "Text": " Apollo implements several unmanaged commands, and here's the list."
    },
    {
      "Time_Start": 2164.6,
      "Time_End": 2169.84,
      "Text": " We have Mimikatz, execute assembly, assembly inject, power pick, PS inject, print spoofer,"
    },
    {
      "Time_Start": 2169.84,
      "Time_End": 2175.4,
      "Text": " which is the print spoofer executable project that allows you to take over the SE impersonate"
    },
    {
      "Time_Start": 2175.4,
      "Time_End": 2178.2,
      "Text": " privilege and allows you to elevate the system."
    },
    {
      "Time_Start": 2178.2,
      "Time_End": 2182.04,
      "Text": " There's also key logging and the spawn command."
    },
    {
      "Time_Start": 2182.04,
      "Time_End": 2187.6,
      "Text": " So let's demo how the Mimikatz command tasking would look like."
    },
    {
      "Time_Start": 2187.6,
      "Time_End": 2193.12,
      "Text": " In this demo, we're going to be walking through how Apollo implements several unmanaged commands"
    },
    {
      "Time_Start": 2193.16,
      "Time_End": 2195.68,
      "Text": " using Mimikatz as an example."
    },
    {
      "Time_Start": 2195.68,
      "Time_End": 2199.56,
      "Text": " Mimikatz is a tool written by Benjamin Delpy to interact with LSAS and do various types"
    },
    {
      "Time_Start": 2199.56,
      "Time_End": 2203.12,
      "Text": " of credential manipulation in Windows domains."
    },
    {
      "Time_Start": 2203.12,
      "Time_End": 2208.3199999999997,
      "Text": " Apollo uses a custom compiled version of Mimikatz to send down to the agent so that it can interact"
    },
    {
      "Time_Start": 2208.3199999999997,
      "Time_End": 2211.52,
      "Text": " with Mimikatz over a named pipe."
    },
    {
      "Time_Start": 2211.52,
      "Time_End": 2217.08,
      "Text": " That named pipe is primarily responsible for all communications."
    },
    {
      "Time_Start": 2217.08,
      "Time_End": 2221.16,
      "Text": " The way that this is done is that there's a modification done to Mimikatz source code"
    },
    {
      "Time_Start": 2221.2799999999997,
      "Time_End": 2224.8399999999997,
      "Text": " to open up a named pipe and listen for commands."
    },
    {
      "Time_Start": 2224.8399999999997,
      "Time_End": 2232.16,
      "Text": " We then compile the Mimikatz project into DLLs for each architecture, both x64 and x86"
    },
    {
      "Time_Start": 2232.16,
      "Time_End": 2236.6,
      "Text": " respectively, and that's sent down to the agent using sRDI."
    },
    {
      "Time_Start": 2236.6,
      "Time_End": 2243.2799999999997,
      "Text": " sRDI is written by Nick Landers and it is reflective DLL injection."
    },
    {
      "Time_Start": 2243.2799999999997,
      "Time_End": 2249.44,
      "Text": " What this allows us to do is to send our compiled Mimikatz DLL and convert it into shell code"
    },
    {
      "Time_Start": 2249.6,
      "Time_End": 2256.56,
      "Text": " so that the agent can inject into a remote process and use the fork and run architecture."
    },
    {
      "Time_Start": 2256.56,
      "Time_End": 2258.84,
      "Text": " So let's see what that looks like in action."
    },
    {
      "Time_Start": 2258.84,
      "Time_End": 2262.8,
      "Text": " Here we have workstation number one that's already been slept down to zero."
    },
    {
      "Time_Start": 2262.8,
      "Time_End": 2267.48,
      "Text": " We need a high integrity context in order to dump passwords from LSAS."
    },
    {
      "Time_Start": 2267.48,
      "Time_End": 2272.04,
      "Text": " So let's first escalate our privileges using the built-in bypass UAC command."
    },
    {
      "Time_Start": 2272.04,
      "Time_End": 2277.48,
      "Text": " Bypass UAC uses the mock trusted directories UAC bypass popularized by David Wells from"
    },
    {
      "Time_Start": 2277.48,
      "Time_End": 2279.88,
      "Text": " Tentable Security."
    },
    {
      "Time_Start": 2279.88,
      "Time_End": 2284.68,
      "Text": " Here we specify one of the payloads that we generated earlier in this presentation, and"
    },
    {
      "Time_Start": 2284.68,
      "Time_End": 2290.36,
      "Text": " for this we'll do Apollo.exe and that's all we need to do."
    },
    {
      "Time_Start": 2290.36,
      "Time_End": 2294.84,
      "Text": " From there, it will generate a new payload based on the payload template provided."
    },
    {
      "Time_Start": 2294.84,
      "Time_End": 2301.56,
      "Text": " This is so you have artifact tracking for your operation per artifact generated."
    },
    {
      "Time_Start": 2301.56,
      "Time_End": 2306.96,
      "Text": " After that, we see we have a new callback on 17."
    },
    {
      "Time_Start": 2306.96,
      "Time_End": 2311.8,
      "Text": " Let's once again sleep down our agent down to zero and ensure that we have the right"
    },
    {
      "Time_Start": 2311.8,
      "Time_End": 2316.64,
      "Text": " privileges via get privs."
    },
    {
      "Time_Start": 2316.64,
      "Time_End": 2320.44,
      "Text": " Once get privs is executed, it'll return output that shows all the privileges it was able"
    },
    {
      "Time_Start": 2320.44,
      "Time_End": 2324.16,
      "Text": " to successfully enable on the agent."
    },
    {
      "Time_Start": 2324.16,
      "Time_End": 2328.7,
      "Text": " And here we see that we do indeed have the se debug privilege."
    },
    {
      "Time_Start": 2328.7000000000003,
      "Time_End": 2338.5400000000004,
      "Text": " So what happens when we issue a mimikatz securlse logon passwords command?"
    },
    {
      "Time_Start": 2338.5400000000004,
      "Time_End": 2343.82,
      "Text": " This command is then sent to the Apollo payload container."
    },
    {
      "Time_Start": 2343.82,
      "Time_End": 2349.34,
      "Text": " The Apollo payload container has a command file for each command that is loaded in the"
    },
    {
      "Time_Start": 2349.34,
      "Time_End": 2351.1000000000004,
      "Text": " agent."
    },
    {
      "Time_Start": 2351.1000000000004,
      "Time_End": 2357.38,
      "Text": " For mimikatz and other unmanaged commands, we generate a new pipe name per command tasking."
    },
    {
      "Time_Start": 2357.38,
      "Time_End": 2361.34,
      "Text": " This is so that each command does not stomp with itself."
    },
    {
      "Time_Start": 2361.34,
      "Time_End": 2366.9,
      "Text": " Once we've generated a new pipe name, we then retrieve the mimikatz DLL for the responsible"
    },
    {
      "Time_Start": 2366.9,
      "Time_End": 2372.36,
      "Text": " callback architecture and then generate shellcode based on that DLL."
    },
    {
      "Time_Start": 2372.36,
      "Time_End": 2376.3,
      "Text": " Here we have a custom function export called smbserver wmain."
    },
    {
      "Time_Start": 2376.3,
      "Time_End": 2380.6800000000003,
      "Text": " This is the function that's responsible for opening the name pipe and listening for commands"
    },
    {
      "Time_Start": 2380.6800000000003,
      "Time_End": 2384.3,
      "Text": " and sending the output back over that same name pipe."
    },
    {
      "Time_Start": 2384.3,
      "Time_End": 2390.46,
      "Text": " We then register this new shellcode with the mythic server via the register file."
    },
    {
      "Time_Start": 2390.46,
      "Time_End": 2395.1000000000004,
      "Text": " And then we add that file ID to the parameters sent down to the agent."
    },
    {
      "Time_Start": 2395.1000000000004,
      "Time_End": 2399.86,
      "Text": " The agent will then retrieve the file and then inject that shellcode into our mail process,"
    },
    {
      "Time_Start": 2399.86,
      "Time_End": 2403.7000000000003,
      "Text": " communicate with over the name pipe and return results."
    },
    {
      "Time_Start": 2403.7000000000003,
      "Time_End": 2408.42,
      "Text": " So let's do that now."
    },
    {
      "Time_Start": 2408.42,
      "Time_End": 2415.58,
      "Text": " So it built quickly and we see that we already have several things generated."
    },
    {
      "Time_Start": 2415.58,
      "Time_End": 2420.66,
      "Text": " We'll scroll all the way to the top here."
    },
    {
      "Time_Start": 2420.66,
      "Time_End": 2428.3,
      "Text": " We see administrator, lab.administrator, nthashes, whatever else, and the plaintext password."
    },
    {
      "Time_Start": 2428.3,
      "Time_End": 2432.14,
      "Text": " Apollo will also try to parse this command output for credentials and that'll be stored"
    },
    {
      "Time_Start": 2432.14,
      "Time_End": 2438.38,
      "Text": " in the mythic operational credential store over operational views and credentials."
    },
    {
      "Time_Start": 2438.38,
      "Time_End": 2444.9,
      "Text": " And here we can see we have several passwords for the computer account, the administrator,"
    },
    {
      "Time_Start": 2444.9,
      "Time_End": 2448.38,
      "Text": " and the low private account."
    },
    {
      "Time_Start": 2448.38,
      "Time_End": 2454.26,
      "Text": " Once you have new privileges you might like to use, you can use make token and impersonate"
    },
    {
      "Time_Start": 2454.26,
      "Time_End": 2456.84,
      "Text": " one of these new accounts that you have."
    },
    {
      "Time_Start": 2456.84,
      "Time_End": 2459.58,
      "Text": " So in this case, make token takes a plaintext password."
    },
    {
      "Time_Start": 2459.58,
      "Time_End": 2463.78,
      "Text": " So we'll specify the administrator password here."
    },
    {
      "Time_Start": 2463.78,
      "Time_End": 2469.94,
      "Text": " And lastly, Apollo implements some nice identity tracking with who am I, so that an operator"
    },
    {
      "Time_Start": 2469.94,
      "Time_End": 2474.1000000000004,
      "Text": " knows who they are for local administration purposes as well as remote."
    },
    {
      "Time_Start": 2474.1000000000004,
      "Time_End": 2480.9,
      "Text": " So here we see we're a low priv for local operations, but administrator for remote."
    },
    {
      "Time_Start": 2480.9,
      "Time_End": 2485.0600000000004,
      "Text": " So once we have credentials from Mimikatz, let's see how we can leverage those credentials"
    },
    {
      "Time_Start": 2485.0600000000004,
      "Time_End": 2490.5400000000004,
      "Text": " to move laterally in an environment."
    },
    {
      "Time_Start": 2490.82,
      "Time_End": 2495.7,
      "Text": " Apollo has one built-in lateral movement command currently, and that is PS exec."
    },
    {
      "Time_Start": 2495.7,
      "Time_End": 2502.02,
      "Text": " PS exec works by installing remote service on the destination computer, starting the"
    },
    {
      "Time_Start": 2502.02,
      "Time_End": 2505.7799999999997,
      "Text": " service and waiting for a new callback."
    },
    {
      "Time_Start": 2505.7799999999997,
      "Time_End": 2509.1,
      "Text": " Depending on whether or not it's peer-to-peer, you'll have to manually link with that new"
    },
    {
      "Time_Start": 2509.1,
      "Time_End": 2511.86,
      "Text": " callback."
    },
    {
      "Time_Start": 2511.86,
      "Time_End": 2514.92,
      "Text": " First let's see who we are."
    },
    {
      "Time_Start": 2514.92,
      "Time_End": 2521.08,
      "Text": " We are low priv for local and remote operations."
    },
    {
      "Time_Start": 2521.08,
      "Time_End": 2523.08,
      "Text": " Let's see where we can try to pivot to."
    },
    {
      "Time_Start": 2523.08,
      "Time_End": 2527.2000000000003,
      "Text": " In this case, let's just list the DCs for the domain."
    },
    {
      "Time_Start": 2527.2000000000003,
      "Time_End": 2531.56,
      "Text": " Here we see we have one DC, this win3d host."
    },
    {
      "Time_Start": 2531.56,
      "Time_End": 2536.16,
      "Text": " Little book on the left-hand side here indicates that this domain controller is a global catalog,"
    },
    {
      "Time_Start": 2536.16,
      "Time_End": 2541.04,
      "Text": " and we have its IP address, the domain, the forest, et cetera."
    },
    {
      "Time_Start": 2541.04,
      "Time_End": 2545.52,
      "Text": " Let's try to list this host."
    },
    {
      "Time_Start": 2545.52,
      "Time_End": 2547.48,
      "Text": " We don't have access as our user account."
    },
    {
      "Time_Start": 2547.48,
      "Time_End": 2552.8,
      "Text": " However, at a previous demo, we ran Mimikatz and populated the mythic credential store"
    },
    {
      "Time_Start": 2552.8,
      "Time_End": 2555.6,
      "Text": " in operational views credentials."
    },
    {
      "Time_Start": 2555.6,
      "Time_End": 2558.52,
      "Text": " So let's do a make token command now."
    },
    {
      "Time_Start": 2558.52,
      "Time_End": 2564.64,
      "Text": " We're going to make token for the administrator of lab, our current domain."
    },
    {
      "Time_Start": 2564.64,
      "Time_End": 2570.16,
      "Text": " Now when we run whoami, we'll see that we are low priv for local operations and administrator"
    },
    {
      "Time_Start": 2570.2799999999997,
      "Time_End": 2572.08,
      "Text": " for remote."
    },
    {
      "Time_Start": 2572.08,
      "Time_End": 2577.8399999999997,
      "Text": " If we try to LS that directory again, we see that we successfully are able to list the"
    },
    {
      "Time_Start": 2577.8399999999997,
      "Time_End": 2582.68,
      "Text": " C$ admin share, which means that we can compromise this host."
    },
    {
      "Time_Start": 2582.68,
      "Time_End": 2584.16,
      "Text": " So let's do that with psexec."
    },
    {
      "Time_Start": 2584.16,
      "Time_End": 2590.96,
      "Text": " Psexec requires a computer name, which will be the domain controller we just saw."
    },
    {
      "Time_Start": 2590.96,
      "Time_End": 2595.56,
      "Text": " So it requires a computer name, a payload template for which to build a new payload"
    },
    {
      "Time_Start": 2595.56,
      "Time_End": 2600.32,
      "Text": " of, and the remote path, if you want to specify one, where that new service executable will"
    },
    {
      "Time_Start": 2600.32,
      "Time_End": 2605.44,
      "Text": " be dropped on the host."
    },
    {
      "Time_Start": 2605.44,
      "Time_End": 2608.84,
      "Text": " We submit the task and a new payload will be built based on the template provided."
    },
    {
      "Time_Start": 2608.84,
      "Time_End": 2613.92,
      "Text": " In this case, we created the service wrapper from earlier on in this presentation, and"
    },
    {
      "Time_Start": 2613.92,
      "Time_End": 2617.48,
      "Text": " that had that associated payload template ID."
    },
    {
      "Time_Start": 2617.48,
      "Time_End": 2623.32,
      "Text": " Here we see that we were able to copy the payload to the remote public share with this"
    },
    {
      "Time_Start": 2623.32,
      "Time_End": 2625.6800000000003,
      "Text": " executable name."
    },
    {
      "Time_Start": 2625.6800000000003,
      "Time_End": 2627.48,
      "Text": " It's going to try to install the service."
    },
    {
      "Time_Start": 2627.48,
      "Time_End": 2629.8,
      "Text": " So let's wait for that."
    },
    {
      "Time_Start": 2629.8,
      "Time_End": 2630.8,
      "Text": " And there we go."
    },
    {
      "Time_Start": 2630.8,
      "Time_End": 2638.4,
      "Text": " Now we see our new callback has been initiated with system on this new domain controller."
    },
    {
      "Time_Start": 2638.4,
      "Time_End": 2640.28,
      "Text": " We have this service name."
    },
    {
      "Time_Start": 2640.28,
      "Time_End": 2642.4,
      "Text": " We have this display name."
    },
    {
      "Time_Start": 2642.4,
      "Time_End": 2644.92,
      "Text": " We see that it's running and we're still stoppable."
    },
    {
      "Time_Start": 2644.92,
      "Time_End": 2649.1200000000003,
      "Text": " We can then go interact with our callback."
    },
    {
      "Time_Start": 2649.12,
      "Time_End": 2655.2799999999997,
      "Text": " We can do a PS command just to see and ensure that we are system integrity."
    },
    {
      "Time_Start": 2655.2799999999997,
      "Time_End": 2657.96,
      "Text": " We can sleep this down."
    },
    {
      "Time_Start": 2657.96,
      "Time_End": 2659.4,
      "Text": " And there we go."
    },
    {
      "Time_Start": 2659.4,
      "Time_End": 2663.96,
      "Text": " And that will conclude the lateral movement demo."
    },
    {
      "Time_Start": 2663.96,
      "Time_End": 2667.96,
      "Text": " Moving on from lateral movement, let's look at how third-party and .NET assembly execution"
    },
    {
      "Time_Start": 2667.96,
      "Time_End": 2668.96,
      "Text": " works."
    },
    {
      "Time_Start": 2668.96,
      "Time_End": 2673.56,
      "Text": " So this is based on the .NET reflective loading project on GitHub by a user named Ambray."
    },
    {
      "Time_Start": 2673.56,
      "Time_End": 2679.92,
      "Text": " It uses fork and run architecture or inject to inject into a remote process."
    },
    {
      "Time_Start": 2679.92,
      "Time_End": 2684.64,
      "Text": " Unlike C2 frameworks like Cobalt Strike, we cannot use on-disk tab completion to fill"
    },
    {
      "Time_Start": 2684.64,
      "Time_End": 2685.86,
      "Text": " in the assembly names."
    },
    {
      "Time_Start": 2685.86,
      "Time_End": 2689.24,
      "Text": " This is just a limitation of having a web UI."
    },
    {
      "Time_Start": 2689.24,
      "Time_End": 2692.72,
      "Text": " Since the browser doesn't have access to your file system, we can't tab complete to say"
    },
    {
      "Time_Start": 2692.72,
      "Time_End": 2693.72,
      "Text": " like seatbelt.exe."
    },
    {
      "Time_Start": 2693.72,
      "Time_End": 2698.6,
      "Text": " We have to first upload the assembly, which is the registration component."
    },
    {
      "Time_Start": 2698.6,
      "Time_End": 2701.24,
      "Text": " This can be done by the register assembly command."
    },
    {
      "Time_Start": 2701.2400000000002,
      "Time_End": 2706.1800000000003,
      "Text": " And then once the agent knows about the assembly, it'll cache the bytes of that .NET assembly"
    },
    {
      "Time_Start": 2706.1800000000003,
      "Time_End": 2709.7200000000003,
      "Text": " within the agent to be later executed."
    },
    {
      "Time_Start": 2709.7200000000003,
      "Time_End": 2713.44,
      "Text": " Once it knows about that assembly and it's cached, it can execute via execute assembly,"
    },
    {
      "Time_Start": 2713.44,
      "Time_End": 2716.96,
      "Text": " which will do the fork and run and spawn that sacrificial process, or you can inject it"
    },
    {
      "Time_Start": 2716.96,
      "Time_End": 2720.6000000000004,
      "Text": " into any process from the processed output."
    },
    {
      "Time_Start": 2720.6000000000004,
      "Time_End": 2724.1600000000003,
      "Text": " Once you've injected your assembly and you don't want the agent to cache that result"
    },
    {
      "Time_Start": 2724.1600000000003,
      "Time_End": 2729.76,
      "Text": " anymore, you can unload the assembly via the unload assembly command."
    },
    {
      "Time_Start": 2729.76,
      "Time_End": 2731.88,
      "Text": " PowerShell execution also has three variants."
    },
    {
      "Time_Start": 2731.88,
      "Time_End": 2736.1200000000003,
      "Text": " We have PowerShell, which allows you to execute PowerShell in your current process."
    },
    {
      "Time_Start": 2736.1200000000003,
      "Time_End": 2740.6000000000004,
      "Text": " This could be nice because you may not always want to execute PowerShell using the fork"
    },
    {
      "Time_Start": 2740.6000000000004,
      "Time_End": 2741.6000000000004,
      "Text": " and run architecture."
    },
    {
      "Time_Start": 2741.6000000000004,
      "Time_End": 2746.0400000000004,
      "Text": " This allows you to run things in process and can be sometimes more evasive."
    },
    {
      "Time_Start": 2746.0400000000004,
      "Time_End": 2752.1200000000003,
      "Text": " PS inject and PowerPick are both executed via SRDI and through the injection technique"
    },
    {
      "Time_Start": 2752.1200000000003,
      "Time_End": 2754.7200000000003,
      "Text": " that you have specified."
    },
    {
      "Time_Start": 2754.7200000000003,
      "Time_End": 2759.44,
      "Text": " PowerPick is akin to execute assembly, where PS inject allows you to inject your PowerShell"
    },
    {
      "Time_Start": 2759.44,
      "Time_End": 2761.4,
      "Text": " script to execute within another process."
    },
    {
      "Time_Start": 2761.4,
      "Time_End": 2765.92,
      "Text": " Say if you wanted to run LDAP commands in a process that looks more normal, you can"
    },
    {
      "Time_Start": 2765.92,
      "Time_End": 2767.7200000000003,
      "Text": " do that with PS inject."
    },
    {
      "Time_Start": 2767.7200000000003,
      "Time_End": 2774.0,
      "Text": " Lastly, the PowerShell script execution supports multiple scripts being imported simultaneously."
    },
    {
      "Time_Start": 2774.0,
      "Time_End": 2778.7200000000003,
      "Text": " This allows you to import, say, PowerView and PowerUp simultaneously without stomping on"
    },
    {
      "Time_Start": 2778.7200000000003,
      "Time_End": 2780.32,
      "Text": " one another."
    },
    {
      "Time_Start": 2780.32,
      "Time_End": 2784.0,
      "Text": " So this is also useful in training when we're debugging, because oftentimes students will"
    },
    {
      "Time_Start": 2784.0,
      "Time_End": 2788.84,
      "Text": " try to, say, get domain user, but that script will fail because that is not a native PowerShell"
    },
    {
      "Time_Start": 2789.2400000000002,
      "Time_End": 2792.4,
      "Text": " commandlet, but there's no way to tell if they've already imported the command."
    },
    {
      "Time_Start": 2792.4,
      "Time_End": 2797.04,
      "Text": " So in this way, we can track the scripts that are imported and ensure that we can have multiple"
    },
    {
      "Time_Start": 2797.04,
      "Time_End": 2799.08,
      "Text": " scripts at the same time."
    },
    {
      "Time_Start": 2799.08,
      "Time_End": 2803.4,
      "Text": " One downside, again, of the web UI currently is that we cannot autocomplete commandlet"
    },
    {
      "Time_Start": 2803.4,
      "Time_End": 2804.4,
      "Text": " names."
    },
    {
      "Time_Start": 2804.4,
      "Time_End": 2808.36,
      "Text": " So it requires you to know the commandlets before you execute your PowerShell commands."
    },
    {
      "Time_Start": 2808.36,
      "Time_End": 2812.0,
      "Text": " They are not tab completable."
    },
    {
      "Time_Start": 2812.0,
      "Time_End": 2817.1200000000003,
      "Text": " So let's walk through how third-party assembly and PowerShell execution works."
    },
    {
      "Time_Start": 2817.12,
      "Time_End": 2822.2,
      "Text": " PowerShell supports the execution of third-party .NET assemblies and PowerShell scripts."
    },
    {
      "Time_Start": 2822.2,
      "Time_End": 2828.08,
      "Text": " This is done using the fork and run architecture as well as in-process execution."
    },
    {
      "Time_Start": 2828.08,
      "Time_End": 2833.3599999999997,
      "Text": " The general workflow follows that of Mimikatz, which loads a DLL off of the Mythic server"
    },
    {
      "Time_Start": 2833.3599999999997,
      "Time_End": 2837.52,
      "Text": " and then compiles it using srdi into shellcode."
    },
    {
      "Time_Start": 2837.52,
      "Time_End": 2842.3599999999997,
      "Text": " The shellcode is given a name pipe for the agent to communicate with to transact assemblies"
    },
    {
      "Time_Start": 2842.3599999999997,
      "Time_End": 2844.7599999999998,
      "Text": " and output of those assemblies."
    },
    {
      "Time_Start": 2844.76,
      "Time_End": 2851.0400000000004,
      "Text": " In this case, execute assembly, PowerPick, assembly inject, and PS inject are all based"
    },
    {
      "Time_Start": 2851.0400000000004,
      "Time_End": 2854.4,
      "Text": " off Ambre's .NET Reflective Loading on GitHub."
    },
    {
      "Time_Start": 2854.4,
      "Time_End": 2859.2000000000003,
      "Text": " In the case of Mimikatz, the customly compiled version opens a name pipe server and just"
    },
    {
      "Time_Start": 2859.2000000000003,
      "Time_End": 2862.5600000000004,
      "Text": " receives commands in standard IO."
    },
    {
      "Time_Start": 2862.5600000000004,
      "Time_End": 2867.32,
      "Text": " For .NET Reflective Loading, the reflective loader loads an assembly, which will open"
    },
    {
      "Time_Start": 2867.32,
      "Time_End": 2869.1200000000003,
      "Text": " up the name pipe server."
    },
    {
      "Time_Start": 2869.12,
      "Time_End": 2874.68,
      "Text": " The agent then will communicate serialized messages that the remote process knows about"
    },
    {
      "Time_Start": 2874.68,
      "Time_End": 2880.0,
      "Text": " to deserialize, load the assembly, and then transact results."
    },
    {
      "Time_Start": 2880.0,
      "Time_End": 2882.4,
      "Text": " Let's look at how this would work in action."
    },
    {
      "Time_Start": 2882.4,
      "Time_End": 2887.2799999999997,
      "Text": " Over here in my active callbacks page, accessed by operational views, active callbacks, we"
    },
    {
      "Time_Start": 2887.2799999999997,
      "Time_End": 2893.3199999999997,
      "Text": " have one computer already calling back, and we're going to need to register an assembly."
    },
    {
      "Time_Start": 2893.3199999999997,
      "Time_End": 2897.2,
      "Text": " We have to register an assembly with the agent before it's ready for execution."
    },
    {
      "Time_Start": 2897.2000000000003,
      "Time_End": 2900.88,
      "Text": " This is because the web UI does not have access to your local file system unless you"
    },
    {
      "Time_Start": 2900.88,
      "Time_End": 2903.28,
      "Text": " upload a specific file to it."
    },
    {
      "Time_Start": 2903.28,
      "Time_End": 2906.6400000000003,
      "Text": " So in this case, let's upload seatbelt."
    },
    {
      "Time_Start": 2906.6400000000003,
      "Time_End": 2913.32,
      "Text": " When we submit a register assembly task, it registers the file with mythic, and the agent"
    },
    {
      "Time_Start": 2913.32,
      "Time_End": 2917.7200000000003,
      "Text": " will then pull that file and keep it cached in the agent memory."
    },
    {
      "Time_Start": 2917.7200000000003,
      "Time_End": 2922.5200000000004,
      "Text": " If we were to list the assemblies currently loaded in the agent, we see that we have two,"
    },
    {
      "Time_Start": 2922.5200000000004,
      "Time_End": 2925.5200000000004,
      "Text": " seatbelt and current process information."
    },
    {
      "Time_Start": 2925.52,
      "Time_End": 2928.04,
      "Text": " Let's execute seatbelt now."
    },
    {
      "Time_Start": 2928.04,
      "Time_End": 2932.8,
      "Text": " We can do that via execute assembly, the name of the assembly, and any arcs."
    },
    {
      "Time_Start": 2932.8,
      "Time_End": 2941.84,
      "Text": " So in this case, we'll do group equals user, and the output returns back."
    },
    {
      "Time_Start": 2941.84,
      "Time_End": 2945.92,
      "Text": " If we want to unload an assembly, we can do unload assembly as well to remove it from"
    },
    {
      "Time_Start": 2945.92,
      "Time_End": 2949.44,
      "Text": " the agent cache."
    },
    {
      "Time_Start": 2949.44,
      "Time_End": 2952.72,
      "Text": " And now if we list assemblies again, we'll see that there's only one current process"
    },
    {
      "Time_Start": 2952.72,
      "Time_End": 2955.44,
      "Text": " information."
    },
    {
      "Time_Start": 2955.44,
      "Time_End": 2960.16,
      "Text": " Because execute assembly is just a reflectively loaded DLL converted in the shell code, that"
    },
    {
      "Time_Start": 2960.16,
      "Time_End": 2964.26,
      "Text": " shell code can be injected into any process for execution."
    },
    {
      "Time_Start": 2964.26,
      "Time_End": 2967.28,
      "Text": " Let's find a process that we can inject into."
    },
    {
      "Time_Start": 2967.28,
      "Time_End": 2975.76,
      "Text": " Let's first do a process listing, and then we'll sort by architecture."
    },
    {
      "Time_Start": 2975.76,
      "Time_End": 2979.68,
      "Text": " Let's take the pit of explorer and try to inject into it."
    },
    {
      "Time_Start": 2979.68,
      "Time_End": 2983.2000000000003,
      "Text": " If we ever have questions about syntax, we can do help and then the command name, in"
    },
    {
      "Time_Start": 2983.2000000000003,
      "Time_End": 2988.0000000000005,
      "Text": " this case, assembly inject, because we're injecting a remote.net assembly."
    },
    {
      "Time_Start": 2988.0000000000005,
      "Time_End": 2989.9600000000005,
      "Text": " At the top right, we see the command usage."
    },
    {
      "Time_Start": 2989.9600000000005,
      "Time_End": 2996.6000000000004,
      "Text": " And so we'll do assembly inject, process ID, the architecture, and the assembly name."
    },
    {
      "Time_Start": 2996.6000000000004,
      "Time_End": 3000.4800000000005,
      "Text": " In this case, current process information.exe."
    },
    {
      "Time_Start": 3000.4800000000005,
      "Time_End": 3004.84,
      "Text": " This assembly will return information about the hosting process of which the code is executing,"
    },
    {
      "Time_Start": 3004.84,
      "Time_End": 3010.1600000000003,
      "Text": " so that we can verify that this injection command worked."
    },
    {
      "Time_Start": 3010.16,
      "Time_End": 3014.8799999999997,
      "Text": " And as we see, it's a bit sad that we did inject into explorer with this process ID"
    },
    {
      "Time_Start": 3014.8799999999997,
      "Time_End": 3017.0,
      "Text": " and that it's operating under this username."
    },
    {
      "Time_Start": 3017.0,
      "Time_End": 3020.52,
      "Text": " Next, let's move on to PowerShell script execution."
    },
    {
      "Time_Start": 3020.52,
      "Time_End": 3024.3199999999997,
      "Text": " PowerShell script execution works in the same workflow as execute assembly by first having"
    },
    {
      "Time_Start": 3024.3199999999997,
      "Time_End": 3029.52,
      "Text": " to register a new PowerShell script with the agent if you wanted to execute a custom script,"
    },
    {
      "Time_Start": 3029.52,
      "Time_End": 3032.7999999999997,
      "Text": " followed by executing the PowerShell code."
    },
    {
      "Time_Start": 3032.7999999999997,
      "Time_End": 3040.0,
      "Text": " We do this via PS import, and in this case, we're going to load up PowerView."
    },
    {
      "Time_Start": 3040.0,
      "Time_End": 3044.6,
      "Text": " If we wanted to see what scripts are currently loaded in the agent, we can do list scripts,"
    },
    {
      "Time_Start": 3044.6,
      "Time_End": 3047.16,
      "Text": " and we'll see that PowerView is imported."
    },
    {
      "Time_Start": 3047.16,
      "Time_End": 3050.92,
      "Text": " This helps specifically for training, because oftentimes students are wondering how come"
    },
    {
      "Time_Start": 3050.92,
      "Time_End": 3054.4,
      "Text": " get domain user is not working when they've never imported the script."
    },
    {
      "Time_Start": 3054.4,
      "Time_End": 3060.84,
      "Text": " So this allows us to verify that scripts are currently loaded in the agent as we expect."
    },
    {
      "Time_Start": 3060.84,
      "Time_End": 3064.04,
      "Text": " We'll do the PowerPick version, which is the fork and run architecture, and we'll do get"
    },
    {
      "Time_Start": 3064.04,
      "Time_End": 3070.8,
      "Text": " domain user in our username, which is low proof."
    },
    {
      "Time_Start": 3070.8,
      "Time_End": 3076.16,
      "Text": " The task returns and we see information about our user from the domain."
    },
    {
      "Time_Start": 3076.16,
      "Time_End": 3080.52,
      "Text": " The agent can cache one or more PowerShell scripts."
    },
    {
      "Time_Start": 3080.52,
      "Time_End": 3085.36,
      "Text": " This allows it to hold simultaneously PowerView and PowerUp, for example."
    },
    {
      "Time_Start": 3085.36,
      "Time_End": 3091.2799999999997,
      "Text": " For the case of this demo, though, we're going to import a test script called hello world."
    },
    {
      "Time_Start": 3091.28,
      "Time_End": 3096.2400000000002,
      "Text": " This hello world script just has one function, which spits out hello from SOCON."
    },
    {
      "Time_Start": 3096.2400000000002,
      "Time_End": 3100.92,
      "Text": " So let's execute PowerPick again, except let's also do our custom function here, which is"
    },
    {
      "Time_Start": 3100.92,
      "Time_End": 3103.28,
      "Text": " hello world."
    },
    {
      "Time_Start": 3103.28,
      "Time_End": 3111.84,
      "Text": " And again, we see our domain output, as well as the custom function executing."
    },
    {
      "Time_Start": 3111.84,
      "Time_End": 3117.32,
      "Text": " For commands that require injection, like PowerPick and execute assembly, and even Mimikatz,"
    },
    {
      "Time_Start": 3117.32,
      "Time_End": 3121.6800000000003,
      "Text": " they will all inject into the remote process using the current injection technique set"
    },
    {
      "Time_Start": 3121.6800000000003,
      "Time_End": 3123.28,
      "Text": " by the agent."
    },
    {
      "Time_Start": 3123.28,
      "Time_End": 3126.84,
      "Text": " If you want to know what process injection technique the agent's currently using, you"
    },
    {
      "Time_Start": 3126.84,
      "Time_End": 3129.54,
      "Text": " can do get current injection technique."
    },
    {
      "Time_Start": 3129.54,
      "Time_End": 3133.76,
      "Text": " We see here that we've been executing PowerPick, execute assembly, and the like using create"
    },
    {
      "Time_Start": 3133.76,
      "Time_End": 3135.76,
      "Text": " remote thread injection."
    },
    {
      "Time_Start": 3135.76,
      "Time_End": 3139.7200000000003,
      "Text": " If we wanted to see what injection techniques are available to us, we can always list injection"
    },
    {
      "Time_Start": 3139.7200000000003,
      "Time_End": 3141.32,
      "Text": " techniques."
    },
    {
      "Time_Start": 3141.32,
      "Time_End": 3145.52,
      "Text": " We see here that there's two loaded in the agent, quser APC injection and create remote"
    },
    {
      "Time_Start": 3145.52,
      "Time_End": 3147.6,
      "Text": " thread injection."
    },
    {
      "Time_Start": 3147.6,
      "Time_End": 3151.16,
      "Text": " Let's change our injection technique to quser APC."
    },
    {
      "Time_Start": 3151.16,
      "Time_End": 3157.64,
      "Text": " We can do that by saying set injection technique, and then the injection technique name."
    },
    {
      "Time_Start": 3157.64,
      "Time_End": 3163.24,
      "Text": " From here, we've now set our injection technique to quser APC, which is the early bird version."
    },
    {
      "Time_Start": 3163.24,
      "Time_End": 3168.04,
      "Text": " If you were to use this injection technique with, say, assembly inject or PS inject, it"
    },
    {
      "Time_Start": 3168.04,
      "Time_End": 3170.0,
      "Text": " may or may not work."
    },
    {
      "Time_Start": 3170.0,
      "Time_End": 3175.08,
      "Text": " However, this injection technique is guaranteed to work for, say, PowerPick, and we can verify"
    },
    {
      "Time_Start": 3175.08,
      "Time_End": 3184.56,
      "Text": " that again by tabbing back up to our other commands and executing."
    },
    {
      "Time_Start": 3184.56,
      "Time_End": 3189.96,
      "Text": " That concludes the PowerPick and execute assembly."
    },
    {
      "Time_Start": 3189.96,
      "Time_End": 3192.64,
      "Text": " Next let's talk about payload building and tracking."
    },
    {
      "Time_Start": 3192.64,
      "Time_End": 3199.04,
      "Text": " So as we've seen previously, such as in the MiniCADs demo, we were able to execute bypass"
    },
    {
      "Time_Start": 3199.04,
      "Time_End": 3202.88,
      "Text": " UAC and create a new payload."
    },
    {
      "Time_Start": 3202.88,
      "Time_End": 3208.4,
      "Text": " For that bypass UAC command, it generated a new instance of the Apollo Exe that we generated"
    },
    {
      "Time_Start": 3208.4,
      "Time_End": 3210.6,
      "Text": " through create components."
    },
    {
      "Time_Start": 3210.6,
      "Time_End": 3215.6,
      "Text": " That allows us to do more fine-grained artifact tracking in case someone ever asked, hey,"
    },
    {
      "Time_Start": 3215.6,
      "Time_End": 3218.1600000000003,
      "Text": " I found this executable, is it yours?"
    },
    {
      "Time_Start": 3218.1600000000003,
      "Time_End": 3223.2400000000002,
      "Text": " We were able to track the MD5 of that executable server side, and we're able to go back and"
    },
    {
      "Time_Start": 3223.2400000000002,
      "Time_End": 3226.08,
      "Text": " see what task created that executable."
    },
    {
      "Time_Start": 3226.08,
      "Time_End": 3232.12,
      "Text": " Moreover, there's a thing called payload wrappers, and these payload wrappers extend the agent"
    },
    {
      "Time_Start": 3232.12,
      "Time_End": 3234.12,
      "Text": " deployment in a variety of ways."
    },
    {
      "Time_Start": 3234.12,
      "Time_End": 3238.6,
      "Text": " It allows us to do a lateral movement, it allows us to do privilege escalation and initial"
    },
    {
      "Time_Start": 3238.6,
      "Time_End": 3240.52,
      "Text": " access and more."
    },
    {
      "Time_Start": 3240.52,
      "Time_End": 3242.64,
      "Text": " It even allows us to create service executables."
    },
    {
      "Time_Start": 3242.64,
      "Time_End": 3248.8399999999997,
      "Text": " They essentially modify the way that the agent can be executed in a way that's more streamlined."
    },
    {
      "Time_Start": 3248.8399999999997,
      "Time_End": 3253.44,
      "Text": " Say you wanted to create shellcode for your agent, and you wanted to ensure that that"
    },
    {
      "Time_Start": 3253.44,
      "Time_End": 3257.56,
      "Text": " shellcode was encrypted and then decrypted at runtime and launched."
    },
    {
      "Time_Start": 3257.56,
      "Time_End": 3259.68,
      "Text": " You can do that through payload wrappers."
    },
    {
      "Time_Start": 3260.2400000000002,
      "Time_End": 3265.6400000000003,
      "Text": " Moreover, there's built-in lateral movement to the agent, and we can do that via psexec,"
    },
    {
      "Time_Start": 3265.6400000000003,
      "Time_End": 3269.6800000000003,
      "Text": " which will create a new service on the remote computer and execute."
    },
    {
      "Time_Start": 3269.6800000000003,
      "Time_End": 3275.4400000000005,
      "Text": " And the service executable that is created is unique per command issued."
    },
    {
      "Time_Start": 3275.4400000000005,
      "Time_End": 3278.76,
      "Text": " Last thing we're going to talk about is the SOCKS implementation in Apollo."
    },
    {
      "Time_Start": 3278.76,
      "Time_End": 3284.36,
      "Text": " The SOCKS implementation is rough, but working, and allows you to proxy traffic through your"
    },
    {
      "Time_Start": 3284.36,
      "Time_End": 3288.9600000000005,
      "Text": " operator computer through the remote endpoint, allowing you to, say, browse internal web"
    },
    {
      "Time_Start": 3288.96,
      "Time_End": 3291.08,
      "Text": " servers and the like."
    },
    {
      "Time_Start": 3291.08,
      "Time_End": 3297.12,
      "Text": " And we'll go into a demo briefly of how that works."
    },
    {
      "Time_Start": 3297.12,
      "Time_End": 3302.12,
      "Text": " The Mythic C2 framework supports the SOCKS5 protocol for agents, allowing agents to open"
    },
    {
      "Time_Start": 3302.12,
      "Time_End": 3309.16,
      "Text": " up their own SOCKS proxies and allowing operators to proxy traffic through the destination endpoint."
    },
    {
      "Time_Start": 3309.16,
      "Time_End": 3314.08,
      "Text": " Apollo implements and supports this SOCKS functionality through the SOCKS command."
    },
    {
      "Time_Start": 3314.08,
      "Time_End": 3318.64,
      "Text": " If we do help SOCKS, we'll see the command line usage that we have here."
    },
    {
      "Time_Start": 3318.64,
      "Time_End": 3323.52,
      "Text": " We are going to start the SOCKS server by doing SOCKS start, and then the port that"
    },
    {
      "Time_Start": 3323.52,
      "Time_End": 3326.52,
      "Text": " we're going to be binding to."
    },
    {
      "Time_Start": 3326.52,
      "Time_End": 3331.52,
      "Text": " When this happens, Mythic will start up its own go-server middleware to receive proxy"
    },
    {
      "Time_Start": 3331.52,
      "Time_End": 3336.68,
      "Text": " connections and dispatch messages between the agent and the server."
    },
    {
      "Time_Start": 3336.68,
      "Time_End": 3341.12,
      "Text": " If we want to see current active proxy connections, we can go to SOCKS proxies, and we see that"
    },
    {
      "Time_Start": 3341.12,
      "Time_End": 3347.52,
      "Text": " the SOCKS proxy is indeed bound to port 777 from callback 11."
    },
    {
      "Time_Start": 3347.52,
      "Time_End": 3354.56,
      "Text": " Let's sleep this agent down to zero, and then we'll switch over to the actual operator VM."
    },
    {
      "Time_Start": 3354.56,
      "Time_End": 3356.12,
      "Text": " Here we are on the operator VM."
    },
    {
      "Time_Start": 3356.12,
      "Time_End": 3360.96,
      "Text": " We first need to begin by binding to a local port to send SOCKS traffic through."
    },
    {
      "Time_Start": 3360.96,
      "Time_End": 3364.7999999999997,
      "Text": " SOCKS traffic is sent through this port via the proxy chains tool, and make sure that"
    },
    {
      "Time_Start": 3364.7999999999997,
      "Time_End": 3367.0,
      "Text": " your proxy chains configuration is set properly."
    },
    {
      "Time_Start": 3367.0,
      "Time_End": 3374.16,
      "Text": " First, we're going to log in and bind to the server, and we can verify that this go-server"
    },
    {
      "Time_Start": 3374.16,
      "Time_End": 3380.76,
      "Text": " is running by grepping for go-server, and we see that it is bound to port 7777."
    },
    {
      "Time_Start": 3380.76,
      "Time_End": 3387.52,
      "Text": " You can also do this again via netstat, and we can grep for the SOCKS port that we bound"
    },
    {
      "Time_Start": 3387.52,
      "Time_End": 3393.0,
      "Text": " to in the tasking, and we see that it's listening for new connections."
    },
    {
      "Time_Start": 3393.0,
      "Time_End": 3397.64,
      "Text": " In our proxy chains file, we need just a few items."
    },
    {
      "Time_Start": 3397.64,
      "Time_End": 3402.44,
      "Text": " In proxychains.conf at the bottom, you need to change SOCKS4 to SOCKS5 and bind to the"
    },
    {
      "Time_Start": 3402.44,
      "Time_End": 3405.92,
      "Text": " port that you specified in your tasking."
    },
    {
      "Time_Start": 3405.92,
      "Time_End": 3414.88,
      "Text": " Here we can do a proxy chains curl, and in this case, we'll just do spectrops.io, and"
    },
    {
      "Time_Start": 3414.88,
      "Time_End": 3418.76,
      "Text": " we see that data is returned back successfully."
    },
    {
      "Time_Start": 3418.76,
      "Time_End": 3423.2000000000003,
      "Text": " Let's try to browse with our Firefox browser."
    },
    {
      "Time_Start": 3423.2000000000003,
      "Time_End": 3427.88,
      "Text": " This may take a few moments due to the large number of network requests that Firefox attempts"
    },
    {
      "Time_Start": 3427.88,
      "Time_End": 3430.0800000000004,
      "Text": " to make."
    },
    {
      "Time_Start": 3430.0800000000004,
      "Time_End": 3433.1200000000003,
      "Text": " Once these first few initial requests are knocked out of the way, you can see that we"
    },
    {
      "Time_Start": 3433.1200000000003,
      "Time_End": 3437.5600000000004,
      "Text": " were able to start Firefox, and we were able to load Google successfully."
    },
    {
      "Time_Start": 3437.5600000000004,
      "Time_End": 3442.2000000000003,
      "Text": " That concludes SOCKS."
    },
    {
      "Time_Start": 3442.2000000000003,
      "Time_End": 3447.88,
      "Text": " In conclusion, Apollo has a relatively stable, solid core set of functionality."
    },
    {
      "Time_Start": 3448.0,
      "Time_End": 3453.2000000000003,
      "Text": " It hits all of the main components that you might want to operate in a Red Team operation"
    },
    {
      "Time_Start": 3453.2000000000003,
      "Time_End": 3457.32,
      "Text": " command-wise, and also implements SOCKS5."
    },
    {
      "Time_Start": 3457.32,
      "Time_End": 3461.08,
      "Text": " It's open source and allows you to modify each component, so if you wanted to change"
    },
    {
      "Time_Start": 3461.08,
      "Time_End": 3466.96,
      "Text": " how a task does preprocessing, how it might compile a DLL, the type of task processing"
    },
    {
      "Time_Start": 3466.96,
      "Time_End": 3471.12,
      "Text": " that's done, and the tasking output, if you wanted to modify any of these components,"
    },
    {
      "Time_Start": 3471.12,
      "Time_End": 3473.8,
      "Text": " you can do that."
    },
    {
      "Time_Start": 3473.8,
      "Time_End": 3477.6800000000003,
      "Text": " It's also very approachable in the sense that it's highly documented, and it has its own"
    },
    {
      "Time_Start": 3477.6800000000003,
      "Time_End": 3484.1600000000003,
      "Text": " documentation web server, and it will be coming soon to a training near you."
    },
    {
      "Time_Start": 3484.1600000000003,
      "Time_End": 3494.1600000000003,
      "Text": " Thanks for attending my talk, and I hope you enjoy the next one."
    }
  ]
}