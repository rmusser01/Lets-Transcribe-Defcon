{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 20.12,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Hello, today's talk is Hey, I'm Still Here, an overview of modern macOS persistence."
    },
    {
      "Time_Start": 20.12,
      "Time_End": 21.12,
      "Text": " So who am I?"
    },
    {
      "Time_Start": 21.12,
      "Time_End": 22.12,
      "Text": " I'm Leo Pitt."
    },
    {
      "Time_Start": 22.12,
      "Time_End": 23.5,
      "Text": " I'm a consultant at Spectrops."
    },
    {
      "Time_Start": 23.5,
      "Time_End": 29.32,
      "Text": " After college, I worked as an IT auditor focusing on the IT controls of financial applications."
    },
    {
      "Time_Start": 29.32,
      "Time_End": 34.04,
      "Text": " I transitioned to a Linux admin, and through that work, I got more interested in ongoing"
    },
    {
      "Time_Start": 34.04,
      "Time_End": 35.92,
      "Text": " security of those systems."
    },
    {
      "Time_Start": 35.92,
      "Time_End": 42.480000000000004,
      "Text": " So I became a blue team analyst for the DoD, and then transitioned to a red team operator."
    },
    {
      "Time_Start": 42.480000000000004,
      "Time_End": 48.64,
      "Text": " Now I'm at Spectrops where I work on the adversary simulation and adversary detection projects."
    },
    {
      "Time_Start": 48.64,
      "Time_End": 55.72,
      "Text": " I created PersistenceJXA, which is a project that focuses on macOS persistence using JavaScript"
    },
    {
      "Time_Start": 55.72,
      "Time_End": 56.72,
      "Text": " for automation."
    },
    {
      "Time_Start": 57.199999999999996,
      "Time_End": 63.16,
      "Text": " But it also includes other tools like a process injection checker and a dilib hijack scanner."
    },
    {
      "Time_Start": 63.16,
      "Time_End": 69.84,
      "Text": " I occasionally blog on Medium, and I am also a licensed CPA, but I cannot provide you tax"
    },
    {
      "Time_Start": 69.84,
      "Time_End": 70.84,
      "Text": " advice."
    },
    {
      "Time_Start": 70.84,
      "Time_End": 75.24,
      "Text": " And if you're coming to me for tax advice, you're already going down the wrong path."
    },
    {
      "Time_Start": 75.24,
      "Time_End": 76.24,
      "Text": " So the agenda for today."
    },
    {
      "Time_Start": 76.24,
      "Time_End": 81.28,
      "Text": " So I'm going to start with a overview of persistence, why we need it for Red Team Ops, and kind"
    },
    {
      "Time_Start": 81.28,
      "Time_End": 85.0,
      "Text": " of a brief history of persistence on macOS."
    },
    {
      "Time_Start": 85.0,
      "Time_End": 88.04,
      "Text": " Then I'm going to go over a baseline of macOS terms."
    },
    {
      "Time_Start": 88.04,
      "Time_End": 92.88,
      "Text": " We're going to try to leverage some of the Windows equivalents to better explain the"
    },
    {
      "Time_Start": 92.88,
      "Time_End": 93.88,
      "Text": " macOS functionality."
    },
    {
      "Time_Start": 93.88,
      "Time_End": 97.32,
      "Text": " Specifically, I'm going to try to go over terms that are going to be used for this talk"
    },
    {
      "Time_Start": 97.32,
      "Time_End": 99.04,
      "Text": " and all the persistence methods."
    },
    {
      "Time_Start": 99.04,
      "Time_End": 102.72,
      "Text": " And then for each persistence method, I'm going to go over an overview through some"
    },
    {
      "Time_Start": 102.72,
      "Time_End": 109.84,
      "Text": " example executions, and then go over the artifacts created that can be leveraged for detection."
    },
    {
      "Time_Start": 109.84,
      "Time_End": 112.52,
      "Text": " Persistence is a critical step in Red Team operations."
    },
    {
      "Time_Start": 112.52,
      "Time_End": 117.6,
      "Text": " After we've obtained initial access and performed situational awareness, typically we want"
    },
    {
      "Time_Start": 117.6,
      "Time_End": 120.11999999999999,
      "Text": " to install some method of persistence."
    },
    {
      "Time_Start": 120.11999999999999,
      "Time_End": 123.67999999999999,
      "Text": " We don't want to be in a situation in which we're dependent on that initial access point,"
    },
    {
      "Time_Start": 123.67999999999999,
      "Time_End": 126.72,
      "Text": " because that can be killed off for a variety of reasons."
    },
    {
      "Time_Start": 126.72,
      "Time_End": 132.35999999999999,
      "Text": " There could be an issue with the user's computer, or the target has simply left work for the"
    },
    {
      "Time_Start": 132.35999999999999,
      "Time_End": 133.35999999999999,
      "Text": " day and shut everything down."
    },
    {
      "Time_Start": 133.35999999999999,
      "Time_End": 138.12,
      "Text": " So you want to have some method to maintain access to the target."
    },
    {
      "Time_Start": 138.12,
      "Time_End": 141.6,
      "Text": " Now if you look at malware reports for macOS, you'll see that launch agents and launch daemons"
    },
    {
      "Time_Start": 141.68,
      "Time_End": 145.2,
      "Text": " are by far the most common method of persistence."
    },
    {
      "Time_Start": 145.2,
      "Time_End": 147.84,
      "Text": " This is due to their ease of use and their flexibility."
    },
    {
      "Time_Start": 147.84,
      "Time_End": 153.0,
      "Text": " You could think of them as the startup folder persistence equivalent on Windows."
    },
    {
      "Time_Start": 153.0,
      "Time_End": 158.0,
      "Text": " But with this common method, the detection is pretty well known as well."
    },
    {
      "Time_Start": 158.0,
      "Time_End": 161.51999999999998,
      "Text": " So my goal of this talk is to highlight some of these lesser known methods for persistence"
    },
    {
      "Time_Start": 161.51999999999998,
      "Time_End": 162.51999999999998,
      "Text": " on macOS."
    },
    {
      "Time_Start": 162.51999999999998,
      "Time_End": 168.2,
      "Text": " So here's a chart that has some Windows terms and kind of the macOS equivalents."
    },
    {
      "Time_Start": 168.2,
      "Time_End": 170.4,
      "Text": " Starting from the top, we have the registry."
    },
    {
      "Time_Start": 170.4,
      "Time_End": 174.52,
      "Text": " So that's that hierarchical tree format that dictates how the operating systems run on"
    },
    {
      "Time_Start": 174.52,
      "Time_End": 175.8,
      "Text": " Windows."
    },
    {
      "Time_Start": 175.8,
      "Time_End": 178.44,
      "Text": " On macOS, we don't have a centralized method."
    },
    {
      "Time_Start": 178.44,
      "Time_End": 182.12,
      "Text": " We have a decentralized one through these property lists and these plists, and they"
    },
    {
      "Time_Start": 182.12,
      "Time_End": 185.72,
      "Text": " dictate how the operating system runs and how various applications run."
    },
    {
      "Time_Start": 185.72,
      "Time_End": 187.72,
      "Text": " You'll find them in different preference folders."
    },
    {
      "Time_Start": 187.72,
      "Time_End": 192.04000000000002,
      "Text": " You'll find them under application bundles, kind of all over the system."
    },
    {
      "Time_Start": 192.04000000000002,
      "Time_End": 195.8,
      "Text": " On Windows, we have the portable execute, we have that PE file format for executables"
    },
    {
      "Time_Start": 195.8,
      "Time_End": 201.56,
      "Text": " and shared libraries, and the MacO executables as the equivalent there."
    },
    {
      "Time_Start": 201.56,
      "Time_End": 204.88000000000002,
      "Text": " On Windows for the shared library concept is DLLs."
    },
    {
      "Time_Start": 204.88000000000002,
      "Time_End": 207.96,
      "Text": " macOS has something similar, dilibs."
    },
    {
      "Time_Start": 207.96,
      "Time_End": 209.72,
      "Text": " On Linux, you have those shared objects."
    },
    {
      "Time_Start": 209.72,
      "Time_End": 215.56,
      "Text": " So on Windows, you also have the .lnk, those shortcut links."
    },
    {
      "Time_Start": 215.56,
      "Time_End": 218.04000000000002,
      "Text": " Typically on like a Windows desktop, you'll have those."
    },
    {
      "Time_Start": 218.04000000000002,
      "Time_End": 222.96,
      "Text": " macOS has those within the doc, as far as like doc shortcuts."
    },
    {
      "Time_Start": 222.96,
      "Time_End": 228.1,
      "Text": " We have on Windows, the file explorer, kind of that GUI that lets you explore and browse"
    },
    {
      "Time_Start": 228.1,
      "Time_End": 230.96,
      "Text": " different files and folders on Windows."
    },
    {
      "Time_Start": 230.96,
      "Time_End": 233.64000000000001,
      "Text": " And on macOS, we have finder, that it's that category."
    },
    {
      "Time_Start": 233.64000000000001,
      "Time_End": 239.4,
      "Text": " And then lastly, we have on Windows, the event tracing for Windows, which allows kernel level"
    },
    {
      "Time_Start": 239.4,
      "Time_End": 240.8,
      "Text": " logging from user space."
    },
    {
      "Time_Start": 240.8,
      "Time_End": 246.28,
      "Text": " A new feature as of Catalina is the endpoint security framework, which allows us to also"
    },
    {
      "Time_Start": 246.28,
      "Time_End": 249.68,
      "Text": " get kernel level information and logging from user space."
    },
    {
      "Time_Start": 249.68,
      "Time_End": 255.36,
      "Text": " However, ESF does lack detailed view into network-related events, and it also doesn't"
    },
    {
      "Time_Start": 255.36,
      "Time_End": 259.88,
      "Text": " give a detailed view into inter-process communications, like XPC."
    },
    {
      "Time_Start": 259.88,
      "Time_End": 267.48,
      "Text": " We'll be leveraging ESF through this talk, as far as the method for detection."
    },
    {
      "Time_Start": 267.48,
      "Time_End": 272.0,
      "Text": " Another item I want to cover to baseline knowledge is command and control, or C2."
    },
    {
      "Time_Start": 272.0,
      "Time_End": 276.24,
      "Text": " C2 allows us to send commands to compromised systems."
    },
    {
      "Time_Start": 276.24,
      "Time_End": 280.0,
      "Text": " Throughout this talk, the payload that I'll be using is AppVal, which is the JavaScript"
    },
    {
      "Time_Start": 280.0,
      "Time_End": 284.56,
      "Text": " for Automation, or JXA, payload for the Mythic C2 framework."
    },
    {
      "Time_Start": 284.56,
      "Time_End": 290.88,
      "Text": " The AppVal payload through JXA uses Objective-C API calls to interact with the target."
    },
    {
      "Time_Start": 290.88,
      "Time_End": 291.88,
      "Text": " So quick background on JXA."
    },
    {
      "Time_Start": 291.88,
      "Time_End": 296.64,
      "Text": " JXA is a scripting language for macOS, first introduced in macOS Yosemite for 10.10."
    },
    {
      "Time_Start": 296.64,
      "Time_End": 301.08,
      "Text": " I like to think of it as a poor man's PowerShell for macOS."
    },
    {
      "Time_Start": 301.08,
      "Time_End": 304.76,
      "Text": " So for standard execution, we can leverage the living off the land, or lulbin binary"
    },
    {
      "Time_Start": 304.76,
      "Time_End": 305.76,
      "Text": " JXA script."
    },
    {
      "Time_Start": 305.76,
      "Time_End": 309.2,
      "Text": " But there are many other ways to invoke the payload, including the lulbin of Automator"
    },
    {
      "Time_Start": 309.2,
      "Time_End": 314.08,
      "Text": " with workflow files, as well as through compiled dialibs, which I'll cover in this talk."
    },
    {
      "Time_Start": 314.08,
      "Time_End": 318.08,
      "Text": " Due to the relatively small size of the AppVal payload and flexibility, as you can customize"
    },
    {
      "Time_Start": 318.08,
      "Time_End": 322.8,
      "Text": " the loaded commands upon creation, further reducing its size, it serves as a great payload"
    },
    {
      "Time_Start": 322.8,
      "Time_End": 326.15999999999997,
      "Text": " for initial access and persistence."
    },
    {
      "Time_Start": 326.15999999999997,
      "Time_End": 329.24,
      "Text": " Although I don't leverage for this talk, another macOS payload is Poseidon."
    },
    {
      "Time_Start": 329.24,
      "Time_End": 334.56,
      "Text": " This is a Golang payload that uses Objective-C API calls and Golang functionality."
    },
    {
      "Time_Start": 334.56,
      "Time_End": 337.96,
      "Text": " It results in a larger payload than AppVal, but it has additional features like socks"
    },
    {
      "Time_Start": 337.96,
      "Time_End": 338.96,
      "Text": " and threading."
    },
    {
      "Time_Start": 338.96,
      "Time_End": 343.28000000000003,
      "Text": " It also has additional features which we can leverage, macOS Inter-Process Communication"
    },
    {
      "Time_Start": 343.28000000000003,
      "Time_End": 348.08,
      "Text": " XPC, and functionality to aid process injection."
    },
    {
      "Time_Start": 348.08,
      "Time_End": 351.52,
      "Text": " These features make it a great second stage payload."
    },
    {
      "Time_Start": 351.52,
      "Time_End": 356.28,
      "Text": " So the persistence techniques that I plan to go over are Bash profiles and the Z-Shell"
    },
    {
      "Time_Start": 356.28,
      "Time_End": 362.32,
      "Text": " equivalent, Cron jobs, Doc shortcuts, Finder sync plugins that we can create, application"
    },
    {
      "Time_Start": 362.32,
      "Time_End": 367.52,
      "Text": " scripts, and third-party plugins."
    },
    {
      "Time_Start": 367.52,
      "Time_End": 371.94,
      "Text": " So first is Bash profiles and the Z-Shell start file equivalents."
    },
    {
      "Time_Start": 371.94,
      "Time_End": 376.4,
      "Text": " This is a common persistence method on Linux systems, in that Bash profiles are shell scripts"
    },
    {
      "Time_Start": 376.4,
      "Time_End": 380.84,
      "Text": " that contain shell commands, and they're executed each time that the terminal is opened in a"
    },
    {
      "Time_Start": 380.84,
      "Time_End": 381.84,
      "Text": " user's context."
    },
    {
      "Time_Start": 381.84,
      "Time_End": 387.12,
      "Text": " One thing to note is that Z-Shell has replaced Bash as the default shell on macOS Catalina."
    },
    {
      "Time_Start": 387.12,
      "Time_End": 392.28,
      "Text": " However, we can still execute the same persistence method by using the Z-Shell equivalent files."
    },
    {
      "Time_Start": 392.72,
      "Time_End": 397.08000000000004,
      "Text": " The direct comparison from like Bash profile is a Z-Profile shell."
    },
    {
      "Time_Start": 397.08000000000004,
      "Time_End": 400.6,
      "Text": " However, another interesting thing about Z-Shell is that it provides us this additional file"
    },
    {
      "Time_Start": 400.6,
      "Time_End": 407.96000000000004,
      "Text": " called the Z-Shell environment file, which executes in more instances than just the standard"
    },
    {
      "Time_Start": 407.96000000000004,
      "Time_End": 408.96000000000004,
      "Text": " Z-Profile."
    },
    {
      "Time_Start": 408.96000000000004,
      "Time_End": 412.88000000000005,
      "Text": " So it's always sourced pretty much in every interaction with Z-Shell."
    },
    {
      "Time_Start": 412.88000000000005,
      "Time_End": 418.64000000000004,
      "Text": " Even if the user was to just do the command line zshell-c and execute the command, it'll"
    },
    {
      "Time_Start": 418.64000000000004,
      "Time_End": 422.12,
      "Text": " be sourced, whereas Z-Profile wouldn't have been sourced in that."
    },
    {
      "Time_Start": 422.12,
      "Time_End": 425.08,
      "Text": " So it gives us more coverage, more persistence."
    },
    {
      "Time_Start": 425.08,
      "Time_End": 427.88,
      "Text": " So here's an example of a Z-Shell environment file."
    },
    {
      "Time_Start": 427.88,
      "Time_End": 433.2,
      "Text": " You'll see here, as far as in the command, we have some items to minimize the tension"
    },
    {
      "Time_Start": 433.2,
      "Time_End": 434.42,
      "Text": " of the end user."
    },
    {
      "Time_Start": 434.42,
      "Time_End": 437.78000000000003,
      "Text": " One thing that Z-Shell allows us is it has this no monitor option."
    },
    {
      "Time_Start": 437.78000000000003,
      "Time_End": 441.52,
      "Text": " If we don't use it, then each time that a new terminal is opened, the PID is going to"
    },
    {
      "Time_Start": 441.52,
      "Time_End": 445.64,
      "Text": " be displayed, which has our payload to the end user."
    },
    {
      "Time_Start": 445.64,
      "Time_End": 448.2,
      "Text": " So we can erase that through this no monitor option."
    },
    {
      "Time_Start": 448.2,
      "Time_End": 450.76,
      "Text": " You can also use the no hub op command."
    },
    {
      "Time_Start": 450.76,
      "Time_End": 454.76,
      "Text": " It'll by default create a no hub dot out file."
    },
    {
      "Time_Start": 454.76,
      "Time_End": 461.03999999999996,
      "Text": " So to suppress that and to actually run everything in the background, we use these redirections."
    },
    {
      "Time_Start": 461.03999999999996,
      "Time_End": 465.68,
      "Text": " Next is so for detection of this, there's two key endpoint security framework events"
    },
    {
      "Time_Start": 465.68,
      "Time_End": 467.26,
      "Text": " that we're relying upon."
    },
    {
      "Time_Start": 467.26,
      "Time_End": 472.92,
      "Text": " That's the ES event type notify create, and then the ES event type notify rename."
    },
    {
      "Time_Start": 472.92,
      "Time_End": 476.84,
      "Text": " So rename isn't really a like just a renaming of the file, it's really, you could think"
    },
    {
      "Time_Start": 476.84,
      "Time_End": 478.59999999999997,
      "Text": " of it as file modifications."
    },
    {
      "Time_Start": 479.20000000000005,
      "Time_End": 485.36,
      "Text": " If there's any creations of the Z-Shell environment file or modifications to it, it'll be noted"
    },
    {
      "Time_Start": 485.36,
      "Time_End": 486.52000000000004,
      "Text": " through these events."
    },
    {
      "Time_Start": 486.52000000000004,
      "Time_End": 491.28000000000003,
      "Text": " However, this does not scale well because this is intended for end users to create and"
    },
    {
      "Time_Start": 491.28000000000003,
      "Time_End": 497.36,
      "Text": " modify at will, depending on the environment, it may result in a vast amount of false positives."
    },
    {
      "Time_Start": 497.36,
      "Time_End": 502.04,
      "Text": " So it's best to supplement this with possibly like uncommon executions in the environment,"
    },
    {
      "Time_Start": 502.04,
      "Time_End": 506.44,
      "Text": " like OSA script in this case would be a beneficial one to have."
    },
    {
      "Time_Start": 506.44,
      "Time_End": 510.04,
      "Text": " So next is another method that if you're coming from the Linux side of the house, you"
    },
    {
      "Time_Start": 510.04,
      "Time_End": 511.96,
      "Text": " might be familiar with, and that's cron jobs."
    },
    {
      "Time_Start": 511.96,
      "Time_End": 515.88,
      "Text": " It works the same way on Mac OS, it's time-based job scheduler."
    },
    {
      "Time_Start": 515.88,
      "Time_End": 521.8,
      "Text": " And by adding items to the cron tab, we can set a specified interval for it to run our"
    },
    {
      "Time_Start": 521.8,
      "Time_End": 522.8,
      "Text": " commands."
    },
    {
      "Time_Start": 522.8,
      "Time_End": 527.16,
      "Text": " One thing to note though, with the Mac OS is that on the initial cron tab setup, it"
    },
    {
      "Time_Start": 527.16,
      "Time_End": 531.24,
      "Text": " will result in prompting, there's an example here on the bottom right, in which it's going"
    },
    {
      "Time_Start": 531.24,
      "Time_End": 534.52,
      "Text": " to ask to administer the computer."
    },
    {
      "Time_Start": 534.6,
      "Time_End": 538.48,
      "Text": " But if the user clicks, don't allow, then we're using like a mythic app fail agent,"
    },
    {
      "Time_Start": 538.48,
      "Time_End": 543.3199999999999,
      "Text": " for example, we'll get a response back that the operation was not permitted."
    },
    {
      "Time_Start": 543.3199999999999,
      "Time_End": 545.36,
      "Text": " So here's an example of a cron job."
    },
    {
      "Time_Start": 545.36,
      "Time_End": 549.46,
      "Text": " You'll see at the top here, the cell script, that's going to run our app fail payload."
    },
    {
      "Time_Start": 549.46,
      "Time_End": 552.56,
      "Text": " We use echo to write the job to cron tab."
    },
    {
      "Time_Start": 552.56,
      "Time_End": 556.96,
      "Text": " Another note is that some detection tools can't see the actions of built-in terminal"
    },
    {
      "Time_Start": 556.96,
      "Time_End": 561.0799999999999,
      "Text": " commands like echo, depending on the situation, depending on what things that might be on"
    },
    {
      "Time_Start": 561.08,
      "Time_End": 564.5600000000001,
      "Text": " the target, it could be a useful method to use."
    },
    {
      "Time_Start": 564.5600000000001,
      "Time_End": 567.84,
      "Text": " Also you may be wondering like, why can't you just directly write to this location that"
    },
    {
      "Time_Start": 567.84,
      "Time_End": 569.48,
      "Text": " these cron jobs are saved as?"
    },
    {
      "Time_Start": 569.48,
      "Time_End": 571.5200000000001,
      "Text": " By default, they're owned and controlled by root."
    },
    {
      "Time_Start": 571.5200000000001,
      "Time_End": 574.1600000000001,
      "Text": " And this is kind of just a user level persistence that we're trying to go after them."
    },
    {
      "Time_Start": 574.1600000000001,
      "Time_End": 575.32,
      "Text": " So that's not available to us."
    },
    {
      "Time_Start": 575.32,
      "Time_End": 577.6,
      "Text": " We kind of have to go through cron tab."
    },
    {
      "Time_Start": 577.6,
      "Time_End": 582.64,
      "Text": " And then last you'll see the cron tab.l, which is just noting that, okay, we've successfully"
    },
    {
      "Time_Start": 582.64,
      "Time_End": 588.5200000000001,
      "Text": " written our cron job so that every 15 minutes, it's going to CD to that user shared."
    },
    {
      "Time_Start": 588.52,
      "Time_End": 592.4399999999999,
      "Text": " And then it's going to execute our cron job shell script, which is going to execute our"
    },
    {
      "Time_Start": 592.4399999999999,
      "Time_End": 594.76,
      "Text": " app fail payload in the background."
    },
    {
      "Time_Start": 594.76,
      "Time_End": 600.1999999999999,
      "Text": " You can think of users shared as kind of like the C users public equivalent from Windows."
    },
    {
      "Time_Start": 600.1999999999999,
      "Time_End": 601.88,
      "Text": " So next is detection."
    },
    {
      "Time_Start": 601.88,
      "Time_End": 606.8,
      "Text": " There's two events that occur upon each time that there's a write to the cron tab."
    },
    {
      "Time_Start": 606.8,
      "Time_End": 609.0,
      "Text": " First, there's a creation of a temporary file."
    },
    {
      "Time_Start": 609.0,
      "Time_End": 613.52,
      "Text": " And in this case, you can kind of see on the right hand side on the top, attempt.741."
    },
    {
      "Time_Start": 613.52,
      "Time_End": 616.54,
      "Text": " And then what happens is that it then has a rename event."
    },
    {
      "Time_Start": 616.54,
      "Time_End": 622.86,
      "Text": " So essentially it takes this temporary file and then it's going to save it under file name of the"
    },
    {
      "Time_Start": 622.86,
      "Time_End": 628.54,
      "Text": " username on the host, which in this case is it's a trap and under private slash var slash"
    },
    {
      "Time_Start": 628.54,
      "Time_End": 633.18,
      "Text": " at slash tabs, which is that second event here."
    },
    {
      "Time_Start": 633.18,
      "Time_End": 636.86,
      "Text": " I should note that these ESF events here on the right are from Crescendo."
    },
    {
      "Time_Start": 636.86,
      "Time_End": 641.06,
      "Text": " Crescendo leverages ESF and then it allows us to easily see these events."
    },
    {
      "Time_Start": 641.0600000000001,
      "Time_End": 646.6600000000001,
      "Text": " On the bottom is what the file looks like cron is writing to."
    },
    {
      "Time_Start": 646.6600000000001,
      "Time_End": 651.74,
      "Text": " You can see the first three lines are just some cron metadata comments."
    },
    {
      "Time_Start": 651.74,
      "Time_End": 655.3000000000001,
      "Text": " And then the last one is actually the cron job."
    },
    {
      "Time_Start": 655.3000000000001,
      "Time_End": 657.1,
      "Text": " So next is doc shortcuts."
    },
    {
      "Time_Start": 657.1,
      "Time_End": 659.5400000000001,
      "Text": " This is a method I've looked into recently."
    },
    {
      "Time_Start": 659.5400000000001,
      "Time_End": 663.86,
      "Text": " So like most things on macOS, the doc is controlled by a plist."
    },
    {
      "Time_Start": 663.86,
      "Time_End": 669.34,
      "Text": " So for the items within the doc bar there, it's specifically under the user directory,"
    },
    {
      "Time_Start": 669.34,
      "Time_End": 677.62,
      "Text": " under library preferences, and then com.apple.doc.plist is the plist that controls the icons and the applications that appear there."
    },
    {
      "Time_Start": 677.62,
      "Time_End": 682.94,
      "Text": " The user modifies this plist all the time indirectly by adding and removing items to the doc."
    },
    {
      "Time_Start": 682.94,
      "Time_End": 689.4200000000001,
      "Text": " OS modifies this plist every time that a new app is opened as well and kind of puts it in like, OK, recently opened files."
    },
    {
      "Time_Start": 689.4200000000001,
      "Time_End": 694.94,
      "Text": " But by modifying this plist from an attacker's perspective, we can change what apps appear in the doc."
    },
    {
      "Time_Start": 695.0200000000001,
      "Time_End": 704.1400000000001,
      "Text": " And if we can craft one similar to what the target opens often, then it provides us another method of persistence."
    },
    {
      "Time_Start": 704.1400000000001,
      "Time_End": 705.46,
      "Text": " So here's an example."
    },
    {
      "Time_Start": 705.46,
      "Time_End": 710.3000000000001,
      "Text": " On the bottom right, you can see I created a application in Automator."
    },
    {
      "Time_Start": 710.3000000000001,
      "Time_End": 719.3800000000001,
      "Text": " This is a screenshot from Automator in which the application is going to open Safari so that the end user is relatively unaware as far as something else is going on."
    },
    {
      "Time_Start": 719.3800000000001,
      "Time_End": 722.1400000000001,
      "Text": " And then it's going to run our app build payload."
    },
    {
      "Time_Start": 722.14,
      "Time_End": 732.54,
      "Text": " The point of this one is to create a application that looks just like Safari, put it into the doc, the user launches it expecting Safari, Safari opens correctly, but then it also launches our persistence payload."
    },
    {
      "Time_Start": 732.54,
      "Time_End": 739.3,
      "Text": " To modify the doc plist though, there's three key fields that we need to modify for this persistence mechanism to work."
    },
    {
      "Time_Start": 739.3,
      "Time_End": 747.58,
      "Text": " The first is the book, which is a Base64 encoded data blob, which contains a path to our created application."
    },
    {
      "Time_Start": 747.58,
      "Time_End": 753.86,
      "Text": " Next is the bundle identifier, which uniquely identifies our app in macOS's ecosystem."
    },
    {
      "Time_Start": 753.86,
      "Time_End": 759.1,
      "Text": " In this case, you can see here it's the com.apple.automator.safari."
    },
    {
      "Time_Start": 759.1,
      "Time_End": 765.34,
      "Text": " Lastly is the core foundations URL string, which is another field that points to our malicious application."
    },
    {
      "Time_Start": 765.34,
      "Time_End": 774.7800000000001,
      "Text": " And in this case, you can see it as the user shared Safari.app where the real Safari application is under slash applications."
    },
    {
      "Time_Start": 774.78,
      "Time_End": 782.86,
      "Text": " So detecting this method, we're going to rely again on file rename events, which are essentially, again, the modification events of this plist file."
    },
    {
      "Time_Start": 782.86,
      "Time_End": 792.9399999999999,
      "Text": " You can see in the example on the right from that, from Crescendo, that osascript is the process that's doing this modification to the plist because we're doing this through an app build payload."
    },
    {
      "Time_Start": 792.9399999999999,
      "Time_End": 794.9399999999999,
      "Text": " But this is not normal execution."
    },
    {
      "Time_Start": 794.94,
      "Time_End": 810.82,
      "Text": " So whenever a user is dragging an application or one is added through the doc, through opening, just through normal operations, the process that's actually performing this, you'll see, is the core foundations preference statement, which is that CFS prep SD."
    },
    {
      "Time_Start": 810.82,
      "Time_End": 820.6600000000001,
      "Text": " So that's normal. So you really want to have a detection that anything that's outside of this that's performing rename events is something that you want to look into."
    },
    {
      "Time_Start": 820.78,
      "Time_End": 822.78,
      "Text": " So another method is finder sync plugins."
    },
    {
      "Time_Start": 822.78,
      "Time_End": 825.3,
      "Text": " So this is a method discovered by Patrick Warnall."
    },
    {
      "Time_Start": 825.3,
      "Time_End": 829.86,
      "Text": " As a reminder, so finder is Mac OS equivalent of Windows File Explorer."
    },
    {
      "Time_Start": 829.86,
      "Time_End": 835.14,
      "Text": " And the intended use of these plugins are really just to extend the functionality to finder."
    },
    {
      "Time_Start": 835.14,
      "Time_End": 841.54,
      "Text": " So to execute this method, it requires the attacker developing a finder application plugin and getting that onto the target."
    },
    {
      "Time_Start": 841.54,
      "Time_End": 845.3399999999999,
      "Text": " You can simply zip it up and then just upload that to the target."
    },
    {
      "Time_Start": 845.3399999999999,
      "Time_End": 849.38,
      "Text": " Xcode also provides a template for creating these plugins."
    },
    {
      "Time_Start": 849.38,
      "Time_End": 853.9399999999999,
      "Text": " So to load our malicious plugin, we need to utilize a constructor."
    },
    {
      "Time_Start": 853.9399999999999,
      "Time_End": 859.38,
      "Text": " So the dynamic loader will automatically invoke our bundles constructor upon loading."
    },
    {
      "Time_Start": 859.38,
      "Time_End": 862.1,
      "Text": " This isn't clear. I have an example on the next slide."
    },
    {
      "Time_Start": 862.1,
      "Time_End": 866.62,
      "Text": " But when plugins are loaded, they're invoked through the plugin kit daemon."
    },
    {
      "Time_Start": 866.62,
      "Time_End": 871.22,
      "Text": " And attackers can use the plugin kit command line tool to register these extensions."
    },
    {
      "Time_Start": 871.22,
      "Time_End": 874.42,
      "Text": " Once performed, the extension will load upon user login."
    },
    {
      "Time_Start": 874.4200000000001,
      "Time_End": 879.3800000000001,
      "Text": " And since finder is invoked on each login, it provides a great persistence mechanism."
    },
    {
      "Time_Start": 879.3800000000001,
      "Time_End": 883.82,
      "Text": " It's also worth noting that the finder sync plugin has to be sandboxed and thus signed."
    },
    {
      "Time_Start": 883.82,
      "Time_End": 887.1,
      "Text": " However, ad hoc signing is sufficient for this."
    },
    {
      "Time_Start": 887.1,
      "Time_End": 892.82,
      "Text": " So here's an example you can see on the left at the top is a excerpt from Xcode."
    },
    {
      "Time_Start": 892.82,
      "Time_End": 901.5400000000001,
      "Text": " So which upon our finder sync will load our constructor, which in this instance executes the message box noting install complete."
    },
    {
      "Time_Start": 901.54,
      "Time_End": 909.26,
      "Text": " And you can see underneath it is a screenshot from system preferences in which I'm just registering within the GUI, the finder extension."
    },
    {
      "Time_Start": 909.26,
      "Time_End": 915.2199999999999,
      "Text": " And then you can see that the install complete box is appearing."
    },
    {
      "Time_Start": 915.2199999999999,
      "Time_End": 916.8199999999999,
      "Text": " So detection of this."
    },
    {
      "Time_Start": 916.8199999999999,
      "Time_End": 923.54,
      "Text": " Since the plugin kit daemon is invoked on registration, that can be used and monitored for detection."
    },
    {
      "Time_Start": 923.54,
      "Time_End": 928.66,
      "Text": " If the adversary uses the command line tool to register the plugin, it'll look something like this."
    },
    {
      "Time_Start": 928.66,
      "Time_End": 942.74,
      "Text": " There'll be the plugin kit, attach a and then some path to whatever their apex file is, as well as the plugin kit techie use and then tech I and then the finder sync bundle ID for the application that they've created."
    },
    {
      "Time_Start": 942.74,
      "Time_End": 946.9,
      "Text": " So both of those can be monitored for detection purposes."
    },
    {
      "Time_Start": 946.9,
      "Time_End": 959.54,
      "Text": " These items can be gathered in ESF through the ES event notify exec events, which are essentially just the process execution events for both the daemon and the command line usage."
    },
    {
      "Time_Start": 959.54,
      "Time_End": 971.66,
      "Text": " And then additionally, we can monitor with those file creation rename events for files shown these last three below that global preferences plist, that container plist, that annotations file."
    },
    {
      "Time_Start": 971.66,
      "Time_End": 984.54,
      "Text": " I noticed through just execution that these get modified and they contain just miscellaneous information in regards to the finder extension being loaded, which can also be leveraged for detection."
    },
    {
      "Time_Start": 984.54,
      "Time_End": 986.18,
      "Text": " So next is application script."
    },
    {
      "Time_Start": 986.18,
      "Time_End": 989.1,
      "Text": " This is was discovered by the evil bit."
    },
    {
      "Time_Start": 989.1,
      "Time_End": 996.86,
      "Text": " So application scripts are simply files that are part of an application bundle that get executed upon the start of an application."
    },
    {
      "Time_Start": 996.86,
      "Time_End": 1008.98,
      "Text": " So if we have right access to one of these scripts, and we can simply just edit them to run our commands to also be launched in combination with the rest of the application startup."
    },
    {
      "Time_Start": 1008.98,
      "Time_End": 1018.86,
      "Text": " This method is, of course, dependent and requires the application installed on the host that has a script that meets our criteria."
    },
    {
      "Time_Start": 1018.86,
      "Time_End": 1019.74,
      "Text": " Here's an example."
    },
    {
      "Time_Start": 1019.74,
      "Time_End": 1030.14,
      "Text": " So the first four commands here, those are simple searches just to see if there's any applicable files, the searching for shell and Python scripts that we have right access to."
    },
    {
      "Time_Start": 1030.14,
      "Time_End": 1037.14,
      "Text": " A common application that is vulnerable to this persistence method that the evil bit found is sublime text editor."
    },
    {
      "Time_Start": 1037.14,
      "Time_End": 1042.3,
      "Text": " You can see that sublime.py file is one that users by default have right access to."
    },
    {
      "Time_Start": 1042.3,
      "Time_End": 1045.18,
      "Text": " So we can simply add the following."
    },
    {
      "Time_Start": 1045.18,
      "Time_End": 1061.98,
      "Text": " You see that through the import OS and then just simply, this is just an example, but just running a NetFlow payload to the end of that script so that once the application is executed, it's going to execute this sublime.py script as well as this command here."
    },
    {
      "Time_Start": 1061.98,
      "Time_End": 1074.14,
      "Text": " So as far as detection, detection of this requires the defender to previously identify vulnerable applications kind of in the environment so they can monitor these specifically for modification."
    },
    {
      "Time_Start": 1074.14,
      "Time_End": 1078.6200000000001,
      "Text": " These scripts are typically not modified unless the entire application is updated."
    },
    {
      "Time_Start": 1078.6200000000001,
      "Time_End": 1083.5800000000002,
      "Text": " We could also look at odd parent-child relationships."
    },
    {
      "Time_Start": 1083.5800000000002,
      "Time_End": 1100.6200000000001,
      "Text": " For example, and in the screenshot you can see, this screenshot is from ChooTree in which OSA script, which is 2212, has a child from sublime text, which is 2208, which is not normal process execution."
    },
    {
      "Time_Start": 1100.6200000000001,
      "Time_End": 1102.46,
      "Text": " So next is third-party plugins."
    },
    {
      "Time_Start": 1102.46,
      "Time_End": 1109.1000000000001,
      "Text": " This is a method by Chris Ross that abuses the fact that some applications allow end users to create plugins."
    },
    {
      "Time_Start": 1109.1000000000001,
      "Time_End": 1115.26,
      "Text": " Most often these plugins load upon application launch, so it provides a great persistence mechanism."
    },
    {
      "Time_Start": 1115.26,
      "Time_End": 1124.78,
      "Text": " So we can abuse this legitimate functionality of creating these applications to load our payloads, an app file payload, for instance."
    },
    {
      "Time_Start": 1124.78,
      "Time_End": 1128.6200000000001,
      "Text": " Here's an example, again, picking on sublime text editor."
    },
    {
      "Time_Start": 1128.7,
      "Time_End": 1134.94,
      "Text": " It has a mechanism that allows us to create plugins and stores them under this package folder."
    },
    {
      "Time_Start": 1134.94,
      "Time_End": 1143.0200000000002,
      "Text": " Sublime text editor also has an ability to give us pretty much a template for a plugin in Python, which you can kind of see here in the screenshot."
    },
    {
      "Time_Start": 1143.0200000000002,
      "Time_End": 1146.14,
      "Text": " That's those first few lines that have the hello world."
    },
    {
      "Time_Start": 1146.14,
      "Time_End": 1151.66,
      "Text": " And we can simply just modify this template to load our malicious dialib, which is our app file payload."
    },
    {
      "Time_Start": 1151.66,
      "Time_End": 1161.5,
      "Text": " So you see here, first we load the libsystem-b.dialib, which is dependent for our malicious dialib to be loaded."
    },
    {
      "Time_Start": 1161.5,
      "Time_End": 1171.5,
      "Text": " And then we load, you can see that under user shared, the doomfist.dialib, which is one that once loaded is going to run an app file agent to mythic."
    },
    {
      "Time_Start": 1171.5,
      "Time_End": 1179.18,
      "Text": " So if our malicious plugin is placed into that package directory and is formatted to load a malicious dialib,"
    },
    {
      "Time_Start": 1179.18,
      "Time_End": 1193.26,
      "Text": " then sublime will execute our code upon application start by the user in the context of sublime plugin host, which you'll see noted here on the next slide."
    },
    {
      "Time_Start": 1193.26,
      "Time_End": 1200.94,
      "Text": " So detection. So this detection is specific to sublime text editor, but the principles apply to all other applicable applications."
    },
    {
      "Time_Start": 1200.94,
      "Time_End": 1207.18,
      "Text": " First, we can look at file creation and rename events, those modification events under the packages folder."
    },
    {
      "Time_Start": 1207.18,
      "Time_End": 1214.3,
      "Text": " However, this may not scale well due to the legitimate use by end users of installing and creating plugins."
    },
    {
      "Time_Start": 1214.3,
      "Time_End": 1221.5800000000002,
      "Text": " Another item is the network connection of the plugin host process, which I mentioned previously, which is what we're running in the context of."
    },
    {
      "Time_Start": 1221.5800000000002,
      "Time_End": 1230.54,
      "Text": " So typically, this plugin host only connects to package control.io to pull a legitimate sublime text packages."
    },
    {
      "Time_Start": 1230.54,
      "Time_End": 1241.82,
      "Text": " So you can see in our example, the first screenshot at the top here is one from TrueTree, which shows that our payload is running in 6.6.1, that plugin host."
    },
    {
      "Time_Start": 1241.82,
      "Time_End": 1252.78,
      "Text": " And then the one underneath that is from Venator, which shows the HTTP connection to my mythic C2 server and not package control.io."
    },
    {
      "Time_Start": 1252.78,
      "Time_End": 1261.26,
      "Text": " So again, ESF, I mentioned previously, is not great at network flows and detections. So that's why in the example, I use TrueTree and Venator."
    },
    {
      "Time_Start": 1261.26,
      "Time_End": 1271.8999999999999,
      "Text": " So automating persistence, I created a project that uses a JXA, JavaScript for Automation, to achieve persistence of all the methods that I've discussed in this talk."
    },
    {
      "Time_Start": 1271.8999999999999,
      "Time_End": 1279.26,
      "Text": " They all hook into the AppVal agent for mythic. First, you import the applicable script through JS import."
    },
    {
      "Time_Start": 1279.26,
      "Time_End": 1285.34,
      "Text": " And then you call the functions in the AppVal agent through the JS import call."
    },
    {
      "Time_Start": 1285.34,
      "Time_End": 1293.98,
      "Text": " So next is a demo of automated persistence, specifically for third party plugins, and then for a sublime text editor."
    },
    {
      "Time_Start": 1293.98,
      "Time_End": 1297.5,
      "Text": " So this persistence method is focused on sublime text plugins."
    },
    {
      "Time_Start": 1297.5,
      "Time_End": 1304.06,
      "Text": " There's actions that you perform on the target and actions that you will perform on the attacker machine."
    },
    {
      "Time_Start": 1304.06,
      "Time_End": 1310.22,
      "Text": " And since it's using one VM, make that distinction just through folder names."
    },
    {
      "Time_Start": 1310.22,
      "Time_End": 1315.74,
      "Text": " So you can see we're working out of the attack machine directory."
    },
    {
      "Time_Start": 1315.82,
      "Time_End": 1328.06,
      "Text": " And the first thing we're going to do is pull down Chris Ross's macOS tools, because we're going to be creating a dialib that we're going to have sublime text plugins run."
    },
    {
      "Time_Start": 1328.06,
      "Time_End": 1332.7,
      "Text": " And that's going to have our AppVal payload and get our callback."
    },
    {
      "Time_Start": 1332.7,
      "Time_End": 1340.14,
      "Text": " Pull down the macOS tools, and then specifically within those with the script runners is the JXA dialib."
    },
    {
      "Time_Start": 1340.14,
      "Time_End": 1345.82,
      "Text": " It's going to convert our AppVal payload into a dynamic dialib."
    },
    {
      "Time_Start": 1345.82,
      "Time_End": 1348.94,
      "Text": " And these are the Objective-C files within that project."
    },
    {
      "Time_Start": 1348.94,
      "Time_End": 1353.02,
      "Text": " And the main one that we're going to have to edit is the JS runner."
    },
    {
      "Time_Start": 1353.02,
      "Time_End": 1361.5800000000002,
      "Text": " Funny enough, it's easier to edit this within sublime text editor rather than Xcode due to memory constraints."
    },
    {
      "Time_Start": 1361.58,
      "Time_End": 1367.34,
      "Text": " And you'll see there's that Base64 encoded AppVal payload placeholder there."
    },
    {
      "Time_Start": 1367.34,
      "Time_End": 1375.02,
      "Text": " And we already have our AppVal payload on target that we've generated through Mythic."
    },
    {
      "Time_Start": 1375.02,
      "Time_End": 1387.5,
      "Text": " So now I just need to pipe that to Base64, and then also have it piped to pbcopy just so I can get into my clipboard easier."
    },
    {
      "Time_Start": 1387.5,
      "Time_End": 1397.42,
      "Text": " And then I replace the placeholder, save it, close the runner, close sublime text editor."
    },
    {
      "Time_Start": 1397.42,
      "Time_End": 1403.18,
      "Text": " Since we're going to run that for our persistence mechanism, it's going to be completely out of that."
    },
    {
      "Time_Start": 1403.18,
      "Time_End": 1413.5,
      "Text": " Now we see to that JXA dialib folder, and we're going to compile the runner and compile this dialib."
    },
    {
      "Time_Start": 1413.5,
      "Time_End": 1419.9,
      "Text": " So you can see using G++ and creating a dynamic dialib, it's going to be called doomfist.dialib."
    },
    {
      "Time_Start": 1419.9,
      "Time_End": 1433.18,
      "Text": " And leveraging the foundation and the OSA kit frameworks that are required as noted in the plugin and JS runner Objective-C files."
    },
    {
      "Time_Start": 1433.18,
      "Time_End": 1437.42,
      "Text": " So now that we have our malicious dialib, now we have our initial access point."
    },
    {
      "Time_Start": 1437.42,
      "Time_End": 1439.42,
      "Text": " We're going to upload this to the target."
    },
    {
      "Time_Start": 1455.18,
      "Time_End": 1464.22,
      "Text": " You can see I uploaded to that target directory, and it's successfully written."
    },
    {
      "Time_Start": 1464.22,
      "Time_End": 1473.82,
      "Text": " So now that we have our dialib on the target, the next is importing the sublime text persistence script from my persistent JXA project."
    },
    {
      "Time_Start": 1477.26,
      "Time_End": 1479.58,
      "Text": " And that's successfully imported."
    },
    {
      "Time_Start": 1479.58,
      "Time_End": 1491.26,
      "Text": " So now we're going to call the sublime text persistence function and specify the malicious dialib that we created."
    },
    {
      "Time_Start": 1492.22,
      "Time_End": 1501.66,
      "Text": " And this is going to create a new plugin called pretty text that once the target opens up sublime text editor, it's going to run this plugin."
    },
    {
      "Time_Start": 1501.66,
      "Time_End": 1505.34,
      "Text": " So back on our target, we open up sublime text editor."
    },
    {
      "Time_Start": 1505.34,
      "Time_End": 1513.66,
      "Text": " The target is just doing their normal operations through there, and then we get our callback."
    },
    {
      "Time_Start": 1513.66,
      "Time_End": 1517.58,
      "Text": " And you can see within the description field, we have the plugin persistence."
    },
    {
      "Time_Start": 1517.74,
      "Time_End": 1519.82,
      "Text": " So it's under the PID 836."
    },
    {
      "Time_Start": 1521.34,
      "Time_End": 1528.46,
      "Text": " So if we go to that callback and we do a list apps, it's going to list the running applications on the target."
    },
    {
      "Time_Start": 1530.86,
      "Time_End": 1535.74,
      "Text": " And you can see that under 835 is sublime text."
    },
    {
      "Time_Start": 1536.78,
      "Time_End": 1539.98,
      "Text": " However, our PID is 836."
    },
    {
      "Time_Start": 1539.98,
      "Time_End": 1543.58,
      "Text": " So to see specifically the process that we're running in,"
    },
    {
      "Time_Start": 1543.58,
      "Time_End": 1549.02,
      "Text": " we're just going to do a shell command and then list all the running processes."
    },
    {
      "Time_Start": 1557.26,
      "Time_End": 1565.26,
      "Text": " And you can see under 836 is that plugin host, specified 835, so the parent of sublime text."
    },
    {
      "Time_Start": 1565.26,
      "Time_End": 1570.1399999999999,
      "Text": " But we're running in that plugin host offset from sublime text editor."
    },
    {
      "Time_Start": 1574.54,
      "Time_End": 1578.46,
      "Text": " There's other techniques that I didn't cover in this talk, but I feel you should be aware of."
    },
    {
      "Time_Start": 1578.46,
      "Time_End": 1581.02,
      "Text": " Again, there's the agent's launch statements, which I mentioned,"
    },
    {
      "Time_Start": 1581.02,
      "Time_End": 1585.26,
      "Text": " which again are equivalent essentially for the Windows side of the house, the startup folders."
    },
    {
      "Time_Start": 1585.8999999999999,
      "Time_End": 1589.98,
      "Text": " There's login items, which are actions that run on login."
    },
    {
      "Time_Start": 1590.6999999999998,
      "Time_End": 1595.1,
      "Text": " Folder actions, which are commands that run based on various folder interactions,"
    },
    {
      "Time_Start": 1595.1,
      "Time_End": 1597.8999999999999,
      "Text": " or like opening items being removed in those folders."
    },
    {
      "Time_Start": 1598.46,
      "Time_End": 1602.78,
      "Text": " Dial-up hijacking, which is similar to DLL hijacking on Windows."
    },
    {
      "Time_Start": 1603.5,
      "Time_End": 1607.42,
      "Text": " There's Emon persistence, which abuses the event monitor"
    },
    {
      "Time_Start": 1607.42,
      "Time_End": 1610.22,
      "Text": " and runs based on certain event criteria."
    },
    {
      "Time_Start": 1610.22,
      "Time_End": 1615.5,
      "Text": " There's Periodics and Atjobs, which works similar to Cronjobs, you can think of it."
    },
    {
      "Time_Start": 1615.5,
      "Time_End": 1621.18,
      "Text": " There's also Chrome extensions from Chris Ross, which can also be leveraged for initial access."
    },
    {
      "Time_Start": 1621.98,
      "Time_End": 1625.5,
      "Text": " There's other macOS plugins, including Spotlight."
    },
    {
      "Time_Start": 1625.5,
      "Time_End": 1629.02,
      "Text": " That's that magnifying glass, that search function on macOS."
    },
    {
      "Time_Start": 1629.02,
      "Time_End": 1630.86,
      "Text": " You can use audio plugins."
    },
    {
      "Time_Start": 1631.5800000000002,
      "Time_End": 1636.22,
      "Text": " There's also login logout hooks, which run on user login and logout."
    },
    {
      "Time_Start": 1636.22,
      "Time_End": 1642.7,
      "Text": " Also, there's calendar events, which run commands based on meeting reminders on the calendar."
    },
    {
      "Time_Start": 1643.5000000000002,
      "Time_End": 1650.0600000000002,
      "Text": " So, I hope all this identifies all the options available to us on macOS for persistence,"
    },
    {
      "Time_Start": 1650.0600000000002,
      "Time_End": 1652.6200000000001,
      "Text": " outside of just the standard launch agents and launch statements."
    },
    {
      "Time_Start": 1655.66,
      "Time_End": 1659.66,
      "Text": " So, you can reach out to me on Twitter, but I'll also be answering items in chat."
    },
    {
      "Time_Start": 1660.22,
      "Time_End": 1663.8200000000002,
      "Text": " I'll also include additional references to the tools that I used in this talk"
    },
    {
      "Time_Start": 1663.8200000000002,
      "Time_End": 1668.14,
      "Text": " in the references section, as well as links to blog posts discussing"
    },
    {
      "Time_Start": 1668.14,
      "Time_End": 1670.0600000000002,
      "Text": " all the methods that are covered specifically in the talk,"
    },
    {
      "Time_Start": 1670.0600000000002,
      "Time_End": 1674.0600000000002,
      "Text": " and then the last of those additional persistence methods that I just went over as well,"
    },
    {
      "Time_Start": 1674.0600000000002,
      "Time_End": 1677.42,
      "Text": " if you just want some additional information on how to perform those."
    }
  ]
}