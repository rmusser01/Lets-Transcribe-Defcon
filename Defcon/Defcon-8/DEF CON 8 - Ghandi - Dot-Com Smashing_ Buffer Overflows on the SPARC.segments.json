{"segments": [{"Time_Start": 0.0, "Time_End": 13.88, "Text": " Obviously, it's going to be on buffer overflows on the spark."}, {"Time_Start": 14.32, "Time_End": 18.740000000000002, "Text": " You were just treated to a great talk on, basically, advanced techniques you can do."}, {"Time_Start": 18.82, "Time_End": 24.32, "Text": " I'm going to try and focus on this on doing overflows on other architectures, most notably the spark."}, {"Time_Start": 25.92, "Time_End": 29.16, "Text": " The spark, for those who are unfamiliar, or probably have just heard of them,"}, {"Time_Start": 30.0, "Time_End": 32.68, "Text": " Oh, well, this is what I'm going to talk about."}, {"Time_Start": 33.12, "Time_End": 34.44, "Text": " Sorry, I'm getting out of order."}, {"Time_Start": 34.980000000000004, "Time_End": 37.72, "Text": " I do a crash course on the Spark and Spark Assembly."}, {"Time_Start": 38.76, "Time_End": 43.120000000000005, "Text": " Just because I'm going to focus a lot on writing the shell code or the payload"}, {"Time_Start": 43.120000000000005, "Time_End": 47.96, "Text": " because that's what differs the most between Intel and the Spark."}, {"Time_Start": 47.96, "Time_End": 52.400000000000006, "Text": " And a lot of the techniques that was sort of talked about"}, {"Time_Start": 52.400000000000006, "Time_End": 55.42, "Text": " about how to deliver the shell code equally applies here."}, {"Time_Start": 55.94, "Time_End": 58.42, "Text": " There are some little nuances that will make it different,"}, {"Time_Start": 58.42, "Time_End": 61.4, "Text": " but as a general conceptual overview, it's the same."}, {"Time_Start": 62.96, "Time_End": 68.04, "Text": " The stack is much funkier on the spark, and I'll make sure I cover that."}, {"Time_Start": 68.44, "Time_End": 72.46000000000001, "Text": " I'll cover some of the tools that I'm using to develop the shell code and as examples."}, {"Time_Start": 72.9, "Time_End": 76.34, "Text": " I'll be doing everything on a Solaris box, this one right here,"}, {"Time_Start": 76.7, "Time_End": 79.92, "Text": " and Solaris is so nice to come with a wonderful debugger."}, {"Time_Start": 80.34, "Time_End": 84.26, "Text": " ADB is called the Absolute Debugger, is an assembly language level debugger."}, {"Time_Start": 84.6, "Time_End": 88.4, "Text": " So you can step through, look at the registers, look at, you know, patchbox,"}, {"Time_Start": 88.42, "Time_End": 93.42, "Text": " binaries, you can patch values in memory, and do things a lot easier than you can with GDB."}, {"Time_Start": 94.62, "Time_End": 98.42, "Text": " And that will speak up, as everyone is motioning towards me to do."}, {"Time_Start": 98.42, "Time_End": 106.42, "Text": " Then I'll discuss exactly what happens on an overflow, and start discussing shell code and some methods of delivery."}, {"Time_Start": 106.42, "Time_End": 109.42, "Text": " And I'll be giving some examples too, because I like doing that."}, {"Time_Start": 109.42, "Time_End": 111.42, "Text": " Okay, the Spark."}, {"Time_Start": 111.42, "Time_End": 116.42, "Text": " Stand for scalable processor architecture created by Sun."}, {"Time_Start": 116.42, "Time_End": 117.42, "Text": " The early 80s was based on the risk design."}, {"Time_Start": 117.42, "Time_End": 120.04, "Text": " based on the risk designs out of UC Berkeley."}, {"Time_Start": 120.04, "Time_End": 122.3, "Text": " And basically the whole philosophy was take it,"}, {"Time_Start": 122.3, "Time_End": 125.54, "Text": " make the chip as simple as possible, so it's blazing fast."}, {"Time_Start": 125.54, "Time_End": 128.98, "Text": " And part of what this, this is, is the 30-2-bit wide path."}, {"Time_Start": 128.98, "Time_End": 133.26, "Text": " Everything is spark is really pretty because every instruction is 30-2 bits wide."}, {"Time_Start": 133.26, "Time_End": 135.12, "Text": " You, your shell code is nice and square."}, {"Time_Start": 135.12, "Time_End": 136.18, "Text": " It's really fun."}, {"Time_Start": 136.18, "Time_End": 141.96, "Text": " It makes things just typically easier for calculating the size of your shell code"}, {"Time_Start": 141.96, "Time_End": 144.72, "Text": " and calculating jump addresses and stuff like that."}, {"Time_Start": 144.72, "Time_End": 147.4, "Text": " It's a pipeline of architecture, which we'll, you know,"}, {"Time_Start": 147.42000000000002, "Time_End": 150.92000000000002, "Text": " I just had to mention because it will get you in some places."}, {"Time_Start": 150.92000000000002, "Time_End": 156.02, "Text": " Every clock cycle, it basically executes one and a half-ish instructions,"}, {"Time_Start": 156.02, "Time_End": 157.72000000000003, "Text": " where it basically prepares the second instructions."}, {"Time_Start": 157.72000000000003, "Time_End": 160.62, "Text": " So you have to watch out when you're branching that, when you branch,"}, {"Time_Start": 160.62, "Time_End": 166.22000000000003, "Text": " jump to the location in code, you will execute the statement after the branch."}, {"Time_Start": 166.22000000000003, "Time_End": 169.72000000000003, "Text": " So just keep that in mind when you're writing your stuff."}, {"Time_Start": 169.72000000000003, "Time_End": 173.12, "Text": " Part of the other things to speed this up is a load store architecture."}, {"Time_Start": 173.12, "Time_End": 177.22000000000003, "Text": " All logical and arithmetic instructions only operate on the registers."}, {"Time_Start": 177.22, "Time_End": 179.96, "Text": " You can't just increment something in memory"}, {"Time_Start": 179.96, "Time_End": 183.46, "Text": " because that would involve making the chip smarter and slower."}, {"Time_Start": 183.46, "Time_End": 186.54, "Text": " So, and the one thing unique to the spark"}, {"Time_Start": 186.54, "Time_End": 188.9, "Text": " is this wacky invention called register windows,"}, {"Time_Start": 188.9, "Time_End": 193.34, "Text": " which I will cover in great depth because it's kind of crazy."}, {"Time_Start": 195.18, "Time_End": 197.78, "Text": " Memory access, basically, it's relatively simple."}, {"Time_Start": 197.78, "Time_End": 200.34, "Text": " The only instructions that can access memory are load and store"}, {"Time_Start": 200.34, "Time_End": 203.54, "Text": " and that whole family of instructions, load by by half,"}, {"Time_Start": 203.54, "Time_End": 206.9, "Text": " by a half word, so on, so on."}, {"Time_Start": 206.9, "Time_End": 208.84, "Text": " And all memory access is register indirect,"}, {"Time_Start": 208.84, "Time_End": 212.68, "Text": " meaning that you have to write something"}, {"Time_Start": 212.68, "Time_End": 215.4, "Text": " in the value contained in a register,"}, {"Time_Start": 215.4, "Time_End": 218.16, "Text": " whereas each register acts like a pointer, basically,"}, {"Time_Start": 218.16, "Time_End": 220.04000000000002, "Text": " as they wouldn't see."}, {"Time_Start": 220.04000000000002, "Time_End": 223.38, "Text": " So it's, you know, this chip was actually written"}, {"Time_Start": 223.38, "Time_End": 227.70000000000002, "Text": " for C compilers, so it does, if you think and see you,"}, {"Time_Start": 227.70000000000002, "Time_End": 229.08, "Text": " the spark will be very nice to you."}, {"Time_Start": 231.12, "Time_End": 233.38, "Text": " Yeah, all instructions are one word, very nice."}, {"Time_Start": 234.52, "Time_End": 236.88, "Text": " The registers, risk chips always have tons"}, {"Time_Start": 236.9, "Time_End": 239.9, "Text": " of registers, which make things really easy."}, {"Time_Start": 239.9, "Time_End": 244.9, "Text": " At each given point in time, you have access to 32 registers."}, {"Time_Start": 244.9, "Time_End": 246.9, "Text": " The chip may actually have more registers than that,"}, {"Time_Start": 246.9, "Time_End": 248.9, "Text": " more general purpose energy registers,"}, {"Time_Start": 248.9, "Time_End": 252.9, "Text": " but you can only see of 32 of them at a time because of the register windows,"}, {"Time_Start": 252.9, "Time_End": 253.9, "Text": " which I'll talk about."}, {"Time_Start": 253.9, "Time_End": 256.9, "Text": " You always have the global registers, you have eight of them,"}, {"Time_Start": 256.9, "Time_End": 259.9, "Text": " that are accessible across every function."}, {"Time_Start": 259.9, "Time_End": 263.9, "Text": " You have the output registers, which you load up the arguments"}, {"Time_Start": 263.9, "Time_End": 265.9, "Text": " to a function to be calling."}, {"Time_Start": 265.9, "Time_End": 266.9, "Text": " You have the local register."}, {"Time_Start": 266.9, "Time_End": 268.9, "Text": " which are local to your subroutine,"}, {"Time_Start": 268.9, "Time_End": 272.9, "Text": " the inputs, which are your callers output registers."}, {"Time_Start": 272.9, "Time_End": 278.9, "Text": " Things to note, the output register six is the stack pointer."}, {"Time_Start": 278.9, "Time_End": 284.9, "Text": " That points to the bottom of your stack, bottom being the lowest memory address."}, {"Time_Start": 284.9, "Time_End": 287.9, "Text": " The input six is the frame pointer,"}, {"Time_Start": 287.9, "Time_End": 290.9, "Text": " which is your callers stack pointer,"}, {"Time_Start": 290.9, "Time_End": 295.9, "Text": " and also it points to the top of your stack space."}, {"Time_Start": 295.90000000000003, "Time_End": 296.90000000000003, "Text": " stack space."}, {"Time_Start": 296.90000000000003, "Time_End": 304.90000000000003, "Text": " How registered windows work is it's a circular stack of 16 registers,"}, {"Time_Start": 304.90000000000003, "Time_End": 308.90000000000003, "Text": " the inputs and or the outputs in the local, which are rotated among functions,"}, {"Time_Start": 308.90000000000003, "Time_End": 312.90000000000003, "Text": " so you don't have to worry about pushing arguments onto the stack or so on,"}, {"Time_Start": 312.90000000000003, "Time_End": 316.90000000000003, "Text": " and to speed up function calls because it was written for C,"}, {"Time_Start": 316.90000000000003, "Time_End": 319.90000000000003, "Text": " and that's what you do all the time."}, {"Time_Start": 319.90000000000003, "Time_End": 325.90000000000003, "Text": " The call is output registers, become the input registers in the next function, and these are all"}, {"Time_Start": 325.90000000000003, "Time_End": 327.90000000000003, "Text": " handled by the save and restore instructions."}, {"Time_Start": 327.90000000000003, "Time_End": 330.90000000000003, "Text": " The save and ensure instructions allocate your new register set,"}, {"Time_Start": 330.90000000000003, "Time_End": 334.90000000000003, "Text": " and they also allocate the stack on the space, or the space on the stack,"}, {"Time_Start": 334.90000000000003, "Time_End": 339.90000000000003, "Text": " which we will, we have to get the subroutine calling conventions."}, {"Time_Start": 339.90000000000003, "Time_End": 342.90000000000003, "Text": " Basically, the call subroutine, very simple."}, {"Time_Start": 342.90000000000003, "Time_End": 344.90000000000003, "Text": " You just place the arguments in the output registers,"}, {"Time_Start": 344.90000000000003, "Time_End": 348.90000000000003, "Text": " use the call instruction to actually jump to the location of memory,"}, {"Time_Start": 348.90000000000003, "Time_End": 350.90000000000003, "Text": " continue to code for the function."}, {"Time_Start": 350.90000000000003, "Time_End": 354.90000000000003, "Text": " The callee uses the save instruction to allocate a register window,"}, {"Time_Start": 354.90000000000003, "Time_End": 358.90000000000003, "Text": " window and it will also allocate their stack frame."}, {"Time_Start": 358.90000000000003, "Time_End": 363.90000000000003, "Text": " And with that, they calculate the minimum space they need for the stack"}, {"Time_Start": 363.90000000000003, "Time_End": 369.90000000000003, "Text": " in addition to anything they need for local variables, as all allocated in one instruction."}, {"Time_Start": 369.90000000000003, "Time_End": 375.90000000000003, "Text": " Interesting thing to note is that when you are allocating space on the stack for the register window,"}, {"Time_Start": 375.90000000000003, "Time_End": 377.90000000000003, "Text": " they're not actually written there."}, {"Time_Start": 377.90000000000003, "Time_End": 383.40000000000003, "Text": " They're only written there when the system runs out of register windows, and when that happens,"}, {"Time_Start": 383.40000000000003, "Time_End": 386.40000000000003, "Text": " a trap is called that signals the operating system"}, {"Time_Start": 386.40000000000003, "Time_End": 391.40000000000003, "Text": " that it needs to flush some of these registers out to the memory stack."}, {"Time_Start": 391.40000000000003, "Time_End": 393.40000000000003, "Text": " And so basically what you're doing is you're saying,"}, {"Time_Start": 393.40000000000003, "Time_End": 395.40000000000003, "Text": " when you need to dump them, dump them here."}, {"Time_Start": 395.40000000000003, "Time_End": 398.40000000000003, "Text": " So you're not actually guaranteed to have them written there,"}, {"Time_Start": 398.40000000000003, "Time_End": 402.40000000000003, "Text": " which is kind of difficult because the point of overflowing the buffer"}, {"Time_Start": 402.40000000000003, "Time_End": 404.40000000000003, "Text": " is to overwrite the return address."}, {"Time_Start": 404.40000000000003, "Time_End": 406.40000000000003, "Text": " But if the return address is in a register,"}, {"Time_Start": 406.40000000000003, "Time_End": 408.40000000000003, "Text": " you have complications."}, {"Time_Start": 408.40000000000003, "Time_End": 412.40000000000003, "Text": " And, you know, the callee does its thing."}, {"Time_Start": 412.40000000000003, "Time_End": 413.40000000000003, "Text": " And at the end,"}, {"Time_Start": 413.40000000000003, "Time_End": 424.40000000000003, "Text": " And it does a RET, which is returned to the caller, which just basically jumps to the value stored in the input 7 register plus 8,"}, {"Time_Start": 424.40000000000003, "Time_End": 429.40000000000003, "Text": " because the 8 is added because of the register, the branch delay slot that, you know, when it's called,"}, {"Time_Start": 429.40000000000003, "Time_End": 435.40000000000003, "Text": " it executes that instruction and the next instruction, so it has to go 8 back."}, {"Time_Start": 435.40000000000003, "Time_End": 443.38000000000005, "Text": " Simple example, we have our main, just will call the function FU, and we'll set the operator"}, {"Time_Start": 443.40000000000003, "Time_End": 448.40000000000003, "Text": " to dead beef. This is executed because it is in the branch delay slot."}, {"Time_Start": 448.40000000000003, "Time_End": 452.40000000000003, "Text": " Transfer control transfers over to Foo, which saves."}, {"Time_Start": 452.40000000000003, "Time_End": 455.40000000000003, "Text": " The save instruction is interesting because the first argument,"}, {"Time_Start": 455.40000000000003, "Time_End": 461.40000000000003, "Text": " oh, one thing to note about Spark Assembly is the destination is always on the right."}, {"Time_Start": 461.40000000000003, "Time_End": 467.40000000000003, "Text": " So it was save starting at the original stack pointer and deciment the stack pointer"}, {"Time_Start": 467.40000000000003, "Time_End": 472.40000000000003, "Text": " by 96 bytes, which is the minimum stack frame needed to dump the registers,"}, {"Time_Start": 472.40000000000003, "Time_End": 476.40000000000003, "Text": " and store that value as the new stack pointer."}, {"Time_Start": 476.40000000000003, "Time_End": 479.40000000000003, "Text": " And in between those is when the register window is rotated."}, {"Time_Start": 479.40000000000003, "Time_End": 486.40000000000003, "Text": " So the value of the stack pointer the first operand is now in the frame pointer register."}, {"Time_Start": 486.40000000000003, "Time_End": 494.40000000000003, "Text": " Then it just loads the value stored at the memory address,"}, {"Time_Start": 494.40000000000003, "Time_End": 501.40000000000003, "Text": " stored in register input zero, and puts that value in register local zero, adds 42 to it storing the result,"}, {"Time_Start": 501.40000000000003, "Time_End": 507.40000000000003, "Text": " the result in register local one and similarly stores the result back in dead beef."}, {"Time_Start": 507.40000000000003, "Time_End": 512.4000000000001, "Text": " Then it returns and returns is transfer the control back and because the rent's delay slot,"}, {"Time_Start": 512.4000000000001, "Time_End": 516.4000000000001, "Text": " the restore flips the register window back and deallocates the stack."}, {"Time_Start": 516.4000000000001, "Time_End": 521.4000000000001, "Text": " So when transfer is controlled back, the caller thinks the world is right again."}, {"Time_Start": 521.4000000000001, "Time_End": 524.4000000000001, "Text": " I want to define traps for you."}, {"Time_Start": 524.4000000000001, "Time_End": 529.4000000000001, "Text": " These are typically called interrupts in other operating systems and architectures."}, {"Time_Start": 529.4000000000001, "Time_End": 531.38, "Text": " There are transfers of control to supervise"}, {"Time_Start": 531.4, "Time_End": 536.4, "Text": " software, meaning to request from the application or from other supervisor code"}, {"Time_Start": 536.4, "Time_End": 541.4, "Text": " or from the actual hardware for the operating system to get up and do something."}, {"Time_Start": 541.4, "Time_End": 550.4, "Text": " These are handled to, for window overflow and underflow conditions,"}, {"Time_Start": 550.4, "Time_End": 554.4, "Text": " where they have to, the operating system has to dump them to the memory stack or restore them."}, {"Time_Start": 554.4, "Time_End": 556.4, "Text": " The question is, why do we care?"}, {"Time_Start": 556.4, "Time_End": 558.4, "Text": " System calls."}, {"Time_Start": 558.4, "Time_End": 560.4, "Text": " If you're familiar with Unix kernels, they are all built."}, {"Time_Start": 560.4, "Time_End": 565.4, "Text": " kernels, they are all based upon having tons of system calls that will do everything for you."}, {"Time_Start": 565.4, "Time_End": 572.4, "Text": " These are all in the man section, the manual pages, section 2, open, close,"}, {"Time_Start": 572.4, "Time_End": 575.4, "Text": " exec, fork, all these fun things are all there for you."}, {"Time_Start": 575.4, "Time_End": 582.4, "Text": " To make a system call, all you do is look up in syscall.h, the system call number of the system call you want to execute,"}, {"Time_Start": 582.4, "Time_End": 586.4, "Text": " throw that in Global One, and execute trap 8."}, {"Time_Start": 586.4, "Time_End": 589.4, "Text": " Simple example here."}, {"Time_Start": 589.4, "Time_End": 596.4, "Text": " We are going to set the output register to zero because global zero is basically the dev null register."}, {"Time_Start": 596.4, "Time_End": 598.4, "Text": " It's hard-coded zero."}, {"Time_Start": 598.4, "Time_End": 601.4, "Text": " 23 is the index of the set UID system call."}, {"Time_Start": 601.4, "Time_End": 604.4, "Text": " Move that to Global One, do the trap."}, {"Time_Start": 604.4, "Time_End": 610.4, "Text": " Notice there is no branch delay slot after a trap."}, {"Time_Start": 610.4, "Time_End": 613.4, "Text": " It's only on branches and calls."}, {"Time_Start": 613.4, "Time_End": 618.4, "Text": " Now just execute set UID zero, which we'll see why we need to do that soon."}, {"Time_Start": 618.4, "Time_End": 620.4, "Text": " soon. The stack."}, {"Time_Start": 620.4, "Time_End": 624.4, "Text": " Like other architectures, the stack goes downward,"}, {"Time_Start": 624.4, "Time_End": 628.4, "Text": " and it reserves the space for the window in case of overflow or underflow."}, {"Time_Start": 628.4, "Time_End": 635.4, "Text": " And basically, in a well-behaved convention obeying functions,"}, {"Time_Start": 635.4, "Time_End": 641.4, "Text": " all automatic variables are referenced by negative offsets from the frame pointer,"}, {"Time_Start": 641.4, "Time_End": 645.4, "Text": " because as my little art in the next slide will show you,"}, {"Time_Start": 645.4, "Time_End": 648.4, "Text": " the first part of the stack and the higher memory address is,"}, {"Time_Start": 648.4, "Time_End": 651.4, "Text": " space, if any, for automatic variables."}, {"Time_Start": 651.4, "Time_End": 653.4, "Text": " So you just index them that way."}, {"Time_Start": 653.4, "Time_End": 657.4, "Text": " And then the bottom of the stack is stuff for the register."}, {"Time_Start": 657.4, "Time_End": 660.4, "Text": " But you actually really don't need to reference those"}, {"Time_Start": 660.4, "Time_End": 662.4, "Text": " because nothing is guaranteed to be there."}, {"Time_Start": 662.4, "Time_End": 664.4, "Text": " So how would you want to do that?"}, {"Time_Start": 664.4, "Time_End": 668.4, "Text": " And here's a, obviously a struck representation"}, {"Time_Start": 668.4, "Time_End": 670.4, "Text": " of the minimum stack frame."}, {"Time_Start": 670.4, "Time_End": 672.4, "Text": " And they do some interesting stuff here."}, {"Time_Start": 672.4, "Time_End": 677.4, "Text": " You have eight words allotted for the local"}, {"Time_Start": 677.4, "Time_End": 681.4, "Text": " local registers, eight, and then you have six for the input registers."}, {"Time_Start": 681.4, "Time_End": 684.4, "Text": " And notice these two are also the input registers."}, {"Time_Start": 684.4, "Time_End": 690.4, "Text": " We have the frame pointer and the saved program counter,"}, {"Time_Start": 690.4, "Time_End": 692.4, "Text": " which is where we'll be jumping back to."}, {"Time_Start": 692.4, "Time_End": 696.4, "Text": " So basically you have eight locals, and those next three lines form the eight inputs."}, {"Time_Start": 696.4, "Time_End": 700.4, "Text": " Which means you can only pass six arguments"}, {"Time_Start": 700.4, "Time_End": 704.4, "Text": " through the registers to a function."}, {"Time_Start": 704.4, "Time_End": 706.4, "Text": " Then we have the structure return address."}, {"Time_Start": 706.4, "Time_End": 709.4, "Text": " structure return address for return and compound values."}, {"Time_Start": 709.4, "Time_End": 712.4, "Text": " They decide to throw that in there for fun."}, {"Time_Start": 712.4, "Time_End": 715.4, "Text": " So you could store a pointer on the stack instead of putting in a register."}, {"Time_Start": 715.4, "Time_End": 716.4, "Text": " I'm not sure why."}, {"Time_Start": 716.4, "Time_End": 719.4, "Text": " And then we have the argument dump area,"}, {"Time_Start": 719.4, "Time_End": 724.4, "Text": " which is so that the function being called, if it so chooses,"}, {"Time_Start": 724.4, "Time_End": 730.4, "Text": " can dump its arguments that it got on its input registers onto its stack."}, {"Time_Start": 730.4, "Time_End": 732.4, "Text": " Okay."}, {"Time_Start": 732.4, "Time_End": 735.4, "Text": " If you need more registers, you can do that and get them all."}, {"Time_Start": 735.4, "Time_End": 736.4, "Text": " And then we have the ARGX."}, {"Time_Start": 736.4, "Time_End": 743.4, "Text": " area. This is the argument extension. For more than six arguments to a function,"}, {"Time_Start": 743.4, "Time_End": 750.4, "Text": " this stack, this space just kind of grows as far as needed to place the arguments there."}, {"Time_Start": 750.4, "Time_End": 755.4, "Text": " This is allotted with the callers save instruction."}, {"Time_Start": 755.4, "Time_End": 760.4, "Text": " You put those in there. They load them in. The function will know to reference them"}, {"Time_Start": 760.4, "Time_End": 765.4, "Text": " as negative to the frame pointer as yes."}, {"Time_Start": 765.4, "Time_End": 769.9, "Text": " And that's how that works. We won't really be using that."}, {"Time_Start": 769.9, "Time_End": 772.4, "Text": " But here's a nice asking art depiction of the stack."}, {"Time_Start": 772.4, "Time_End": 776.4, "Text": " Stack goes this way and I have it going left to right just so"}, {"Time_Start": 776.4, "Time_End": 779.4, "Text": " you can read it and you can see the string buffers as they are."}, {"Time_Start": 779.4, "Time_End": 784.4, "Text": " Locals, inputs, the structure, return address, point, or the structure,"}, {"Time_Start": 784.4, "Time_End": 786.4, "Text": " the argument dump area is 24 bytes."}, {"Time_Start": 786.4, "Time_End": 789.4, "Text": " You have the size is used by them up there."}, {"Time_Start": 789.4, "Time_End": 795.38, "Text": " The argument dump area is just that one byte is also sometimes referred to as"}, {"Time_Start": 795.4, "Time_End": 801.4, "Text": " the hidden word, which is used to make sure that the stack is double word aligned."}, {"Time_Start": 801.4, "Time_End": 805.4, "Text": " The stack and the saved program counter must always be double word aligned,"}, {"Time_Start": 805.4, "Time_End": 807.4, "Text": " or else our chip will get very angry with you."}, {"Time_Start": 807.4, "Time_End": 811.4, "Text": " And we're going to make it very angry, but not so angry that it barks."}, {"Time_Start": 811.4, "Time_End": 813.4, "Text": " And then automatic variables we stored here."}, {"Time_Start": 813.4, "Time_End": 818.4, "Text": " Like right here in my example, I have a string pointer called buff of interminate size."}, {"Time_Start": 818.4, "Time_End": 820.4, "Text": " It doesn't really matter."}, {"Time_Start": 820.4, "Time_End": 825.4, "Text": " And then we have the frame pointer, which is the boundary between our next, or our call"}, {"Time_Start": 825.4, "Time_End": 831.1999999999999, "Text": " stack frame, there are his locals, his inputs, and a little asteris, that's his saved"}, {"Time_Start": 831.1999999999999, "Time_End": 836.1999999999999, "Text": " program counter. That's our target. That's what we need to hit. And it's pretty easy to see"}, {"Time_Start": 836.1999999999999, "Time_End": 842.6, "Text": " that if the buffer grows outside of its boundaries, you just overwrite his registers."}, {"Time_Start": 842.6, "Time_End": 849.4, "Text": " And basically take him over. Which actually presents the interesting thing is you're not overflowing,"}, {"Time_Start": 849.4, "Time_End": 855.02, "Text": " you're not overflowing, and taking overflowing the function that with the, uh, thinks like the"}, {"Time_Start": 855.02, "Time_End": 861.02, "Text": " fixed length buffer in it. You are overflowing and taking control from his collar,"}, {"Time_Start": 861.02, "Time_End": 866.02, "Text": " which is very interesting because sometimes your caller can call the overflowable function,"}, {"Time_Start": 866.02, "Time_End": 871.02, "Text": " return, call another function, which will overwrite your wonderful stack frame and shell code,"}, {"Time_Start": 871.02, "Time_End": 874.02, "Text": " and then basically you're screwed."}, {"Time_Start": 874.02, "Time_End": 880.02, "Text": " But, of course, you just attended the Greg Hoagland's talk on how to do cool things with the stack and where you can put the code,"}, {"Time_Start": 880.02, "Time_End": 884.02, "Text": " and so something like that should not be a problem."}, {"Time_Start": 884.02, "Time_End": 889.1999999999999, "Text": " But this is what's going to happen when we are overflowing the buffer."}, {"Time_Start": 889.64, "Time_End": 895.02, "Text": " Just I'm just going to trace through over how the register windows rotate the registers and how things change."}, {"Time_Start": 895.96, "Time_End": 901.3, "Text": " Obviously, the previous stack frames saved program counter is overwritten, as is all his other registers."}, {"Time_Start": 902.66, "Time_End": 903.68, "Text": " The function returns."}, {"Time_Start": 904.28, "Time_End": 914.0, "Text": " His frame pointer becomes the target address, and his input 7 register becomes the target address, and his input 7 register becomes the target address also."}, {"Time_Start": 914.02, "Time_End": 916.52, "Text": " And the stack pointer is still valid."}, {"Time_Start": 916.52, "Time_End": 923.02, "Text": " The stack point will still be the pointer to his stack, which has not been totally free-wide at this point."}, {"Time_Start": 923.02, "Time_End": 929.02, "Text": " All his values that he assumed to be safe have just been totally messed up."}, {"Time_Start": 929.02, "Time_End": 937.02, "Text": " So he just freaks out, hopefully getting an error condition immediately and returning."}, {"Time_Start": 937.02, "Time_End": 942.02, "Text": " And if he does, he tries to jump to the input 7 plus 8."}, {"Time_Start": 942.02, "Time_End": 947.02, "Text": " 8. Our target address plus 8 bytes. And that is where we would take over control."}, {"Time_Start": 950.02, "Time_End": 957.02, "Text": " This is your stack on drugs. Basically, we have all these registers, or these areas on the stack are fine."}, {"Time_Start": 957.02, "Time_End": 963.02, "Text": " And at our buff, we just overflow and write our target address off into the horizon as far."}, {"Time_Start": 963.02, "Time_End": 969.02, "Text": " You can basically write it as far as you want because nothing's going to behave raw at this point."}, {"Time_Start": 969.02, "Time_End": 970.02, "Text": " Yes?"}, {"Time_Start": 972.02, "Time_End": 978.02, "Text": " Oh, thank you for mind me."}, {"Time_Start": 978.02, "Time_End": 984.02, "Text": " Okay, basically we are told that we are not guaranteed that these values will be there."}, {"Time_Start": 984.02, "Time_End": 990.02, "Text": " But what happens is, basically, implementations of the Spark architecture,"}, {"Time_Start": 990.02, "Time_End": 996.02, "Text": " as is an open architecture, are allowed to have anywhere from, I think, 8 to 40 register windows."}, {"Time_Start": 996.02, "Time_End": 1001.02, "Text": " Luckily, those register windows are always filled, even like in the lowest stages of the kernel."}, {"Time_Start": 1001.02, "Time_End": 1002.02, "Text": " So, you can go."}, {"Time_Start": 1002.02, "Time_End": 1006.02, "Text": " basically assume that every time we do a save or restore, they will be restored from the stack,"}, {"Time_Start": 1006.02, "Time_End": 1009.02, "Text": " or saved to the stack and restored from the stack."}, {"Time_Start": 1009.02, "Time_End": 1014.02, "Text": " So that when we, when the overflowed function does a restore,"}, {"Time_Start": 1014.02, "Time_End": 1019.02, "Text": " we'll assume that it's, the registers that it was thought it had in the register window"}, {"Time_Start": 1019.02, "Time_End": 1023.02, "Text": " had become, you know, were written to the stack, and so it restores them"}, {"Time_Start": 1023.02, "Time_End": 1026.02, "Text": " from the callers stack."}, {"Time_Start": 1026.02, "Time_End": 1032.0, "Text": " So basically what it does is we have our target address written all the"}, {"Time_Start": 1032.02, "Time_End": 1036.02, "Text": " through there and it just loads up its registers as it transfers control to the caller"}, {"Time_Start": 1036.02, "Time_End": 1039.02, "Text": " loads up its registers with the target address."}, {"Time_Start": 1039.02, "Time_End": 1042.02, "Text": " I'll do some examples and I'll show you what this looks like."}, {"Time_Start": 1042.02, "Time_End": 1045.02, "Text": " We're stepping through the program and you'll see all the registers are just"}, {"Time_Start": 1045.02, "Time_End": 1048.02, "Text": " totally just spammed over."}, {"Time_Start": 1048.02, "Time_End": 1054.02, "Text": " One of the very nice tools that Slares comes with is just the disassembler."}, {"Time_Start": 1054.02, "Time_End": 1059.02, "Text": " If they ever looked into basically writing the shell code,"}, {"Time_Start": 1059.02, "Time_End": 1062.02, "Text": " writing the assembly code and then changing it to the bytes,"}, {"Time_Start": 1062.02, "Time_End": 1063.58, "Text": " it's a pain in the butt."}, {"Time_Start": 1063.98, "Time_End": 1067.42, "Text": " But this makes it rather easy, especially when you just throw a pearl script on top of it,"}, {"Time_Start": 1067.92, "Time_End": 1071.74, "Text": " and it's a nice little chug, and you have a nice little header file that you can use."}, {"Time_Start": 1073.46, "Time_End": 1076.36, "Text": " There are freeware, spark disassemblers, available."}, {"Time_Start": 1077.96, "Time_End": 1082.18, "Text": " I just found the page about two hours ago off Linuxassembly.org"}, {"Time_Start": 1082.18, "Time_End": 1087.82, "Text": " has a link to an APSD, a link to some Spark assembly examples."}, {"Time_Start": 1087.96, "Time_End": 1091.96, "Text": " And on this guy's page, he has his own Spark Disassembler and Spark Assembler,"}, {"Time_Start": 1092.02, "Time_End": 1097.02, "Text": " and a couple others that you could use for Linux and or BSD,"}, {"Time_Start": 1097.02, "Time_End": 1099.02, "Text": " all running on Spark, of course."}, {"Time_Start": 1099.02, "Time_End": 1103.02, "Text": " Excuse me?"}, {"Time_Start": 1103.02, "Time_End": 1108.02, "Text": " Is it free? Is it free? Is it free?"}, {"Time_Start": 1108.02, "Time_End": 1110.02, "Text": " Oh, very nice."}, {"Time_Start": 1110.02, "Time_End": 1113.02, "Text": " Okay."}, {"Time_Start": 1113.02, "Time_End": 1117.02, "Text": " Well, if, I'm sure we can find that."}, {"Time_Start": 1117.02, "Time_End": 1121.02, "Text": " If you want to give me the URL, I can throw it on here for people."}, {"Time_Start": 1121.02, "Time_End": 1126.12, "Text": " Oh, I forgot who already."}, {"Time_Start": 1126.34, "Time_End": 1128.5, "Text": " But someone has a really good free disassembler."}, {"Time_Start": 1130.9, "Time_End": 1131.34, "Text": " Ganoo?"}, {"Time_Start": 1131.34, "Time_End": 1132.34, "Text": " Gnu."}, {"Time_Start": 1132.34, "Time_End": 1133.06, "Text": " There's a Ganoos assembler?"}, {"Time_Start": 1135.22, "Time_End": 1135.58, "Text": " Oh, wow."}, {"Time_Start": 1135.58, "Time_End": 1138.06, "Text": " I was unaware that they had a disassembler."}, {"Time_Start": 1138.06, "Time_End": 1139.86, "Text": " Oh, wow."}, {"Time_Start": 1140.16, "Time_End": 1141.96, "Text": " I was unaware that they had a disassembler."}, {"Time_Start": 1142.56, "Time_End": 1144.3799999999999, "Text": " Well, I have done my research."}, {"Time_Start": 1144.76, "Time_End": 1145.0, "Text": " Okay."}, {"Time_Start": 1149.06, "Time_End": 1150.98, "Text": " And the other tool that we'll be using."}, {"Time_Start": 1151.02, "Time_End": 1153.02, "Text": " extensively is the absolute debugger."}, {"Time_Start": 1153.02, "Time_End": 1156.02, "Text": " Because this thing, I, correct me if I'm wrong again,"}, {"Time_Start": 1156.02, "Time_End": 1161.02, "Text": " I have not seen anything like this for any of the free operating systems."}, {"Time_Start": 1161.02, "Time_End": 1165.02, "Text": " They tend to use GDB for their kernel debuggers and everything else,"}, {"Time_Start": 1165.02, "Time_End": 1171.02, "Text": " but I've not seen something that is as assembly language as this one is, as assembly level."}, {"Time_Start": 1171.02, "Time_End": 1176.02, "Text": " Rather funky syntax get used to if you're coming from the world of a nice and pretty"}, {"Time_Start": 1176.02, "Time_End": 1177.02, "Text": " hand-holding debuggers."}, {"Time_Start": 1177.02, "Time_End": 1181.0, "Text": " Arguments are address, how many iterations to do,"}, {"Time_Start": 1181.02, "Time_End": 1183.02, "Text": " in the command and modifiers, as you can see."}, {"Time_Start": 1183.02, "Time_End": 1186.02, "Text": " First instruction, it says,"}, {"Time_Start": 1186.02, "Time_End": 1189.02, "Text": " starting at the address of Maine in the object file."}, {"Time_Start": 1189.02, "Time_End": 1191.02, "Text": " The question mark means in the object file,"}, {"Time_Start": 1191.02, "Time_End": 1193.02, "Text": " the slash means in the memory image,"}, {"Time_Start": 1193.02, "Time_End": 1197.02, "Text": " whether it be a core file or the actual memory of the running process."}, {"Time_Start": 1197.02, "Time_End": 1200.02, "Text": " What I'm saying on the first one is,"}, {"Time_Start": 1200.02, "Time_End": 1204.02, "Text": " dump 10 instructions,"}, {"Time_Start": 1204.02, "Time_End": 1207.02, "Text": " or disassemble 10 instructions starting at Maine."}, {"Time_Start": 1207.02, "Time_End": 1210.02, "Text": " One of the wonderful idiosyncrasies of this program is"}, {"Time_Start": 1210.02, "Time_End": 1211.02, "Text": " everything on this side,"}, {"Time_Start": 1211.02, "Time_End": 1213.02, "Text": " of the question mark or slash isn't hex."}, {"Time_Start": 1213.02, "Time_End": 1216.02, "Text": " Everything on that side isn't decimal."}, {"Time_Start": 1216.02, "Time_End": 1220.02, "Text": " But there are modifiers you can use to put it either way,"}, {"Time_Start": 1220.02, "Time_End": 1224.02, "Text": " but we should all be very fluid with conversions, even though I'm not."}, {"Time_Start": 1224.02, "Time_End": 1229.02, "Text": " The second example, just display the word stored at code, babe."}, {"Time_Start": 1229.02, "Time_End": 1232.02, "Text": " That's not a real address, but I'd like it."}, {"Time_Start": 1232.02, "Time_End": 1236.02, "Text": " We can also just query individual registers."}, {"Time_Start": 1236.02, "Time_End": 1239.02, "Text": " Basically have a pseudo-redirection, the instruction that'll say,"}, {"Time_Start": 1239.02, "Time_End": 1240.02, "Text": " give me the address to the stack point."}, {"Time_Start": 1240.02, "Time_End": 1244.02, "Text": " address the stack pointer, assign it to the variable X, and it'll print it out for you."}, {"Time_Start": 1244.02, "Time_End": 1246.02, "Text": " The next instruction says,"}, {"Time_Start": 1246.02, "Time_End": 1249.02, "Text": " display 24 words starting at the stack pointer."}, {"Time_Start": 1249.02, "Time_End": 1253.02, "Text": " That will give you the full minimum stack frame."}, {"Time_Start": 1253.02, "Time_End": 1257.02, "Text": " And then from there, you can, after that point, it will be automatic variables, if any,"}, {"Time_Start": 1257.02, "Time_End": 1260.02, "Text": " but every function must have at least those, and you can check them out."}, {"Time_Start": 1260.02, "Time_End": 1263.02, "Text": " Here's emerging one."}, {"Time_Start": 1263.02, "Time_End": 1269.02, "Text": " In the address of the frame pointer plus 3C, which I can't remember,"}, {"Time_Start": 1269.02, "Time_End": 1270.02, "Text": " I'm on the spot."}, {"Time_Start": 1270.02, "Time_End": 1271.02, "Text": " so I can't do math."}, {"Time_Start": 1271.02, "Time_End": 1275.02, "Text": " That will be the saved program counter."}, {"Time_Start": 1275.02, "Time_End": 1277.02, "Text": " Write the value, dead beef."}, {"Time_Start": 1277.02, "Time_End": 1280.02, "Text": " And so then you just write the value, step through,"}, {"Time_Start": 1280.02, "Time_End": 1282.02, "Text": " and you'll see the program try and jump to it,"}, {"Time_Start": 1282.02, "Time_End": 1286.02, "Text": " or see the collar try and jump to it when it becomes time."}, {"Time_Start": 1286.02, "Time_End": 1290.02, "Text": " The ADB will also do interactive debugging,"}, {"Time_Start": 1290.02, "Time_End": 1292.02, "Text": " some simple stuff like this, you don't really,"}, {"Time_Start": 1292.02, "Time_End": 1297.02, "Text": " it's not really pertinent, but I threw it on there because I needed space."}, {"Time_Start": 1297.02, "Time_End": 1299.02, "Text": " Wow, this is very difficult to see."}, {"Time_Start": 1299.02, "Time_End": 1306.02, "Text": " This is a contrived session of using ADB to examine what happens when we overflow a program."}, {"Time_Start": 1306.02, "Time_End": 1310.02, "Text": " I wrote a simple program called Smash Me, which I'll show you in a couple minutes."}, {"Time_Start": 1310.02, "Time_End": 1312.02, "Text": " It basically just says the fatal flaw."}, {"Time_Start": 1312.02, "Time_End": 1317.02, "Text": " There's a stir copy or a Sturcat into a fixed-length buffer."}, {"Time_Start": 1317.02, "Time_End": 1322.02, "Text": " And it just takes the argument on the command line, so I'm just saying run it with this argument."}, {"Time_Start": 1322.02, "Time_End": 1328.02, "Text": " And I said first to set the break, oh, there also is no prompt in ADB, so it's kind of hard to follow along."}, {"Time_Start": 1328.02, "Time_End": 1338.02, "Text": " I said, smash, colon B means set a breakpoint at the smash function, which is I have main and I call smash, which has the overflow."}, {"Time_Start": 1338.02, "Time_End": 1344.02, "Text": " And then we run it with that argument, stops at the beginning of smash."}, {"Time_Start": 1344.02, "Time_End": 1353.02, "Text": " We're stepping through, I'll get our stack pointer, and we're going to store the value, go through."}, {"Time_Start": 1353.02, "Time_End": 1355.02, "Text": " We're just stepping through, watching it."}, {"Time_Start": 1355.02, "Time_End": 1364.02, "Text": " It's going to call, I think right there at the bottom of your screen is where it calls StirCat."}, {"Time_Start": 1364.02, "Time_End": 1368.02, "Text": " But right now we're going to watch, I can't remember how I'm doing this."}, {"Time_Start": 1368.02, "Time_End": 1370.02, "Text": " Oh, yes, I call Sturcat."}, {"Time_Start": 1370.02, "Time_End": 1376.02, "Text": " First I look at our stack pointer and I look at the frame pointer, our caller stack frame,"}, {"Time_Start": 1376.02, "Time_End": 1384.02, "Text": " and then I step over that instruction, which we'll call it stircat, and we'll watch what happens after."}, {"Time_Start": 1384.02, "Time_End": 1386.02, "Text": " and watch what happens after that."}, {"Time_Start": 1386.02, "Time_End": 1389.02, "Text": " The colon E means steps in the next instruction,"}, {"Time_Start": 1389.02, "Time_End": 1394.02, "Text": " but don't follow any jumps or any jumps or calls."}, {"Time_Start": 1394.02, "Time_End": 1396.02, "Text": " As you can see,"}, {"Time_Start": 1396.02, "Time_End": 1399.02, "Text": " the saved program counter is overwritten,"}, {"Time_Start": 1399.02, "Time_End": 1402.02, "Text": " as is his entire stack frame."}, {"Time_Start": 1402.02, "Time_End": 1405.02, "Text": " He's not happy."}, {"Time_Start": 1405.02, "Time_End": 1408.02, "Text": " And then I basically just step through to the end,"}, {"Time_Start": 1408.02, "Time_End": 1411.02, "Text": " and go right here to where he returns."}, {"Time_Start": 1411.02, "Time_End": 1413.02, "Text": " And so when he returns,"}, {"Time_Start": 1413.02, "Time_End": 1417.52, "Text": " the stuff store on his stack is loaded off the stack into registers,"}, {"Time_Start": 1417.52, "Time_End": 1420.02, "Text": " and then using the restore instruction,"}, {"Time_Start": 1420.02, "Time_End": 1425.52, "Text": " it's flipped over to his callers, local, and output registers."}, {"Time_Start": 1425.52, "Time_End": 1429.52, "Text": " And so now we have them all loaded in, back in control of Maine."}, {"Time_Start": 1429.52, "Time_End": 1431.52, "Text": " They're all loaded in there."}, {"Time_Start": 1431.52, "Time_End": 1434.02, "Text": " And we're going to step through the last instructions of Maine,"}, {"Time_Start": 1434.02, "Time_End": 1436.02, "Text": " where it tries to do a return right here,"}, {"Time_Start": 1436.02, "Time_End": 1440.02, "Text": " and then it says a bus error, because the address 4141, 411,"}, {"Time_Start": 1440.02, "Time_End": 1441.02, "Text": " is not aligned."}, {"Time_Start": 1441.02, "Time_End": 1442.02, "Text": " You'll get that."}, {"Time_Start": 1442.02, "Time_End": 1443.02, "Text": " It's not."}, {"Time_Start": 1443.02, "Time_End": 1446.02, "Text": " nice way just to see when you've messed up, quit out of that."}, {"Time_Start": 1446.02, "Time_End": 1452.02, "Text": " I'll just run through that again later with a real-world example."}, {"Time_Start": 1452.02, "Time_End": 1456.02, "Text": " I'm going to start talking now about how to write assembler code"}, {"Time_Start": 1456.02, "Time_End": 1459.02, "Text": " that we'll use as mobile code, position independent code."}, {"Time_Start": 1459.02, "Time_End": 1463.02, "Text": " We can just throw in there and it'll just execute on its on behalf"}, {"Time_Start": 1463.02, "Time_End": 1465.02, "Text": " and take control of the process."}, {"Time_Start": 1465.02, "Time_End": 1469.02, "Text": " Basically, two ways to write this is you can,"}, {"Time_Start": 1469.02, "Time_End": 1472.02, "Text": " using your compiler, you can make an ASSM block,"}, {"Time_Start": 1472.02, "Time_End": 1474.02, "Text": " some block, which basically just says,"}, {"Time_Start": 1474.02, "Time_End": 1476.02, "Text": " this is straight assembly code, and you just write it in there,"}, {"Time_Start": 1476.02, "Time_End": 1480.02, "Text": " compile the program, you run it, and if it gives you a shell,"}, {"Time_Start": 1480.02, "Time_End": 1483.02, "Text": " you obviously know it's working."}, {"Time_Start": 1483.02, "Time_End": 1487.02, "Text": " And then after that, I throw the function into a character array,"}, {"Time_Start": 1487.02, "Time_End": 1491.02, "Text": " and then I cast that array to a function pointer, execute the function pointer,"}, {"Time_Start": 1491.02, "Time_End": 1494.02, "Text": " as the final stress test."}, {"Time_Start": 1494.02, "Time_End": 1497.02, "Text": " Here's my first example of some Spark shell code."}, {"Time_Start": 1497.02, "Time_End": 1501.02, "Text": " This is somewhat brain-dead in some ways to all explain."}, {"Time_Start": 1501.02, "Time_End": 1505.02, "Text": " It's like this representation does contain null bytes in it."}, {"Time_Start": 1505.02, "Time_End": 1510.02, "Text": " So there it's, it's useless basically, but it's ordered in a simplest way."}, {"Time_Start": 1510.02, "Time_End": 1513.02, "Text": " I'm just how we're going to write it."}, {"Time_Start": 1513.02, "Time_End": 1519.02, "Text": " I think I'm a bit, I write my shell code at first as if it's a well-behaved function."}, {"Time_Start": 1519.02, "Time_End": 1522.02, "Text": " So I allocate in a new register window."}, {"Time_Start": 1522.02, "Time_End": 1525.02, "Text": " And I just basically, I'm calling exec."}, {"Time_Start": 1525.02, "Time_End": 1529.02, "Text": " So I'm creating the character array of the function to execute"}, {"Time_Start": 1529.02, "Time_End": 1531.02, "Text": " and I'm creating the ARG value, the ARG vector."}, {"Time_Start": 1531.02, "Time_End": 1533.02, "Text": " throw that in there."}, {"Time_Start": 1533.02, "Time_End": 1536.02, "Text": " I'm just giving it a no for the environment pointer because"}, {"Time_Start": 1536.02, "Time_End": 1539.02, "Text": " who cares. It's a little bit messy, but it's not a problem."}, {"Time_Start": 1539.02, "Time_End": 1545.02, "Text": " One very handy thing about the spark is that it's big Indian,"}, {"Time_Start": 1545.02, "Time_End": 1548.02, "Text": " and so you can write strings in a relatively straightforward way,"}, {"Time_Start": 1548.02, "Time_End": 1551.02, "Text": " just straight to the stack."}, {"Time_Start": 1551.02, "Time_End": 1556.02, "Text": " One way to do this is if you're lazy,"}, {"Time_Start": 1556.02, "Time_End": 1560.02, "Text": " most of the Unix's will come with the Octal Dump program,"}, {"Time_Start": 1560.02, "Time_End": 1561.02, "Text": " and if you just do this,"}, {"Time_Start": 1561.02, "Time_End": 1565.32, "Text": " you echo, string, pipe, octal dump, slash X for giving a hexadecimal output."}, {"Time_Start": 1565.82, "Time_End": 1569.02, "Text": " It'll give you a nice hex and you just basically said, just chop it into words"}, {"Time_Start": 1569.02, "Time_End": 1572.02, "Text": " and start storing them on the stack and you have a string."}, {"Time_Start": 1574.02, "Time_End": 1577.02, "Text": " I'm sure there are ways to do the cool little jumping thing"}, {"Time_Start": 1577.02, "Time_End": 1581.02, "Text": " that will actually load the address of the string, so you can just ride it straight,"}, {"Time_Start": 1581.02, "Time_End": 1584.02, "Text": " but that's a little over the top for now."}, {"Time_Start": 1586.02, "Time_End": 1590.02, "Text": " Yeah, and you can basically see I set 59 to the system call number."}, {"Time_Start": 1591.02, "Time_End": 1593.02, "Text": " execute the system call."}, {"Time_Start": 1593.02, "Time_End": 1595.02, "Text": " This can basically be looked at as a"}, {"Time_Start": 1595.02, "Time_End": 1599.02, "Text": " well-behaved function to just exec a shell."}, {"Time_Start": 1599.02, "Time_End": 1603.02, "Text": " Then I chop it down a little more."}, {"Time_Start": 1603.02, "Time_End": 1606.02, "Text": " It doesn't assume it's a well-behaved function."}, {"Time_Start": 1606.02, "Time_End": 1609.02, "Text": " I am lying on that second line. I ignore that."}, {"Time_Start": 1609.02, "Time_End": 1611.02, "Text": " Basically, I chop out the save and restores,"}, {"Time_Start": 1611.02, "Time_End": 1615.02, "Text": " and I just start using the current stack pointer."}, {"Time_Start": 1615.02, "Time_End": 1618.02, "Text": " Because in the situation where the overflow occurs,"}, {"Time_Start": 1618.02, "Time_End": 1620.02, "Text": " assuming the well-behaved function assumes that you have to"}, {"Time_Start": 1620.02, "Time_End": 1623.52, "Text": " function assumes that you have valid stack pointers and frame pointers."}, {"Time_Start": 1623.52, "Time_End": 1628.52, "Text": " You can get in situations where your stack point will be pointing to right behind your code."}, {"Time_Start": 1628.52, "Time_End": 1633.72, "Text": " And as you're storing memory, you'll be chasing your code as your code executes and"}, {"Time_Start": 1633.72, "Time_End": 1636.52, "Text": " you're overwriting behind it and you don't want to be there."}, {"Time_Start": 1636.52, "Time_End": 1644.52, "Text": " So this kind of, this code also will not work because it tries, it assumes that the frame pointer is valid."}, {"Time_Start": 1644.52, "Time_End": 1648.52, "Text": " But as I discussed before, the frame pointer will be the target address."}, {"Time_Start": 1648.52, "Time_End": 1649.52, "Text": " And so you're stepping on your toes."}, {"Time_Start": 1649.52, "Time_End": 1653.52, "Text": " their toes here. But this is another example of just chopping things down."}, {"Time_Start": 1653.52, "Time_End": 1659.52, "Text": " And I can see I set, here, I explain the string more."}, {"Time_Start": 1659.52, "Time_End": 1665.52, "Text": " I set the two words and two single, two following registers to a store double word instruction"}, {"Time_Start": 1665.52, "Time_End": 1668.52, "Text": " starting at the address at the frame point of minus 16."}, {"Time_Start": 1668.52, "Time_End": 1672.52, "Text": " So it writes the full eight-by value down."}, {"Time_Start": 1672.52, "Time_End": 1678.52, "Text": " And I basically, in constructing in memory, the string followed by the"}, {"Time_Start": 1678.52, "Time_End": 1684.52, "Text": " it's followed by a null so that I can use it for both the name of the program to execute,"}, {"Time_Start": 1684.52, "Time_End": 1691.52, "Text": " and I build a pointer to that array of character pointers to use as the arg vector."}, {"Time_Start": 1691.52, "Time_End": 1698.52, "Text": " If you've seen ALF1's code in the expression of stack for fun and profit, he does this also."}, {"Time_Start": 1698.52, "Time_End": 1701.52, "Text": " Very easy and straightforward way to do it."}, {"Time_Start": 1701.52, "Time_End": 1708.5, "Text": " Here is my even better shell code. I'm not saying it's really great, but in writing this, there's an interesting"}, {"Time_Start": 1708.52, "Time_End": 1712.56, "Text": " caveat that is not addressed in smashing the stack for fun and profit."}, {"Time_Start": 1714.6, "Time_End": 1717.82, "Text": " Under system v systems, the"}, {"Time_Start": 1717.82, "Time_End": 1724.2, "Text": " Boran shell slash BNSH, when passed an effective UID of less than 100,"}, {"Time_Start": 1724.2, "Time_End": 1731.44, "Text": " will discard it. So that effective UID is triggered when the program is, has the"}, {"Time_Start": 1731.44, "Time_End": 1735.9, "Text": " suid bit set, which means it keeps your real user ID saying this is who you really are,"}, {"Time_Start": 1735.9, "Time_End": 1737.5, "Text": " but effectively your root."}, {"Time_Start": 1738.52, "Time_End": 1744.1399999999999, "Text": " the shell and the shell discards the effect of UID and so basically you found that you've"}, {"Time_Start": 1744.1399999999999, "Time_End": 1748.84, "Text": " exploited a suet program and you still have your own privileges and you're not very"}, {"Time_Start": 1748.84, "Time_End": 1763.32, "Text": " pleased yes the the second one it contains a no bite in this oh thank you okay the"}, {"Time_Start": 1763.32, "Time_End": 1768.5, "Text": " set is a synthetic construction meaning the assembler basically expands it for you and of this"}, {"Time_Start": 1768.52, "Time_End": 1773.56, "Text": " set because everything is 32 bits how can you write a 32 bit value in the"}, {"Time_Start": 1773.56, "Time_End": 1778.52, "Text": " instruction because it splits it into two it first writes the is the set high"}, {"Time_Start": 1778.52, "Time_End": 1784.0, "Text": " instruction to write the first the highest order 13 bits to the register and then"}, {"Time_Start": 1784.0, "Time_End": 1788.5, "Text": " doesn't or with the lower 13 bits with the lower 8 bits to complete the whole"}, {"Time_Start": 1788.5, "Time_End": 1793.9, "Text": " value and we'll see when I does assemble the shell code how it's changed over and I'm"}, {"Time_Start": 1793.9, "Time_End": 1798.34, "Text": " just lazy so I just do the set because it's easier to see the string there instead"}, {"Time_Start": 1798.52, "Time_End": 1806.28, "Text": " in two words but yeah that that that will eliminate the no bite."}, {"Time_Start": 1806.28, "Time_End": 1812.72, "Text": " The no bite will still be in the set in the ore but because of the way that the op code for"}, {"Time_Start": 1812.72, "Time_End": 1817.84, "Text": " or is aligned with the bits it will not be on the correct boundaries to be a in fact"}, {"Time_Start": 1817.84, "Time_End": 1823.76, "Text": " null bite. It'll be spread across. I don't have a diagram of that but you take my word"}, {"Time_Start": 1823.76, "Time_End": 1827.76, "Text": " for it or call me a liar and chase me out to the parking lot. It's your choice."}, {"Time_Start": 1828.52, "Time_End": 1833.52, "Text": " Let's see, nothing else really change here."}, {"Time_Start": 1833.52, "Time_End": 1836.52, "Text": " You'll notice that I do not trust the frame pointer anymore"}, {"Time_Start": 1836.52, "Time_End": 1840.52, "Text": " because I've stepped through with you somebody debug and I'm like,"}, {"Time_Start": 1840.52, "Time_End": 1842.52, "Text": " wait, why am I doing that? That is just whack."}, {"Time_Start": 1842.52, "Time_End": 1845.52, "Text": " And so everything relative to the stack pointer,"}, {"Time_Start": 1845.52, "Time_End": 1849.52, "Text": " I waste four bytes before the stack pointer because storing straight to the stack pointer"}, {"Time_Start": 1849.52, "Time_End": 1851.52, "Text": " introduces a no byte."}, {"Time_Start": 1851.52, "Time_End": 1854.52, "Text": " And you'll notice when I'm trying to set a register to zero,"}, {"Time_Start": 1854.52, "Time_End": 1857.52, "Text": " I can't use the straightforward instruction by just setting to zero,"}, {"Time_Start": 1857.52, "Time_End": 1862.98, "Text": " to zero or moving the global register over because that engine is a no-byte, so you just do something"}, {"Time_Start": 1862.98, "Time_End": 1870.52, "Text": " like, you know, XORs or there's a thousand different creative ways you can do that just to feel fun."}, {"Time_Start": 1870.52, "Time_End": 1877.66, "Text": " I'm just going to talk a little bit about the delivery, but not that much because it is basically"}, {"Time_Start": 1877.66, "Time_End": 1879.78, "Text": " been treated well better than I could by Greg Hogland."}, {"Time_Start": 1879.78, "Time_End": 1886.76, "Text": " Same on other architectures either. You need to do the no-off sled and then the shell code and"}, {"Time_Start": 1886.76, "Time_End": 1894.76, "Text": " then write the jump address off into infinity and let it jump back, which is, has the problem of"}, {"Time_Start": 1894.76, "Time_End": 1899.76, "Text": " if the caller of the overflowable function calls another function, you're not necessarily toast,"}, {"Time_Start": 1899.76, "Time_End": 1901.76, "Text": " you're just basically dodging bullets."}, {"Time_Start": 1901.76, "Time_End": 1908.76, "Text": " Or you can just write the jump address to overwrite the saved program counter,"}, {"Time_Start": 1908.76, "Time_End": 1910.76, "Text": " then put the no ops after it and the code after it."}, {"Time_Start": 1910.76, "Time_End": 1915.76, "Text": " So basically you're jumping backwards in the stack to beyond to the collar of the collar of the"}, {"Time_Start": 1915.76, "Time_End": 1919.3799999999999, "Text": " the overflowable function, the Metacaller in this case."}, {"Time_Start": 1921.1, "Time_End": 1926.8, "Text": " And basically, you know, because the register will be, the save program counter will be worked by that point."}, {"Time_Start": 1927.3799999999999, "Time_End": 1928.76, "Text": " You don't have to worry about those stack frames."}, {"Time_Start": 1928.92, "Time_End": 1930.44, "Text": " You can just go to hell."}, {"Time_Start": 1931.66, "Time_End": 1933.22, "Text": " Great Collins talked a lot about this."}, {"Time_Start": 1934.68, "Time_End": 1935.72, "Text": " Very well, I might add."}, {"Time_Start": 1936.32, "Time_End": 1939.68, "Text": " Okay, some real-world examples if I can find a place to put this microphone."}, {"Time_Start": 1945.76, "Time_End": 1974.32, "Text": " Okay."}, {"Time_Start": 1975.76, "Time_End": 1980.76, "Text": " Can everyone see the shell?"}, {"Time_Start": 1980.76, "Time_End": 1981.76, "Text": " Okay."}, {"Time_Start": 1981.76, "Time_End": 1982.76, "Text": " All right."}, {"Time_Start": 1982.76, "Time_End": 1983.76, "Text": " Looks good."}, {"Time_Start": 1983.76, "Time_End": 1989.76, "Text": " Okay, first we're going to have our nice little simple smash me example."}, {"Time_Start": 1989.76, "Time_End": 1992.76, "Text": " Here's a source code for that."}, {"Time_Start": 1992.76, "Time_End": 1994.76, "Text": " Very, very simple."}, {"Time_Start": 1994.76, "Time_End": 1999.76, "Text": " Smash with the RGV1 stircat to a 128 byte buffer."}, {"Time_Start": 1999.76, "Time_End": 2003.76, "Text": " Now we're going to smash me, which will smash me."}, {"Time_Start": 2003.76, "Time_End": 2012.76, "Text": " One thing you'll basically always see is the calling function will get the value of its stack pointer"}, {"Time_Start": 2012.76, "Time_End": 2017.76, "Text": " because it'll calculate the offset from its stack pointer so it can try and guess the stack pointer"}, {"Time_Start": 2017.76, "Time_End": 2023.76, "Text": " of the function of trying to overflow because it'll always be a defined number of bytes down the stack"}, {"Time_Start": 2023.76, "Time_End": 2026.76, "Text": " a certain number of function calls down the stack."}, {"Time_Start": 2026.76, "Time_End": 2032.76, "Text": " And so basically what you're going to be doing is you're just going to be creating a very large string"}, {"Time_Start": 2032.76, "Time_End": 2036.14, "Text": " in this program what I do is I write"}, {"Time_Start": 2036.14, "Time_End": 2040.22, "Text": " I pass in the argument of the buffer size"}, {"Time_Start": 2040.22, "Time_End": 2042.72, "Text": " that I'm trying to overflow and so what I do is they write"}, {"Time_Start": 2042.72, "Time_End": 2045.8799999999999, "Text": " no ops all the way up to where the shell code must fit"}, {"Time_Start": 2045.8799999999999, "Time_End": 2048.06, "Text": " then write the shell code so it's all within the buffer"}, {"Time_Start": 2048.06, "Time_End": 2051.68, "Text": " and then just write tons of return addresses"}, {"Time_Start": 2051.68, "Time_End": 2054.52, "Text": " and the return address is calculated as an offset"}, {"Time_Start": 2054.52, "Time_End": 2058.82, "Text": " from the stack pointer of the meta smash me process"}, {"Time_Start": 2058.82, "Time_End": 2061.96, "Text": " so I just calculate the egg size"}, {"Time_Start": 2061.96, "Time_End": 2068.96, "Text": " yeah and it kind of just tells you what it's doing and it writes like the"}, {"Time_Start": 2068.96, "Time_End": 2074.7200000000003, "Text": " no-op I have here is I cannot remember what instruction that is just trust me that"}, {"Time_Start": 2074.7200000000003, "Time_End": 2081.82, "Text": " it's a basic instruction that does nothing essentially and just copy the memory"}, {"Time_Start": 2081.82, "Time_End": 2086.5, "Text": " into to the egg and so the egg represents the entire string I'm trying to pass it"}, {"Time_Start": 2086.5, "Time_End": 2091.94, "Text": " with and I call the function so let's see what happens if when we say"}, {"Time_Start": 2091.96, "Time_End": 2097.96, "Text": " the offset is zero. Notice that the shell code I'm using in this example has 64 bytes."}, {"Time_Start": 2097.96, "Time_End": 2104.96, "Text": " So we'll have 64 bytes of null codes, of no ops, and then this shell code. So we don't have that big of a window."}, {"Time_Start": 2104.96, "Time_End": 2109.96, "Text": " It's not happy. So fire up a debugger."}, {"Time_Start": 2109.96, "Time_End": 2111.96, "Text": " It's going to smash me, oh,"}, {"Time_Start": 2111.96, "Time_End": 2115.96, "Text": " Sash me in the core. Legal instructions."}, {"Time_Start": 2115.96, "Time_End": 2119.96, "Text": " We've got the registers. Notice how the registers are just basically splatted."}, {"Time_Start": 2119.96, "Time_End": 2126.3, "Text": " and so we can just check out our frame pointer, see what they point to."}, {"Time_Start": 2126.3, "Time_End": 2133.86, "Text": " They point to themselves again, because basically I did not go back far enough in the stack where I'm just pointing back at my target address."}, {"Time_Start": 2133.86, "Time_End": 2137.56, "Text": " So let's see, minus 500, 500 hex notice."}, {"Time_Start": 2137.56, "Time_End": 2139.96, "Text": " That is well beyond it."}, {"Time_Start": 2139.96, "Time_End": 2142.96, "Text": " Okay, so what I'm going to do is"}, {"Time_Start": 2149.96, "Time_End": 2158.96, "Text": " I'll get my shell code. Actually, no, I'll look at my no-op."}, {"Time_Start": 2158.96, "Time_End": 2160.96, "Text": " I'll see that byte there."}, {"Time_Start": 2160.96, "Time_End": 2165.96, "Text": " And basically, I'm going to search through memory for where that thing is."}, {"Time_Start": 2165.96, "Time_End": 2168.96, "Text": " And that'll basically calculate the offset for me."}, {"Time_Start": 2168.96, "Time_End": 2175.96, "Text": " So I'm going to say we'll start at 500 hex bytes down the stack from the frame pointer."}, {"Time_Start": 2175.96, "Time_End": 2178.96, "Text": " Do a search for the 3-2-bit value."}, {"Time_Start": 2178.96, "Time_End": 2179.96, "Text": " Okay."}, {"Time_Start": 2179.96, "Time_End": 2189.96, "Text": " Search for that value."}, {"Time_Start": 2189.96, "Time_End": 2192.96, "Text": " Show me the first occurrence of it is."}, {"Time_Start": 2192.96, "Time_End": 2199.96, "Text": " And now I'm going to do my poor man's x calculator."}, {"Time_Start": 2199.96, "Time_End": 2203.96, "Text": " X calculator."}, {"Time_Start": 2203.96, "Time_End": 2220.96, "Text": " So that the value we want 980."}, {"Time_Start": 2220.96, "Time_End": 2225.96, "Text": " So that right there is our offset."}, {"Time_Start": 2225.96, "Time_End": 2227.96, "Text": " let's quit out of that and let's put GDB at the test."}, {"Time_Start": 2227.96, "Time_End": 2228.96, "Text": " Let's put GDB at the test."}, {"Time_Start": 2228.96, "Time_End": 2233.96, "Text": " I'm going to smash me, 120 bytes, go back."}, {"Time_Start": 2233.96, "Time_End": 2235.96, "Text": " We have a shell."}, {"Time_Start": 2235.96, "Time_End": 2238.96, "Text": " We basically landed exactly at the first no-op."}, {"Time_Start": 2238.96, "Time_End": 2240.96, "Text": " Thank you."}, {"Time_Start": 2244.96, "Time_End": 2247.96, "Text": " But that's some precision that we don't really need."}, {"Time_Start": 2247.96, "Time_End": 2249.96, "Text": " Basically, we know that we have 64 bytes,"}, {"Time_Start": 2249.96, "Time_End": 2252.96, "Text": " so basically we only have to be within 50 bytes or so."}, {"Time_Start": 2252.96, "Time_End": 2255.96, "Text": " So we can just go back and go, you know, try 1,000."}, {"Time_Start": 2255.96, "Time_End": 2257.96, "Text": " No, not happy."}, {"Time_Start": 2257.96, "Time_End": 2258.96, "Text": " 1,000."}, {"Time_Start": 2258.96, "Time_End": 2265.96, "Text": " bingo. And so the larger the buffer is, basically, more leeway you have, which will go"}, {"Time_Start": 2265.96, "Time_End": 2272.96, "Text": " and we'll see my ellipsy example. This is old. This was discovered by Onion, I think,"}, {"Time_Start": 2272.96, "Time_End": 2279.96, "Text": " in September, 1998 or somewhere like that, and Sun took about a year to post the fix for it."}, {"Time_Start": 2279.96, "Time_End": 2283.96, "Text": " But, so I just took all the patches off my system. I'm feeling kind of vulnerable right now."}, {"Time_Start": 2283.96, "Time_End": 2286.96, "Text": " But it's for the greater good."}, {"Time_Start": 2286.96, "Time_End": 2290.96, "Text": " The details of this bug are,"}, {"Time_Start": 2290.96, "Time_End": 2293.96, "Text": " there's an overflow in Lipsi in its parsing of the LC messages"}, {"Time_Start": 2293.96, "Time_End": 2296.96, "Text": " environment variable where you can overflow that"}, {"Time_Start": 2296.96, "Time_End": 2300.96, "Text": " and basically so any sewer program becomes vulnerable to it."}, {"Time_Start": 2300.96, "Time_End": 2303.96, "Text": " So here's my little program right here."}, {"Time_Start": 2303.96, "Time_End": 2307.96, "Text": " I just ask what program to call, how big the buffer is,"}, {"Time_Start": 2307.96, "Time_End": 2310.96, "Text": " and what the opposite is."}, {"Time_Start": 2310.96, "Time_End": 2313.96, "Text": " And I'll show you the program a second."}, {"Time_Start": 2313.96, "Time_End": 2315.96, "Text": " Pretty much the same thing as the last one."}, {"Time_Start": 2315.96, "Time_End": 2317.96, "Text": " It's the same thing as the last one."}, {"Time_Start": 2317.96, "Time_End": 2321.96, "Text": " Just throws in an environment."}, {"Time_Start": 2321.96, "Time_End": 2327.96, "Text": " You will have to, you'll have to"}, {"Time_Start": 2327.96, "Time_End": 2331.96, "Text": " basically write a program to exploit each one you're going for,"}, {"Time_Start": 2331.96, "Time_End": 2334.96, "Text": " typically, just so you can customize it, but it's not that big of a deal."}, {"Time_Start": 2334.96, "Time_End": 2337.96, "Text": " And what we can do is we can then, I'm just going to try,"}, {"Time_Start": 2337.96, "Time_End": 2344.96, "Text": " oh, let's go for bin, RSA, and I basically went through with Pearl"}, {"Time_Start": 2344.96, "Time_End": 2345.96, "Text": " and basically kept getting it."}, {"Time_Start": 2345.96, "Time_End": 2351.96, "Text": " giving larger, larger buffers in LC messages until I got one that died."}, {"Time_Start": 2351.96, "Time_End": 2352.96, "Text": " It's somewhere around 1,000 bytes."}, {"Time_Start": 2352.96, "Time_End": 2354.96, "Text": " That's what I'm going to assume the size of the buffer is."}, {"Time_Start": 2354.96, "Time_End": 2357.96, "Text": " So it's offset 0."}, {"Time_Start": 2357.96, "Time_End": 2358.96, "Text": " It dies."}, {"Time_Start": 2358.96, "Time_End": 2359.96, "Text": " Okay."}, {"Time_Start": 2359.96, "Time_End": 2364.96, "Text": " Well, I know now that because there's 1,000 bytes of no ops,"}, {"Time_Start": 2364.96, "Time_End": 2366.96, "Text": " 1,000 minus 64,"}, {"Time_Start": 2366.96, "Time_End": 2370.96, "Text": " I have a very gaping, large window."}, {"Time_Start": 2370.96, "Time_End": 2374.96, "Text": " And so I'm just going to try by offsets of 500."}, {"Time_Start": 2374.96, "Time_End": 2378.96, "Text": " No."}, {"Time_Start": 2378.96, "Time_End": 2381.96, "Text": " There we go."}, {"Time_Start": 2381.96, "Time_End": 2387.96, "Text": " And that basically gives me a root shell, because in this the shell code that I'm using,"}, {"Time_Start": 2387.96, "Time_End": 2394.96, "Text": " I made sure to call set UID 0 before I do I can bin shell, so bin shell is happy and trust me."}, {"Time_Start": 2394.96, "Time_End": 2396.96, "Text": " And it's basically like that."}, {"Time_Start": 2396.96, "Time_End": 2400.96, "Text": " I can use any fluid program on the system at this point."}, {"Time_Start": 2400.96, "Time_End": 2403.96, "Text": " So let's do I find user written."}, {"Time_Start": 2403.96, "Time_End": 2409.96, "Text": " Okay, anyone have a favorite?"}, {"Time_Start": 2409.96, "Time_End": 2414.96, "Text": " You know, I'll do bin password because that one's nice and easy."}, {"Time_Start": 2414.96, "Time_End": 2417.96, "Text": " But I basically just sat down today and decided which ones I could get."}, {"Time_Start": 2417.96, "Time_End": 2420.96, "Text": " And basically, some of these didn't have the overflow in them"}, {"Time_Start": 2420.96, "Time_End": 2423.96, "Text": " because they didn't use the locale support and Lipsi to use it."}, {"Time_Start": 2423.96, "Time_End": 2427.96, "Text": " But the vast majority of them did, so let's start with password."}, {"Time_Start": 2427.96, "Time_End": 2429.96, "Text": " And..."}, {"Time_Start": 2429.96, "Time_End": 2431.96, "Text": " Oh, wow."}, {"Time_Start": 2431.96, "Time_End": 2438.96, "Text": " Looks like they don't go very far down on the stack and they make it really easy for us."}, {"Time_Start": 2438.96, "Time_End": 2440.96, "Text": " So, let's see."}, {"Time_Start": 2440.96, "Time_End": 2445.96, "Text": " What else do I have that's really fun to show you?"}, {"Time_Start": 2445.96, "Time_End": 2450.96, "Text": " Okay, let's go for some really cool shell code that mostly works."}, {"Time_Start": 2450.96, "Time_End": 2454.96, "Text": " I spent the last couple days on this."}, {"Time_Start": 2454.96, "Time_End": 2456.96, "Text": " Strange, strange bug."}, {"Time_Start": 2456.96, "Time_End": 2458.96, "Text": " It's driving me nuts."}, {"Time_Start": 2458.96, "Time_End": 2461.94, "Text": " But here's an alternate way to develop shell code instead of"}, {"Time_Start": 2461.96, "Time_End": 2466.96, "Text": " instead of using the Assam blocks, just write the assembly file"}, {"Time_Start": 2466.96, "Time_End": 2468.96, "Text": " and basically put you through the assembler,"}, {"Time_Start": 2468.96, "Time_End": 2472.96, "Text": " create the object file, and then I have a main function in a C program"}, {"Time_Start": 2472.96, "Time_End": 2475.96, "Text": " that just calls this function, bind shell,"}, {"Time_Start": 2475.96, "Time_End": 2479.96, "Text": " and that's a simple way for me to test it so I can go through here"}, {"Time_Start": 2479.96, "Time_End": 2483.96, "Text": " and mostly because the Assam blocks just makes Emacs go hairy,"}, {"Time_Start": 2483.96, "Time_End": 2487.96, "Text": " and I like Emacs, so don't throw anything."}, {"Time_Start": 2487.96, "Time_End": 2490.96, "Text": " Okay, what I'm doing, oh, let's see, where's the source for this originally?"}, {"Time_Start": 2490.96, "Time_End": 2491.96, "Text": " for this originally."}, {"Time_Start": 2491.96, "Time_End": 2495.96, "Text": " Uh-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch-ch..."}, {"Time_Start": 2495.96, "Time_End": 2501.96, "Text": " First, I wrote basically what I want to do in C."}, {"Time_Start": 2501.96, "Time_End": 2506.96, "Text": " Create a socket, set it up, bind it, listen, set the first connection,"}, {"Time_Start": 2506.96, "Time_End": 2513.96, "Text": " dupe the file descriptors for standard-in, center-in-out-centered error to the socket, and run bin shell."}, {"Time_Start": 2513.96, "Time_End": 2516.96, "Text": " And I just kind of went through..."}, {"Time_Start": 2516.96, "Time_End": 2517.96, "Text": " Oh, okay."}, {"Time_Start": 2517.96, "Time_End": 2518.96, "Text": " Yes."}, {"Time_Start": 2518.96, "Time_End": 2519.96, "Text": " Um..."}, {"Time_Start": 2519.96, "Time_End": 2524.96, "Text": " translated this into assembly because everything is just a system call."}, {"Time_Start": 2524.96, "Time_End": 2527.96, "Text": " So, I do a trap, let's see."}, {"Time_Start": 2527.96, "Time_End": 2530.96, "Text": " Right there is the socket call by 230."}, {"Time_Start": 2530.96, "Time_End": 2531.96, "Text": " You just look through..."}, {"Time_Start": 2531.96, "Time_End": 2534.96, "Text": " These, the higher numbered ones will change from system systems,"}, {"Time_Start": 2534.96, "Time_End": 2535.96, "Text": " so you'll have to look them up on,"}, {"Time_Start": 2535.96, "Time_End": 2538.96, "Text": " if you don't have Linux or BSD on there."}, {"Time_Start": 2538.96, "Time_End": 2541.96, "Text": " Just straightforward assembly programming, basically."}, {"Time_Start": 2541.96, "Time_End": 2543.96, "Text": " Going through..."}, {"Time_Start": 2543.96, "Time_End": 2548.96, "Text": " Goldind, store it all, yada yada."}, {"Time_Start": 2548.96, "Time_End": 2549.96, "Text": " yada."}, {"Time_Start": 2549.96, "Time_End": 2550.96, "Text": " You're compiling the..."}, {"Time_Start": 2550.96, "Time_End": 2554.96, "Text": " And I just inserted my standard shell code right there."}, {"Time_Start": 2554.96, "Time_End": 2559.96, "Text": " Using the compiler to output assembly code will be very helpful in figuring out how the compiler does stuff."}, {"Time_Start": 2559.96, "Time_End": 2564.96, "Text": " But it is deceptive in a lot of ways because the compiler doesn't like telling you,"}, {"Time_Start": 2564.96, "Time_End": 2567.96, "Text": " or in the various libraries, that it's just doing system calls for all these."}, {"Time_Start": 2567.96, "Time_End": 2572.96, "Text": " So you'll go through like six different layered functions, underscore, underscore, socket,"}, {"Time_Start": 2572.96, "Time_End": 2576.96, "Text": " underscore, capital, you that'll finally say, oh, I just do a trap."}, {"Time_Start": 2576.96, "Time_End": 2577.96, "Text": " But just to look through CISC call."}, {"Time_Start": 2577.96, "Time_End": 2580.96, "Text": " Just to look through Cisco.H and you'll see what it really does."}, {"Time_Start": 2580.96, "Time_End": 2582.96, "Text": " It'll get angry at you."}, {"Time_Start": 2582.96, "Time_End": 2584.96, "Text": " But we tested."}, {"Time_Start": 2584.96, "Time_End": 2587.96, "Text": " I just compiled it and linked the two things together."}, {"Time_Start": 2587.96, "Time_End": 2589.96, "Text": " Oh, yeah."}, {"Time_Start": 2589.96, "Time_End": 2590.96, "Text": " That's the bug."}, {"Time_Start": 2590.96, "Time_End": 2592.96, "Text": " For some reason, when I run it straight,"}, {"Time_Start": 2592.96, "Time_End": 2595.96, "Text": " it decides that it will not block and wait for it and accept."}, {"Time_Start": 2595.96, "Time_End": 2598.96, "Text": " It'll just kind of do something."}, {"Time_Start": 2598.96, "Time_End": 2601.96, "Text": " And the thread will just continue on and execute the shell."}, {"Time_Start": 2601.96, "Time_End": 2604.96, "Text": " But when I run it through the debugger and say,"}, {"Time_Start": 2604.96, "Time_End": 2606.96, "Text": " what's it called, bind?"}, {"Time_Start": 2606.96, "Time_End": 2608.96, "Text": " called bind shell."}, {"Time_Start": 2608.96, "Time_End": 2610.96, "Text": " I'm going to run it."}, {"Time_Start": 2610.96, "Time_End": 2612.96, "Text": " And I say, yeah, continue."}, {"Time_Start": 2612.96, "Time_End": 2614.96, "Text": " Oh, no."}, {"Time_Start": 2614.96, "Time_End": 2618.96, "Text": " And I just told it to bind."}, {"Time_Start": 2618.96, "Time_End": 2622.96, "Text": " Two local hosts, part 2000."}, {"Time_Start": 2622.96, "Time_End": 2624.96, "Text": " Yes, get going."}, {"Time_Start": 2624.96, "Time_End": 2627.96, "Text": " I like to say, I'm about to exec something, and things will change,"}, {"Time_Start": 2627.96, "Time_End": 2630.96, "Text": " so I'll stop for you, but just ignore that."}, {"Time_Start": 2630.96, "Time_End": 2633.96, "Text": " And basically, we have a very mutated, very ugly environment"}, {"Time_Start": 2633.96, "Time_End": 2634.96, "Text": " and shell right here."}, {"Time_Start": 2634.96, "Time_End": 2635.96, "Text": " Like, it's not found."}, {"Time_Start": 2635.96, "Time_End": 2639.96, "Text": " it's not found, colon."}, {"Time_Start": 2639.96, "Time_End": 2642.96, "Text": " And you can get enough done from here to do what you need to do."}, {"Time_Start": 2642.96, "Time_End": 2645.96, "Text": " And obviously it's running as me because I just ran it from the command line."}, {"Time_Start": 2645.96, "Time_End": 2653.96, "Text": " But you just basically, through the things I've showed you,"}, {"Time_Start": 2653.96, "Time_End": 2659.96, "Text": " converted to shell code and throw in the process, and you'll have a bind shell."}, {"Time_Start": 2659.96, "Time_End": 2664.96, "Text": " To do so, I have a nice little here."}, {"Time_Start": 2664.96, "Time_End": 2672.96, "Text": " Um, just to help me out with writing these, I made my disk 2H."}, {"Time_Start": 2672.96, "Time_End": 2678.96, "Text": " And so if I go through to my code, let's see, three,"}, {"Time_Start": 2678.96, "Time_End": 2682.96, "Text": " what I do is I write 3.0.C, test it out in there."}, {"Time_Start": 2682.96, "Time_End": 2685.96, "Text": " Then I disassemble it to 3."}, {"Time_Start": 2685.96, "Time_End": 2687.96, "Text": " Well, I disassemble it to 3.d.d."}, {"Time_Start": 2687.96, "Time_End": 2688.96, "Text": " Which says diff."}, {"Time_Start": 2688.96, "Time_End": 2690.96, "Text": " Main 3."}, {"Time_Start": 2690.96, "Time_End": 2692.96, "Text": " Um, little noise at the top."}, {"Time_Start": 2692.96, "Time_End": 2694.96, "Text": " So I just chop those off till I just have the disassembled"}, {"Time_Start": 2694.96, "Time_End": 2697.96, "Text": " code. It shouldn't hurt you to cut out three lines."}, {"Time_Start": 2697.96, "Time_End": 2699.96, "Text": " Not with the script, you do everything for you."}, {"Time_Start": 2699.96, "Time_End": 2703.96, "Text": " And then just a simple, like, you know, filter."}, {"Time_Start": 2703.96, "Time_End": 2705.96, "Text": " You can do this in Perl, do this in whatever you want,"}, {"Time_Start": 2705.96, "Time_End": 2708.96, "Text": " but I did it in C, because it's fun."}, {"Time_Start": 2708.96, "Time_End": 2712.96, "Text": " Three, not this, pipe to that."}, {"Time_Start": 2712.96, "Time_End": 2715.96, "Text": " And gives you nice little header file to include."}, {"Time_Start": 2715.96, "Time_End": 2719.96, "Text": " And this is a quick way to check for no bytes."}, {"Time_Start": 2719.96, "Time_End": 2723.96, "Text": " And just look at your code, my hand, side by side, and feel warm and fuzzy."}, {"Time_Start": 2723.96, "Time_End": 2730.96, "Text": " fuzzy. But basically with just a couple little tools, you can just tinker around with,"}, {"Time_Start": 2730.96, "Time_End": 2736.96, "Text": " you know, writing shell code and stuff, and then amazingly you will wake up and say, wait a minute,"}, {"Time_Start": 2736.96, "Time_End": 2740.96, "Text": " I'm actually decent at assembly programming now. This is useful."}, {"Time_Start": 2740.96, "Time_End": 2746.96, "Text": " To be the example, I didn't do all my assembly class until I started doing this stuff."}, {"Time_Start": 2746.96, "Time_End": 2749.96, "Text": " And of course, the semester it ended, then now I know everything and didn't pay attention"}, {"Time_Start": 2749.96, "Time_End": 2750.96, "Text": " in class anyway."}, {"Time_Start": 2750.96, "Time_End": 2752.96, "Text": " So, I don't know."}, {"Time_Start": 2752.96, "Time_End": 2753.96, "Text": " Great."}, {"Time_Start": 2753.96, "Time_End": 2754.96, "Text": " me nothing."}, {"Time_Start": 2754.96, "Time_End": 2760.96, "Text": " I don't think I have anything else to show you, and I think I'm out of time."}, {"Time_Start": 2760.96, "Time_End": 2765.96, "Text": " I show you those."}, {"Time_Start": 2765.96, "Time_End": 2768.96, "Text": " Oh, yes, some links to useful things."}, {"Time_Start": 2768.96, "Time_End": 2773.96, "Text": " LinuxAssembly.org obviously focuses on Linux and Intel architecture,"}, {"Time_Start": 2773.96, "Time_End": 2776.96, "Text": " but they have some great info on there on,"}, {"Time_Start": 2776.96, "Time_End": 2780.96, "Text": " a little straight-front-a-beaten path and show you some Spark stuff, some BSD stuff."}, {"Time_Start": 2780.96, "Time_End": 2783.94, "Text": " They have a nice little suite of basically the bin-use"}, {"Time_Start": 2783.96, "Time_End": 2786.96, "Text": " or a lot of the small utilities written in assembly."}, {"Time_Start": 2786.96, "Time_End": 2790.96, "Text": " So, you know, your standard 100K executable is now like 3K"}, {"Time_Start": 2790.96, "Time_End": 2793.96, "Text": " because all they do is call the traps themselves."}, {"Time_Start": 2793.96, "Time_End": 2797.96, "Text": " It's not portable, but it's really small and used for boot disks."}, {"Time_Start": 2797.96, "Time_End": 2802.96, "Text": " Shellcode.org I just saw come across either bugtrack or vulnive"}, {"Time_Start": 2802.96, "Time_End": 2803.96, "Text": " some mailing list."}, {"Time_Start": 2803.96, "Time_End": 2807.96, "Text": " Today, currently down, we'll have a lot of resources"}, {"Time_Start": 2807.96, "Time_End": 2810.96, "Text": " to various shell codes for various operating systems."}, {"Time_Start": 2810.96, "Time_End": 2813.94, "Text": " For Act 55 has a really nice"}, {"Time_Start": 2813.96, "Time_End": 2817.96, "Text": " article about writing shell code on MIPS under IWRICS,"}, {"Time_Start": 2817.96, "Time_End": 2821.96, "Text": " also being another of the pioneering risk chips,"}, {"Time_Start": 2821.96, "Time_End": 2823.96, "Text": " very similar to this."}, {"Time_Start": 2823.96, "Time_End": 2825.96, "Text": " It's a very good read also."}, {"Time_Start": 2825.96, "Time_End": 2828.96, "Text": " And this stuff eventually will be on dobsquod.net"}, {"Time_Start": 2828.96, "Time_End": 2833.96, "Text": " slash security whenever I finish it up and put it up there."}, {"Time_Start": 2833.96, "Time_End": 2837.96, "Text": " So you can look there, but if you see a 404, don't"}, {"Time_Start": 2837.96, "Time_End": 2839.96, "Text": " have a hard attack."}]}