{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 6.38,
      "Text": "This text was transcribed using whisper model: large-v2\n\n First of all, allow me to introduce myself cause you probably don't know me. Uh, I work as a"
    },
    {
      "Time_Start": 6.38,
      "Time_End": 11.82,
      "Text": " security engineer for over 8 years. Uh, currently I'm working in Accenture Embedded System"
    },
    {
      "Time_Start": 11.82,
      "Time_End": 16.62,
      "Text": " Security Team that's based in Prague, Czech Republic. That's also where I come from. And I'm"
    },
    {
      "Time_Start": 16.62,
      "Time_End": 21.36,
      "Text": " a big open source enthusiast so the tools that I'll be showing you here today are already"
    },
    {
      "Time_Start": 21.36,
      "Time_End": 26.36,
      "Text": " published on GitHub and could be used by anyone. Let's have a look at what's ahead of us."
    },
    {
      "Time_Start": 30.14,
      "Time_End": 34.34,
      "Text": " We will start with the description of the CAN bus. We're right next to the car hacking village"
    },
    {
      "Time_Start": 34.34,
      "Time_End": 40.480000000000004,
      "Text": " so 90% people there actually know that better than I do. But I'll still try. Uh, we will use"
    },
    {
      "Time_Start": 40.480000000000004,
      "Time_End": 46.120000000000005,
      "Text": " this knowledge to define the problem that I'd like to talk about and then I'll go into the"
    },
    {
      "Time_Start": 46.120000000000005,
      "Time_End": 51.260000000000005,
      "Text": " demo section which will be quite long cause I have two of the demos. First demo will be"
    },
    {
      "Time_Start": 51.260000000000005,
      "Time_End": 56.86,
      "Text": " using a development board and access to the source code, debugger and we will basically"
    },
    {
      "Time_Start": 56.86,
      "Time_End": 64.0,
      "Text": " have a white box approach and we will see uh, how this vulnerability works. Then uh, we will"
    },
    {
      "Time_Start": 64.0,
      "Time_End": 68.2,
      "Text": " continue in the second demonstration and I'd like to approach this one as a simulated"
    },
    {
      "Time_Start": 68.2,
      "Time_End": 74.14,
      "Text": " security assessment here on stage of a real life ECU. So I brought an ECU from a vehicle and"
    },
    {
      "Time_Start": 74.14,
      "Time_End": 79.22,
      "Text": " I'll be doing security assessment of that. This demo is quite packed. We will be using JTAG"
    },
    {
      "Time_Start": 79.22,
      "Time_End": 84.82,
      "Text": " debugger. We will be analyzing firmware. We will be using oscilloscopes so there's a lot to"
    },
    {
      "Time_Start": 84.82000000000001,
      "Time_End": 90.92,
      "Text": " see. And then we will just wrap up the talk with just a couple points about who could be"
    },
    {
      "Time_Start": 90.92,
      "Time_End": 96.2,
      "Text": " affected by it and some general takeaways. At the end I hope there will be still some time"
    },
    {
      "Time_Start": 96.2,
      "Time_End": 102.64000000000001,
      "Text": " left for question and answers. So without further ado, let's jump into the first slide and"
    },
    {
      "Time_Start": 102.64000000000001,
      "Time_End": 107.38000000000001,
      "Text": " that's the description of the CAN bus. So most of you probably know but CAN bus or"
    },
    {
      "Time_Start": 107.38000000000001,
      "Time_End": 112.58000000000001,
      "Text": " controller area network bus is a standard that was originally aimed at the vehicles to allow"
    },
    {
      "Time_Start": 112.6,
      "Time_End": 117.38,
      "Text": " multiple ECUs to communicate with each other reliably in the noisy environments such as the"
    },
    {
      "Time_Start": 117.38,
      "Time_End": 123.22,
      "Text": " car. Uh, to achieve this there are 2 wires used for this which are carrying a differential"
    },
    {
      "Time_Start": 123.22,
      "Time_End": 127.96,
      "Text": " signal. Differential signal means that the data being transmitted over these 2 lines is"
    },
    {
      "Time_Start": 127.96,
      "Time_End": 133.66,
      "Text": " basically identical. It's just the polarity is inverted. And each of these buses is terminated"
    },
    {
      "Time_Start": 133.66,
      "Time_End": 139.86,
      "Text": " by a 120 ohm resistor. Uh, typical vehicle probably contains multiple of these buses which"
    },
    {
      "Time_Start": 139.88000000000002,
      "Time_End": 144.96,
      "Text": " are usually connected by something that's called security gateway. Uh, if I'm to use analogy to"
    },
    {
      "Time_Start": 144.96,
      "Time_End": 150.52,
      "Text": " AP networks that would be like a router that decides which message can pass where. Uh,"
    },
    {
      "Time_Start": 150.52,
      "Time_End": 155.16000000000003,
      "Text": " thanks to these properties like robustness, uh, it's found its way into other industries as"
    },
    {
      "Time_Start": 155.16000000000003,
      "Time_End": 160.64000000000001,
      "Text": " well. That's why the talk is this uh, described as embedded devices. Uh, because you can find"
    },
    {
      "Time_Start": 160.64000000000001,
      "Time_End": 165.8,
      "Text": " CAN bus in heavy industry equipment. You can find CAN bus in medical devices and on a lot of"
    },
    {
      "Time_Start": 165.82000000000002,
      "Time_End": 170.32000000000002,
      "Text": " other places too. Uh, it's also important to mention that there are multiple versions of the"
    },
    {
      "Time_Start": 170.32000000000002,
      "Time_End": 176.16000000000003,
      "Text": " CAN bus as it evolved over the time. It started with an 11 bit identifier CAN bus that carried"
    },
    {
      "Time_Start": 176.16000000000003,
      "Time_End": 182.46,
      "Text": " just 8 bytes of data. This have been deemed insufficient so an extended CAN ID came which"
    },
    {
      "Time_Start": 182.46,
      "Time_End": 187.48000000000002,
      "Text": " has increased uh, uh, ID portion uh, to 29 bits. Uh, but it kept the 8 bytes of the data. Uh, then"
    },
    {
      "Time_Start": 188.29999999999998,
      "Time_End": 193.29999999999998,
      "Text": " uh, further CAN bus versions have been introduced such as CAN FD with 64 bytes of data. Uh, but"
    },
    {
      "Time_Start": 196.79999999999998,
      "Time_End": 202.23999999999998,
      "Text": " with the talk that I have, I'm having today is only applicable to the CAN standard CAN ID frame"
    },
    {
      "Time_Start": 202.23999999999998,
      "Time_End": 207.92,
      "Text": " and extended CAN ID frame. Uh, we'll discuss briefly CAN FD and CAN XL uh, but only at the end"
    },
    {
      "Time_Start": 207.92,
      "Time_End": 212.92,
      "Text": " of this uh, talk. Uh, this slide shows the message, the frame and its individual fields. Uh, in"
    },
    {
      "Time_Start": 212.96,
      "Time_End": 217.96,
      "Text": " the green part there is the most important field that's CAN ID. Obviously you need that. Then in"
    },
    {
      "Time_Start": 221.88000000000002,
      "Time_End": 228.14000000000001,
      "Text": " yellow you can see field called DLC or data length code. Uh, this tells us how many bytes of"
    },
    {
      "Time_Start": 228.14000000000001,
      "Time_End": 234.68,
      "Text": " data actually follow. Uh, that could be between 0 to 8. So there is a perfect valid message in"
    },
    {
      "Time_Start": 234.68,
      "Time_End": 240.12,
      "Text": " a CAN bus that has 0 bytes of data. The meaning could be carried just inside the ID. Uh, but"
    },
    {
      "Time_Start": 240.12,
      "Time_End": 246.46,
      "Text": " you can have anywhere up to 8 bytes of data. Uh, then in the blue field you can see the CRC but"
    },
    {
      "Time_Start": 246.46,
      "Time_End": 251.84,
      "Text": " that's not really relevant for this talk so I'm gonna just skip the remaining fields. Uh, for"
    },
    {
      "Time_Start": 251.84,
      "Time_End": 257.88,
      "Text": " uh, the picture at the bottom, that's a capture from an oscilloscope. It shows you how it works"
    },
    {
      "Time_Start": 257.88,
      "Time_End": 263.52,
      "Text": " on a physical layer. You can see the differential signaling where the red line is CAN high, the"
    },
    {
      "Time_Start": 263.52,
      "Time_End": 268.32,
      "Text": " blue line is CAN low and as you can see the data is basically identical. It's just a mirror"
    },
    {
      "Time_Start": 268.32,
      "Time_End": 274.02,
      "Text": " image between those 2. Uh, we'll be playing a bit with the oscilloscope later on in the demo. Uh,"
    },
    {
      "Time_Start": 274.02,
      "Time_End": 278.36,
      "Text": " but for now this is just for me to show you how it works on the physical layer. It's not really"
    },
    {
      "Time_Start": 278.36,
      "Time_End": 285.28,
      "Text": " that it's actually relevant to what I'm gonna talk about. Uh, if we dive a bit into the"
    },
    {
      "Time_Start": 285.28,
      "Time_End": 292.12,
      "Text": " specification of the CAN bus and we look at the description of the data length code field, uh, we"
    },
    {
      "Time_Start": 292.12,
      "Time_End": 298.76,
      "Text": " will find that it has to have values between 0 and 8. Uh, to express 8 in binary you need 4"
    },
    {
      "Time_Start": 298.76,
      "Time_End": 305.1,
      "Text": " bits because that's 1 followed by 3 0s. And therefore, uh, I got an idea like what would"
    },
    {
      "Time_Start": 305.1,
      "Time_End": 310.1,
      "Text": " happen if I'm going to just send DLC field with all 4 1s. First disclaimer, you can never send"
    },
    {
      "Time_Start": 313.44,
      "Time_End": 320.38,
      "Text": " more than 8 bytes of data in those CAN frames. Uh, those packets would be just malformed, never"
    },
    {
      "Time_Start": 320.38,
      "Time_End": 326.92,
      "Text": " really received, so you can, you'll never send more than 8 bytes of data. However, what I found"
    },
    {
      "Time_Start": 326.92,
      "Time_End": 333.02,
      "Text": " is that none of the hardware and most of the software actually cares about the DLC field value."
    },
    {
      "Time_Start": 333.02,
      "Time_End": 338.36,
      "Text": " So you can send whatever you want there and it's still valid and it will still be passed all the"
    },
    {
      "Time_Start": 338.36,
      "Time_End": 343.3,
      "Text": " way to the developer and then it's up to the firmware development team how they work with this"
    },
    {
      "Time_Start": 343.3,
      "Time_End": 350.3,
      "Text": " value. Uh, on the slide you can see a hypothetical mem copy situation. And because the"
    },
    {
      "Time_Start": 350.3,
      "Time_End": 353.84000000000003,
      "Text": " developers that are working with CAN bus probably know that they can never receive more than 8"
    },
    {
      "Time_Start": 353.84000000000003,
      "Time_End": 359.40000000000003,
      "Text": " bytes, the destination buffer would be allocated to 8 bytes because why waste memory? Then the"
    },
    {
      "Time_Start": 359.40000000000003,
      "Time_End": 363.78000000000003,
      "Text": " source of the operation as a second parameter would be CAN data because that's what we want to"
    },
    {
      "Time_Start": 363.78000000000003,
      "Time_End": 370.06,
      "Text": " copy. Uh, but since you're not always receiving 8 bytes but sometimes you receive 4, 3, or any"
    },
    {
      "Time_Start": 370.08,
      "Time_End": 376.08,
      "Text": " other value, uh, you can use this convenient DLC field which the frameworks you're using is"
    },
    {
      "Time_Start": 376.08,
      "Time_End": 381.56,
      "Text": " giving you to actually specify how many bytes should be copied. And that's exactly where the"
    },
    {
      "Time_Start": 381.56,
      "Time_End": 387.0,
      "Text": " problem comes. Now I'm gonna do the funny thing of readjusting the microphone. I'm sorry if I"
    },
    {
      "Time_Start": 387.0,
      "Time_End": 392.0,
      "Text": " drop it. Because I want to sit for the demo. Sorry for that delay. Let me just uh, let me just"
    },
    {
      "Time_Start": 400.06,
      "Time_End": 406.72,
      "Text": " reset. We'll basically jump into our first demonstration. Uh, but before that I'd like to"
    },
    {
      "Time_Start": 406.72,
      "Time_End": 411.88,
      "Text": " introduce you to the hardware that I brought with me. It's in this yellow suitcase that you can"
    },
    {
      "Time_Start": 411.88,
      "Time_End": 417.88,
      "Text": " see on the stage. And as you can see it contains a lot of PCBs, wires, uh some displays, LEDs. And I"
    },
    {
      "Time_Start": 419.76,
      "Time_End": 424.2,
      "Text": " hope you like it at least as much as people at the airport security did. Uh, because I had to"
    },
    {
      "Time_Start": 424.2,
      "Time_End": 430.88,
      "Text": " explain to like 3 people what it is. I had to take it apart. And they basically swiped the hell"
    },
    {
      "Time_Start": 430.88,
      "Time_End": 436.82,
      "Text": " out of it with those anti-explosive detective papers. So, it's kind of a miracle it still works"
    },
    {
      "Time_Start": 436.82,
      "Time_End": 442.82,
      "Text": " but it does. Uh, in this case I have a red uh, board here. The red one in the corner. Uh, that will"
    },
    {
      "Time_Start": 445.32,
      "Time_End": 449.76,
      "Text": " be a victim for our first demo. Uh, it's an NXP board where I'll have source code running and"
    },
    {
      "Time_Start": 449.76,
      "Time_End": 456.09999999999997,
      "Text": " everything. Uh, the guy in the corner here, the simple Arduino. Uh, that's the attacker. It has a"
    },
    {
      "Time_Start": 456.09999999999997,
      "Time_End": 460.4,
      "Text": " little button here that you can't really see but whenever I press it a malicious message will be"
    },
    {
      "Time_Start": 460.4,
      "Time_End": 466.14,
      "Text": " sent. Uh, I'm going to ignore the middle Arduino for now. And this is just a power source so that"
    },
    {
      "Time_Start": 466.14,
      "Time_End": 472.94,
      "Text": " it actually works. Uh, so that's not really important. Now if I like to show you actually how"
    },
    {
      "Time_Start": 472.94,
      "Time_End": 477.46,
      "Text": " the source code looks like for this uh, board. Uh, I'll start with the attacker one. So the"
    },
    {
      "Time_Start": 477.48,
      "Time_End": 483.06000000000006,
      "Text": " Arduino. In the setup function I'll just set up CAN bus serial and the button. That's not really"
    },
    {
      "Time_Start": 483.06000000000006,
      "Time_End": 489.94000000000005,
      "Text": " interesting. Uh, then I set up the message. I'll start by setting a CAN ID 600 A. Uh, you'll find"
    },
    {
      "Time_Start": 489.94000000000005,
      "Time_End": 495.90000000000003,
      "Text": " out in the second demo why. Uh, but the most important thing I'll send the DLC field value to"
    },
    {
      "Time_Start": 495.90000000000003,
      "Time_End": 503.24,
      "Text": " F. Uh, then uh, I need to send some dummy payload. In this case it would be ABCDEFGH in capital S"
    },
    {
      "Time_Start": 503.36,
      "Time_End": 509.64,
      "Text": " so that we can actually see it and refer to it while we're debugging. And inside the loop it just"
    },
    {
      "Time_Start": 509.64,
      "Time_End": 514.94,
      "Text": " waits for the button press and whenever that happens uh, we're going to send the message uh,"
    },
    {
      "Time_Start": 514.94,
      "Time_End": 520.78,
      "Text": " with this function. When I switch to the victim, so the red board code, uh, which we will be"
    },
    {
      "Time_Start": 520.78,
      "Time_End": 525.82,
      "Text": " debugging, uh, there's a main function which just have 2 variables. One is obviously called"
    },
    {
      "Time_Start": 525.82,
      "Time_End": 530.82,
      "Text": " overwrite buffer because we're going to overwrite it. And we start by setting it uh, to value 1,"
    },
    {
      "Time_Start": 530.94,
      "Time_End": 535.94,
      "Text": " 2, 3, 4, 5, 6, 7 again so that we have something easy to refer to. Then there is not really"
    },
    {
      "Time_Start": 539.2800000000001,
      "Time_End": 545.9200000000001,
      "Text": " interesting CAN bus setup which I'll just skip. And in here uh, I'll be waiting for a message to"
    },
    {
      "Time_Start": 545.9200000000001,
      "Time_End": 550.9200000000001,
      "Text": " arrive and when it does, uh, there is the main copy function which is basically identical to the"
    },
    {
      "Time_Start": 553.22,
      "Time_End": 559.94,
      "Text": " one from the previous slide. Uh, where you, we're copying into the buffer. Uh, frame DSR is how"
    },
    {
      "Time_Start": 559.96,
      "Time_End": 564.96,
      "Text": " MCU Expresso chose to call the data field. I'm not to blame for that. And frame DLR is the DLC"
    },
    {
      "Time_Start": 567.4000000000001,
      "Time_End": 572.0400000000001,
      "Text": " field value. That's how it's called in MCU Expresso again. I, in every framework it will be"
    },
    {
      "Time_Start": 572.0400000000001,
      "Time_End": 577.98,
      "Text": " called differently. Uh, since I have the board in the case I can just hit debug and this should"
    },
    {
      "Time_Start": 577.98,
      "Time_End": 582.98,
      "Text": " run it, run the code and we should stop on our first breakpoint. If I step over this, I can just"
    },
    {
      "Time_Start": 583.3000000000001,
      "Time_End": 588.3000000000001,
      "Text": " investigate that the overwrite buffer is now set to values 1, 2, 3, 4, 5, 6, 7 and ASCII"
    },
    {
      "Time_Start": 590.9,
      "Time_End": 596.34,
      "Text": " terminated by a null byte which is exactly as expected. And if I run the code, nothing really"
    },
    {
      "Time_Start": 596.34,
      "Time_End": 600.34,
      "Text": " happens. Uh, because we're now in this endless loop and we're waiting for CAN messages to"
    },
    {
      "Time_Start": 600.34,
      "Time_End": 605.36,
      "Text": " arrive. To do so, I need to press this almost invisible button and hopefully you see, yeah, you"
    },
    {
      "Time_Start": 606.02,
      "Time_End": 611.02,
      "Text": " see a notification pop up here on my screen that tells me that the breakpoint was hit. Uh, this"
    },
    {
      "Time_Start": 613.46,
      "Time_End": 618.46,
      "Text": " memcopy function. And in the data that I'm being as a source, using as a source for the memcopy,"
    },
    {
      "Time_Start": 620.0,
      "Time_End": 625.04,
      "Text": " you can see the A, B, C, D, E, F, G, H which we've set in the Arduino. And in the DLR we can"
    },
    {
      "Time_Start": 625.04,
      "Time_End": 630.4,
      "Text": " see value 15 which is the DLC field uh, value which we've set. And I'm just gonna step over"
    },
    {
      "Time_Start": 630.4,
      "Time_End": 635.24,
      "Text": " this so that the memcopy finishes what it did. Uh, now inside the buffer I should have these"
    },
    {
      "Time_Start": 635.26,
      "Time_End": 640.26,
      "Text": " A, B, C, D, H uh, A, B, C, D string. Uh, but more importantly let's have a look on what is in"
    },
    {
      "Time_Start": 643.3,
      "Time_End": 648.3,
      "Text": " the overwrite buffer. I'm just going to scroll over it. The very first value, I hope it's"
    },
    {
      "Time_Start": 650.98,
      "Time_End": 655.78,
      "Text": " readable a bit, uh, is value 15 which is suspicious because 15 is the DLC field we've"
    },
    {
      "Time_Start": 655.78,
      "Time_End": 660.92,
      "Text": " sent. But the remaining values I don't really recognize because there's null byte, then 1, 3,"
    },
    {
      "Time_Start": 660.9399999999999,
      "Time_End": 666.5,
      "Text": " 7, 1, 7, 2, then repeat it, then another null byte. Uh, the final null byte hasn't been"
    },
    {
      "Time_Start": 666.5,
      "Time_End": 670.78,
      "Text": " overwritten because we're overwriting just with 7 bytes. So the final null byte is from the"
    },
    {
      "Time_Start": 670.78,
      "Time_End": 675.92,
      "Text": " original buffer. Uh, but now it would be good to see what we are actually, whether we have"
    },
    {
      "Time_Start": 675.92,
      "Time_End": 680.68,
      "Text": " some control over the data uh, that we're overwriting with. To do that we have to"
    },
    {
      "Time_Start": 680.68,
      "Time_End": 687.26,
      "Text": " investigate uh, a structure called MS scan frame. Again this is specific to MCU Expresso"
    },
    {
      "Time_Start": 687.26,
      "Time_End": 691.74,
      "Text": " framework. In other frameworks you'll find something completely different. And we'll see"
    },
    {
      "Time_Start": 691.74,
      "Time_End": 696.14,
      "Text": " that the value of DSR which is the data where we started the copy operation is actually a"
    },
    {
      "Time_Start": 696.14,
      "Time_End": 702.18,
      "Text": " member of a union so that you can access the data as data words or data bytes. Uh, but right"
    },
    {
      "Time_Start": 702.18,
      "Time_End": 708.12,
      "Text": " after that there is the DLR value which is the DLC. Uh, this confirms our suspicion that we"
    },
    {
      "Time_Start": 708.12,
      "Time_End": 713.56,
      "Text": " are overwriting with this uh, structure. Uh, but the remaining values such as uh,"
    },
    {
      "Time_Start": 713.6,
      "Time_End": 718.7600000000001,
      "Text": " breath buffer priority, type, format, and some time stamps. And those aren't really in"
    },
    {
      "Time_Start": 718.7600000000001,
      "Time_End": 723.9000000000001,
      "Text": " control of the attacker. So we have very limited control of what we overwrite with. Uh, but"
    },
    {
      "Time_Start": 723.9000000000001,
      "Time_End": 728.6800000000001,
      "Text": " nevertheless we can actually use this for some other impact than just denial of service"
    },
    {
      "Time_Start": 728.6800000000001,
      "Time_End": 733.32,
      "Text": " that's in the title of this talk. I can imagine situations where you overwrite local and"
    },
    {
      "Time_Start": 733.32,
      "Time_End": 740.0200000000001,
      "Text": " global variables in a way that you change their values from a 0 to something else. Uh, why"
    },
    {
      "Time_Start": 740.02,
      "Time_End": 745.38,
      "Text": " this is important uh, and that's because in when you program in C there's quite a common"
    },
    {
      "Time_Start": 745.38,
      "Time_End": 750.8199999999999,
      "Text": " practice of doing a null checks. A null check is for example is authenticated if it is a"
    },
    {
      "Time_Start": 750.8199999999999,
      "Time_End": 756.46,
      "Text": " variable. Then if it is 0 you're not authenticated and anything else would mean you are. And"
    },
    {
      "Time_Start": 756.46,
      "Time_End": 762.8,
      "Text": " this way you could theoretically bypass some of the controls. Uh, although in a real life"
    },
    {
      "Time_Start": 762.8,
      "Time_End": 768.78,
      "Text": " examples this always resulted just in denial of service. Uh, usually for various reasons but"
    },
    {
      "Time_Start": 768.8,
      "Time_End": 773.5799999999999,
      "Text": " mainly by overwriting pointers to something that makes absolutely no sense and then"
    },
    {
      "Time_Start": 773.5799999999999,
      "Time_End": 779.12,
      "Text": " crashing the firmware. With that uh, I'd like to transition into the second demonstration"
    },
    {
      "Time_Start": 779.12,
      "Time_End": 786.06,
      "Text": " where I'll be using uh, an ECU from a Tesla Model 3 vehicle. It's the security controller"
    },
    {
      "Time_Start": 786.06,
      "Time_End": 791.02,
      "Text": " that sits between the seats where you tap your NFC card when you want to drive. Uh, it's"
    },
    {
      "Time_Start": 791.02,
      "Time_End": 796.06,
      "Text": " responsible for example for unlocking the door and the decision whether you can drive or"
    },
    {
      "Time_Start": 796.08,
      "Time_End": 800.6600000000001,
      "Text": " not. Uh, this is done together with the body control module. And if we do a typical"
    },
    {
      "Time_Start": 800.6600000000001,
      "Time_End": 805.6600000000001,
      "Text": " assessment uh, we first unpack the ECU and see what the PCB has to offer. In this case uh, we"
    },
    {
      "Time_Start": 809.0200000000001,
      "Time_End": 814.0400000000001,
      "Text": " found that on the bottom of the PCB there is an SPC560B64 microcontroller from STMicro. And"
    },
    {
      "Time_Start": 816.5000000000001,
      "Time_End": 822.84,
      "Text": " literally right next to it are pads which are labeled STJTAG. The jackpot in this case was"
    },
    {
      "Time_Start": 822.86,
      "Time_End": 827.2,
      "Text": " that this was actually working JTAG interface so we were able to dump the firmware image and"
    },
    {
      "Time_Start": 827.2,
      "Time_End": 832.1,
      "Text": " proceed with the assessment. And this is exactly what I'd like to do here and we will start by"
    },
    {
      "Time_Start": 832.1,
      "Time_End": 837.44,
      "Text": " dumping the image then we will analyze the firmware, find the vulnerability, exploit it and"
    },
    {
      "Time_Start": 837.44,
      "Time_End": 843.1800000000001,
      "Text": " then play with the oscilloscope and have some fun. So let me just show you the unobfuscated"
    },
    {
      "Time_Start": 843.1800000000001,
      "Time_End": 848.48,
      "Text": " view on the suitcase. Uh, you can see the ECU obviously the big green thing with the Tesla"
    },
    {
      "Time_Start": 848.5,
      "Time_End": 854.3000000000001,
      "Text": " logo. Uh, the Arduino in the middle serves only one purpose and that is to simulate the rest of"
    },
    {
      "Time_Start": 854.3000000000001,
      "Time_End": 860.54,
      "Text": " the car. So in fact this suitcase is the smallest Tesla car that you have probably seen. Uh, I'll"
    },
    {
      "Time_Start": 860.54,
      "Time_End": 865.34,
      "Text": " have this again a little black button whenever I press it I simulate the rest of the car so that"
    },
    {
      "Time_Start": 865.34,
      "Time_End": 870.62,
      "Text": " the ECU works as if it is in. If I don't do that I can't really work with this ECU and show you"
    },
    {
      "Time_Start": 870.62,
      "Time_End": 875.62,
      "Text": " it live. Uh, I talked about the debugger so I have just the J-Link. I hope it's readable. Uh,"
    },
    {
      "Time_Start": 879.4,
      "Time_End": 882.9200000000001,
      "Text": " in this suitcase there are actually multiple layers. One of the layers contains a J-Link"
    },
    {
      "Time_Start": 882.9200000000001,
      "Time_End": 890.5,
      "Text": " debugger and I can connect with it. Uh, and just type connect. I have pre-selected the correct"
    },
    {
      "Time_Start": 890.5,
      "Time_End": 895.5,
      "Text": " MCU so SPC560B64 so I'll just leave everything default because I like defaults. And the CPU is"
    },
    {
      "Time_Start": 899.7,
      "Time_End": 903.94,
      "Text": " now halted and I'm connected to it. Uh, this is a good time to dump the firmware image. I can"
    },
    {
      "Time_Start": 903.94,
      "Time_End": 910.72,
      "Text": " use save bit- save bin command for that. And as a destination I'll choose file TMPFW.bin for"
    },
    {
      "Time_Start": 910.72,
      "Time_End": 915.62,
      "Text": " example. And now I have to specify the memory range which I want to dump. So it will be from"
    },
    {
      "Time_Start": 915.62,
      "Time_End": 920.62,
      "Text": " address 0 to address 17FFFF. Uh, this memory range I've read it from the data sheet but I"
    },
    {
      "Time_Start": 923.7600000000001,
      "Time_End": 929.0600000000001,
      "Text": " consider it kind of boring to open a data sheet here so I'm just gonna cheat and skip on that."
    },
    {
      "Time_Start": 929.0600000000001,
      "Time_End": 933.6,
      "Text": " Uh, but this will save the binary from that section. Uh, you can find it in the memory map."
    },
    {
      "Time_Start": 933.6,
      "Time_End": 940.6400000000001,
      "Text": " There's actually no science around this. Now we have a firmware dumped and I'm going to open"
    },
    {
      "Time_Start": 940.6400000000001,
      "Time_End": 947.8800000000001,
      "Text": " IDA and analyze the binary. I made all fonts ridiculously large so I hope you can read it. For"
    },
    {
      "Time_Start": 947.8800000000001,
      "Time_End": 952.8800000000001,
      "Text": " me it's quite painful to work like this but it's for the audience's sake. Uh, I'm going to"
    },
    {
      "Time_Start": 953.82,
      "Time_End": 958.82,
      "Text": " choose PowerPC because as I said I was reading the data sheet so I know that it's a PowerPC. And"
    },
    {
      "Time_Start": 962.16,
      "Time_End": 967.16,
      "Text": " from now on uh, I'll use my beloved defaults everywhere. And this should load me a binary in"
    },
    {
      "Time_Start": 970.5,
      "Time_End": 975.1,
      "Text": " IDA. Uh, but as you can see nothing really happened because we're working with a just binary"
    },
    {
      "Time_Start": 975.1,
      "Time_End": 979.94,
      "Text": " blob and IDA doesn't really know is it the code, is it data, is it mix of both. There are no"
    },
    {
      "Time_Start": 979.94,
      "Time_End": 986.0400000000001,
      "Text": " entry points, what should I do? Uh, since this is a situation that we faced quite often, uh,"
    },
    {
      "Time_Start": 986.0400000000001,
      "Time_End": 990.6800000000001,
      "Text": " working with like extracted firmware image from a microcontroller, we made a little plug-in"
    },
    {
      "Time_Start": 990.6800000000001,
      "Time_End": 996.82,
      "Text": " for IDA Pro uh, which is called Firm Loader. And here I just have to select the brand, the"
    },
    {
      "Time_Start": 996.82,
      "Time_End": 1003.7600000000001,
      "Text": " line of the MCU and the correct MCU and this will start the auto analysis. It will also create"
    },
    {
      "Time_Start": 1003.7600000000001,
      "Time_End": 1009.9000000000001,
      "Text": " memory sections such as RAM, peripherals, and it will mark the code flash as executable and"
    },
    {
      "Time_Start": 1009.9,
      "Time_End": 1015.9399999999999,
      "Text": " trigger the auto analysis. If I'm to do a real assessment, this is a starting point, not a"
    },
    {
      "Time_Start": 1015.9399999999999,
      "Time_End": 1021.5799999999999,
      "Text": " complete analysis. I have to do a bit more manual work to make it ideal. Uh, but we don't have"
    },
    {
      "Time_Start": 1021.5799999999999,
      "Time_End": 1027.6399999999999,
      "Text": " time and we have to cheat a bit. So I'm going to be fine with the analysis that it did. Uh,"
    },
    {
      "Time_Start": 1027.6399999999999,
      "Time_End": 1033.76,
      "Text": " mainly because it already found 1,700 or so functions. So I would be, we have the binary"
    },
    {
      "Time_Start": 1033.76,
      "Time_End": 1038.46,
      "Text": " loaded and we can start working with it. Now I'd like to show you 2 different ways on how to"
    },
    {
      "Time_Start": 1038.48,
      "Time_End": 1044.92,
      "Text": " approaching firmware analysis of an MCU. Uh, the first approach is identifying standard"
    },
    {
      "Time_Start": 1044.92,
      "Time_End": 1050.8,
      "Text": " functions. Uh, standard functions are things like memcopy, malloc, free, all of those"
    },
    {
      "Time_Start": 1050.8,
      "Time_End": 1056.9,
      "Text": " lipsy functions that developers use everywhere. It's good to find them because then it's a bit"
    },
    {
      "Time_Start": 1056.9,
      "Time_End": 1062.1000000000001,
      "Text": " easier to uncover the custom logic in the firmware. You can use IDA Lumina if you have IDA"
    },
    {
      "Time_Start": 1062.1000000000001,
      "Time_End": 1066.54,
      "Text": " for that. It's a great tool, but I'm going to do it manually. Uh, not because I just want to"
    },
    {
      "Time_Start": 1066.56,
      "Time_End": 1072.06,
      "Text": " scare you with the assembly, but I just actually want to show you that it's not that hard. Uh,"
    },
    {
      "Time_Start": 1072.06,
      "Time_End": 1078.68,
      "Text": " let me just adjust the view of IDA a little bit so that we have more comfortable view. And I'm"
    },
    {
      "Time_Start": 1078.68,
      "Time_End": 1085.02,
      "Text": " also going to need to set the compiler. Sorry for that delay. And this function is actually"
    },
    {
      "Time_Start": 1085.02,
      "Time_End": 1091.78,
      "Text": " memcopy. Um, just going to walk you through very quickly on why it is a memcopy. Uh, again, I"
    },
    {
      "Time_Start": 1091.78,
      "Time_End": 1096.26,
      "Text": " had to read about PowerPC to figure out that first 3 arguments to a function are passed in"
    },
    {
      "Time_Start": 1096.28,
      "Time_End": 1103.12,
      "Text": " registers R3, R4, and R5. Therefore, if I look at the memcopy, uh, parameters, I know that the"
    },
    {
      "Time_Start": 1103.12,
      "Time_End": 1108.36,
      "Text": " first one is the destination, the second one is source, and the third one is how many bytes"
    },
    {
      "Time_Start": 1108.36,
      "Time_End": 1114.4,
      "Text": " should be copied. So the third parameter, R5, is here first incremented, and then it's set"
    },
    {
      "Time_Start": 1114.4,
      "Time_End": 1119.84,
      "Text": " into something called counter register. Again, had to read about PowerPC unfortunately. Uh,"
    },
    {
      "Time_Start": 1119.84,
      "Time_End": 1125.44,
      "Text": " then this counter register is decremented every time we execute this function, this instruction."
    },
    {
      "Time_Start": 1125.46,
      "Time_End": 1131.3,
      "Text": " And if it reaches 0, we go here to end the function. But as long as it's not 0, we will be"
    },
    {
      "Time_Start": 1131.3,
      "Time_End": 1138.14,
      "Text": " executing this, uh, code block in a loop. So we already know that whatever this function does, it"
    },
    {
      "Time_Start": 1138.14,
      "Time_End": 1142.44,
      "Text": " will do it for how many times we tell it in a third argument. Which is already a good"
    },
    {
      "Time_Start": 1142.44,
      "Time_End": 1147.68,
      "Text": " definition of a memcopy. Uh, but inside the me- the body of the loop, uh, we can see that it"
    },
    {
      "Time_Start": 1147.68,
      "Time_End": 1152.68,
      "Text": " takes a second argument, so register R4, indexed by R0, and stores that value into R7. Then,"
    },
    {
      "Time_Start": 1155.8200000000002,
      "Time_End": 1161.9,
      "Text": " instruction after that takes that value from R7 and stores it in the first argument, which is R3."
    },
    {
      "Time_Start": 1161.9,
      "Time_End": 1167.16,
      "Text": " Again, indexed by R0. Then the index is just incremented, and this repeats for however ma-"
    },
    {
      "Time_Start": 1167.16,
      "Time_End": 1172.3400000000001,
      "Text": " many times we specified. This is how you find a standard function. Uh, sometimes it's a bit"
    },
    {
      "Time_Start": 1172.3400000000001,
      "Time_End": 1178.5800000000002,
      "Text": " more complicated. Uh, I admit this was one of the very easiest examples. I'll also going to set"
    },
    {
      "Time_Start": 1178.5800000000002,
      "Time_End": 1182.18,
      "Text": " the type of the function, because I would like to show you some automation later, and for that"
    },
    {
      "Time_Start": 1182.22,
      "Time_End": 1187.22,
      "Text": " this is re- necessary. Uh, now, if I'm doing a security analysis of a firmware, I can hit X on"
    },
    {
      "Time_Start": 1189.52,
      "Time_End": 1194.1000000000001,
      "Text": " the keyboard, and I should now theoretically go through all of these memcopy cross"
    },
    {
      "Time_Start": 1194.1000000000001,
      "Time_End": 1199.2,
      "Text": " references and see if they are vulnerable or not. I'm lazy and I don't have time, so I'm not"
    },
    {
      "Time_Start": 1199.2,
      "Time_End": 1204.68,
      "Text": " gonna do that. Uh, second approach that I'd like to show you is a combination of static and"
    },
    {
      "Time_Start": 1204.68,
      "Time_End": 1210.5800000000002,
      "Text": " dynamic analysis. Um, during the dynamic analysis, I know what the ECU sends, I know on a"
    },
    {
      "Time_Start": 1210.58,
      "Time_End": 1215.46,
      "Text": " CAN bus, I know what it receives on the CAN bus, so it's actually very simple to just use"
    },
    {
      "Time_Start": 1215.46,
      "Time_End": 1220.46,
      "Text": " search for immediate values, and find the CAN ID I'm interested in. Uh, this isn't exactly"
    },
    {
      "Time_Start": 1223.6599999999999,
      "Time_End": 1229.1999999999998,
      "Text": " working every time, uh, but in this case it does. So the second hit is especially interesting"
    },
    {
      "Time_Start": 1229.1999999999998,
      "Time_End": 1235.54,
      "Text": " because it's in compare instruction, and it's comparing register R3, so first argument to a"
    },
    {
      "Time_Start": 1235.54,
      "Time_End": 1241.1399999999999,
      "Text": " function, to the value that I know I saw on the CAN bus. And if I look around, I actually see a"
    },
    {
      "Time_Start": 1241.1399999999999,
      "Time_End": 1246.82,
      "Text": " lot of the values that I've seen on the CAN bus. This one, this one, and this one. So, this is"
    },
    {
      "Time_Start": 1246.82,
      "Time_End": 1253.62,
      "Text": " good enough assumption for me to just rename this to CAN handler, uh, because it appears to"
    },
    {
      "Time_Start": 1253.62,
      "Time_End": 1259.1,
      "Text": " be handling incoming CAN messages. Now I'll end the torture and switch to the decompiler,"
    },
    {
      "Time_Start": 1259.1,
      "Time_End": 1264.1399999999999,
      "Text": " because we need to speed up a bit. And we said that the first one is CAN DLC, so I'm just"
    },
    {
      "Time_Start": 1264.2,
      "Time_End": 1270.18,
      "Text": " going, uh, CAN ID, sorry. I'm going to rename it to that. With a bit of analysis that I'm not"
    },
    {
      "Time_Start": 1270.18,
      "Time_End": 1274.92,
      "Text": " going to show you here, uh, we would figure out this is CAN data, and we would actually"
    },
    {
      "Time_Start": 1274.92,
      "Time_End": 1281.8600000000001,
      "Text": " figure out this is CAN DLC. And now we basically went from a black box assessment where we"
    },
    {
      "Time_Start": 1281.8600000000001,
      "Time_End": 1286.8600000000001,
      "Text": " took an ECU from a vehicle, to a crappy source code review. Uh, and again, as you can see,"
    },
    {
      "Time_Start": 1287.46,
      "Time_End": 1292.46,
      "Text": " there are many CAN bus IDs being handled by this function. And in theory, I should go"
    },
    {
      "Time_Start": 1295.2,
      "Time_End": 1301.2600000000002,
      "Text": " through all of them, and identify whether any of these are vulnerable to some issues. Again,"
    },
    {
      "Time_Start": 1301.2600000000002,
      "Time_End": 1305.8400000000001,
      "Text": " I'm lazy, I don't have time, so I'm not going to do that. Uh, instead, I'm going to skip"
    },
    {
      "Time_Start": 1305.8400000000001,
      "Time_End": 1311.64,
      "Text": " over, and if you remember, the attacking board sends CAN ID 600 A. So I'm going to just"
    },
    {
      "Time_Start": 1311.66,
      "Time_End": 1317.0400000000002,
      "Text": " look at the handler for CAN ID 600 A. I'm going to rename it to that because I don't want to"
    },
    {
      "Time_Start": 1317.0400000000002,
      "Time_End": 1323.3400000000001,
      "Text": " lose track. And this function gets CAN data and CAN DLC as its parameters. So let's just"
    },
    {
      "Time_Start": 1323.3400000000001,
      "Time_End": 1328.3400000000001,
      "Text": " open it, and do the renaming again. And now, this mem copy here screams at us, I'm"
    },
    {
      "Time_Start": 1334.42,
      "Time_End": 1340.5600000000002,
      "Text": " vulnerable basically. Because as you can see, this length specifier here is CAN DLC. The"
    },
    {
      "Time_Start": 1340.58,
      "Time_End": 1345.6799999999998,
      "Text": " source is CAN data. And as a destination, there is this weird memory address. Uh, weird"
    },
    {
      "Time_Start": 1345.6799999999998,
      "Time_End": 1350.6599999999999,
      "Text": " memory addresses in MCU firmware are usually global variables. They're just static places"
    },
    {
      "Time_Start": 1350.6599999999999,
      "Time_End": 1356.06,
      "Text": " in memory, which are then used to access the variable values. If I look at it, uh, I can"
    },
    {
      "Time_Start": 1356.06,
      "Time_End": 1361.6599999999999,
      "Text": " find that there is between 1 AF 0 and 1 AF 7, I have pre-allocated 8 bytes for this"
    },
    {
      "Time_Start": 1361.6599999999999,
      "Time_End": 1367.54,
      "Text": " variable. And right after it, there is a variable called 1 AF 8. And if I look at the"
    },
    {
      "Time_Start": 1367.68,
      "Time_End": 1372.86,
      "Text": " cross-references, I can see that it is being used somewhere. So if I overflow this variable, I"
    },
    {
      "Time_Start": 1372.86,
      "Time_End": 1379.02,
      "Text": " may adjust something in the firmware and cause some undesired behavior. I'm just going to"
    },
    {
      "Time_Start": 1379.02,
      "Time_End": 1383.86,
      "Text": " synchronize the view because that's going to be, uh, useful if my right click would have"
    },
    {
      "Time_Start": 1383.86,
      "Time_End": 1388.86,
      "Text": " worked. Sorry for that. Zutacode. And now, when we saw the CAN handler, there were many,"
    },
    {
      "Time_Start": 1389.8400000000001,
      "Time_End": 1394.8400000000001,
      "Text": " many, many functions that were handling CAN messages. I said I'm lazy, so I'm not going to do"
    },
    {
      "Time_Start": 1399.18,
      "Time_End": 1404.22,
      "Text": " that. Uh, but because I'm lazy all the time, but I had, don't have time just right now, we"
    },
    {
      "Time_Start": 1404.22,
      "Time_End": 1411.22,
      "Text": " created a plugin, uh, that automates a bit a search for cross-references. This plugin is"
    },
    {
      "Time_Start": 1411.22,
      "Time_End": 1416.22,
      "Text": " called Wolfie. And to work with it, I wonder why my touchpad doesn't work. Thanks. Uh,"
    },
    {
      "Time_Start": 1419.8600000000001,
      "Time_End": 1425.2,
      "Text": " you just have to add certain functions. I'm sorry, I don't know how to enlarge this text, so"
    },
    {
      "Time_Start": 1425.2,
      "Time_End": 1431.0000000000002,
      "Text": " I'll just describe it. Uh, we first select some name for the rule that's actually doesn't"
    },
    {
      "Time_Start": 1431.0000000000002,
      "Time_End": 1437.22,
      "Text": " matter at all. And then we have to use a filter to somehow filter out all the memcpy functions"
    },
    {
      "Time_Start": 1437.22,
      "Time_End": 1442.1200000000001,
      "Text": " we're not interested in or to just filter those that we are interested in. To find this"
    },
    {
      "Time_Start": 1442.1200000000001,
      "Time_End": 1447.0200000000002,
      "Text": " vulnerability, there is one precondition. The memcpy function must not have static third"
    },
    {
      "Time_Start": 1447.02,
      "Time_End": 1452.52,
      "Text": " parameter. If there is a static values like 2, 3, 8 in a third parameter, this vulnerability"
    },
    {
      "Time_Start": 1452.52,
      "Time_End": 1457.52,
      "Text": " will not work. So I'll start by saying that the not param 2 dot is constant. I'm sorry for the"
    },
    {
      "Time_Start": 1463.5,
      "Time_End": 1469.48,
      "Text": " syntax, it's just Python code that gets evaluated. And if this condition is fulfilled, I can"
    },
    {
      "Time_Start": 1469.48,
      "Time_End": 1473.48,
      "Text": " also say that I'm actually only interested in the functions that are called from the CAN"
    },
    {
      "Time_Start": 1473.48,
      "Time_End": 1478.48,
      "Text": " handler. So I can just say function, if I'm be able to type, function call dot reachable from"
    },
    {
      "Time_Start": 1484.76,
      "Time_End": 1489.76,
      "Text": " CAN handler. And this query will now take a look at all hundred plus cross references to a memcpy"
    },
    {
      "Time_Start": 1494.1,
      "Time_End": 1500.1,
      "Text": " function. And it will only filter out those that match the criteria I've specified. As you"
    },
    {
      "Time_Start": 1500.1000000000001,
      "Time_End": 1505.6000000000001,
      "Text": " can see, the very first one is the one we found manually in CAN handler 68. But there are"
    },
    {
      "Time_Start": 1505.6000000000001,
      "Time_End": 1510.6000000000001,
      "Text": " five others. I'd like to specifically look at the one at 6F1BA, which is right here. The main"
    },
    {
      "Time_Start": 1513.7800000000002,
      "Time_End": 1518.0200000000002,
      "Text": " reason I want to look at it is if I look at the cross references of this function, we can see"
    },
    {
      "Time_Start": 1518.0200000000002,
      "Time_End": 1523.0200000000002,
      "Text": " it's being called at the CAN handler 68 here. And it's right here. As you can see again, it gets"
    },
    {
      "Time_Start": 1523.72,
      "Time_End": 1528.72,
      "Text": " CAN data, CAN DLC as a parameters. So rename again. And now we can see that right in the"
    },
    {
      "Time_Start": 1539.2,
      "Time_End": 1544.96,
      "Text": " middle of the function, there is a memcpy function. It's used as a source CAN data. As a"
    },
    {
      "Time_Start": 1544.96,
      "Time_End": 1551.08,
      "Text": " count of bytes, this time it's V4, but V4 is here, it's just CAN DLC, so it's just CAN DLC"
    },
    {
      "Time_Start": 1551.6,
      "Time_End": 1557.28,
      "Text": " through a proxy, let's say. The destination in this time is variable V7, which is a local"
    },
    {
      "Time_Start": 1557.28,
      "Time_End": 1564.28,
      "Text": " variable. It is an 8 byte array. So we can share again, we will be overflowing. But we will be"
    },
    {
      "Time_Start": 1564.28,
      "Time_End": 1569.58,
      "Text": " overflowing into something called variable V8. And if you look at what it is, it actually is"
    },
    {
      "Time_Start": 1569.58,
      "Time_End": 1574.8999999999999,
      "Text": " set to some constant value here from a global variable at the beginning of the function. And"
    },
    {
      "Time_Start": 1574.9,
      "Time_End": 1581.6200000000001,
      "Text": " then it's compared to it at the end of the function. This is a thing called stack canaries."
    },
    {
      "Time_Start": 1581.6200000000001,
      "Time_End": 1587.66,
      "Text": " And it is used to protect the values on the stack against buffer overflows such as this one. So"
    },
    {
      "Time_Start": 1587.66,
      "Time_End": 1593.2800000000002,
      "Text": " in this case, we know that when we send this CAN message, we would actually cause this stack"
    },
    {
      "Time_Start": 1593.2800000000002,
      "Time_End": 1597.98,
      "Text": " canary to get triggered. But we should have a look at what's going to happen. And that's in"
    },
    {
      "Time_Start": 1597.98,
      "Time_End": 1603.1000000000001,
      "Text": " this function. We will actually play a bit with peripherals. But more importantly, there is"
    },
    {
      "Time_Start": 1603.1000000000001,
      "Time_End": 1608.5200000000002,
      "Text": " this endless while loop. Uh endless while loops are the best indicators for fault handlers in"
    },
    {
      "Time_Start": 1608.5200000000002,
      "Time_End": 1614.14,
      "Text": " microcontrollers. Uh because while in endless while loop, the device cannot cause any harm by"
    },
    {
      "Time_Start": 1614.14,
      "Time_End": 1619.5600000000002,
      "Text": " just doing weird things with its peripherals. It's just executing the same instruction over and"
    },
    {
      "Time_Start": 1619.5600000000002,
      "Time_End": 1625.94,
      "Text": " over again. Uh therefore, we will cause a crash of this microcontroller. That's why denial of"
    },
    {
      "Time_Start": 1625.94,
      "Time_End": 1631.14,
      "Text": " service. Uh but unfortunately, it would be through an anti-climatic overwrite of a stack"
    },
    {
      "Time_Start": 1631.18,
      "Time_End": 1636.64,
      "Text": " canary. Uh we have access to the debugger. So it would be quite nice to actually see this in"
    },
    {
      "Time_Start": 1636.64,
      "Time_End": 1641.3000000000002,
      "Text": " action and see if we actually overwrite with the same values as we have seen in the previous"
    },
    {
      "Time_Start": 1641.3000000000002,
      "Time_End": 1646.64,
      "Text": " demo. So to do that, I decided to torture myself further and show you the access in the"
    },
    {
      "Time_Start": 1646.64,
      "Time_End": 1651.64,
      "Text": " debugger. Where I can set breakpoints. First one would be at before mem copy function. The"
    },
    {
      "Time_Start": 1652.18,
      "Time_End": 1657.18,
      "Text": " second one will be right after it. And I'll check if the CPU is all that it is. I'll let it go. Now"
    },
    {
      "Time_Start": 1667.8400000000001,
      "Time_End": 1672.88,
      "Text": " uh the ECU wouldn't actually react to any kind of messages because it's sleeping state. So I"
    },
    {
      "Time_Start": 1672.88,
      "Time_End": 1679.26,
      "Text": " have to press this button. This will turn on one of the LEDs that were so loved at the airport."
    },
    {
      "Time_Start": 1679.3,
      "Time_End": 1684.3799999999999,
      "Text": " And once it turns off, I know that the car is properly simulated and I can start working with"
    },
    {
      "Time_Start": 1684.3799999999999,
      "Time_End": 1689.3799999999999,
      "Text": " the ECU. Uh the CPU sh- still shouldn't be halted. Uh but this would change after I sent the"
    },
    {
      "Time_Start": 1693.0,
      "Time_End": 1698.0,
      "Text": " attacker message. And as you can see it did. Now we're right before the mem copy function. And"
    },
    {
      "Time_Start": 1701.34,
      "Time_End": 1705.84,
      "Text": " we can investigate the registers. And from the beginning of the demo, we can actually know"
    },
    {
      "Time_Start": 1705.8400000000001,
      "Time_End": 1710.8400000000001,
      "Text": " that uh the register R3 is the one that holds the destination uh location. So I can use mem 32"
    },
    {
      "Time_Start": 1713.0200000000002,
      "Time_End": 1718.9,
      "Text": " function uh command to dump that part of the memory. I'm also terrible sorry to anyone who"
    },
    {
      "Time_Start": 1718.9,
      "Time_End": 1723.9,
      "Text": " knows how to work with J-Link and these kind of commands. I'm not really good with that. Uh but"
    },
    {
      "Time_Start": 1725.7800000000002,
      "Time_End": 1732.4,
      "Text": " here, these 8 bytes are the legitimate V7 buffer. Uh this is what should be overwritten with the"
    },
    {
      "Time_Start": 1732.42,
      "Time_End": 1737.42,
      "Text": " candata. This is stack canary which is interestingly set to all 0s. And this is the value that"
    },
    {
      "Time_Start": 1739.76,
      "Time_End": 1744.76,
      "Text": " should be protected by the stack canary. Uh now uh comes the part where I'm not really good with"
    },
    {
      "Time_Start": 1746.7,
      "Time_End": 1753.0600000000002,
      "Text": " J-Link. Uh because this is how I step over breakpoints. As I said I'm sorry to anyone who"
    },
    {
      "Time_Start": 1753.0600000000002,
      "Time_End": 1758.0600000000002,
      "Text": " knows how to do that. And if I repeat the command now, uh we can see that these 41, 42, this is"
    },
    {
      "Time_Start": 1759.06,
      "Time_End": 1764.06,
      "Text": " basically the A, B, C, D, E, F, G, H string. This is the stack canary which has been"
    },
    {
      "Time_Start": 1767.0,
      "Time_End": 1773.74,
      "Text": " overwritten with the can ID. So we can cheer up a bit because we are controlling quite a lot of"
    },
    {
      "Time_Start": 1773.74,
      "Time_End": 1779.22,
      "Text": " bytes that we're overflowing. But we can't really because if we change the can ID, this"
    },
    {
      "Time_Start": 1779.22,
      "Time_End": 1784.82,
      "Text": " overflow would never happen. So again, we can't really change what we overflow with in this"
    },
    {
      "Time_Start": 1784.82,
      "Time_End": 1790.12,
      "Text": " case. Uh then this is probably can DLC based on the value here. Then there are some null bytes"
    },
    {
      "Time_Start": 1790.12,
      "Time_End": 1795.76,
      "Text": " for some flags uh inside the can structure. And this D8 is from the original pointer. We"
    },
    {
      "Time_Start": 1795.76,
      "Time_End": 1800.76,
      "Text": " haven't really overwritten that. Uh now having access to the debugger is nice. Uh uh but"
    },
    {
      "Time_Start": 1804.3999999999999,
      "Time_End": 1811.1799999999998,
      "Text": " sometimes you don't have that. And let me just check that the CPU is not halted. It is not. And"
    },
    {
      "Time_Start": 1811.2,
      "Time_End": 1815.88,
      "Text": " in this suitcase there is a third layer underneath the J-Link layer and that contains an"
    },
    {
      "Time_Start": 1815.88,
      "Time_End": 1820.54,
      "Text": " oscilloscope. One of the oscilloscope probes is connected here to the CAN bus. The other"
    },
    {
      "Time_Start": 1820.54,
      "Time_End": 1825.5600000000002,
      "Text": " oscilloscope probe is hidden under this uh to sense the NFC field. So if I now press this"
    },
    {
      "Time_Start": 1828.26,
      "Time_End": 1834.8600000000001,
      "Text": " simulation button, I can go into the oscilloscope view and start tracking. The red line is the"
    },
    {
      "Time_Start": 1834.8600000000001,
      "Time_End": 1841.14,
      "Text": " NFC field. The blue line is the CAN bus. So when the ECU comes up you can see NFC field is up."
    },
    {
      "Time_Start": 1841.16,
      "Time_End": 1846.16,
      "Text": " And if I press the attacker button, you'll first see that, let me stop that first. Uh you'll see"
    },
    {
      "Time_Start": 1848.66,
      "Time_End": 1855.24,
      "Text": " that the CAN messages have stopped being sent. That's the reset of the ECU. And about a half a"
    },
    {
      "Time_Start": 1855.24,
      "Time_End": 1859.48,
      "Text": " second after that the NFC field got killed as well. Uh this is how we initially found the"
    },
    {
      "Time_Start": 1859.48,
      "Time_End": 1865.22,
      "Text": " vulnerability through fuzzing and using this side channel detection. Uh the delay between the"
    },
    {
      "Time_Start": 1865.22,
      "Time_End": 1870.3200000000002,
      "Text": " crash of the MCU and the NFC field disappearing is caused by the fact that the NFC controller"
    },
    {
      "Time_Start": 1870.34,
      "Time_End": 1875.3799999999999,
      "Text": " is actually a separate chip. And there's a communication line between the main MCU and the"
    },
    {
      "Time_Start": 1875.3799999999999,
      "Time_End": 1881.62,
      "Text": " NFC chip. And that's why there's a bit of a half second delay before that shuts down. Uh I'll try"
    },
    {
      "Time_Start": 1881.62,
      "Time_End": 1887.46,
      "Text": " to zoom into this but I've have never found a way how to increase text here so you'll probably"
    },
    {
      "Time_Start": 1887.46,
      "Time_End": 1893.3999999999999,
      "Text": " not be able to read that. Uh but the message before this drop ends, uh before this drop"
    },
    {
      "Time_Start": 1893.3999999999999,
      "Time_End": 1898.8999999999999,
      "Text": " happens, the last message is the one we've sent so ID 600A. And the voltage drop is actually"
    },
    {
      "Time_Start": 1898.92,
      "Time_End": 1904.8200000000002,
      "Text": " caused by the GPIO pins being reset into their default state. After that if I zoom out a bit,"
    },
    {
      "Time_Start": 1904.8200000000002,
      "Time_End": 1911.26,
      "Text": " uh there is a break in CAN messages being sent. This is because the ECU is restarting. And then"
    },
    {
      "Time_Start": 1911.26,
      "Time_End": 1916.74,
      "Text": " it gets into the initial state where it again waits for it to be restarted. This is just one of"
    },
    {
      "Time_Start": 1916.74,
      "Time_End": 1921.74,
      "Text": " the side channel ways and when I was here uh I've been actually given uh this invitation to a"
    },
    {
      "Time_Start": 1922.5,
      "Time_End": 1927.5,
      "Text": " high roller comm. And quite interestingly it actually works as an NFC field detector. So if"
    },
    {
      "Time_Start": 1931.14,
      "Time_End": 1936.14,
      "Text": " you don't want to use oscilloscopes for whatever reason, you can actually use this invitation"
    },
    {
      "Time_Start": 1938.28,
      "Time_End": 1943.28,
      "Text": " that you can get here at DEF CON. Uh if placed properly, this will light up the LED here"
    },
    {
      "Time_Start": 1943.6,
      "Time_End": 1948.6,
      "Text": " whenever it sees the NFC field. And then by just pressing this button, you'll see that the"
    },
    {
      "Time_Start": 1953.04,
      "Time_End": 1958.04,
      "Text": " NFC field will stop. I'm not going to the high roller comm by the way. I have other plans so. But"
    },
    {
      "Time_Start": 1960.82,
      "Time_End": 1967.56,
      "Text": " anyway thanks I like this. Uh the other side channel possibilities are uh detecting power"
    },
    {
      "Time_Start": 1967.58,
      "Time_End": 1972.58,
      "Text": " consumption uh that however requires soldering uh which we have done here. Uh but uh you can"
    },
    {
      "Time_Start": 1975.22,
      "Time_End": 1980.28,
      "Text": " also do it on the CAN bus. Uh there are me- usually messages that appear periodically so you"
    },
    {
      "Time_Start": 1980.28,
      "Time_End": 1985.82,
      "Text": " can detect the time difference in between the periodic messages. And the easiest way is when"
    },
    {
      "Time_Start": 1985.82,
      "Time_End": 1991.56,
      "Text": " you find an ECU that actually sends a specific message on a reset. That's the easiest way how"
    },
    {
      "Time_Start": 1991.56,
      "Time_End": 1996.96,
      "Text": " to detect a reset. Uh there is a fuzzer published for that as well. It's actually not"
    },
    {
      "Time_Start": 1997.0,
      "Time_End": 2000.64,
      "Text": " published yet because I haven't clicked the button to publish it. But it will be right after"
    },
    {
      "Time_Start": 2000.64,
      "Time_End": 2006.48,
      "Text": " this call. Uh now I'd like to discuss who's affected by this issue. Uh it could be basically"
    },
    {
      "Time_Start": 2006.48,
      "Time_End": 2012.38,
      "Text": " anyone who just blindly accepts the value of this DLC field in some memory copy operations. Uh we"
    },
    {
      "Time_Start": 2012.38,
      "Time_End": 2018.66,
      "Text": " also looked at the popular SDKs and RTOSs and found that Armabed OS, STM32Qube SDK and"
    },
    {
      "Time_Start": 2018.66,
      "Time_End": 2024.46,
      "Text": " NXP MCU Express OSDK, they don't really care and they will send you any value in the DLC field"
    },
    {
      "Time_Start": 2024.46,
      "Time_End": 2030.1000000000001,
      "Text": " that you send to it. Uh we reported this to all of them so as of now this should have been"
    },
    {
      "Time_Start": 2030.1000000000001,
      "Time_End": 2035.18,
      "Text": " fixed. Uh but there are other frameworks, some of them commercial we haven't really looked at"
    },
    {
      "Time_Start": 2035.18,
      "Time_End": 2041.28,
      "Text": " so those might be still vulnerable. We looked also at the default Linux kernel drivers which"
    },
    {
      "Time_Start": 2041.28,
      "Time_End": 2047.16,
      "Text": " are not uh vulnerable so those will never ever pass you anything higher than 8 in the DLC field"
    },
    {
      "Time_Start": 2047.16,
      "Time_End": 2052.96,
      "Text": " if you're working with it. And now is a good time to look at other CAN bus versions so CANFD"
    },
    {
      "Time_Start": 2052.96,
      "Time_End": 2059.8,
      "Text": " is not affected by the nature of it because uh the data payload was increased to 64 bytes. Uh"
    },
    {
      "Time_Start": 2059.8,
      "Time_End": 2065.54,
      "Text": " but the DLC field stayed at 4 bits and there is a weird translation table where you translate"
    },
    {
      "Time_Start": 2065.54,
      "Time_End": 2070.54,
      "Text": " into those 4 bits how many bytes follow. CANXL is likely not affected. Uh I would like to wait"
    },
    {
      "Time_Start": 2073.78,
      "Time_End": 2078.56,
      "Text": " with any judgements here because I haven't seen any real implementation of it anywhere. Uh but"
    },
    {
      "Time_Start": 2078.56,
      "Time_End": 2084.7999999999997,
      "Text": " based on the specification it should not be. Uh finally uh I'd like to have some general"
    },
    {
      "Time_Start": 2084.7999999999997,
      "Time_End": 2089.16,
      "Text": " takeaways from this. So first of all if you're a developer regardless of the protocol you work"
    },
    {
      "Time_Start": 2089.16,
      "Time_End": 2095.24,
      "Text": " with, you should consider the metadata of it to as entrusted not just the data it arrives over"
    },
    {
      "Time_Start": 2095.24,
      "Time_End": 2100.98,
      "Text": " it. It al- it is also good to know how the libraries you're actually working with are handling"
    },
    {
      "Time_Start": 2100.98,
      "Time_End": 2105.68,
      "Text": " values such as length of incoming data for that matter. And if you're on the assessment side"
    },
    {
      "Time_Start": 2105.7,
      "Time_End": 2109.7999999999997,
      "Text": " such as me uh I would like to suggest that it's always worth looking one layer below the"
    },
    {
      "Time_Start": 2109.7999999999997,
      "Time_End": 2114.3399999999997,
      "Text": " obvious application data into the protocol world because there may be some interesting"
    },
    {
      "Time_Start": 2114.3399999999997,
      "Time_End": 2120.06,
      "Text": " vulnerabilities in there as well. With that I'd like to thank you for your attention and ask if"
    },
    {
      "Time_Start": 2120.06,
      "Time_End": 2125.06,
      "Text": " you have any questions. I'll try to stand and adjust this microphone again. The high roller"
    },
    {
      "Time_Start": 2125.86,
      "Time_End": 2131.86,
      "Text": " invitation although I'm not sure if it's invitation I can give it to someone if they want. I have"
    },
    {
      "Time_Start": 2140.16,
      "Time_End": 2146.16,
      "Text": " enough things that the tech NFC field at home. There is a microphone over there so that"
    },
    {
      "Time_Start": 2146.58,
      "Time_End": 2152.58,
      "Text": " everyone can hear. Have you tried to increase the F value to read more memory and see what"
    },
    {
      "Time_Start": 2159.92,
      "Time_End": 2164.66,
      "Text": " happens? Or try to override? I'm sorry I haven't heard. Could you come just here this"
    },
    {
      "Time_Start": 2164.66,
      "Time_End": 2170.66,
      "Text": " microphone seems to work a bit better. You have a stage time. So the question was whether I"
    },
    {
      "Time_Start": 2171.22,
      "Time_End": 2177.22,
      "Text": " try to increase the F value in the DLC. Uh I can't because there are just 4 bits and if I set"
    },
    {
      "Time_Start": 2180.98,
      "Time_End": 2187.74,
      "Text": " all 4 bits to 1 it is up to F. I'd love to have more than F but I can't. Actually in"
    },
    {
      "Time_Start": 2187.74,
      "Time_End": 2193.74,
      "Text": " Kinexcel the DLC field is 11 which can fit up to 2047. Uh but then the specification says you"
    },
    {
      "Time_Start": 2194.6600000000003,
      "Time_End": 2200.6600000000003,
      "Text": " can have up to 2048 bytes of data and I don't know how that's gonna work. But I'll wait for"
    },
    {
      "Time_Start": 2202.9,
      "Time_End": 2208.9,
      "Text": " the implementation and then I'll hack crap out of it. I guess that's all. So thank you and"
    },
    {
      "Time_Start": 2215.86,
      "Time_End": 2218.86,
      "Text": " have a nice day."
    }
  ]
}