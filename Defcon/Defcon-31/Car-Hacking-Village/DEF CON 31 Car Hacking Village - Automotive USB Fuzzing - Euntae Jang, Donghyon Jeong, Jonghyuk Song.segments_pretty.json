{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 5.44,
      "Text": "This text was transcribed using whisper model: large-v2\n\n My name is Jonghyeok Song, I'm the third author of this talk."
    },
    {
      "Time_Start": 5.44,
      "Time_End": 10.64,
      "Text": " Actually, first and second authors are playing CTF now, including me."
    },
    {
      "Time_Start": 10.64,
      "Time_End": 18.240000000000002,
      "Text": " So if you want to see first and second authors or me, you can see there."
    },
    {
      "Time_Start": 18.240000000000002,
      "Time_End": 22.8,
      "Text": " Anyway, today's talk's title is"
    },
    {
      "Time_Start": 22.8,
      "Time_End": 30.96,
      "Text": " Automotive USB Forging, How to Forge USB in Vehicles to Discover the Real-World Vulnerabilities."
    },
    {
      "Time_Start": 30.96,
      "Time_End": 39.68,
      "Text": " In this talk, we propose a way to conduct USB forging to own real car."
    },
    {
      "Time_Start": 39.68,
      "Time_End": 45.36,
      "Text": " We tried USB forging to real cars and found some vulnerabilities."
    },
    {
      "Time_Start": 45.36,
      "Time_End": 50.56,
      "Text": " Today I'm going to show how we did it."
    },
    {
      "Time_Start": 50.56,
      "Time_End": 53.6,
      "Text": " First, I'm going to introduce my team."
    },
    {
      "Time_Start": 53.6,
      "Time_End": 60.800000000000004,
      "Text": " Actually, we are all Red Team members and we are all offensive security researchers at Autocrypt."
    },
    {
      "Time_Start": 60.800000000000004,
      "Time_End": 67.52000000000001,
      "Text": " Autocrypt is a mobility security company, especially focusing on automotive security."
    },
    {
      "Time_Start": 67.52000000000001,
      "Time_End": 76.08,
      "Text": " So we have been conducting penetration tests and forging tests with OEMs and tier companies."
    },
    {
      "Time_Start": 76.08,
      "Time_End": 82.08,
      "Text": " We are actually doing security tests to the real cars with car companies."
    },
    {
      "Time_Start": 82.08,
      "Time_End": 87.36,
      "Text": " So, of course, among the tests, we are doing USB forging."
    },
    {
      "Time_Start": 87.36,
      "Time_End": 93.36,
      "Text": " So I'm going to tell you how we are doing USB forging in the field."
    },
    {
      "Time_Start": 93.36,
      "Time_End": 98.0,
      "Text": " And also I'll explain the limitations of the current method."
    },
    {
      "Time_Start": 98.0,
      "Time_End": 104.32,
      "Text": " And I will describe how we have improved it."
    },
    {
      "Time_Start": 104.32000000000001,
      "Time_End": 111.44000000000001,
      "Text": " So let's talk about the current USB forging in automotive industry."
    },
    {
      "Time_Start": 111.44000000000001,
      "Time_End": 119.12,
      "Text": " There are three characteristics in USB forging to real cars."
    },
    {
      "Time_Start": 119.12,
      "Time_End": 123.36000000000001,
      "Text": " First, it's a black box forging."
    },
    {
      "Time_Start": 123.36000000000001,
      "Time_End": 131.12,
      "Text": " OEM usually don't have a source code of the car because tier suppliers don't provide source code to the OEMs."
    },
    {
      "Time_Start": 131.12,
      "Time_End": 139.28,
      "Text": " So we also don't have source code and so we cannot rebuild the source code for forging."
    },
    {
      "Time_Start": 139.28,
      "Time_End": 146.8,
      "Text": " And most cases, our target is completed vehicles with the production version of issues."
    },
    {
      "Time_Start": 146.8,
      "Time_End": 154.96,
      "Text": " It means that there is no debugger ports, so we cannot monitor inside of car."
    },
    {
      "Time_Start": 155.04000000000002,
      "Time_End": 162.72,
      "Text": " Because of these reasons, most security tests to the cars are usually done in the black box."
    },
    {
      "Time_Start": 162.72,
      "Time_End": 170.0,
      "Text": " So we have to find a way to test well even in the black box testing."
    },
    {
      "Time_Start": 170.0,
      "Time_End": 178.0,
      "Text": " Second, there is no commercial USB forger that can be directly connected to the car with a USB cable."
    },
    {
      "Time_Start": 178.0,
      "Time_End": 186.48,
      "Text": " There are some research about USB forging, you know, but there are not useful forgers for car forging."
    },
    {
      "Time_Start": 186.48,
      "Time_End": 192.72,
      "Text": " In particular, there is no USB forger that can be used in a black box environment."
    },
    {
      "Time_Start": 192.72,
      "Time_End": 197.52,
      "Text": " We were able to test USB on the completed car."
    },
    {
      "Time_Start": 197.52,
      "Time_End": 203.04,
      "Text": " To do that, we needed to connect a test PC to the car by USB."
    },
    {
      "Time_Start": 203.04,
      "Time_End": 210.95999999999998,
      "Text": " But there is no commercial USB forger which can connect to the car directly."
    },
    {
      "Time_Start": 210.95999999999998,
      "Time_End": 216.72,
      "Text": " Because of the first and second reason, there is a third reason, third characteristic."
    },
    {
      "Time_Start": 216.72,
      "Time_End": 228.88,
      "Text": " To test the attack over USB, automotive OEM began to test the media players in the infotainment system"
    },
    {
      "Time_Start": 228.88,
      "Time_End": 235.84,
      "Text": " by inserting USB stick containing malformed media files."
    },
    {
      "Time_Start": 235.84,
      "Time_End": 241.84,
      "Text": " I don't know how all automakers do USB forging, but as far as I know,"
    },
    {
      "Time_Start": 241.84,
      "Time_End": 248.72,
      "Text": " many USB forging tests are usually done in this way for the completed car."
    },
    {
      "Time_Start": 248.72,
      "Time_End": 260.4,
      "Text": " So, this slide shows the current USB forging methods, forging procedures that are performed in the field."
    },
    {
      "Time_Start": 260.4,
      "Time_End": 266.56,
      "Text": " First, the point is so small, sorry."
    },
    {
      "Time_Start": 266.56,
      "Time_End": 273.76,
      "Text": " First, testers generate the malformed media files by forger in the PC."
    },
    {
      "Time_Start": 273.76,
      "Time_End": 278.56,
      "Text": " Second, testers copy the malformed files to the USB stick."
    },
    {
      "Time_Start": 278.56,
      "Time_End": 283.76,
      "Text": " And third, testers insert the USB stick into the car."
    },
    {
      "Time_Start": 283.76,
      "Time_End": 292.0,
      "Text": " This USB stick actually inserted into the USB port of the head unit issue, infotainment issue."
    },
    {
      "Time_Start": 292.0,
      "Time_End": 300.4,
      "Text": " Fourth, most media players in the car automatically browse the file in the USB stick and play the files."
    },
    {
      "Time_Start": 300.4,
      "Time_End": 305.92,
      "Text": " Fifth, when media player plays the files,"
    },
    {
      "Time_Start": 305.92,
      "Time_End": 310.32,
      "Text": " the media player could be freezed or issue could be rebooted."
    },
    {
      "Time_Start": 310.32,
      "Time_End": 318.48,
      "Text": " So, testers should keep an eye on the media player while forging to check the failures."
    },
    {
      "Time_Start": 318.48,
      "Time_End": 328.96000000000004,
      "Text": " If all files are played, testers go back to step one and repeat all these steps again."
    },
    {
      "Time_Start": 329.91999999999996,
      "Time_End": 332.08,
      "Text": " Most cases, head unit issue."
    },
    {
      "Time_Start": 332.08,
      "Time_End": 336.08,
      "Text": " Head unit, okay."
    },
    {
      "Time_Start": 336.08,
      "Time_End": 345.35999999999996,
      "Text": " Okay, in this procedure, we usually play the hundreds or thousands files at a time."
    },
    {
      "Time_Start": 345.35999999999996,
      "Time_End": 351.44,
      "Text": " It depends on the maximum number of files that media player can load at one time."
    },
    {
      "Time_Start": 351.44,
      "Time_End": 355.91999999999996,
      "Text": " Of course, the files are abnormal files, malformed files."
    },
    {
      "Time_Start": 355.92,
      "Time_End": 362.24,
      "Text": " The media player does not play most files and just move on to the next file."
    },
    {
      "Time_Start": 362.24,
      "Time_End": 370.0,
      "Text": " So, usually it takes about 10 minutes or 5 minutes to play a few hundred files."
    },
    {
      "Time_Start": 370.0,
      "Time_End": 375.92,
      "Text": " It means that tester has to repeat this process every 10 minutes."
    },
    {
      "Time_Start": 375.92,
      "Time_End": 381.6,
      "Text": " This is quite a burden and annoying task to the testers."
    },
    {
      "Time_Start": 381.6,
      "Time_End": 385.20000000000005,
      "Text": " And there's one more important thing."
    },
    {
      "Time_Start": 385.2,
      "Time_End": 388.71999999999997,
      "Text": " We are testing the completed car."
    },
    {
      "Time_Start": 388.71999999999997,
      "Time_End": 393.59999999999997,
      "Text": " It means that testers should do this in the car, sitting on the car seat."
    },
    {
      "Time_Start": 393.59999999999997,
      "Time_End": 399.28,
      "Text": " It could be also very uncomfortable to the tester."
    },
    {
      "Time_Start": 399.28,
      "Time_End": 402.96,
      "Text": " Okay, so let me summarize the limitation again."
    },
    {
      "Time_Start": 402.96,
      "Time_End": 410.24,
      "Text": " First, each step requires many manual efforts to testers."
    },
    {
      "Time_Start": 410.24,
      "Time_End": 413.52,
      "Text": " There are many steps in the test procedure."
    },
    {
      "Time_Start": 413.59999999999997,
      "Time_End": 419.12,
      "Text": " Testers should generate the files, copy files, and insert sticks."
    },
    {
      "Time_Start": 419.12,
      "Time_End": 425.84,
      "Text": " And every test cycle, testers should repeat that action again and again."
    },
    {
      "Time_Start": 425.84,
      "Time_End": 429.03999999999996,
      "Text": " It's very burden to testers."
    },
    {
      "Time_Start": 429.03999999999996,
      "Time_End": 434.96,
      "Text": " Second, there is a limit number of files that can be tested at a time."
    },
    {
      "Time_Start": 434.96,
      "Time_End": 442.71999999999997,
      "Text": " This is the main reason that testers should repeat these steps several times."
    },
    {
      "Time_Start": 442.72,
      "Time_End": 448.08000000000004,
      "Text": " Each media player in the car has the maximum number of files that can be played at one time."
    },
    {
      "Time_Start": 448.08000000000004,
      "Time_End": 452.32000000000005,
      "Text": " Even if you can put millions of files into a USB stick,"
    },
    {
      "Time_Start": 452.32000000000005,
      "Time_End": 458.8,
      "Text": " the media player only takes the hundreds or thousands of files and plays only them."
    },
    {
      "Time_Start": 458.8,
      "Time_End": 462.88000000000005,
      "Text": " So, when all files on the USB sticks are played,"
    },
    {
      "Time_Start": 462.88000000000005,
      "Time_End": 467.68,
      "Text": " the tester must generate new files again and put them into USB stick again"
    },
    {
      "Time_Start": 467.68,
      "Time_End": 470.56,
      "Text": " and insert it into the car again."
    },
    {
      "Time_Start": 471.12,
      "Time_End": 473.28000000000003,
      "Text": " As you know, it's a fuzzing test,"
    },
    {
      "Time_Start": 473.28000000000003,
      "Time_End": 478.88,
      "Text": " so we need to test as many files as possible to find vulnerabilities."
    },
    {
      "Time_Start": 478.88,
      "Time_End": 487.68,
      "Text": " So, testers should repeat those actions several times to test enough files."
    },
    {
      "Time_Start": 487.68,
      "Time_End": 491.68,
      "Text": " And third, to detect failures by fuzzing,"
    },
    {
      "Time_Start": 491.68,
      "Time_End": 499.52,
      "Text": " testers must keep an eye on the car while it's being fuzzed."
    },
    {
      "Time_Start": 499.52000000000004,
      "Time_End": 509.36,
      "Text": " So, testers use media file fuzzer."
    },
    {
      "Time_Start": 509.36,
      "Time_End": 510.88000000000005,
      "Text": " It's not connected to the car."
    },
    {
      "Time_Start": 510.88000000000005,
      "Time_End": 514.5600000000001,
      "Text": " It just generates malformed files in the PC."
    },
    {
      "Time_Start": 514.5600000000001,
      "Time_End": 520.96,
      "Text": " So, fuzzer cannot detect the failures caused by fuzzing."
    },
    {
      "Time_Start": 520.96,
      "Time_End": 529.2,
      "Text": " Therefore, testers should observe the media player while fuzzing is performed."
    },
    {
      "Time_Start": 529.2,
      "Time_End": 532.4000000000001,
      "Text": " As you know, as I said before, to find vulnerability,"
    },
    {
      "Time_Start": 532.4000000000001,
      "Time_End": 534.96,
      "Text": " testers should test a large number of files."
    },
    {
      "Time_Start": 534.96,
      "Time_End": 540.8000000000001,
      "Text": " It means that he stay and watch the media player for a long time in the car."
    },
    {
      "Time_Start": 540.8000000000001,
      "Time_End": 543.0400000000001,
      "Text": " It's not that good."
    },
    {
      "Time_Start": 543.0400000000001,
      "Time_End": 548.24,
      "Text": " Fourth, it's application fuzzing."
    },
    {
      "Time_Start": 548.24,
      "Time_End": 551.2,
      "Text": " This method cannot do kernel fuzzing."
    },
    {
      "Time_Start": 551.2,
      "Time_End": 556.24,
      "Text": " So, it's obvious because it's media player fuzzing."
    },
    {
      "Time_Start": 556.24,
      "Time_End": 566.24,
      "Text": " But testing only media player is not enough to check all USB attacks."
    },
    {
      "Time_Start": 566.24,
      "Time_End": 570.88,
      "Text": " So, in this talk, we suggest a new automotive USB fuzzing method"
    },
    {
      "Time_Start": 570.88,
      "Time_End": 573.2,
      "Text": " which is practically effective."
    },
    {
      "Time_Start": 573.2,
      "Time_End": 578.48,
      "Text": " We try to remove the current limitations that I mentioned just before."
    },
    {
      "Time_Start": 578.48,
      "Time_End": 583.52,
      "Text": " So, what's the requirements of the new fuzzing method?"
    },
    {
      "Time_Start": 583.52,
      "Time_End": 591.76,
      "Text": " First, fuzzer should transmit malicious files to the car directly."
    },
    {
      "Time_Start": 591.76,
      "Time_End": 598.24,
      "Text": " Second, fuzzer should monitor the car to detect failures caused by fuzzing."
    },
    {
      "Time_Start": 598.24,
      "Time_End": 604.0799999999999,
      "Text": " Third, fuzzer should be able to test the kernel area."
    },
    {
      "Time_Start": 604.0799999999999,
      "Time_End": 609.04,
      "Text": " So, therefore, in this talk, I would like to introduce"
    },
    {
      "Time_Start": 609.12,
      "Time_End": 613.52,
      "Text": " automotive USB fuzzing method that satisfy these three requirements."
    },
    {
      "Time_Start": 613.52,
      "Time_End": 616.4,
      "Text": " Actually, I will explain later."
    },
    {
      "Time_Start": 616.4,
      "Time_End": 621.76,
      "Text": " Second requirement is difficult to completely satisfy."
    },
    {
      "Time_Start": 621.76,
      "Time_End": 628.16,
      "Text": " In some cases, we cannot satisfy the second requirement yet"
    },
    {
      "Time_Start": 628.16,
      "Time_End": 629.92,
      "Text": " because it's a black box fuzzing."
    },
    {
      "Time_Start": 629.92,
      "Time_End": 632.9599999999999,
      "Text": " We cannot monitor the inside of the car."
    },
    {
      "Time_Start": 632.96,
      "Time_End": 640.08,
      "Text": " But we try to suggest the best ways to detect failures in black box fuzzing."
    },
    {
      "Time_Start": 640.08,
      "Time_End": 648.72,
      "Text": " So, main contribution of the talk is that we did not develop new fancy fuzzing techniques."
    },
    {
      "Time_Start": 648.72,
      "Time_End": 651.2,
      "Text": " There are already great USB research,"
    },
    {
      "Time_Start": 651.2,
      "Time_End": 657.9200000000001,
      "Text": " and we show how to apply them for fuzzing cars."
    },
    {
      "Time_Start": 658.0,
      "Time_End": 663.04,
      "Text": " Actually, finally, we found some vulnerabilities in several cars."
    },
    {
      "Time_Start": 663.04,
      "Time_End": 664.9599999999999,
      "Text": " I'm going to show how to do that."
    },
    {
      "Time_Start": 667.1999999999999,
      "Time_End": 671.68,
      "Text": " So, how do we solve the challenges?"
    },
    {
      "Time_Start": 671.68,
      "Time_End": 676.9599999999999,
      "Text": " So, first, let's connect fuzzer to the car directly by a USB cable."
    },
    {
      "Time_Start": 678.24,
      "Time_End": 683.1999999999999,
      "Text": " If fuzzing is possible in this way, fuzzing process becomes very simple."
    },
    {
      "Time_Start": 683.76,
      "Time_End": 690.5600000000001,
      "Text": " There are only two steps, connect fuzzer and car, and just start fuzzing."
    },
    {
      "Time_Start": 691.6800000000001,
      "Time_End": 697.12,
      "Text": " If it's possible, fuzzer can automatically transmit my phone files to the car,"
    },
    {
      "Time_Start": 697.12,
      "Time_End": 700.88,
      "Text": " and fuzzer can monitor the car to detect failures."
    },
    {
      "Time_Start": 701.6,
      "Time_End": 705.44,
      "Text": " It means that tester don't have to move the files"
    },
    {
      "Time_Start": 705.44,
      "Time_End": 708.8000000000001,
      "Text": " and don't have to monitor the car during fuzzing."
    },
    {
      "Time_Start": 709.7600000000001,
      "Time_End": 713.1200000000001,
      "Text": " So, let's talk about the advantage first."
    },
    {
      "Time_Start": 714.72,
      "Time_End": 719.36,
      "Text": " First, it reduces the workload of testers by removing the test steps,"
    },
    {
      "Time_Start": 720.6400000000001,
      "Time_End": 726.2400000000001,
      "Text": " because in the previous method, it requires five steps,"
    },
    {
      "Time_Start": 726.2400000000001,
      "Time_End": 731.6800000000001,
      "Text": " and moreover, the steps should be repeated several times to test enough number of files."
    },
    {
      "Time_Start": 731.84,
      "Time_End": 740.72,
      "Text": " But if fuzzer can transmit the file to the car by itself,"
    },
    {
      "Time_Start": 742.1600000000001,
      "Time_End": 744.72,
      "Text": " fuzzing process becomes very simple."
    },
    {
      "Time_Start": 745.6800000000001,
      "Time_End": 751.36,
      "Text": " Second, in this test, fuzzer can detect your failures,"
    },
    {
      "Time_Start": 751.36,
      "Time_End": 754.96,
      "Text": " so tester doesn't need to monitor all the time."
    },
    {
      "Time_Start": 757.36,
      "Time_End": 761.5200000000001,
      "Text": " And third, fuzzer can automatically generate my phone files"
    },
    {
      "Time_Start": 761.52,
      "Time_End": 763.52,
      "Text": " and send them to the car."
    },
    {
      "Time_Start": 764.24,
      "Time_End": 766.88,
      "Text": " I don't know why it's moved to the next page."
    },
    {
      "Time_Start": 770.56,
      "Time_End": 771.06,
      "Text": " Sorry."
    },
    {
      "Time_Start": 776.24,
      "Time_End": 776.88,
      "Text": " Sorry, sorry."
    },
    {
      "Time_Start": 777.84,
      "Time_End": 782.96,
      "Text": " So, fuzzer automatically generates my phone files and sends them to vehicle,"
    },
    {
      "Time_Start": 783.52,
      "Time_End": 786.3199999999999,
      "Text": " so fuzzing can continue without human interaction."
    },
    {
      "Time_Start": 787.76,
      "Time_End": 789.68,
      "Text": " And now we can do corner fuzzing."
    },
    {
      "Time_Start": 792.24,
      "Time_End": 794.88,
      "Text": " So, how can we do these things?"
    },
    {
      "Time_Start": 796.0,
      "Time_End": 799.36,
      "Text": " Because of these two things, we can do that."
    },
    {
      "Time_Start": 800.64,
      "Time_End": 802.8,
      "Text": " First is Linux USB gadget."
    },
    {
      "Time_Start": 805.84,
      "Time_End": 811.6,
      "Text": " We need to make the car recognize our device as USB storage."
    },
    {
      "Time_Start": 812.4,
      "Time_End": 815.12,
      "Text": " To do that, we need to use Linux USB gadget."
    },
    {
      "Time_Start": 815.84,
      "Time_End": 821.6,
      "Text": " Linux USB gadget makes Linux system appears to be a USB device to a host."
    },
    {
      "Time_Start": 822.72,
      "Time_End": 826.16,
      "Text": " So, it's a kind of way to emulate the storage device."
    },
    {
      "Time_Start": 827.2,
      "Time_End": 832.48,
      "Text": " As I know, it's only available in Linux, so we need to prepare Linux device."
    },
    {
      "Time_Start": 833.52,
      "Time_End": 836.88,
      "Text": " So, in our test, we use Raspberry Pi."
    },
    {
      "Time_Start": 838.4,
      "Time_End": 842.4,
      "Text": " So, it means that we emulate the USB storage using the Raspberry Pi."
    },
    {
      "Time_Start": 843.36,
      "Time_End": 852.16,
      "Text": " So, car recognizes a specific folder in the Raspberry Pi as USB storage."
    },
    {
      "Time_Start": 853.28,
      "Time_End": 856.72,
      "Text": " So, if we put some files in that folder,"
    },
    {
      "Time_Start": 856.72,
      "Time_End": 859.52,
      "Text": " the media player will get the files and play them."
    },
    {
      "Time_Start": 861.28,
      "Time_End": 864.56,
      "Text": " Second thing is the USB raw gadget."
    },
    {
      "Time_Start": 864.56,
      "Time_End": 867.52,
      "Text": " We also use USB raw gadget for corner fuzzing."
    },
    {
      "Time_Start": 868.3199999999999,
      "Time_End": 872.8,
      "Text": " It's a Linux corner module that implements a low-level interface"
    },
    {
      "Time_Start": 873.76,
      "Time_End": 877.36,
      "Text": " for the Linux USB gadget subsystem."
    },
    {
      "Time_Start": 878.88,
      "Time_End": 882.48,
      "Text": " Using the raw gadget, USB raw gadget,"
    },
    {
      "Time_Start": 882.48,
      "Time_End": 886.56,
      "Text": " we can transmit arbitrary USB requests to the USB host."
    },
    {
      "Time_Start": 889.12,
      "Time_End": 893.28,
      "Text": " Syscall already supports the USB fuzzing using this raw gadget."
    },
    {
      "Time_Start": 893.76,
      "Time_End": 901.1999999999999,
      "Text": " So, we can just use the syscall to fuzz USB corner stacks in the cars."
    },
    {
      "Time_Start": 902.24,
      "Time_End": 908.0799999999999,
      "Text": " So, we use these two things to conduct USB fuzzing to the real cars."
    },
    {
      "Time_Start": 916.72,
      "Time_End": 918.24,
      "Text": " So, let's summarize."
    },
    {
      "Time_Start": 918.24,
      "Time_End": 923.6800000000001,
      "Text": " To USB gadget mode and raw gadget, we need a Linux device."
    },
    {
      "Time_Start": 924.64,
      "Time_End": 928.4,
      "Text": " In this research, we use the Raspberry Pi 4"
    },
    {
      "Time_Start": 928.4,
      "Time_End": 932.96,
      "Text": " and then connect the Raspberry Pi to the car by a USB cable."
    },
    {
      "Time_Start": 934.5600000000001,
      "Time_End": 940.72,
      "Text": " To transmit data, you should use a USB cable that supports data transmission."
    },
    {
      "Time_Start": 940.72,
      "Time_End": 943.44,
      "Text": " Some USB cable, you know, only supports charging."
    },
    {
      "Time_Start": 944.08,
      "Time_End": 947.28,
      "Text": " That kind of USB cable cannot be used in this fuzzing."
    },
    {
      "Time_Start": 948.48,
      "Time_End": 951.6800000000001,
      "Text": " And we set up Raspberry Pi for USB fuzzing."
    },
    {
      "Time_Start": 953.6800000000001,
      "Time_End": 956.8,
      "Text": " To do media player fuzzing, we emulate the Raspberry Pi"
    },
    {
      "Time_Start": 956.8,
      "Time_End": 960.0,
      "Text": " as a USB storage using USB gadget."
    },
    {
      "Time_Start": 960.0,
      "Time_End": 963.04,
      "Text": " And to do corner fuzzing, we use raw gadget."
    },
    {
      "Time_Start": 966.0,
      "Time_End": 970.24,
      "Text": " First, I'm going to tell you about how to do media player fuzzing."
    },
    {
      "Time_Start": 970.96,
      "Time_End": 973.6,
      "Text": " This figure shows the overview."
    },
    {
      "Time_Start": 974.48,
      "Time_End": 979.44,
      "Text": " All these processes are automatically done by fuzzer without human interaction,"
    },
    {
      "Time_Start": 980.32,
      "Time_End": 981.52,
      "Text": " except the start command."
    },
    {
      "Time_Start": 982.96,
      "Time_End": 986.8000000000001,
      "Text": " First, we need to set up Raspberry Pi as a USB gadget."
    },
    {
      "Time_Start": 987.76,
      "Time_End": 991.44,
      "Text": " And second, the fuzzer generates malformed media files into the fuzzer."
    },
    {
      "Time_Start": 992.16,
      "Time_End": 995.84,
      "Text": " And third, the fuzzer mounts the fuzzer as a USB storage."
    },
    {
      "Time_Start": 996.64,
      "Time_End": 1000.5600000000001,
      "Text": " And fourth, if the fuzzer is mounted,"
    },
    {
      "Time_Start": 1000.5600000000001,
      "Time_End": 1003.84,
      "Text": " the media player automatically recognizes it."
    },
    {
      "Time_Start": 1005.2800000000001,
      "Time_End": 1009.6,
      "Text": " Then media player gets all files in the folder and plays them."
    },
    {
      "Time_Start": 1010.5600000000001,
      "Time_End": 1016.4000000000001,
      "Text": " During the files are playing, fuzzer monitors Raspberry Pi's kernel log,"
    },
    {
      "Time_Start": 1016.4000000000001,
      "Time_End": 1022.0000000000001,
      "Text": " which is the message log for detecting failures caused by fuzzing."
    },
    {
      "Time_Start": 1023.6,
      "Time_End": 1028.0,
      "Text": " After all files are played, fuzzer mounts the folder"
    },
    {
      "Time_Start": 1028.0,
      "Time_End": 1030.64,
      "Text": " and removes all files in the folder,"
    },
    {
      "Time_Start": 1030.64,
      "Time_End": 1033.76,
      "Text": " and go back to the step two and repeat the step."
    },
    {
      "Time_Start": 1035.44,
      "Time_End": 1039.76,
      "Text": " This is how to do USB fuzzing by directly connecting the fuzzer and the car."
    },
    {
      "Time_Start": 1042.48,
      "Time_End": 1046.56,
      "Text": " We can do this without the USB stick and without human interaction."
    },
    {
      "Time_Start": 1048.64,
      "Time_End": 1052.24,
      "Text": " So the whole process can be done without human interaction."
    },
    {
      "Time_Start": 1052.24,
      "Time_End": 1061.04,
      "Text": " So this is the initial setup for USB gadget mode."
    },
    {
      "Time_Start": 1061.04,
      "Time_End": 1064.4,
      "Text": " We do this first step in the previous slide."
    },
    {
      "Time_Start": 1066.8,
      "Time_End": 1070.64,
      "Text": " Because of time limit, I can't explain details in each line."
    },
    {
      "Time_Start": 1070.64,
      "Time_End": 1074.24,
      "Text": " But if you want more, you can find the details on the internet."
    },
    {
      "Time_Start": 1074.24,
      "Time_End": 1077.2,
      "Text": " There are already many good articles, papers,"
    },
    {
      "Time_Start": 1077.2,
      "Time_End": 1081.76,
      "Text": " that explain how to make a Raspberry Pi USB storage."
    },
    {
      "Time_Start": 1082.24,
      "Time_End": 1090.24,
      "Text": " And let's talk about how to generate malformed media files."
    },
    {
      "Time_Start": 1093.2,
      "Time_End": 1096.4,
      "Text": " To generate the media files, we collect normal media files"
    },
    {
      "Time_Start": 1097.04,
      "Time_End": 1099.36,
      "Text": " to use them as seed files."
    },
    {
      "Time_Start": 1101.04,
      "Time_End": 1104.88,
      "Text": " Then we manipulate the seed files using bit flipping techniques."
    },
    {
      "Time_Start": 1106.08,
      "Time_End": 1111.28,
      "Text": " We just randomly choose 1% of bits of the seed files"
    },
    {
      "Time_Start": 1111.28,
      "Time_End": 1113.6,
      "Text": " and flip the selected bits."
    },
    {
      "Time_Start": 1114.32,
      "Time_End": 1116.3999999999999,
      "Text": " That's all. It's very simple."
    },
    {
      "Time_Start": 1119.76,
      "Time_End": 1122.56,
      "Text": " Actually, you know, there are already several file fuzzers."
    },
    {
      "Time_Start": 1123.76,
      "Time_End": 1127.6,
      "Text": " But in our test, in our experience,"
    },
    {
      "Time_Start": 1127.6,
      "Time_End": 1132.8799999999999,
      "Text": " they are not very useful to the media player fuzzing in the car."
    },
    {
      "Time_Start": 1135.12,
      "Time_End": 1136.6399999999999,
      "Text": " We cannot figure out why."
    },
    {
      "Time_Start": 1136.6399999999999,
      "Time_End": 1138.8,
      "Text": " We cannot figure out the exact reason."
    },
    {
      "Time_Start": 1138.8,
      "Time_End": 1144.0,
      "Text": " But we just guessed that most existing file fuzzers"
    },
    {
      "Time_Start": 1144.0,
      "Time_End": 1147.36,
      "Text": " mutate the file signature part."
    },
    {
      "Time_Start": 1147.36,
      "Time_End": 1153.44,
      "Text": " It means that if file signature is mutated,"
    },
    {
      "Time_Start": 1153.44,
      "Time_End": 1155.6,
      "Text": " the media player does not play the file."
    },
    {
      "Time_Start": 1158.08,
      "Time_End": 1160.56,
      "Text": " Most media players do not play the files"
    },
    {
      "Time_Start": 1160.56,
      "Time_End": 1162.8799999999999,
      "Text": " which have incorrect file signature."
    },
    {
      "Time_Start": 1164.32,
      "Time_End": 1167.28,
      "Text": " So when we generate the malformed files,"
    },
    {
      "Time_Start": 1167.28,
      "Time_End": 1170.8,
      "Text": " we do not mutate the file signature part."
    },
    {
      "Time_Start": 1173.44,
      "Time_End": 1176.24,
      "Text": " That is our first tip in the car fuzzing,"
    },
    {
      "Time_Start": 1177.36,
      "Time_End": 1179.04,
      "Text": " fuzzing automotive media players."
    },
    {
      "Time_Start": 1180.0,
      "Time_End": 1184.24,
      "Text": " Next tip is if the file content is mutated too much,"
    },
    {
      "Time_Start": 1184.96,
      "Time_End": 1187.84,
      "Text": " some media players don't play the media file also,"
    },
    {
      "Time_Start": 1187.84,
      "Time_End": 1191.84,
      "Text": " even if the media file has correct file signature."
    },
    {
      "Time_Start": 1193.28,
      "Time_End": 1197.04,
      "Text": " So this is why we just mutate only 1% of the file."
    },
    {
      "Time_Start": 1198.24,
      "Time_End": 1205.2,
      "Text": " I cannot say the 1% is the magic value for all cars, all cases."
    },
    {
      "Time_Start": 1205.2,
      "Time_End": 1212.72,
      "Text": " But maybe each car has different media players,"
    },
    {
      "Time_Start": 1212.72,
      "Time_End": 1214.96,
      "Text": " so you should find your values."
    },
    {
      "Time_Start": 1217.76,
      "Time_End": 1218.72,
      "Text": " And there is one more."
    },
    {
      "Time_Start": 1221.92,
      "Time_End": 1224.08,
      "Text": " Each automotive media player supports"
    },
    {
      "Time_Start": 1224.08,
      "Time_End": 1226.32,
      "Text": " different media file types."
    },
    {
      "Time_Start": 1226.32,
      "Time_End": 1231.6,
      "Text": " So before you generate the malformed media files,"
    },
    {
      "Time_Start": 1231.6,
      "Time_End": 1234.0,
      "Text": " you should check the supported file types"
    },
    {
      "Time_Start": 1234.0,
      "Time_End": 1236.48,
      "Text": " and generate only those files."
    },
    {
      "Time_Start": 1237.84,
      "Time_End": 1240.96,
      "Text": " Because the media players will only play the files"
    },
    {
      "Time_Start": 1240.96,
      "Time_End": 1242.3999999999999,
      "Text": " that they support,"
    },
    {
      "Time_Start": 1243.12,
      "Time_End": 1244.8,
      "Text": " so you don't need to generate the files"
    },
    {
      "Time_Start": 1244.8,
      "Time_End": 1248.56,
      "Text": " that are not supported by the media player."
    },
    {
      "Time_Start": 1249.9199999999998,
      "Time_End": 1253.4399999999998,
      "Text": " Usually, media players support many file types."
    },
    {
      "Time_Start": 1254.24,
      "Time_End": 1256.64,
      "Text": " It's just some example of them."
    },
    {
      "Time_Start": 1260.8,
      "Time_End": 1263.04,
      "Text": " Now let's talk about how to detect failures."
    },
    {
      "Time_Start": 1264.64,
      "Time_End": 1267.04,
      "Text": " To detect failures caused by fuzzing,"
    },
    {
      "Time_Start": 1267.04,
      "Time_End": 1270.48,
      "Text": " as you can see, our fuzzer monitors the kernel log,"
    },
    {
      "Time_Start": 1270.48,
      "Time_End": 1272.16,
      "Text": " which is the message."
    },
    {
      "Time_Start": 1274.3200000000002,
      "Time_End": 1278.48,
      "Text": " But I think you probably noticed"
    },
    {
      "Time_Start": 1278.48,
      "Time_End": 1282.3200000000002,
      "Text": " that it is not perfect to detect failures"
    },
    {
      "Time_Start": 1282.32,
      "Time_End": 1284.56,
      "Text": " because the Raspberry Pi de-message log"
    },
    {
      "Time_Start": 1284.56,
      "Time_End": 1288.8,
      "Text": " cannot show the exact state of the target media player"
    },
    {
      "Time_Start": 1288.8,
      "Time_End": 1290.72,
      "Text": " or exact state of the car."
    },
    {
      "Time_Start": 1291.52,
      "Time_End": 1294.0,
      "Text": " It's just the Raspberry Pi's kernel log."
    },
    {
      "Time_Start": 1294.8799999999999,
      "Time_End": 1296.96,
      "Text": " But you know, this is black box fuzzing."
    },
    {
      "Time_Start": 1297.76,
      "Time_End": 1302.08,
      "Text": " The only thing we can use is Raspberry Pi de-message log."
    },
    {
      "Time_Start": 1302.08,
      "Time_End": 1305.28,
      "Text": " That is currently our best option."
    },
    {
      "Time_Start": 1305.84,
      "Time_End": 1310.1599999999999,
      "Text": " So we have to identify the target state"
    },
    {
      "Time_Start": 1310.1599999999999,
      "Time_End": 1311.84,
      "Text": " by only using this log."
    },
    {
      "Time_Start": 1313.12,
      "Time_End": 1315.6799999999998,
      "Text": " So let me explain more detail"
    },
    {
      "Time_Start": 1315.6799999999998,
      "Time_End": 1318.08,
      "Text": " about how our fuzzer detect failures"
    },
    {
      "Time_Start": 1318.08,
      "Time_End": 1319.84,
      "Text": " by the de-message log."
    },
    {
      "Time_Start": 1320.8799999999999,
      "Time_End": 1321.9199999999998,
      "Text": " There are two cases."
    },
    {
      "Time_Start": 1323.6,
      "Time_End": 1327.2,
      "Text": " First, we found out that some issues are rebooted"
    },
    {
      "Time_Start": 1328.48,
      "Time_End": 1330.3999999999999,
      "Text": " if the media player is crashed."
    },
    {
      "Time_Start": 1331.2,
      "Time_End": 1334.24,
      "Text": " In that case, a USB connection between Raspberry Pi"
    },
    {
      "Time_Start": 1334.24,
      "Time_End": 1337.4399999999998,
      "Text": " and issue is of course disconnected"
    },
    {
      "Time_Start": 1337.4399999999998,
      "Time_End": 1339.76,
      "Text": " because issue is rebooted."
    },
    {
      "Time_Start": 1340.32,
      "Time_End": 1342.0,
      "Text": " After issue is rebooted,"
    },
    {
      "Time_Start": 1342.0,
      "Time_End": 1346.0,
      "Text": " Raspberry Pi and issue are connected by USB again."
    },
    {
      "Time_Start": 1346.56,
      "Time_End": 1350.64,
      "Text": " At that time, USB connection log is created at de-message,"
    },
    {
      "Time_Start": 1350.64,
      "Time_End": 1352.64,
      "Text": " so fuzzer can detect failure."
    },
    {
      "Time_Start": 1352.64,
      "Time_End": 1354.96,
      "Text": " Fuzzer can know, oh, there is something wrong"
    },
    {
      "Time_Start": 1354.96,
      "Time_End": 1356.48,
      "Text": " using the de-message log."
    },
    {
      "Time_Start": 1358.32,
      "Time_End": 1359.84,
      "Text": " And there is a second case."
    },
    {
      "Time_Start": 1359.84,
      "Time_End": 1363.76,
      "Text": " Some issue is just shut down and not rebooted again."
    },
    {
      "Time_Start": 1366.56,
      "Time_End": 1369.04,
      "Text": " In this case, there is no USB request."
    },
    {
      "Time_Start": 1369.76,
      "Time_End": 1372.64,
      "Text": " USB connection log in the de-message"
    },
    {
      "Time_Start": 1372.64,
      "Time_End": 1374.64,
      "Text": " because issue is not rebooted."
    },
    {
      "Time_Start": 1375.36,
      "Time_End": 1377.92,
      "Text": " So fuzzer cannot know the failures."
    },
    {
      "Time_Start": 1377.92,
      "Time_End": 1382.0,
      "Text": " So the fuzzer just try to mount the next folder"
    },
    {
      "Time_Start": 1382.0,
      "Time_End": 1383.84,
      "Text": " that contain new files,"
    },
    {
      "Time_Start": 1384.8,
      "Time_End": 1388.8,
      "Text": " but the mount will be failed"
    },
    {
      "Time_Start": 1388.8,
      "Time_End": 1390.56,
      "Text": " because issue is shut down."
    },
    {
      "Time_Start": 1391.2,
      "Time_End": 1394.0,
      "Text": " So at that time, fuzzer can detect failures."
    },
    {
      "Time_Start": 1396.24,
      "Time_End": 1398.32,
      "Text": " Of course, it's not real-time detection,"
    },
    {
      "Time_Start": 1398.32,
      "Time_End": 1401.2,
      "Text": " but it's the best option we can do now."
    },
    {
      "Time_Start": 1405.36,
      "Time_End": 1406.8799999999999,
      "Text": " Let's look at these figures."
    },
    {
      "Time_Start": 1408.32,
      "Time_End": 1410.72,
      "Text": " Left figure shows our fuzzer's log"
    },
    {
      "Time_Start": 1410.72,
      "Time_End": 1412.8799999999999,
      "Text": " and right figure shows the de-message log."
    },
    {
      "Time_Start": 1414.08,
      "Time_End": 1416.24,
      "Text": " At this time, we conducted fuzzing"
    },
    {
      "Time_Start": 1416.24,
      "Time_End": 1419.12,
      "Text": " using 100 files at each trial."
    },
    {
      "Time_Start": 1420.0,
      "Time_End": 1421.36,
      "Text": " As I mentioned before,"
    },
    {
      "Time_Start": 1422.56,
      "Time_End": 1427.76,
      "Text": " our fuzzer repeats mount and unmount folder several times."
    },
    {
      "Time_Start": 1428.8,
      "Time_End": 1431.52,
      "Text": " So there will be USB reconnection log"
    },
    {
      "Time_Start": 1431.52,
      "Time_End": 1433.4399999999998,
      "Text": " as many as the number of mounts."
    },
    {
      "Time_Start": 1434.48,
      "Time_End": 1437.36,
      "Text": " In this figure, in this log,"
    },
    {
      "Time_Start": 1437.36,
      "Time_End": 1439.76,
      "Text": " we mount a test folder three times,"
    },
    {
      "Time_Start": 1439.76,
      "Time_End": 1442.8799999999999,
      "Text": " but there are four USB connection log in de-message."
    },
    {
      "Time_Start": 1445.04,
      "Time_End": 1448.08,
      "Text": " And the last log is a little bit different from other logs."
    },
    {
      "Time_Start": 1448.72,
      "Time_End": 1452.24,
      "Text": " So fuzzer can notice that there is something wrong"
    },
    {
      "Time_Start": 1452.24,
      "Time_End": 1454.1599999999999,
      "Text": " in the media player or issue."
    },
    {
      "Time_Start": 1454.4,
      "Time_End": 1457.92,
      "Text": " So in this way, the fuzzer can detect failures."
    },
    {
      "Time_Start": 1461.28,
      "Time_End": 1464.0800000000002,
      "Text": " Actually, of course, there is a limitation of our method."
    },
    {
      "Time_Start": 1466.0,
      "Time_End": 1467.92,
      "Text": " We are doing black-box fuzzing."
    },
    {
      "Time_Start": 1468.5600000000002,
      "Time_End": 1471.52,
      "Text": " Fuzzer in Raspberry Pi cannot know"
    },
    {
      "Time_Start": 1471.52,
      "Time_End": 1475.44,
      "Text": " exactly which file is currently playing in the media player."
    },
    {
      "Time_Start": 1476.48,
      "Time_End": 1478.96,
      "Text": " Fuzzer generates hundreds or thousands files"
    },
    {
      "Time_Start": 1478.96,
      "Time_End": 1481.44,
      "Text": " in the folder and mounts the folder"
    },
    {
      "Time_Start": 1481.52,
      "Time_End": 1483.68,
      "Text": " in the folder and mounts the folder."
    },
    {
      "Time_Start": 1484.4,
      "Time_End": 1487.28,
      "Text": " Then media player gets all files and plays them."
    },
    {
      "Time_Start": 1488.3200000000002,
      "Time_End": 1490.72,
      "Text": " So when a crash is detected,"
    },
    {
      "Time_Start": 1490.72,
      "Time_End": 1493.3600000000001,
      "Text": " fuzzer cannot know which file caused the crash."
    },
    {
      "Time_Start": 1494.8,
      "Time_End": 1498.88,
      "Text": " Fuzzer should find the file causing the crash"
    },
    {
      "Time_Start": 1500.16,
      "Time_End": 1503.28,
      "Text": " by replaying the files again one by one."
    },
    {
      "Time_Start": 1504.72,
      "Time_End": 1507.76,
      "Text": " To solve this limitation, we tried two things."
    },
    {
      "Time_Start": 1508.72,
      "Time_End": 1512.56,
      "Text": " First, we can just put only one file in the folder"
    },
    {
      "Time_Start": 1512.56,
      "Time_End": 1515.6,
      "Text": " and mount the folder and play just only one file."
    },
    {
      "Time_Start": 1517.12,
      "Time_End": 1521.6,
      "Text": " If we do fuzzing like this, when crash is occurred,"
    },
    {
      "Time_Start": 1521.6,
      "Time_End": 1525.28,
      "Text": " we can exactly know which file is causing the crash"
    },
    {
      "Time_Start": 1525.28,
      "Time_End": 1526.72,
      "Text": " because there is only one file."
    },
    {
      "Time_Start": 1527.84,
      "Time_End": 1530.64,
      "Text": " But in this case, mount and amount"
    },
    {
      "Time_Start": 1530.64,
      "Time_End": 1533.2,
      "Text": " is required for the number of files."
    },
    {
      "Time_Start": 1533.8400000000001,
      "Time_End": 1536.8,
      "Text": " Mount and amount is a very slow operation."
    },
    {
      "Time_Start": 1538.32,
      "Time_End": 1541.2,
      "Text": " But we have to test the large number of files,"
    },
    {
      "Time_Start": 1541.2,
      "Time_End": 1544.32,
      "Text": " so we need to reduce the number of mount and amount."
    },
    {
      "Time_Start": 1545.52,
      "Time_End": 1549.3600000000001,
      "Text": " So in our experience, playing only one file at once"
    },
    {
      "Time_Start": 1549.3600000000001,
      "Time_End": 1550.4,
      "Text": " is not a good idea."
    },
    {
      "Time_Start": 1552.0800000000002,
      "Time_End": 1555.28,
      "Text": " So we need to find the appropriate number of files"
    },
    {
      "Time_Start": 1555.28,
      "Time_End": 1556.64,
      "Text": " each one cycle."
    },
    {
      "Time_Start": 1557.76,
      "Time_End": 1561.76,
      "Text": " This is why we generated and played only 100 files"
    },
    {
      "Time_Start": 1562.56,
      "Time_End": 1565.28,
      "Text": " at each trial in the previous slide."
    },
    {
      "Time_Start": 1566.24,
      "Time_End": 1569.92,
      "Text": " We can play more files, but we don't."
    },
    {
      "Time_Start": 1570.96,
      "Time_End": 1575.36,
      "Text": " Because if there are too many files played at once,"
    },
    {
      "Time_Start": 1575.36,
      "Time_End": 1579.76,
      "Text": " it's difficult to find the file caused the crash."
    },
    {
      "Time_Start": 1581.36,
      "Time_End": 1586.24,
      "Text": " I cannot say 100 number is the ideal number for all fuzzing."
    },
    {
      "Time_Start": 1586.96,
      "Time_End": 1589.92,
      "Text": " It's very different for each cases,"
    },
    {
      "Time_Start": 1589.92,
      "Time_End": 1592.3200000000002,
      "Text": " so you should find the basic number of files"
    },
    {
      "Time_Start": 1592.3200000000002,
      "Time_End": 1593.28,
      "Text": " for your own test."
    },
    {
      "Time_Start": 1596.48,
      "Time_End": 1598.72,
      "Text": " And actually, there is one more limitation."
    },
    {
      "Time_Start": 1598.72,
      "Time_End": 1602.16,
      "Text": " In some cases, some issue is not rebooted and shut down,"
    },
    {
      "Time_Start": 1602.16,
      "Time_End": 1604.3200000000002,
      "Text": " even if the media player is crashed."
    },
    {
      "Time_Start": 1605.28,
      "Time_End": 1608.0800000000002,
      "Text": " In this case, USB is not disconnected,"
    },
    {
      "Time_Start": 1608.0800000000002,
      "Time_End": 1611.76,
      "Text": " even if the media player is crashed and stopped."
    },
    {
      "Time_Start": 1612.8000000000002,
      "Time_End": 1615.8400000000001,
      "Text": " So fuzzer cannot detect failures."
    },
    {
      "Time_Start": 1617.04,
      "Time_End": 1618.8000000000002,
      "Text": " Test have to monitor car again."
    },
    {
      "Time_Start": 1619.92,
      "Time_End": 1623.2,
      "Text": " It's one of our limitation, and it's one of our future work"
    },
    {
      "Time_Start": 1623.2,
      "Time_End": 1624.72,
      "Text": " to solve this one."
    },
    {
      "Time_Start": 1626.3200000000002,
      "Time_End": 1629.44,
      "Text": " We found these cases in GM Volvo cars."
    },
    {
      "Time_Start": 1630.0800000000002,
      "Time_End": 1635.2,
      "Text": " What they in common is that they use Android Automotive OS."
    },
    {
      "Time_Start": 1635.2,
      "Time_End": 1637.68,
      "Text": " So we just guess Android Automotive OS"
    },
    {
      "Time_Start": 1639.44,
      "Time_End": 1641.52,
      "Text": " is not good cases for our fuzzing."
    },
    {
      "Time_Start": 1645.04,
      "Time_End": 1647.04,
      "Text": " So until now, I talk about how to fuzz"
    },
    {
      "Time_Start": 1647.12,
      "Time_End": 1649.12,
      "Text": " automated media player by USB."
    },
    {
      "Time_Start": 1649.92,
      "Time_End": 1653.6,
      "Text": " But to test attacks over USB port,"
    },
    {
      "Time_Start": 1653.6,
      "Time_End": 1655.36,
      "Text": " media player fuzzing is not enough."
    },
    {
      "Time_Start": 1656.72,
      "Time_End": 1659.12,
      "Text": " Let's test Automotive Kernel by USB."
    },
    {
      "Time_Start": 1660.8,
      "Time_End": 1663.6,
      "Text": " You know, there is already great research project"
    },
    {
      "Time_Start": 1663.6,
      "Time_End": 1665.84,
      "Text": " about fuzzing USB kernel stack."
    },
    {
      "Time_Start": 1667.04,
      "Time_End": 1670.6399999999999,
      "Text": " In this project, this also implements raw gadget"
    },
    {
      "Time_Start": 1670.6399999999999,
      "Time_End": 1672.1599999999999,
      "Text": " for USB kernel fuzzing."
    },
    {
      "Time_Start": 1673.28,
      "Time_End": 1676.24,
      "Text": " And he also implements USB fuzzer"
    },
    {
      "Time_Start": 1676.24,
      "Time_End": 1677.52,
      "Text": " using the raw gadget."
    },
    {
      "Time_Start": 1677.52,
      "Time_End": 1682.32,
      "Text": " And this fuzzer integrated into Shizkalo."
    },
    {
      "Time_Start": 1683.2,
      "Time_End": 1686.96,
      "Text": " You know, Shizkalo is the best fuzzer for kernel fuzzing."
    },
    {
      "Time_Start": 1686.96,
      "Time_End": 1691.36,
      "Text": " So we just use Shizkalo to fuzz USB kernel stack in the car."
    },
    {
      "Time_Start": 1694.0,
      "Time_End": 1695.52,
      "Text": " But let's think about it."
    },
    {
      "Time_Start": 1695.52,
      "Time_End": 1698.72,
      "Text": " Shizkalo is the coverage-guided fuzzer,"
    },
    {
      "Time_Start": 1698.72,
      "Time_End": 1701.92,
      "Text": " and it requires kernel build for fuzzing."
    },
    {
      "Time_Start": 1702.8,
      "Time_End": 1705.28,
      "Text": " But we are doing black box fuzzing now."
    },
    {
      "Time_Start": 1705.28,
      "Time_End": 1709.04,
      "Text": " We don't have source code of the car."
    },
    {
      "Time_Start": 1710.16,
      "Time_End": 1713.52,
      "Text": " So it's difficult to use Shizkalo as it is."
    },
    {
      "Time_Start": 1714.24,
      "Time_End": 1716.16,
      "Text": " So how can you generate the fuzzing inputs"
    },
    {
      "Time_Start": 1716.16,
      "Time_End": 1718.16,
      "Text": " for USB kernel stack in the car?"
    },
    {
      "Time_Start": 1722.96,
      "Time_End": 1725.44,
      "Text": " But we can do fuzzing using Shizkalo."
    },
    {
      "Time_Start": 1726.56,
      "Time_End": 1730.08,
      "Text": " Actually, Shizkalo for USB already found"
    },
    {
      "Time_Start": 1730.08,
      "Time_End": 1734.6399999999999,
      "Text": " about 300 or more box in kernel USB stack."
    },
    {
      "Time_Start": 1735.68,
      "Time_End": 1739.28,
      "Text": " That box are reported to the shizkaloappspot.com."
    },
    {
      "Time_Start": 1740.3999999999999,
      "Time_End": 1745.44,
      "Text": " In that reports, there are codes to reproduce the box."
    },
    {
      "Time_Start": 1746.24,
      "Time_End": 1749.84,
      "Text": " So we can use the reproduction codes for our fuzzing input."
    },
    {
      "Time_Start": 1753.76,
      "Time_End": 1755.76,
      "Text": " We just collect the reproduction code"
    },
    {
      "Time_Start": 1755.76,
      "Time_End": 1759.6,
      "Text": " and just execute the code by using Shizkalo programs."
    },
    {
      "Time_Start": 1760.8,
      "Time_End": 1763.76,
      "Text": " Shizkalo provides a way to reproduce the box"
    },
    {
      "Time_Start": 1763.76,
      "Time_End": 1765.12,
      "Text": " with a specific input."
    },
    {
      "Time_Start": 1765.76,
      "Time_End": 1770.4,
      "Text": " So you can reproduce the box founded by Shizkalo"
    },
    {
      "Time_Start": 1772.32,
      "Time_End": 1774.4,
      "Text": " using those two programs."
    },
    {
      "Time_Start": 1775.68,
      "Time_End": 1778.56,
      "Text": " I think many of you guys in here already know"
    },
    {
      "Time_Start": 1778.56,
      "Time_End": 1780.16,
      "Text": " where how to use Shizkalo."
    },
    {
      "Time_Start": 1781.36,
      "Time_End": 1785.68,
      "Text": " Anyway, this is the example code,"
    },
    {
      "Time_Start": 1786.32,
      "Time_End": 1791.04,
      "Text": " is example command to reproduce the box founded by Shizkalo."
    },
    {
      "Time_Start": 1792.0,
      "Time_End": 1795.52,
      "Text": " In this case, the name of the reproduction code"
    },
    {
      "Time_Start": 1795.52,
      "Time_End": 1797.84,
      "Text": " is crash01.log."
    },
    {
      "Time_Start": 1799.92,
      "Time_End": 1802.6399999999999,
      "Text": " And the figure in the bottom shows"
    },
    {
      "Time_Start": 1803.76,
      "Time_End": 1807.28,
      "Text": " one of the reproduction codes in the shizkaloappspot.com."
    },
    {
      "Time_Start": 1810.72,
      "Time_End": 1814.72,
      "Text": " This figure shows that the bug list"
    },
    {
      "Time_Start": 1814.72,
      "Time_End": 1817.04,
      "Text": " reported in the shizkaloappspot.com."
    },
    {
      "Time_Start": 1818.0,
      "Time_End": 1822.08,
      "Text": " Actually, there is a lot of bugs on this site"
    },
    {
      "Time_Start": 1822.6399999999999,
      "Time_End": 1824.6399999999999,
      "Text": " except the USB bugs."
    },
    {
      "Time_Start": 1824.6399999999999,
      "Time_End": 1827.44,
      "Text": " So you should filter only the USB bugs."
    },
    {
      "Time_Start": 1828.8799999999999,
      "Time_End": 1833.84,
      "Text": " The link in the bottom will show the only USB bug."
    },
    {
      "Time_Start": 1835.68,
      "Time_End": 1836.8799999999999,
      "Text": " And there is one more thing."
    },
    {
      "Time_Start": 1837.44,
      "Time_End": 1841.6,
      "Text": " Actually, all reported bugs don't contain the reproduction code."
    },
    {
      "Time_Start": 1842.1599999999999,
      "Time_End": 1844.56,
      "Text": " So you can only find the reproduction codes"
    },
    {
      "Time_Start": 1845.52,
      "Time_End": 1850.32,
      "Text": " in the articles if Shiz is written in repro field."
    },
    {
      "Time_Start": 1851.12,
      "Time_End": 1853.9199999999998,
      "Text": " So you don't need to collect all the bugs."
    },
    {
      "Time_Start": 1856.48,
      "Time_End": 1860.0,
      "Text": " So this is the overview of the fuzzing USB kernel stack in the car."
    },
    {
      "Time_Start": 1860.8,
      "Time_End": 1861.84,
      "Text": " It's very simple."
    },
    {
      "Time_Start": 1862.48,
      "Time_End": 1864.72,
      "Text": " Fuzzer just collect the reproduction codes"
    },
    {
      "Time_Start": 1864.72,
      "Time_End": 1866.32,
      "Text": " from the shizkaloappspot.com"
    },
    {
      "Time_Start": 1867.6,
      "Time_End": 1869.2,
      "Text": " and then just replay the codes."
    },
    {
      "Time_Start": 1870.08,
      "Time_End": 1873.36,
      "Text": " Of course, we can also mutate the reproduction code"
    },
    {
      "Time_Start": 1874.3200000000002,
      "Time_End": 1876.72,
      "Text": " mutate the data part of the reproduction code."
    },
    {
      "Time_Start": 1877.68,
      "Time_End": 1880.4,
      "Text": " But actually, we can find the vulnerability"
    },
    {
      "Time_Start": 1880.4,
      "Time_End": 1882.16,
      "Text": " using just the original code."
    },
    {
      "Time_Start": 1883.2800000000002,
      "Time_End": 1884.8000000000002,
      "Text": " So in kernel fuzzing,"
    },
    {
      "Time_Start": 1885.8400000000001,
      "Time_End": 1888.8000000000002,
      "Text": " we also monitor the message log"
    },
    {
      "Time_Start": 1888.8000000000002,
      "Time_End": 1891.44,
      "Text": " to detect failures caused by fuzzing."
    },
    {
      "Time_Start": 1893.2800000000002,
      "Time_End": 1897.44,
      "Text": " All cars we tested were rebooted if kernel crashed."
    },
    {
      "Time_Start": 1898.2400000000002,
      "Time_End": 1902.96,
      "Text": " So fuzzer can detect all failures by using this method."
    },
    {
      "Time_Start": 1903.44,
      "Time_End": 1908.5600000000002,
      "Text": " So now let's talk about testing with real cars."
    },
    {
      "Time_Start": 1910.2400000000002,
      "Time_End": 1913.2800000000002,
      "Text": " Actually, this is the most challenging part in the car hacking"
    },
    {
      "Time_Start": 1914.72,
      "Time_End": 1917.2,
      "Text": " because we don't have enough test cars."
    },
    {
      "Time_Start": 1918.0000000000002,
      "Time_End": 1921.3600000000001,
      "Text": " So even if we have a very good idea,"
    },
    {
      "Time_Start": 1921.3600000000001,
      "Time_End": 1924.64,
      "Text": " it's very difficult to prove using the real cars."
    },
    {
      "Time_Start": 1926.2400000000002,
      "Time_End": 1931.5200000000002,
      "Text": " Luckily, our fuzzing test can be performed"
    },
    {
      "Time_Start": 1931.5200000000002,
      "Time_End": 1933.2800000000002,
      "Text": " without disassembling the car."
    },
    {
      "Time_Start": 1933.76,
      "Time_End": 1936.0,
      "Text": " It does not cause serious damage to the car."
    },
    {
      "Time_Start": 1936.8,
      "Time_End": 1939.52,
      "Text": " So we can test using the rental car."
    },
    {
      "Time_Start": 1940.24,
      "Time_End": 1943.84,
      "Text": " So we rented cars for a day or just a few hours"
    },
    {
      "Time_Start": 1943.84,
      "Time_End": 1944.8,
      "Text": " and tested them."
    },
    {
      "Time_Start": 1946.56,
      "Time_End": 1949.44,
      "Text": " There were not many different types of cars"
    },
    {
      "Time_Start": 1949.44,
      "Time_End": 1950.8799999999999,
      "Text": " that we could rent,"
    },
    {
      "Time_Start": 1950.8799999999999,
      "Time_End": 1954.0,
      "Text": " but we rented as many as possible and tested them."
    },
    {
      "Time_Start": 1957.28,
      "Time_End": 1960.6399999999999,
      "Text": " These are the summary of the vulnerabilities we found."
    },
    {
      "Time_Start": 1961.44,
      "Time_End": 1966.48,
      "Text": " We found vulnerabilities from Renault, Chevrolet, and Volkswagen."
    },
    {
      "Time_Start": 1967.44,
      "Time_End": 1970.24,
      "Text": " And we also found a vulnerability in AGL."
    },
    {
      "Time_Start": 1971.0400000000002,
      "Time_End": 1973.76,
      "Text": " Actually, AGL is tested on the Raspberry Pi."
    },
    {
      "Time_Start": 1976.96,
      "Time_End": 1981.1200000000001,
      "Text": " And actually, number seven vulnerability is not reported"
    },
    {
      "Time_Start": 1981.1200000000001,
      "Time_End": 1984.72,
      "Text": " because we found number six and seven vulnerability"
    },
    {
      "Time_Start": 1984.72,
      "Time_End": 1985.8400000000001,
      "Text": " in the same version"
    },
    {
      "Time_Start": 1986.48,
      "Time_End": 1988.96,
      "Text": " when we just only reported number six first."
    },
    {
      "Time_Start": 1989.76,
      "Time_End": 1992.72,
      "Text": " And Volkswagen patched the vulnerability very quickly"
    },
    {
      "Time_Start": 1993.52,
      "Time_End": 1995.3600000000001,
      "Text": " before we reported number seven."
    },
    {
      "Time_Start": 1996.56,
      "Time_End": 1999.76,
      "Text": " And number seven vulnerability is not working on the patched version,"
    },
    {
      "Time_Start": 1999.76,
      "Time_End": 2001.2,
      "Text": " so we cannot report that."
    },
    {
      "Time_Start": 2001.92,
      "Time_End": 2004.48,
      "Text": " We should report number six and seven at the same time."
    },
    {
      "Time_Start": 2005.2,
      "Time_End": 2008.56,
      "Text": " It's our miss because we were quite busy at that time."
    },
    {
      "Time_Start": 2008.56,
      "Time_End": 2010.96,
      "Text": " We just forgot to report the number seven."
    },
    {
      "Time_Start": 2012.0,
      "Time_End": 2015.04,
      "Text": " Anyway, I'm going to show our demo video."
    },
    {
      "Time_Start": 2018.96,
      "Time_End": 2037.76,
      "Text": " So media player lost the play again."
    },
    {
      "Time_Start": 2038.96,
      "Time_End": 2041.2,
      "Text": " There is a Raspberry Pi here."
    },
    {
      "Time_Start": 2042.24,
      "Time_End": 2044.08,
      "Text": " PC just controlled Raspberry Pi."
    },
    {
      "Time_Start": 2045.92,
      "Time_End": 2047.28,
      "Text": " And it's a reboot."
    },
    {
      "Time_Start": 2047.28,
      "Time_End": 2048.4,
      "Text": " I just shut down."
    },
    {
      "Time_Start": 2048.4,
      "Time_End": 2051.28,
      "Text": " This is the media player fuzzing case."
    },
    {
      "Time_Start": 2051.28,
      "Time_End": 2055.44,
      "Text": " And this issue is shut down and not rebooted again."
    },
    {
      "Time_Start": 2055.44,
      "Time_End": 2059.6,
      "Text": " So tester tried to turn off the car and turn on the car again."
    },
    {
      "Time_Start": 2063.28,
      "Time_End": 2068.64,
      "Text": " Interestingly, car is back up, working on normally,"
    },
    {
      "Time_Start": 2068.64,
      "Time_End": 2072.88,
      "Text": " but the head unit is still not working on."
    },
    {
      "Time_Start": 2073.76,
      "Time_End": 2078.08,
      "Text": " So we have to hard reset the head unit issue."
    },
    {
      "Time_Start": 2078.4,
      "Time_End": 2095.52,
      "Text": " Yes, this is the first demo."
    },
    {
      "Time_Start": 2096.96,
      "Time_End": 2102.96,
      "Text": " So we can crash the head unit issue by the media player crash."
    },
    {
      "Time_Start": 2109.04,
      "Time_End": 2116.7200000000003,
      "Text": " In this test, we tested while driving."
    },
    {
      "Time_Start": 2117.84,
      "Time_End": 2120.56,
      "Text": " You can see the head unit issue is rebooted."
    },
    {
      "Time_Start": 2120.56,
      "Time_End": 2121.84,
      "Text": " This is the rebooted case."
    },
    {
      "Time_Start": 2121.84,
      "Time_End": 2124.8,
      "Text": " And it's also media player fuzzing."
    },
    {
      "Time_Start": 2124.8,
      "Time_End": 2126.8,
      "Text": " There is a Raspberry Pi over there."
    },
    {
      "Time_Start": 2128.48,
      "Time_End": 2132.48,
      "Text": " So you can see the issue is rebooted by crash,"
    },
    {
      "Time_Start": 2132.48,
      "Time_End": 2134.2400000000002,
      "Text": " even if the car is moving."
    },
    {
      "Time_Start": 2138.4,
      "Time_End": 2147.84,
      "Text": " The third video shows the corner fuzzing demo."
    },
    {
      "Time_Start": 2149.6,
      "Time_End": 2150.8,
      "Text": " It's also moving."
    },
    {
      "Time_Start": 2157.28,
      "Time_End": 2159.28,
      "Text": " There is a Raspberry Pi."
    },
    {
      "Time_Start": 2159.28,
      "Time_End": 2167.04,
      "Text": " And the issue is rebooted, even if the car is moving."
    },
    {
      "Time_Start": 2168.48,
      "Time_End": 2175.04,
      "Text": " The last demo is also corner fuzzing."
    },
    {
      "Time_Start": 2193.6,
      "Time_End": 2196.1600000000003,
      "Text": " OK, these are our demo video."
    },
    {
      "Time_Start": 2197.04,
      "Time_End": 2198.48,
      "Text": " So let's conclude my talk."
    },
    {
      "Time_Start": 2202.0,
      "Time_End": 2205.8399999999997,
      "Text": " The current USB fuzzing used in the automotive industry"
    },
    {
      "Time_Start": 2205.8399999999997,
      "Time_End": 2207.68,
      "Text": " has many limitations."
    },
    {
      "Time_Start": 2208.24,
      "Time_End": 2210.0,
      "Text": " It's complicated."
    },
    {
      "Time_Start": 2210.0,
      "Time_End": 2212.64,
      "Text": " It requires huge workloads to testers."
    },
    {
      "Time_Start": 2215.12,
      "Time_End": 2216.96,
      "Text": " These limitations can be addressed"
    },
    {
      "Time_Start": 2216.96,
      "Time_End": 2221.92,
      "Text": " by directly connecting fuzzer and car via USB cable."
    },
    {
      "Time_Start": 2222.88,
      "Time_End": 2227.52,
      "Text": " And USB gadget and low gadget makes it possible."
    },
    {
      "Time_Start": 2229.12,
      "Time_End": 2234.32,
      "Text": " So we can significantly reduce the workload of the testers."
    },
    {
      "Time_Start": 2235.84,
      "Time_End": 2238.56,
      "Text": " And also, we can test the USB corner stack."
    },
    {
      "Time_Start": 2240.32,
      "Time_End": 2243.6,
      "Text": " And also, we can find the real-world vulnerabilities."
    },
    {
      "Time_Start": 2244.8,
      "Time_End": 2247.52,
      "Text": " OK, it's the end of my talk."
    },
    {
      "Time_Start": 2247.52,
      "Time_End": 2248.32,
      "Text": " Thank you."
    },
    {
      "Time_Start": 2248.8,
      "Time_End": 2249.6800000000003,
      "Text": " Thank you."
    },
    {
      "Time_Start": 2249.6800000000003,
      "Time_End": 2250.7200000000003,
      "Text": " Thank you."
    },
    {
      "Time_Start": 2250.7200000000003,
      "Time_End": 2252.6400000000003,
      "Text": " Thank you."
    }
  ]
}