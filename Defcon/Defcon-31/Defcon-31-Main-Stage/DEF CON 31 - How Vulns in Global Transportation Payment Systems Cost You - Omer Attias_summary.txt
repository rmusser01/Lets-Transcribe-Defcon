**Introduction:**
- Presentation by **Omer Attias**, a security researcher at SafeBridge.
- Focuses on **security vulnerabilities** in **global transportation payment systems**, specifically the **Moovit** app.

**Mobile Payment Solutions for Public Transportation:**
- **Convenience** and **security** are driving the adoption of mobile payment solutions.
- **Moovit**, a widely-used transportation app, is used as a **case study** to examine security risks.

**Understanding Mobile Solutions in Public Transport:**
- **Mike** wants to take a train ride using a mobile solution, ordering an entrance and exit ticket in the form of a **QR code**.
- The **fare** is calculated at the destination, and billing is done on a **monthly basis**.
- **Ticket format** investigation reveals a **pattern** related to the **mass operator ID**.

**Analyzing Ticket Formats and Gate Validation:**
- Experimenting with modifying the operator ID in the ticket format was unsuccessful.
- Focusing on the **physical gates**, a **logical vulnerability** was found: using a **canceled ticket** to enter and exit the station without being charged.
- By ordering a second entrance ticket after reaching the destination, Mike can **avoid paying** for the ride.

**Security Issues with Moovit:**
- **Moovit**, a **worldwide mass operator**, has been acquired by Intel and has over **1.4 billion users**.
- The goal is to find vulnerabilities in Moovit to gain a free ride and access sensitive information.

**Account Registration and Switching in Moovit:**
- Moovit users provide their **phone number** during registration, which is validated using a **random OTP**.
- The **account switching feature** allows users to switch their account between devices by validating the OTP.
- **SSL encryption** is used for API requests between the server and the mobile application.

**Analyzing API Requests and User Keys:**
- By bypassing SSL encryption, the speaker was able to **intercept API requests** and understand the communication between the device and server.
- The **user key** is assigned to the device, not the user, and is used to identify accounts.
- Understanding the **user key format** is crucial for enumerating existing accounts.

**Brute-Force Attack on OTP:**
- The speaker performed a **brute-force attack** on the OTP, successfully guessing the correct code and taking control of the account.
- This allowed them to impersonate the account, use its credit card, and access personal information.
- However, this attack has limitations, including the need for the phone number and the time required for brute-forcing.

**Understanding and Exploiting the User Key Format:**
- Analyzing multiple user keys revealed a **pattern** with repeated values, suggesting a relationship between certain bytes.
- By identifying **gaps** in the user keys, the speaker was able to fill them with user keys of other devices.
- Using the **user profile API**, they could retrieve the phone numbers associated with these user keys and perform a brute-force attack.

**Improving the Brute-Force Attack:**
- The speaker wanted to impersonate the user without disconnecting them from their device.
- They discovered that the **access token**, generated after receiving the user key, is essential for API communication.
- By requesting multiple access tokens for a user key, they could fully impersonate accounts without disconnecting them.

**Demonstration and Takeaways:**
- The speaker developed a **user interface** to access personal information and demonstrated purchasing a train ticket using someone else's account.
- **Simple attacks** can succeed against large companies, highlighting the need for **increased security awareness**.
- All vulnerabilities were responsibly disclosed to Moovit, and fixes have been implemented.