{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 5.0,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Thank you. Well, this is more people than I expected actually. Uh, thank you for coming to my"
    },
    {
      "Time_Start": 10.98,
      "Time_End": 17.02,
      "Text": " talk. It's all, it's very great to see you all. I'm very excited to present my research. Your"
    },
    {
      "Time_Start": 17.02,
      "Time_End": 22.02,
      "Text": " clocks have ears. Timing based, browser based, local network port scanner. Before we begin,"
    },
    {
      "Time_Start": 22.72,
      "Time_End": 27.72,
      "Text": " let me introduce myself. My name is Donnie Kim. Uh, I'm a security, IT security expert at"
    },
    {
      "Time_Start": 33.96,
      "Time_End": 38.96,
      "Text": " security office. We are based in Sweden and South Korea and we are part of the Tracer group. If"
    },
    {
      "Time_Start": 41.66,
      "Time_End": 47.7,
      "Text": " you have any questions or comments, feel free to reach out and feel free to leave a comment"
    },
    {
      "Time_Start": 47.7,
      "Time_End": 52.7,
      "Text": " on over Twitter and or X or whatever. It's going to be called in the next few hours. In May"
    },
    {
      "Time_Start": 63.300000000000004,
      "Time_End": 68.32000000000001,
      "Text": " 2020, it was revealed that eBay and other prominent companies were port scanning their visitors'"
    },
    {
      "Time_Start": 71.18,
      "Time_End": 76.18,
      "Text": " computers via their websites. The culprit behind the whole saga was called Threatmetrics."
    },
    {
      "Time_Start": 78.22,
      "Time_End": 83.22,
      "Text": " A firm which pride, prides itself on tracking 1.4 billion users online and whose tool suite"
    },
    {
      "Time_Start": 87.10000000000001,
      "Time_End": 92.10000000000001,
      "Text": " included port scanning. The implications of browser based port scanning is twofold. One is"
    },
    {
      "Time_Start": 97.94,
      "Time_End": 102.94,
      "Text": " privacy. It can be used to fingerprint visitors, tracking them with characteristics unique to"
    },
    {
      "Time_Start": 103.46,
      "Time_End": 108.46,
      "Text": " each user, browser and hardware setup. The other is security. It can be used to uncover"
    },
    {
      "Time_Start": 113.64,
      "Time_End": 118.64,
      "Text": " internet services which are a great foothold for performing subsequent attacks like XSS or CSRF."
    },
    {
      "Time_Start": 124.38,
      "Time_End": 130.72,
      "Text": " Various techniques have been circulating for some time. The earliest research I found goes"
    },
    {
      "Time_Start": 130.74,
      "Time_End": 135.74,
      "Text": " back to 2006 which utilized the image and iframe tags. Later research added the script tag and"
    },
    {
      "Time_Start": 140.48,
      "Time_End": 145.48,
      "Text": " newer exploits employed WebRTC and WebSocket to achieve comparable results. Browser vendors"
    },
    {
      "Time_Start": 149.38,
      "Time_End": 154.38,
      "Text": " have implemented mitigations making the mentioned techniques more or less ineffective."
    },
    {
      "Time_Start": 161.3,
      "Time_End": 167.5,
      "Text": " In this presentation, I'll put my focus on timing based techniques for browser based port"
    },
    {
      "Time_Start": 167.5,
      "Time_End": 172.5,
      "Text": " scanning. Before we get into the specifics, let's take a look at how the Fetch API is employed"
    },
    {
      "Time_Start": 174.84,
      "Time_End": 179.84,
      "Text": " in measuring the timing of a network request. You can see from the function at line 3, we set"
    },
    {
      "Time_Start": 182.38,
      "Time_End": 187.38,
      "Text": " up a timer. At line 5, we measure the time. At line 7, we start the fetch. At line 3, we"
    },
    {
      "Time_Start": 191.42,
      "Time_End": 196.42,
      "Text": " measure the time again. Finally, the elapsed time in microseconds is returned at line 17."
    },
    {
      "Time_Start": 200.8,
      "Time_End": 205.8,
      "Text": " What we can observe using this function is only the elapsed time of a fetch request due to the"
    },
    {
      "Time_Start": 208.18,
      "Time_End": 213.18,
      "Text": " restrictions imposed by browsers and web specifications. We cannot observe any other"
    },
    {
      "Time_Start": 213.34,
      "Time_End": 218.34,
      "Text": " metadata such as any of the response data including TCP, TLS, HTTP information, any of"
    },
    {
      "Time_Start": 224.42000000000002,
      "Time_End": 229.42000000000002,
      "Text": " the request data except for the scheme, IP, port, plus any of the error data except for the"
    },
    {
      "Time_Start": 235.60000000000002,
      "Time_End": 240.60000000000002,
      "Text": " generic type error, fail to fetch error string. We can also observe that the request data"
    },
    {
      "Time_Start": 243.9,
      "Time_End": 249.64000000000001,
      "Text": " is not a generic type error. Now, we can imagine at least 4 components that are each"
    },
    {
      "Time_Start": 249.64000000000001,
      "Time_End": 254.64000000000001,
      "Text": " responsible for a part of a round trip time of a network request. Browser, firewall, TCP, and"
    },
    {
      "Time_Start": 259.02,
      "Time_End": 264.02,
      "Text": " TLS plus HTTP. Then, we can think of 3 possible states of a port and hypothesize which"
    },
    {
      "Time_Start": 264.24,
      "Time_End": 269.24,
      "Text": " components would take up the observed round trip time. Firstly, if the port is closed and"
    },
    {
      "Time_Start": 277.08,
      "Time_End": 283.56,
      "Text": " the firewall drops packets or the host is unreachable, the observed time would be"
    },
    {
      "Time_Start": 283.56,
      "Time_End": 288.56,
      "Text": " theoretically infinite but typically an arbitrary timeout would be enforced. Secondly, if"
    },
    {
      "Time_Start": 289.48,
      "Time_End": 294.48,
      "Text": " the port is closed and the firewall rejects packets, the browser and the firewall would"
    },
    {
      "Time_Start": 298.88,
      "Time_End": 303.88,
      "Text": " take up the observed time. Finally, if the port is open and the process is listening, the"
    },
    {
      "Time_Start": 306.92,
      "Time_End": 311.92,
      "Text": " browser, the firewall, and the TCP and the TLS plus HTTP would take up the observed time."
    },
    {
      "Time_Start": 312.0,
      "Time_End": 317.0,
      "Text": " Looking at the hypothesis, we can expect distinct timing differences depending on the"
    },
    {
      "Time_Start": 323.90000000000003,
      "Time_End": 328.90000000000003,
      "Text": " state of a port. Equipped with this knowledge, let's move on to the actual timing based"
    },
    {
      "Time_Start": 334.38,
      "Time_End": 341.06,
      "Text": " techniques. We'll try finding open ports on the local host, then we'll try finding the"
    },
    {
      "Time_Start": 341.06,
      "Time_End": 346.06,
      "Text": " router, and finally, we'll try finding open ports on all of the LAN clients. First, finding"
    },
    {
      "Time_Start": 355.54,
      "Time_End": 360.54,
      "Text": " open ports on the local host. Now, there are 2 things to note about local host. One, the"
    },
    {
      "Time_Start": 363.82,
      "Time_End": 370.66,
      "Text": " firewall always rejects packets when the port is closed, and two, the host is always"
    },
    {
      "Time_Start": 370.66,
      "Time_End": 377.5,
      "Text": " reachable. Keeping them in mind, we can rule out the first state since it's simply not"
    },
    {
      "Time_Start": 377.5,
      "Time_End": 382.5,
      "Text": " possible. For the remaining possible states, if the observed time is fast enough, the port"
    },
    {
      "Time_Start": 386.48,
      "Time_End": 391.48,
      "Text": " is closed and the firewall rejects packets. And the observed time is slow enough, the port"
    },
    {
      "Time_Start": 391.48,
      "Time_End": 396.48,
      "Text": " is open and the process is listening. So, the algorithm looks like this. Firstly, make"
    },
    {
      "Time_Start": 407.96000000000004,
      "Time_End": 415.20000000000005,
      "Text": " multiple fetches to the port 2, a port that is generally closed, and calculate the average"
    },
    {
      "Time_Start": 415.26,
      "Time_End": 422.09999999999997,
      "Text": " timing as a control. When a thousand measurements are plotted to a graph, it looks like"
    },
    {
      "Time_Start": 422.09999999999997,
      "Time_End": 427.09999999999997,
      "Text": " this. Secondly, if a fetch takes a similar time as the control, the port can be considered"
    },
    {
      "Time_Start": 433.78,
      "Time_End": 438.78,
      "Text": " closed. We do the same measurement to the local host port 65535. You can see from the graph,"
    },
    {
      "Time_Start": 439.78000000000003,
      "Time_End": 444.78000000000003,
      "Text": " the 2 lines are very similar. Finally, if a fetch takes a significantly more time than the"
    },
    {
      "Time_Start": 454.36,
      "Time_End": 460.62,
      "Text": " control, the port can be considered open. We do the same measurement to the local host"
    },
    {
      "Time_Start": 460.62,
      "Time_End": 467.8,
      "Text": " port 8000, where an HTTP server is running. As you can see from the graph, there is a clear"
    },
    {
      "Time_Start": 467.82,
      "Time_End": 474.7,
      "Text": " difference. Repeat the algorithm against various ports of interest, then we get a list of"
    },
    {
      "Time_Start": 474.7,
      "Time_End": 479.7,
      "Text": " open ports. Next, finding the router on the LAN. In this case, we only care if the host is"
    },
    {
      "Time_Start": 488.98,
      "Time_End": 493.98,
      "Text": " responsive or not, regardless of the port state. If the host is responsive, we found a live"
    },
    {
      "Time_Start": 494.34000000000003,
      "Time_End": 499.34000000000003,
      "Text": " host. So, if an arbitrary timeout is enforced, we can simply say the host is unresponsive."
    },
    {
      "Time_Start": 507.58000000000004,
      "Time_End": 513.98,
      "Text": " If the observed time is fast enough so that the port is closed, the port, the firewall"
    },
    {
      "Time_Start": 513.98,
      "Time_End": 519.0,
      "Text": " rejects packets, or slow enough so that the port is open and the process is listening, we can"
    },
    {
      "Time_Start": 519.52,
      "Time_End": 524.52,
      "Text": " conclude that the host is responsive. So, the algorithm goes like this. Firstly, if a"
    },
    {
      "Time_Start": 534.1,
      "Time_End": 540.2,
      "Text": " fetch times out, the host can be considered unresponsive. When we do the measurements"
    },
    {
      "Time_Start": 540.2,
      "Time_End": 545.22,
      "Text": " against a potential but non-existent router IP, 10.0.0.1, as you can see from the graph,"
    },
    {
      "Time_Start": 549.82,
      "Time_End": 554.82,
      "Text": " they are all above the timeout, which is 50 milliseconds. Secondly, if a fetch ends before"
    },
    {
      "Time_Start": 561.9,
      "Time_End": 568.46,
      "Text": " the timeout, the host can be considered responsive. When we do the measurements against the"
    },
    {
      "Time_Start": 568.46,
      "Time_End": 573.48,
      "Text": " live router IP, 192.168.0.1, as the graph shows, they are mostly below the timeout. So,"
    },
    {
      "Time_Start": 579.38,
      "Time_End": 585.76,
      "Text": " repeat the algorithm against a list of potential router IPs and ports, then we have a list"
    },
    {
      "Time_Start": 585.76,
      "Time_End": 590.76,
      "Text": " of the live routers. Next, finding open ports on the LAN clients. Here, we will make an"
    },
    {
      "Time_Start": 600.8,
      "Time_End": 607.54,
      "Text": " observation on one more thing. There is this new web standard called private network"
    },
    {
      "Time_Start": 607.56,
      "Time_End": 612.56,
      "Text": " access. On Chrome, by default, requests to private network resources are allowed only"
    },
    {
      "Time_Start": 616.0999999999999,
      "Time_End": 621.0999999999999,
      "Text": " from HTTPS web pages, meaning for HTTP requests to any client on the LAN to any local IP from"
    },
    {
      "Time_Start": 626.9399999999999,
      "Time_End": 631.9399999999999,
      "Text": " an HTTP web page would return a CORS error. Below is what it looks like when the error is"
    },
    {
      "Time_Start": 631.98,
      "Time_End": 636.98,
      "Text": " returned. Access to fetch at HTTP, this address, from origin HTTP, this address, has been"
    },
    {
      "Time_Start": 645.5600000000001,
      "Time_End": 650.5600000000001,
      "Text": " blocked by CORS policy. The error string itself is still the generic type error, failed to"
    },
    {
      "Time_Start": 653.5400000000001,
      "Time_End": 658.5400000000001,
      "Text": " fetch. Let's look at how the CORS error looks like. First, let's look at the error string"
    },
    {
      "Time_Start": 662.44,
      "Time_End": 667.44,
      "Text": " gets returned at the specification level. 3.1.1, secure context restriction. 5, the"
    },
    {
      "Time_Start": 672.48,
      "Time_End": 677.48,
      "Text": " HTTP network fetch algorithm is amended to add 3 new steps at 5.2. There is a private"
    },
    {
      "Time_Start": 682.62,
      "Time_End": 687.62,
      "Text": " network access check, then 5.3 returns it if the result is a network error. Next, we"
    },
    {
      "Time_Start": 691.96,
      "Time_End": 696.96,
      "Text": " look at the error string. But there is something strange. If you read .5 very carefully, the"
    },
    {
      "Time_Start": 699.0,
      "Time_End": 704.0,
      "Text": " HTTP network fetch algorithm is amended to add 3 new steps right after checking that the"
    },
    {
      "Time_Start": 706.6400000000001,
      "Time_End": 711.6400000000001,
      "Text": " newly obtained connection is not failure. This means the CORS check happens after the"
    },
    {
      "Time_Start": 714.1800000000001,
      "Time_End": 719.1800000000001,
      "Text": " connection is established and the CORS error happens only when the TCP connection is"
    },
    {
      "Time_Start": 719.2,
      "Time_End": 724.2,
      "Text": " successful, when the port is open. With this knowledge, we can think of new states and"
    },
    {
      "Time_Start": 731.98,
      "Time_End": 736.98,
      "Text": " hypotheses. When fetching HTTP local IP from an HTTP web page, if the port is open and"
    },
    {
      "Time_Start": 741.3800000000001,
      "Time_End": 746.3800000000001,
      "Text": " the process is listening, the browser and the firewall and the TCP would take up the observed"
    },
    {
      "Time_Start": 746.46,
      "Time_End": 751.46,
      "Text": " time. A CORS error is returned, but we can't observe that as we discussed previously. On the"
    },
    {
      "Time_Start": 757.9,
      "Time_End": 762.9,
      "Text": " other hand, when fetching HTTPS local IP from an HTTP web page on the same port, the browser,"
    },
    {
      "Time_Start": 766.64,
      "Time_End": 771.64,
      "Text": " the firewall, the TCP and the TLS plus HTTP would take up the observed time."
    },
    {
      "Time_Start": 777.32,
      "Time_End": 782.32,
      "Text": " So, this is how we find open ports on the LAN clients. From an HTTP web page, we take a"
    },
    {
      "Time_Start": 785.26,
      "Time_End": 790.26,
      "Text": " measurement using HTTP. Then we take another measurement using HTTPS. If there is a"
    },
    {
      "Time_Start": 792.7,
      "Time_End": 798.9399999999999,
      "Text": " difference between the two observed times, we can say the port is open and the process is"
    },
    {
      "Time_Start": 798.9399999999999,
      "Time_End": 803.94,
      "Text": " listening. The algorithm is able to detect the error and the process is listening."
    },
    {
      "Time_Start": 806.38,
      "Time_End": 811.38,
      "Text": " The algorithm goes like this. If an HTTPS fetch takes a similar time as an HTTP fetch, the"
    },
    {
      "Time_Start": 815.12,
      "Time_End": 820.12,
      "Text": " port can be considered closed and the firewall rejects packets. One line is measurements"
    },
    {
      "Time_Start": 821.76,
      "Time_End": 826.76,
      "Text": " against HTTP 10.0.10.7 port 80 and the other line is against the same port but with HTTPS. As"
    },
    {
      "Time_Start": 827.26,
      "Time_End": 832.26,
      "Text": " you can see, the two lines are indistinguishable. However, if an HTTPS fetch is"
    },
    {
      "Time_Start": 845.84,
      "Time_End": 852.62,
      "Text": " significantly slower than an HTTP fetch, the port can be considered open and the process is"
    },
    {
      "Time_Start": 852.68,
      "Time_End": 857.68,
      "Text": " listening. The line above is measurements against HTTPS 10.0.10.12 port 445 and the one"
    },
    {
      "Time_Start": 863.26,
      "Time_End": 868.26,
      "Text": " below, almost zero, is against the same port but with HTTP. The graph shows there is about"
    },
    {
      "Time_Start": 871.9,
      "Time_End": 876.9,
      "Text": " 20 milliseconds of difference. I've created a proof of concept called your LAN.js."
    },
    {
      "Time_Start": 883.22,
      "Time_End": 888.22,
      "Text": " Which utilizes all the three techniques. Let me show you a demo. The video has been sped up"
    },
    {
      "Time_Start": 896.52,
      "Time_End": 902.66,
      "Text": " but you can see the actual time it took on the screen. First we try finding open ports on"
    },
    {
      "Time_Start": 902.66,
      "Time_End": 907.66,
      "Text": " the local host. It takes about two and a half minutes and it's found Airplay, Discord, an"
    },
    {
      "Time_Start": 908.66,
      "Time_End": 913.66,
      "Text": " HTTP server, LINE, Steam and Logi Options Plus. Next we try finding the router. It took"
    },
    {
      "Time_Start": 919.02,
      "Time_End": 925.5,
      "Text": " about 10 seconds and the first choice of the possible IPs was the one. Next we try finding"
    },
    {
      "Time_Start": 925.5,
      "Time_End": 932.24,
      "Text": " open ports on all the LAN clients. We search the whole subnet against ports of interest. It"
    },
    {
      "Time_Start": 932.26,
      "Time_End": 937.26,
      "Text": " takes about 40 minutes and you can see there are many IoT devices on the LAN. Airplay, Google"
    },
    {
      "Time_Start": 941.44,
      "Time_End": 946.44,
      "Text": " Cast, LG Smart Device, Dyson, SMB, Homebridge, et cetera. Finally let's explore some of the"
    },
    {
      "Time_Start": 955.38,
      "Time_End": 960.38,
      "Text": " found ports. The first one is a router interface. The next one returns HTTP 470 for some"
    },
    {
      "Time_Start": 962.36,
      "Time_End": 967.36,
      "Text": " reason. Next one is 404. Next one says nothing to see here. The next one is an actual"
    },
    {
      "Time_Start": 972.36,
      "Time_End": 977.36,
      "Text": " homebridge. And the last one is a Philips Hue light bulb. Okay. Let's see if we can find"
    },
    {
      "Time_Start": 992.24,
      "Time_End": 997.24,
      "Text": " a port. In conclusion, a website can scan your local network, your local host, your router"
    },
    {
      "Time_Start": 1007.28,
      "Time_End": 1012.28,
      "Text": " and your clients on the LAN. There are some limitations on this research due to the nature of a"
    },
    {
      "Time_Start": 1015.32,
      "Time_End": 1021.86,
      "Text": " timing based attack. There can be false positives and false negatives. While we have"
    },
    {
      "Time_Start": 1021.94,
      "Time_End": 1028.58,
      "Text": " simplified the states into three or four, in actuality there exist many other complicated"
    },
    {
      "Time_Start": 1028.58,
      "Time_End": 1035.22,
      "Text": " scenarios. Also the proof of concept needs further optimization to speed up the scanning"
    },
    {
      "Time_Start": 1035.22,
      "Time_End": 1040.22,
      "Text": " process. Lastly, I'd like to end the talk with takeaways. It's always best to use Tor Browser for"
    },
    {
      "Time_Start": 1042.7,
      "Time_End": 1049.7,
      "Text": " privacy and security. Related to this research, Tor Browser simply declines any request to"
    },
    {
      "Time_Start": 1049.74,
      "Time_End": 1054.74,
      "Text": " local host and local IPs. Also use ad blockers to avoid malicious tracking scripts. Finally,"
    },
    {
      "Time_Start": 1059.18,
      "Time_End": 1064.18,
      "Text": " VPNs can be a mitigation as long as they allow access to the user's local network. And"
    },
    {
      "Time_Start": 1072.26,
      "Time_End": 1077.26,
      "Text": " that's it. I'd like to thank Oscar, Hansol, Luis, Sun and the ACC group for helping out and"
    },
    {
      "Time_Start": 1077.26,
      "Time_End": 1082.5,
      "Text": " Betty for editing. Thank you very much for listening."
    }
  ]
}