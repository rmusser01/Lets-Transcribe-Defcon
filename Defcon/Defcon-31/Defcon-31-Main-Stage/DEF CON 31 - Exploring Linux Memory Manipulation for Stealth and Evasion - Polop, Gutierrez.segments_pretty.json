{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 6.5600000000000005,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Cool. Okay, well, welcome everybody. We are going to be giving the talk Exploring Linux"
    },
    {
      "Time_Start": 6.5600000000000005,
      "Time_End": 11.16,
      "Text": " Memory Manipulation for Stealth and Evasion, Strategies to Bypass Read-only NUEXEC and"
    },
    {
      "Time_Start": 11.16,
      "Time_End": 16.240000000000002,
      "Text": " Digital-less Environments. Probably the title is self-explanatory, but what we are going to be"
    },
    {
      "Time_Start": 16.240000000000002,
      "Time_End": 23.240000000000002,
      "Text": " doing is to abuse Linux memory in order to bypass some file system-based defenses and also to"
    },
    {
      "Time_Start": 23.240000000000002,
      "Time_End": 30.360000000000003,
      "Text": " get RCS in, well, to try to make it easier to people where you are talking about digital-less"
    },
    {
      "Time_Start": 30.360000000000003,
      "Time_End": 36.32,
      "Text": " environments. We will explain what this is if you don't know about it. So for the people that"
    },
    {
      "Time_Start": 36.32,
      "Time_End": 41.68000000000001,
      "Text": " read this title and doesn't understand a thing, don't worry because we are going to be starting"
    },
    {
      "Time_Start": 41.68000000000001,
      "Time_End": 46.760000000000005,
      "Text": " from the beginning. We are going to be explaining you why we developed this technique and also"
    },
    {
      "Time_Start": 46.760000000000005,
      "Time_End": 50.92,
      "Text": " how it works, so you should be able to follow everything. Also, we have a lot of demos. For"
    },
    {
      "Time_Start": 50.92,
      "Time_End": 55.64,
      "Text": " the people that are already experts in things related to this, I will ask you to wait for the"
    },
    {
      "Time_Start": 55.64,
      "Time_End": 60.040000000000006,
      "Text": " final fireworks because things are going to be getting harder and harder. So we are going to"
    },
    {
      "Time_Start": 60.040000000000006,
      "Time_End": 64.84,
      "Text": " start easy and then we are going to start doing the complicated stuff. So just wait for the end."
    },
    {
      "Time_Start": 64.84,
      "Time_End": 69.88,
      "Text": " Also, as you know, this is our first DEF CON. So far this has been a great experience. We are"
    },
    {
      "Time_Start": 69.88,
      "Time_End": 75.28,
      "Text": " amazed with the community, with the conference. So I would like to start this talk asking you"
    },
    {
      "Time_Start": 75.28,
      "Time_End": 79.48,
      "Text": " for a round of applause just for DEF CON because this has been a really great, great"
    },
    {
      "Time_Start": 79.48,
      "Time_End": 85.48,
      "Text": " conference. Cool. So who am I? All of you know about this, I'm sure. So I'm Carlos Palob. I'm"
    },
    {
      "Time_Start": 93.64,
      "Time_End": 97.88000000000001,
      "Text": " technical leader at HALBORN. I have a lot of certifications. I was the captain of the"
    },
    {
      "Time_Start": 97.88000000000001,
      "Time_End": 103.04,
      "Text": " Spanish team in the European cybersecurity conference a couple of years ago and also a"
    },
    {
      "Time_Start": 103.04,
      "Time_End": 108.44,
      "Text": " member of the winning European team in the international cybersecurity challenge last year."
    },
    {
      "Time_Start": 108.44,
      "Time_End": 114.44,
      "Text": " I'm also the author of Hot Trees, Hot Trees Clouds and Peace. Thank you. I am just a lost nerd"
    },
    {
      "Time_Start": 122.24,
      "Time_End": 129.6,
      "Text": " in the wilderness. I'm still studying telecommunications engineering. I love Pwn, I love"
    },
    {
      "Time_Start": 129.6,
      "Time_End": 135.6,
      "Text": " C, assembly, and Linux internals. I don't think I have much more to say about me. So let's go."
    },
    {
      "Time_Start": 138.8,
      "Time_End": 144.8,
      "Text": " He's great. Okay, so what are we going to be talking about? We will start with an"
    },
    {
      "Time_Start": 149.04,
      "Time_End": 153.24,
      "Text": " introduction about the technique. We are going to present you the initial technique we"
    },
    {
      "Time_Start": 153.24,
      "Time_End": 158.68,
      "Text": " developed called DDXSEC and then we are going to do a lot of demos. All of these demos"
    },
    {
      "Time_Start": 158.68,
      "Time_End": 164.4,
      "Text": " have been already recorded but we are going to be doing all but one live because we really"
    },
    {
      "Time_Start": 164.44,
      "Time_End": 170.08,
      "Text": " like to do things live even if they can fail. So let's hope it will go okay. And at the end we"
    },
    {
      "Time_Start": 170.08,
      "Time_End": 176.08,
      "Text": " have a surprise. We developed a new technique that we weren't expecting to present in this"
    },
    {
      "Time_Start": 177.4,
      "Time_End": 183.92000000000002,
      "Text": " talk but Diago yesterday finalized the initial step so we are going to be doing a demo and we"
    },
    {
      "Time_Start": 183.92000000000002,
      "Time_End": 189.92000000000002,
      "Text": " will expect that it works. Yesterday worked most of the time. So let's see. Okay. So, cool."
    },
    {
      "Time_Start": 190.92000000000002,
      "Time_End": 196.92000000000002,
      "Text": " Everything started maybe two, three years ago and the thing is that I was working in this"
    },
    {
      "Time_Start": 198.76000000000002,
      "Time_End": 202.64000000000001,
      "Text": " company and they decided to move all the containers to distressed containers and my boss"
    },
    {
      "Time_Start": 202.64000000000001,
      "Time_End": 209.00000000000003,
      "Text": " asked me to take a look at this new distressed container because it is said that it's very"
    },
    {
      "Time_Start": 209.00000000000003,
      "Time_End": 213.96,
      "Text": " complicated to compromise even if there are vulnerabilities in web servers. In these"
    },
    {
      "Time_Start": 213.96,
      "Time_End": 218.72000000000003,
      "Text": " containers it is very complicated to compromise them. So take a look at them and let's find"
    },
    {
      "Time_Start": 218.72,
      "Time_End": 224.35999999999999,
      "Text": " out what an attacker could do in this kind of containers. So the question was, is distressed"
    },
    {
      "Time_Start": 224.35999999999999,
      "Time_End": 228.76,
      "Text": " the new hackable system? The reality is that in that time I didn't know much about"
    },
    {
      "Time_Start": 228.76,
      "Time_End": 233.96,
      "Text": " distressed, also about containers. So when I started taking a look, I discovered that I don't"
    },
    {
      "Time_Start": 233.96,
      "Time_End": 238.44,
      "Text": " even have a cell in these containers. I don't have SH, I don't have bus. So it was like, man,"
    },
    {
      "Time_Start": 238.44,
      "Time_End": 242.64,
      "Text": " even if someone finds a remote code execution here, they are not going to be able to execute"
    },
    {
      "Time_Start": 242.64,
      "Time_End": 247.76,
      "Text": " card, to execute the list, to execute who am I. They cannot execute a thing. So to me it looks"
    },
    {
      "Time_Start": 247.8,
      "Time_End": 253.60000000000002,
      "Text": " like pretty legit. It's adding a lot of security and I didn't know a way to bypass this at"
    },
    {
      "Time_Start": 253.60000000000002,
      "Time_End": 259.96000000000004,
      "Text": " that time. Also I started playing more with containers, with Kubernetes, and in Kubernetes"
    },
    {
      "Time_Start": 259.96000000000004,
      "Time_End": 264.56,
      "Text": " you have this easy flag that you can set to true, which is read only, which will make the file"
    },
    {
      "Time_Start": 264.56,
      "Time_End": 270.0,
      "Text": " system read only everything except one of two folders that have the noexec bit, which means"
    },
    {
      "Time_Start": 270.0,
      "Time_End": 275.44,
      "Text": " that if you manage to compromise a readexec container in Kubernetes, you're not going to be"
    },
    {
      "Time_Start": 275.44,
      "Time_End": 280.32,
      "Text": " able to download binaries and execute them. Because in the only place where you can write,"
    },
    {
      "Time_Start": 280.32,
      "Time_End": 286.08,
      "Text": " you have the noexec bit. I didn't know how annoying it is as a red teamer to compromise a"
    },
    {
      "Time_Start": 286.08,
      "Time_End": 291.48,
      "Text": " Kubernetes container, see this Kubernetes token, and don't be able to download kubectl and"
    },
    {
      "Time_Start": 291.48,
      "Time_End": 295.88,
      "Text": " execute it. Of course you can use Kuru for insight, but you need to use Kuru to contact the"
    },
    {
      "Time_Start": 295.88,
      "Time_End": 301.2,
      "Text": " Kube API manually and it's just annoying. So yeah, it makes your life much more complicated."
    },
    {
      "Time_Start": 301.28,
      "Time_End": 306.76,
      "Text": " At that time I thought, hey, okay, so I cannot write in the file system, but what happens if I"
    },
    {
      "Time_Start": 306.76,
      "Time_End": 311.76,
      "Text": " could load something in memory and execute it? There is nothing preventing me from doing"
    },
    {
      "Time_Start": 311.76,
      "Time_End": 315.56,
      "Text": " that. And I knew at that time that there were a lot of different techniques for doing this in"
    },
    {
      "Time_Start": 315.56,
      "Time_End": 320.4,
      "Text": " Windows. It's super easy to do this in Windows. But what about Linux? Well, there weren't so"
    },
    {
      "Time_Start": 320.4,
      "Time_End": 325.0,
      "Text": " many and the words that were in there weren't that reliable. So at that point I started my"
    },
    {
      "Time_Start": 325.0,
      "Time_End": 330.84,
      "Text": " conversation with Diago and he came up with a very strange idea that ended up working"
    },
    {
      "Time_Start": 330.92,
      "Time_End": 335.72,
      "Text": " perfectly. But before getting into this technique, let me tell you about the state of the art in"
    },
    {
      "Time_Start": 335.72,
      "Time_End": 341.32000000000005,
      "Text": " that time about how to load things in Linux memory and execute this stuff. At some point we"
    },
    {
      "Time_Start": 341.32000000000005,
      "Time_End": 346.48,
      "Text": " found this blog from sector 7 that told you that if you managed to write things in memory, you"
    },
    {
      "Time_Start": 346.48,
      "Time_End": 353.36,
      "Text": " could use this cell code using the syscall memfd create that will allow you to create a file in"
    },
    {
      "Time_Start": 353.36,
      "Time_End": 358.64000000000004,
      "Text": " memory that is readable from the file system so you could create a file in memory, load your"
    },
    {
      "Time_Start": 358.64,
      "Time_End": 363.91999999999996,
      "Text": " binary and execute it. This will allow you to bypass these protections. And also while they"
    },
    {
      "Time_Start": 363.91999999999996,
      "Time_End": 367.71999999999997,
      "Text": " were developing the technique that now Diago is going to explain, we found that David"
    },
    {
      "Time_Start": 367.71999999999997,
      "Time_End": 372.59999999999997,
      "Text": " Buchanan was doing something very, very, very similar but just smaller. And actually he was"
    },
    {
      "Time_Start": 372.59999999999997,
      "Time_End": 378.76,
      "Text": " using a couple of extra techniques that we ended up implementing in our final technique called"
    },
    {
      "Time_Start": 378.76,
      "Time_End": 384.59999999999997,
      "Text": " ddexec, but at that point that was the state of the art. You couldn't do much and it was kind"
    },
    {
      "Time_Start": 384.6,
      "Time_End": 391.04,
      "Text": " of complex and dark how to do this. So we came up with ddexec."
    },
    {
      "Time_Start": 391.04,
      "Time_End": 399.52000000000004,
      "Text": " So the idea that I had at the time was to trick DD into \u2011\u2011 okay. The idea that I had at the"
    },
    {
      "Time_Start": 399.52000000000004,
      "Time_End": 406.08000000000004,
      "Text": " time was to trick DD into overwriting its own memory through the memfile in the broker file"
    },
    {
      "Time_Start": 406.08,
      "Time_End": 415.96,
      "Text": " system. It turns out that somebody had that idea earlier, like three years before me. That was"
    },
    {
      "Time_Start": 415.96,
      "Time_End": 431.47999999999996,
      "Text": " the post from sector 7. Then I discovered that David Buchanan had a tweet where he used a way"
    },
    {
      "Time_Start": 431.48,
      "Time_End": 447.24,
      "Text": " to write to the memory of the shell of bash or ZSH. This has the benefit that it doesn't need to"
    },
    {
      "Time_Start": 447.24,
      "Time_End": 457.24,
      "Text": " disable ASLR because when we tricked DD into overwriting its own memory, we needed to tell it"
    },
    {
      "Time_Start": 458.24,
      "Time_End": 468.04,
      "Text": " at which address it needed to write. And that address must be passed in the arguments. So we"
    },
    {
      "Time_Start": 468.04,
      "Time_End": 476.76,
      "Text": " need to know at which address write before DD doesn't exist. And that was the problem. With"
    },
    {
      "Time_Start": 476.76,
      "Time_End": 484.36,
      "Text": " bash, we have the benefit that bash already exists. We use an inherited file descriptor. That way"
    },
    {
      "Time_Start": 484.44,
      "Time_End": 495.44,
      "Text": " we can write into bash's memory and we can check the mappings that bash has beforehand. So \u2011\u2011"
    },
    {
      "Time_Start": 495.44,
      "Time_End": 509.96000000000004,
      "Text": " well, Buchanan, the tweet from Buchanan was \u2011\u2011 what it did was just write to bash memory to"
    },
    {
      "Time_Start": 509.96000000000004,
      "Time_End": 519.08,
      "Text": " execute native code, a shell code. It didn't allow to run a binary. So the tool that I made that I"
    },
    {
      "Time_Start": 519.08,
      "Time_End": 531.8000000000001,
      "Text": " had to develop in shell scripting, what it did or what it does is to parse the binary and prepare a"
    },
    {
      "Time_Start": 531.8,
      "Time_End": 542.56,
      "Text": " shell code that will perform the same process that the kernel does upon each code to exec V. So we"
    },
    {
      "Time_Start": 542.56,
      "Time_End": 552.56,
      "Text": " need to load the loader in memory. We need to load the binary because each ELF has a header that"
    },
    {
      "Time_Start": 553.2,
      "Time_End": 562.2800000000001,
      "Text": " says the kernel or the loader, which portions of the binary need to be in memory and in which"
    },
    {
      "Time_Start": 562.2800000000001,
      "Time_End": 572.0400000000001,
      "Text": " address and with what protections. So we create those mappings. We read the data of these"
    },
    {
      "Time_Start": 572.0400000000001,
      "Time_End": 581.0000000000001,
      "Text": " binaries into these mappings. We fix the permissions. Then we prepare the stack. We need the"
    },
    {
      "Time_Start": 581.04,
      "Time_End": 589.04,
      "Text": " kernel leaves some information for the loader. It is called the auxiliary vector. This has data"
    },
    {
      "Time_Start": 589.04,
      "Time_End": 595.6,
      "Text": " like which address is loaded in the binary and where are the headers of the binary and stuff like"
    },
    {
      "Time_Start": 595.6,
      "Time_End": 603.48,
      "Text": " that. So we prepare the stack and then jump to the loader's entry point. The loader will parse"
    },
    {
      "Time_Start": 603.8000000000001,
      "Time_End": 613.32,
      "Text": " the binary. We'll see which libraries are needed. Then load them and link them. And then jump"
    },
    {
      "Time_Start": 613.32,
      "Time_End": 621.32,
      "Text": " into the binary's entry point. So we prepare all the stuff and let the loader do the rest."
    },
    {
      "Time_Start": 622.32,
      "Time_End": 628.32,
      "Text": " So he explained it very, very easy. Just so you get an idea of how complex this actually is. All"
    },
    {
      "Time_Start": 634.9200000000001,
      "Time_End": 639.32,
      "Text": " the thing that he said that he's preparing the memory and everything is actually a cell code"
    },
    {
      "Time_Start": 639.32,
      "Time_End": 646.32,
      "Text": " that is going to be created using cell script. So he dynamically creates a cell code to load a"
    },
    {
      "Time_Start": 646.32,
      "Time_End": 651.5200000000001,
      "Text": " binary inside memory using cell script. I mean, if you read this, it looks like the code is"
    },
    {
      "Time_Start": 651.5200000000001,
      "Time_End": 658.5200000000001,
      "Text": " sophisticated, but it is not. It's just super ugly. So yeah. Just so you get the idea. Cool. So"
    },
    {
      "Time_Start": 658.5200000000001,
      "Time_End": 664.4000000000001,
      "Text": " let's start with the first demo where we are going to be using DDX to bypass these protections."
    },
    {
      "Time_Start": 664.4000000000001,
      "Time_End": 670.7600000000001,
      "Text": " So what we are going to be running, I have a spot running this with this read only root file"
    },
    {
      "Time_Start": 670.7600000000001,
      "Time_End": 675.2,
      "Text": " system which made the file system read only. And this allows us to download, for example,"
    },
    {
      "Time_Start": 675.24,
      "Time_End": 683.24,
      "Text": " QCTL and execute it. And we are going to be executing QCTL using the DDX technique. So I have"
    },
    {
      "Time_Start": 683.24,
      "Time_End": 691.24,
      "Text": " prepared here so I can copy paste and I don't break anything. We are going to get a cell. We are"
    },
    {
      "Time_Start": 691.24,
      "Time_End": 697.74,
      "Text": " not still in the distro part, so we still have a cell. If I run mount, do you see this? Do you"
    },
    {
      "Time_Start": 697.74,
      "Time_End": 704.24,
      "Text": " read this? Cool. You can see that root is mounting in read only and also something"
    },
    {
      "Time_Start": 704.28,
      "Time_End": 712.28,
      "Text": " interesting is that the SHM here is read write, but it has no exec. So even if we have already"
    },
    {
      "Time_Start": 712.28,
      "Time_End": 720.28,
      "Text": " here QCTL, if we try to execute it, we are not able. So what we are going to be doing is to"
    },
    {
      "Time_Start": 720.28,
      "Time_End": 728.28,
      "Text": " load a binary with DDX in memory and execute it. Let's just start loading LS, for example."
    },
    {
      "Time_Start": 729.12,
      "Time_End": 736.02,
      "Text": " So what we are doing here is just basically for encoding LS, sending it to DDX and here we"
    },
    {
      "Time_Start": 736.02,
      "Time_End": 741.02,
      "Text": " have the R0 and the arguments we want to pass, in this case just dash H. So it takes a couple"
    },
    {
      "Time_Start": 741.02,
      "Time_End": 748.02,
      "Text": " of seconds to run because it needs to load in memory. Sooner or later, here. We just execute"
    },
    {
      "Time_Start": 748.02,
      "Time_End": 754.02,
      "Text": " something from memory. So of course LS was a bit of a pain in the ass, but we are going to"
    },
    {
      "Time_Start": 758.28,
      "Time_End": 763.28,
      "Text": " be covering the system so it wasn't that complicated to execute it. The thing about big"
    },
    {
      "Time_Start": 763.28,
      "Time_End": 768.28,
      "Text": " binaries for DDX is that it takes a couple of minutes to run. So here where you can see is"
    },
    {
      "Time_Start": 768.28,
      "Time_End": 772.28,
      "Text": " that we are going to be running DDX in this video, just because I don't want to waste five"
    },
    {
      "Time_Start": 772.28,
      "Time_End": 776.52,
      "Text": " minutes of the talk waiting. So I have just got the video and we'll show you that you can"
    },
    {
      "Time_Start": 776.52,
      "Time_End": 782.52,
      "Text": " actually run QCTL. So if you check the last line, we are loading QCTL in DDX. This is the"
    },
    {
      "Time_Start": 783.52,
      "Time_End": 788.9399999999999,
      "Text": " magic of video. I just got it and it just worked and you will have the help of QCTL. So you"
    },
    {
      "Time_Start": 788.9399999999999,
      "Time_End": 794.9399999999999,
      "Text": " can load even big binaries with this technique. The problem with QCTL is that it is a really"
    },
    {
      "Time_Start": 797.9,
      "Time_End": 803.9,
      "Text": " large binary. It is like 40 megabytes. Because DDX is programmed in shell scripting, all the"
    },
    {
      "Time_Start": 804.24,
      "Time_End": 810.24,
      "Text": " processing of the binary is done with pipes between commands. This makes everything really,"
    },
    {
      "Time_Start": 816.86,
      "Time_End": 822.86,
      "Text": " really slow. So with QCTL, it lasted running like 10 minutes. So that's why we had to cut the"
    },
    {
      "Time_Start": 822.86,
      "Time_End": 828.86,
      "Text": " footage. So after some months, I came up with the idea that DD can be used just to seek"
    },
    {
      "Time_Start": 828.86,
      "Time_End": 834.86,
      "Text": " through the file descriptor that points to the mem file, which is a presentation of the"
    },
    {
      "Time_Start": 834.86,
      "Time_End": 840.86,
      "Text": " batches or the shell's memory. So we seek through this file and then write with just the"
    },
    {
      "Time_Start": 865.82,
      "Time_End": 871.82,
      "Text": " redirecting an echo or something like that. So we can look for other seekers. I didn't see the"
    },
    {
      "Time_Start": 880.94,
      "Time_End": 886.94,
      "Text": " slide. So I'm going to explain why \u2011\u2011 do we have a pointer? Okay. So POSIX file descriptors"
    },
    {
      "Time_Start": 887.94,
      "Time_End": 893.94,
      "Text": " have a really cool quirk, which is that when they are inherited, they are inside the kernel,"
    },
    {
      "Time_Start": 903.48,
      "Time_End": 910.7,
      "Text": " they are exactly the same file descriptor. The structure that describes the state of this file"
    },
    {
      "Time_Start": 910.74,
      "Time_End": 916.74,
      "Text": " descriptor is the same. So if we \u2011\u2011 I have here an example. We create a file, TXT, and we"
    },
    {
      "Time_Start": 923.62,
      "Time_End": 929.62,
      "Text": " create a file descriptor, the file descriptor 3, with permissions. And then we tell DD to write"
    },
    {
      "Time_Start": 932.82,
      "Time_End": 938.82,
      "Text": " at offset 3. We tell it to write through this file descriptor. And then we have a file descriptor"
    },
    {
      "Time_Start": 940.86,
      "Time_End": 946.86,
      "Text": " and we tell it to write zero bytes. When we read from this file descriptor, which was displaced,"
    },
    {
      "Time_Start": 950.5400000000001,
      "Time_End": 956.5400000000001,
      "Text": " DD performed an L6 syscall in this file descriptor to move the pointer inside this file to the"
    },
    {
      "Time_Start": 957.54,
      "Time_End": 963.54,
      "Text": " third byte. So when we read, we will see that we are reading actually three bytes after the start"
    },
    {
      "Time_Start": 975.12,
      "Time_End": 981.12,
      "Text": " of the file. So this is even \u2011\u2011 there are two different processes. This works just because it"
    },
    {
      "Time_Start": 981.5,
      "Time_End": 987.5,
      "Text": " is the same file descriptor. So now we can just use DD to seek. And we can use other seekers."
    },
    {
      "Time_Start": 1000.5,
      "Time_End": 1006.5,
      "Text": " Like TAIL or CMP. Files that \u2011\u2011 commands that allow you to specify an offset of the"
    },
    {
      "Time_Start": 1012.12,
      "Time_End": 1018.12,
      "Text": " which start reading, we can use them. They weren't useful before because before in the demo, in"
    },
    {
      "Time_Start": 1023.96,
      "Time_End": 1029.96,
      "Text": " David's demo, DD was used not only to seek but to write. And it didn't use this quick of the"
    },
    {
      "Time_Start": 1034.96,
      "Time_End": 1039.5,
      "Text": " file descriptors. Using this quick of the file descriptors, we can just seek and then use"
    },
    {
      "Time_Start": 1039.54,
      "Time_End": 1045.54,
      "Text": " printf to write. So something fun about this technique is that now we don't depend on DD. So we"
    },
    {
      "Time_Start": 1047.88,
      "Time_End": 1052.76,
      "Text": " found an EDR that was trying to search for this technique when we released it. And they were"
    },
    {
      "Time_Start": 1052.76,
      "Time_End": 1059.18,
      "Text": " looking for DD using big numbers. So it was a very easy thing to bypass. You can even change the"
    },
    {
      "Time_Start": 1059.18,
      "Time_End": 1064.08,
      "Text": " DD name to a different binary. But actually now you can use like ten different common binaries"
    },
    {
      "Time_Start": 1064.12,
      "Time_End": 1070.0,
      "Text": " in Linux just to move the file descriptor and write in any position you want in memory. So this"
    },
    {
      "Time_Start": 1070.0,
      "Time_End": 1075.3799999999999,
      "Text": " actually allows you to bypass the only EDR that was catching this technique and potentially the"
    },
    {
      "Time_Start": 1075.3799999999999,
      "Time_End": 1080.6599999999999,
      "Text": " new EDRs that will try to catch the technique. So let me show you very, very fast a demo about"
    },
    {
      "Time_Start": 1080.6599999999999,
      "Time_End": 1087.1599999999999,
      "Text": " this. Because actually in the same DD seek script that we have shown before, you can actually"
    },
    {
      "Time_Start": 1087.1599999999999,
      "Time_End": 1091.9199999999998,
      "Text": " in the case in the seeker, the binary you want to use, and it will be using internally this"
    },
    {
      "Time_Start": 1091.92,
      "Time_End": 1097.92,
      "Text": " binary. So here we are using compare. We could also be using XSD. There are more prepared inside"
    },
    {
      "Time_Start": 1100.26,
      "Time_End": 1104.8400000000001,
      "Text": " DDXX so you can just go to the read me and take a look to the ones proposed in there. But"
    },
    {
      "Time_Start": 1104.8400000000001,
      "Time_End": 1110.1000000000001,
      "Text": " actually any binary that is executing an LS seek with a few other requirements is going to be"
    },
    {
      "Time_Start": 1110.1000000000001,
      "Time_End": 1115.5,
      "Text": " able to allow you to just load anything in memory. So actually we develop a very resilient"
    },
    {
      "Time_Start": 1115.5,
      "Time_End": 1121.5,
      "Text": " technique in order to load things in memory and bypass this kind of protections. Cool. So"
    },
    {
      "Time_Start": 1122.0,
      "Time_End": 1127.76,
      "Text": " let's move forward. Now let's start talking about this container. So if you ask GPT for some"
    },
    {
      "Time_Start": 1127.76,
      "Time_End": 1131.88,
      "Text": " months ago about what is a distressed container, he will tell you this. But basically what you"
    },
    {
      "Time_Start": 1131.88,
      "Time_End": 1136.64,
      "Text": " need to know is that it has the minimum needed packages to execute whatever you want to"
    },
    {
      "Time_Start": 1136.64,
      "Time_End": 1142.1000000000001,
      "Text": " execute. So if you want to execute a Python web, it's going to have Python, it's going to be"
    },
    {
      "Time_Start": 1142.1000000000001,
      "Time_End": 1146.3400000000001,
      "Text": " having Python dependencies, but it probably won't have bus, it won't have LS, it won't have"
    },
    {
      "Time_Start": 1146.34,
      "Time_End": 1151.56,
      "Text": " CAD. Let's say that it will just remove all the libraries and commands and packages that you"
    },
    {
      "Time_Start": 1151.56,
      "Time_End": 1156.1,
      "Text": " don't really need to run what you want. So this is great because it makes the container much,"
    },
    {
      "Time_Start": 1156.1,
      "Time_End": 1162.1,
      "Text": " much more smaller and also it makes it more secure. It makes it very, very complicated to"
    },
    {
      "Time_Start": 1162.1,
      "Time_End": 1167.3799999999999,
      "Text": " exploit vulnerabilities because we are used to executing stuff that we expect to be there."
    },
    {
      "Time_Start": 1167.3799999999999,
      "Time_End": 1172.6799999999998,
      "Text": " That's the problem I had at the beginning before I started thinking about the memory stuff. So"
    },
    {
      "Time_Start": 1172.72,
      "Time_End": 1179.02,
      "Text": " let me show you real quick how a distressed container looks like. So the previous demo we"
    },
    {
      "Time_Start": 1179.02,
      "Time_End": 1184.64,
      "Text": " have run them in my current Mac OS which is ARM. These techniques work for both ARM and"
    },
    {
      "Time_Start": 1184.64,
      "Time_End": 1191.1000000000001,
      "Text": " X64. Now we are going to go to a Kubernetes environment in AWS. This also works in"
    },
    {
      "Time_Start": 1191.1000000000001,
      "Time_End": 1195.8600000000001,
      "Text": " Kubernetes environments in the cloud that are in X64. So this way you can see that all the"
    },
    {
      "Time_Start": 1195.8600000000001,
      "Time_End": 1201.8600000000001,
      "Text": " techniques kind of work in both architectures. So I'm going to update the credentials. So"
    },
    {
      "Time_Start": 1203.3600000000001,
      "Time_End": 1208.26,
      "Text": " actually the pods that we are going to be using for the next demos are this one. We have"
    },
    {
      "Time_Start": 1208.26,
      "Time_End": 1214.64,
      "Text": " node prototype pollution distressed container. And all of them have the read only root file"
    },
    {
      "Time_Start": 1214.64,
      "Time_End": 1220.64,
      "Text": " system. This is using the node distressed container from Google. This is one using Python."
    },
    {
      "Time_Start": 1222.64,
      "Time_End": 1228.5600000000002,
      "Text": " Another one using Python. And then we have a PHP that is using the new chain war distressed"
    },
    {
      "Time_Start": 1228.56,
      "Time_End": 1233.76,
      "Text": " images. Just so you can see that these techniques are working with both Google distressed"
    },
    {
      "Time_Start": 1233.76,
      "Time_End": 1238.94,
      "Text": " and chain link, chain war distressed container. And also we have a Ubuntu machine inside"
    },
    {
      "Time_Start": 1238.94,
      "Time_End": 1243.76,
      "Text": " the same Kubernetes environment because we need to capture some rubber cells to mimic a"
    },
    {
      "Time_Start": 1243.76,
      "Time_End": 1248.44,
      "Text": " real environment. So what I want to show you here is that we are going to be getting a cell"
    },
    {
      "Time_Start": 1248.44,
      "Time_End": 1254.06,
      "Text": " inside the flask distressed container. In this case we have a cell. Some distressed"
    },
    {
      "Time_Start": 1254.06,
      "Time_End": 1260.56,
      "Text": " container we have some cells. But if we execute LS we don't have it. Who am I? God, it's"
    },
    {
      "Time_Start": 1260.56,
      "Time_End": 1266.56,
      "Text": " C. Oops. Well, you imagine that. God, not fun. So, yeah. Whatever. If you find a cell, just"
    },
    {
      "Time_Start": 1271.26,
      "Time_End": 1275.76,
      "Text": " so you know, you can still use the buildings of the cell. So we could be reading the password"
    },
    {
      "Time_Start": 1275.76,
      "Time_End": 1282.8,
      "Text": " using some \u2011\u2011 and if we try, for example, to get a cell inside the node distressed"
    },
    {
      "Time_Start": 1282.8,
      "Time_End": 1288.68,
      "Text": " container, we are going to see that we don't even have a cell here. So this is how a distressed"
    },
    {
      "Time_Start": 1288.68,
      "Time_End": 1294.8,
      "Text": " container usually looks. Now you should be familiar with distressed. This is the demo. So far"
    },
    {
      "Time_Start": 1294.8,
      "Time_End": 1300.3,
      "Text": " the demos are working. So this is pretty good. Okay. So let's move forward. Let's do this"
    },
    {
      "Time_Start": 1300.3,
      "Time_End": 1304.4199999999998,
      "Text": " Python distressed demo. This is the one I'm going to be putting the video because actually we"
    },
    {
      "Time_Start": 1304.4199999999998,
      "Time_End": 1307.9199999999998,
      "Text": " are not using our own technique. We're just using an old technique that already exists. But I"
    },
    {
      "Time_Start": 1307.92,
      "Time_End": 1313.42,
      "Text": " want to show you anyway. The thing is that, well, if you find a common injection in a web"
    },
    {
      "Time_Start": 1313.42,
      "Time_End": 1319.22,
      "Text": " cell, probably it has a cell. Just because usually to execute commands from scripting"
    },
    {
      "Time_Start": 1319.22,
      "Time_End": 1324.42,
      "Text": " languages, the cell is going to be used. So usually you will find this. But anyway, because"
    },
    {
      "Time_Start": 1324.42,
      "Time_End": 1329.1200000000001,
      "Text": " you don't really need a cell. If you are compromising a distressed container and you want a"
    },
    {
      "Time_Start": 1329.1200000000001,
      "Time_End": 1334.16,
      "Text": " web cell, even if you don't have bus, if the web server is running in Python, you can have a"
    },
    {
      "Time_Start": 1334.16,
      "Time_End": 1339.16,
      "Text": " Python web cell. So you won't be running bus commands but you will be able to run Python code"
    },
    {
      "Time_Start": 1339.16,
      "Time_End": 1345.7,
      "Text": " which is still pretty, pretty good. Also scripting languages such as Python, Perl and Ruby, by"
    },
    {
      "Time_Start": 1345.7,
      "Time_End": 1352.16,
      "Text": " default install some libraries that allows you to call raw sys calls. And that's actually"
    },
    {
      "Time_Start": 1352.16,
      "Time_End": 1357.5400000000002,
      "Text": " everything you need in order to load something in memory and execute it. So this project right"
    },
    {
      "Time_Start": 1357.54,
      "Time_End": 1365.24,
      "Text": " here is doing that. This is going to transfer some Python Ruby or Perl code. It's going to"
    },
    {
      "Time_Start": 1365.24,
      "Time_End": 1370.74,
      "Text": " transfer a binary, wrap it into Python Perl or Ruby code and allow you to execute from these"
    },
    {
      "Time_Start": 1370.74,
      "Time_End": 1377.82,
      "Text": " scripting engines. So in these specific cases, in these specific distressed cases, you won't"
    },
    {
      "Time_Start": 1377.82,
      "Time_End": 1382.32,
      "Text": " need to use our technique. The scripting language is enough. So I just want to show you this"
    },
    {
      "Time_Start": 1382.32,
      "Time_End": 1386.78,
      "Text": " real quick and actually we are going to be seeing a video. Here we have a vulnerable Python"
    },
    {
      "Time_Start": 1386.82,
      "Time_End": 1393.32,
      "Text": " bot running a web server. I have port forward to my local host. LS doesn't exist. Cat doesn't"
    },
    {
      "Time_Start": 1393.32,
      "Time_End": 1398.06,
      "Text": " exist. Using the built-in command we can see that we have Python, of course. It is running in"
    },
    {
      "Time_Start": 1398.06,
      "Time_End": 1404.68,
      "Text": " flask. So we are going to be getting now \u2011\u2011 we are going to be using \u2011\u2011 sorry, I wasn't"
    },
    {
      "Time_Start": 1404.68,
      "Time_End": 1412.18,
      "Text": " expecting that. We are going to be getting a rubber cell now. A Python rubber cell. If you're"
    },
    {
      "Time_Start": 1412.18,
      "Time_End": 1416.1,
      "Text": " going to be playing with distressed containers, forget about bus rubber cell. You're going to"
    },
    {
      "Time_Start": 1416.14,
      "Time_End": 1422.64,
      "Text": " be getting no PHP Python rubber cells. Here we have it. Now what we are going to be doing is"
    },
    {
      "Time_Start": 1422.64,
      "Time_End": 1429.2600000000002,
      "Text": " just down here we execute Ubuntu. We are going to be preparing kubectl to be executed with"
    },
    {
      "Time_Start": 1429.2600000000002,
      "Time_End": 1435.0200000000002,
      "Text": " Python. So we have downloaded the project I just told you about. We are downloading here"
    },
    {
      "Time_Start": 1435.0200000000002,
      "Time_End": 1440.0200000000002,
      "Text": " kubectl. Now we execute the file to prepare kubectl. Actually this script looks just like"
    },
    {
      "Time_Start": 1447.0200000000002,
      "Time_End": 1453.18,
      "Text": " this. So basically what this is doing is getting the binary in base 64, decoding it in memory"
    },
    {
      "Time_Start": 1453.18,
      "Time_End": 1459.0200000000002,
      "Text": " and just calling the syscall exec LA to execute it. Again, if you can call syscalls from the"
    },
    {
      "Time_Start": 1459.0200000000002,
      "Time_End": 1464.4800000000002,
      "Text": " scripting language, you don't need to do extra stuff to call syscalls. You can just do it. So"
    },
    {
      "Time_Start": 1464.4800000000002,
      "Time_End": 1468.64,
      "Text": " in our case, in our rubber cell, what we need to do is to create a children because it's not"
    },
    {
      "Time_Start": 1468.64,
      "Time_End": 1474.3400000000001,
      "Text": " whenever we end executing this command, our rubber cell is going to be dying. So here I'm"
    },
    {
      "Time_Start": 1474.34,
      "Time_End": 1480.34,
      "Text": " just changing the code to fork it to execute kubectl in a children. I'm going fast because"
    },
    {
      "Time_Start": 1483.9199999999998,
      "Time_End": 1490.9199999999998,
      "Text": " we have a lot of things to do yet. We are just starting. Now we are going to be exposing"
    },
    {
      "Time_Start": 1490.9199999999998,
      "Time_End": 1496.26,
      "Text": " this Ubuntu server, the kubectl.py that we have prepared in our Python rubber cell. We are"
    },
    {
      "Time_Start": 1496.26,
      "Time_End": 1502.26,
      "Text": " going to be downloading this in memory again. Okay. And now we are going to be executing"
    },
    {
      "Time_Start": 1505.22,
      "Time_End": 1510.9599999999998,
      "Text": " it. If we just exec it, we are going to be able to run kubectl in memory in Python. Again, we"
    },
    {
      "Time_Start": 1510.9599999999998,
      "Time_End": 1514.4199999999998,
      "Text": " haven't used our technique, but just so you know, if you find a digital list with Ruby, Perl"
    },
    {
      "Time_Start": 1514.4199999999998,
      "Time_End": 1519.8799999999999,
      "Text": " or Python, you have a very easy way to just call syscalls and execute things in memory. But"
    },
    {
      "Time_Start": 1519.8799999999999,
      "Time_End": 1526.3799999999999,
      "Text": " what will happen, for example, if we have a node server, we have an express web server with"
    },
    {
      "Time_Start": 1526.3799999999999,
      "Time_End": 1532.54,
      "Text": " an RC vulnerability. Well, there is no SH in the server, so we can still get a node rubber"
    },
    {
      "Time_Start": 1532.54,
      "Time_End": 1539.1599999999999,
      "Text": " cell. Again, get used to getting this stuff in this list. You can use node to enumerate the"
    },
    {
      "Time_Start": 1539.1599999999999,
      "Time_End": 1544.2,
      "Text": " server, so you cannot execute LS, but you can create node functions that behave like LS so"
    },
    {
      "Time_Start": 1544.2,
      "Time_End": 1551.1599999999999,
      "Text": " you can enumerate files. And node cannot call syscall directly, but we could use a cell"
    },
    {
      "Time_Start": 1551.1599999999999,
      "Time_End": 1557.96,
      "Text": " code like ddexec to modify a new node process to execute anything we want. So what we are"
    },
    {
      "Time_Start": 1557.96,
      "Time_End": 1563.74,
      "Text": " doing here is to abuse the ddexec technique in order to load anything we want, even in node"
    },
    {
      "Time_Start": 1563.74,
      "Time_End": 1570.78,
      "Text": " who cannot call syscalls. So in this case, I'm going to be using the cell code that uses"
    },
    {
      "Time_Start": 1570.78,
      "Time_End": 1576.04,
      "Text": " the syscall create memfd that I told you about at the beginning. We are going to be creating a"
    },
    {
      "Time_Start": 1576.04,
      "Time_End": 1580.42,
      "Text": " file in memory, then we are going to be loading kubectl in it, and we are going to be able to"
    },
    {
      "Time_Start": 1580.42,
      "Time_End": 1587.08,
      "Text": " execute kubectl in another digital list container in node. And actually I'm going to try to do"
    },
    {
      "Time_Start": 1587.12,
      "Time_End": 1598.12,
      "Text": " this demo live, so this is going to be a good one. Cool. So let me get \u2011\u2011 we are going"
    },
    {
      "Time_Start": 1598.12,
      "Time_End": 1605.4199999999998,
      "Text": " to be in our target machine. I'm going to be port forwarding port 3,000 to my local"
    },
    {
      "Time_Start": 1605.4199999999998,
      "Time_End": 1612.0,
      "Text": " machine because that is where the vulnerable server is running. And here I'm just abusing"
    },
    {
      "Time_Start": 1612.0,
      "Time_End": 1615.88,
      "Text": " a prototype pollution to receive vulnerability in order to get a rubber cell. This is outside"
    },
    {
      "Time_Start": 1615.88,
      "Time_End": 1622.42,
      "Text": " of the scope, but if you are interested in how to do this, you can check more information. So it"
    },
    {
      "Time_Start": 1622.42,
      "Time_End": 1630.42,
      "Text": " was executed. And I forgot to capture the rubber cell, so we have a real problem here. No worries."
    },
    {
      "Time_Start": 1630.42,
      "Time_End": 1638.12,
      "Text": " I just need to restart real quick, which is going to take like a minute. But now we can be"
    },
    {
      "Time_Start": 1638.1200000000001,
      "Time_End": 1645.6200000000001,
      "Text": " prepared to capture the rubber cell. Yeah. Never forget the most important part of rubber"
    },
    {
      "Time_Start": 1645.6200000000001,
      "Time_End": 1653.74,
      "Text": " cells, the listener. Yeah. Sorry about this. So Kubernetes takes a minute in order to restart"
    },
    {
      "Time_Start": 1653.74,
      "Time_End": 1663.74,
      "Text": " the port, so that's what we are now waiting for. But in the meantime, we can just prepare the \u2011\u2011"
    },
    {
      "Time_Start": 1663.74,
      "Time_End": 1675.24,
      "Text": " I think he was looking at me angry. Cool. Okay. I suppose we should be now ready. Yeah. Okay."
    },
    {
      "Time_Start": 1675.24,
      "Time_End": 1684.4,
      "Text": " Back on track. Actually, let me take a look if I have any other listener in there that could be"
    },
    {
      "Time_Start": 1684.4,
      "Time_End": 1699.7800000000002,
      "Text": " bothering. I actually have one, so this wouldn't have to work again. Okay. Executed. And we have"
    },
    {
      "Time_Start": 1699.7800000000002,
      "Time_End": 1707.8600000000001,
      "Text": " our node rubber cell. Great. And we go with the demo. So I told you that you can use node"
    },
    {
      "Time_Start": 1707.8600000000001,
      "Time_End": 1712.16,
      "Text": " code, JavaScript code in order to enumerate the machine. So you could use, for example, the OS"
    },
    {
      "Time_Start": 1712.24,
      "Time_End": 1717.5800000000002,
      "Text": " library to get information about the architecture or the network information so you can still"
    },
    {
      "Time_Start": 1717.5800000000002,
      "Time_End": 1723.5,
      "Text": " enumerate this code. You can also execute things in memory, which is what we are going to be"
    },
    {
      "Time_Start": 1723.5,
      "Time_End": 1727.7,
      "Text": " doing now. I have the demo here so you can follow it better. So here what we are going to be"
    },
    {
      "Time_Start": 1727.7,
      "Time_End": 1733.5,
      "Text": " doing is importing some stuff and we are going to create a new JavaScript file with the code"
    },
    {
      "Time_Start": 1733.5,
      "Time_End": 1738.24,
      "Text": " that we want to run. And the cell code that we want to run. So we are going to be using the"
    },
    {
      "Time_Start": 1738.24,
      "Time_End": 1742.54,
      "Text": " syscall trick in order to know where we need to override inside the memory. We are going to be"
    },
    {
      "Time_Start": 1742.54,
      "Time_End": 1750.74,
      "Text": " overriding the memory. And this is the cell code that is going to be executing the syscall."
    },
    {
      "Time_Start": 1750.74,
      "Time_End": 1760.66,
      "Text": " Create memfd. Yeah. So we prepare the file through our rubber cell. We write it in the file"
    },
    {
      "Time_Start": 1760.7,
      "Time_End": 1768.78,
      "Text": " system and we check that it exists. So it exists right here. Now we call via fork this new child"
    },
    {
      "Time_Start": 1768.78,
      "Time_End": 1775.5,
      "Text": " process that is going to be executed. Our cell code. Now we want to check if this works, of"
    },
    {
      "Time_Start": 1775.5,
      "Time_End": 1780.0400000000002,
      "Text": " course. So this is what the function is going to be doing. And we can see that we have a memory"
    },
    {
      "Time_Start": 1780.0400000000002,
      "Time_End": 1787.0400000000002,
      "Text": " file descriptor that we call dead just for the sake of stillness, I guess. File descriptor 20,"
    },
    {
      "Time_Start": 1787.3799999999999,
      "Time_End": 1796.3799999999999,
      "Text": " proc ID 59. So this should be working. Okay. And now we are going to be creating this"
    },
    {
      "Time_Start": 1796.3799999999999,
      "Time_End": 1802.62,
      "Text": " download function that basically is going to be able to download something from the Internet,"
    },
    {
      "Time_Start": 1802.62,
      "Time_End": 1810.62,
      "Text": " load it in the memfd and run it. Okay. We download it. It should be working."
    },
    {
      "Time_Start": 1810.62,
      "Time_End": 1816.12,
      "Text": " And now if I execute the memory file descriptor, it should be executing kubectl. And here you"
    },
    {
      "Time_Start": 1816.1200000000001,
      "Time_End": 1821.5000000000002,
      "Text": " have the help of kubectl. So we were able to bypass these protections by executing things"
    },
    {
      "Time_Start": 1821.5000000000002,
      "Time_End": 1839.5000000000002,
      "Text": " in memory. So in order to make this more useful, I decided to make like a ddxsec, a demo of"
    },
    {
      "Time_Start": 1839.84,
      "Time_End": 1847.84,
      "Text": " ddxsec. So we can just load this program. In the end, I actually made it a shellcode. So we run"
    },
    {
      "Time_Start": 1857.58,
      "Time_End": 1865.58,
      "Text": " this shellcode with any of these techniques that allow us to run native code. We run this"
    },
    {
      "Time_Start": 1866.46,
      "Time_End": 1878.46,
      "Text": " shellcode and we can tell this shellcode to load a binary with the argument. And then just we"
    },
    {
      "Time_Start": 1878.46,
      "Time_End": 1892.46,
      "Text": " will be able to run any program we want. Okay. So basically this will allow us to use what I"
    },
    {
      "Time_Start": 1892.54,
      "Time_End": 1896.3400000000001,
      "Text": " have showed you, but to load binaries more frequently are more useful. Instead of doing"
    },
    {
      "Time_Start": 1896.3400000000001,
      "Time_End": 1901.3,
      "Text": " everything once and again, it will allow us to send the binary and load it and execute it. So"
    },
    {
      "Time_Start": 1901.3,
      "Time_End": 1906.3,
      "Text": " in this final demo before the bonus that I hope we have time for that, what we are going to"
    },
    {
      "Time_Start": 1906.3,
      "Time_End": 1911.8,
      "Text": " have is a PHP digital list. We are going to be using the chain war image for this. In this"
    },
    {
      "Time_Start": 1911.8,
      "Time_End": 1916.54,
      "Text": " case we don't have a cell. We are going to be getting a PHP rebel cell. We are going to be"
    },
    {
      "Time_Start": 1916.54,
      "Time_End": 1922.26,
      "Text": " loading the new demo. And actually we are going to finalize this demo loading a VC box"
    },
    {
      "Time_Start": 1922.26,
      "Time_End": 1927.48,
      "Text": " because we are in this list. It will be very ironic if we can have a cell in this list. So"
    },
    {
      "Time_Start": 1927.48,
      "Time_End": 1934.64,
      "Text": " that's what we are going to end up doing. So let me get \u2011\u2011 let me show you that in PHP we"
    },
    {
      "Time_Start": 1934.64,
      "Time_End": 1942.64,
      "Text": " don't have any bus, any SH, SH file not found. So we are going to be getting a PHP shell and"
    },
    {
      "Time_Start": 1943.5600000000002,
      "Time_End": 1949.5600000000002,
      "Text": " now we are going to be getting a PHP rebel cell. So imagine we have compromised a PHP"
    },
    {
      "Time_Start": 1952.3600000000001,
      "Time_End": 1958.3600000000001,
      "Text": " web application with an RC and we got a rebel cell with PHP. Okay. We have it here. Now"
    },
    {
      "Time_Start": 1963.68,
      "Time_End": 1969.68,
      "Text": " maybe you want to follow the explanation. Okay. So what we are going to do now is \u2011\u2011"
    },
    {
      "Time_Start": 1973.3200000000002,
      "Time_End": 1980.2,
      "Text": " execute another PHP, another interactive session of PHP which we will communicate through a"
    },
    {
      "Time_Start": 1980.2,
      "Time_End": 1986.2,
      "Text": " pipe with. We are creating there the pipes. And now starting the process. Okay. So this"
    },
    {
      "Time_Start": 1994.6000000000001,
      "Time_End": 2000.6000000000001,
      "Text": " interactive PHP we will send it commands to write a shellcode also through the mem file. And"
    },
    {
      "Time_Start": 2003.64,
      "Time_End": 2009.64,
      "Text": " we will run this shellcode that I made. We have the shellcode in ARM 64 or X64. And now we"
    },
    {
      "Time_Start": 2025.14,
      "Time_End": 2031.14,
      "Text": " have \u2011\u2011 okay. He made a mistake. Okay. So now we are going to run this shellcode. And"
    },
    {
      "Time_Start": 2032.64,
      "Time_End": 2038.64,
      "Text": " now we are writing the shellcode because there is a shellcode that reads the other shellcode"
    },
    {
      "Time_Start": 2038.64,
      "Time_End": 2044.64,
      "Text": " because the second shellcode is really, really large. And now I have created this"
    },
    {
      "Time_Start": 2044.64,
      "Time_End": 2050.6400000000003,
      "Text": " function. And this function is the one that is used to communicate with this daemon. And"
    },
    {
      "Time_Start": 2074.64,
      "Time_End": 2080.64,
      "Text": " we can throw it on your eye to a binary. It may also be a binary inside the on file system."
    },
    {
      "Time_Start": 2084.8799999999997,
      "Time_End": 2090.8799999999997,
      "Text": " And we pass it the arguments and we can run any command. In this case we are downloading"
    },
    {
      "Time_Start": 2093.52,
      "Time_End": 2099.52,
      "Text": " them from my server. And to finalize this demo what we are going to be doing is load a"
    },
    {
      "Time_Start": 2100.52,
      "Time_End": 2106.52,
      "Text": " bussy box cell inside this rubber cell. So what we have here is that now we can, for example,"
    },
    {
      "Time_Start": 2109.56,
      "Time_End": 2115.56,
      "Text": " call \u2011\u2011 for example, call set to enumerate variables or run BWD. Basically we put a bus"
    },
    {
      "Time_Start": 2119.8,
      "Time_End": 2125.6,
      "Text": " inside a distro list which was the main goal of this. So we just defeat distro list security"
    },
    {
      "Time_Start": 2125.6,
      "Time_End": 2131.6,
      "Text": " measures. So now the bonus technique. This is another technique that is kind of old and"
    },
    {
      "Time_Start": 2146.14,
      "Time_End": 2152.14,
      "Text": " new at the same time. The exec has a problem that we need to pass the file and we need to"
    },
    {
      "Time_Start": 2155.6,
      "Time_End": 2161.6,
      "Text": " unload it. And unloading is really, really complex. I have skipped a lot of peculiarities"
    },
    {
      "Time_Start": 2164.6,
      "Time_End": 2171.72,
      "Text": " that ELF have. And extensions from UNU and Sun Microsystems and things like that. They have"
    },
    {
      "Time_Start": 2171.72,
      "Time_End": 2179.72,
      "Text": " other \u2011\u2011 that's mayhem. So you can have like compressed sections and lots of things. And"
    },
    {
      "Time_Start": 2180.1000000000004,
      "Time_End": 2186.1000000000004,
      "Text": " the exec isn't doing that stuff. So another way to load a binary is to use the open. But tricking"
    },
    {
      "Time_Start": 2194.2200000000003,
      "Time_End": 2200.2200000000003,
      "Text": " the loader into thinking that the binary is somewhere that it isn't. Okay. So this is a technique"
    },
    {
      "Time_Start": 2210.2200000000003,
      "Time_End": 2216.2200000000003,
      "Text": " that was presented in a paper, I think in 2004. So the idea that these people had was to \u2011\u2011 you"
    },
    {
      "Time_Start": 2224.6400000000003,
      "Time_End": 2230.6400000000003,
      "Text": " have the binary that you want to execute. In memory, the ELF. And some way you get to hook to"
    },
    {
      "Time_Start": 2231.4,
      "Time_End": 2237.4,
      "Text": " the loader is going to execute. And then call the open. Passing to this function some fake"
    },
    {
      "Time_Start": 2244.2599999999998,
      "Time_End": 2250.2599999999998,
      "Text": " path. Since you are hooked to the syscal, you can detect when the loader is trying to open this"
    },
    {
      "Time_Start": 2252.98,
      "Time_End": 2258.98,
      "Text": " file path that you have given it. And return a fake file descriptor. And then you can"
    },
    {
      "Time_Start": 2261.48,
      "Time_End": 2268.48,
      "Text": " subsequent syscals, you can see if the file descriptor that the loader is using is the fake one"
    },
    {
      "Time_Start": 2268.48,
      "Time_End": 2274.48,
      "Text": " that you gave it. And in that case, you fake the syscal. So in case that you read \u2011\u2011 that the"
    },
    {
      "Time_Start": 2278.3599999999997,
      "Time_End": 2284.7599999999998,
      "Text": " loader is trying to read from this file that doesn't exist in the file system, you can just"
    },
    {
      "Time_Start": 2284.76,
      "Time_End": 2290.76,
      "Text": " make a copy from the place that you have it in memory and write it where the loader wants to"
    },
    {
      "Time_Start": 2293.26,
      "Time_End": 2299.26,
      "Text": " read the data. Okay. So in the paper, they didn't discuss how to hook to the syscals. There"
    },
    {
      "Time_Start": 2305.6400000000003,
      "Time_End": 2311.6400000000003,
      "Text": " was someone, his alias was mimics, that in GitHub has an implementation. And in the"
    },
    {
      "Time_Start": 2314.76,
      "Time_End": 2320.76,
      "Text": " implementation, that used code signatures to find the places that the calls to the"
    },
    {
      "Time_Start": 2325.1400000000003,
      "Time_End": 2331.1400000000003,
      "Text": " wrapper functions, the wrapper functions to the syscals and overwrite that calls with calls to"
    },
    {
      "Time_Start": 2335.1000000000004,
      "Time_End": 2342.1000000000004,
      "Text": " its own code. The problem with this is that code signatures may vary between libraries. And so"
    },
    {
      "Time_Start": 2342.1,
      "Time_End": 2348.1,
      "Text": " this isn't particularly useful because then you \u2011\u2011 if you have access to a system, you need"
    },
    {
      "Time_Start": 2350.3199999999997,
      "Time_End": 2356.3199999999997,
      "Text": " to download this library and get this code signatures. And it is really complicated. So my"
    },
    {
      "Time_Start": 2361.64,
      "Time_End": 2367.64,
      "Text": " idea to hook to the syscals was to install a wrapper, to install a signal handler for the signal"
    },
    {
      "Time_Start": 2368.64,
      "Time_End": 2374.64,
      "Text": " which is a signal that the kernel sends to a process if this process tries to execute an"
    },
    {
      "Time_Start": 2378.6,
      "Time_End": 2385.64,
      "Text": " instruction, an invalid instruction. And then go through the memory of the loader looking for"
    },
    {
      "Time_Start": 2385.64,
      "Time_End": 2391.64,
      "Text": " each syscal instruction and replace it with an invalid instruction. So now we have the hook that"
    },
    {
      "Time_Start": 2392.06,
      "Time_End": 2398.06,
      "Text": " we need. And we can trick LD with \u2011\u2011 just like the paper tool. Okay. They also discuss it to"
    },
    {
      "Time_Start": 2413.02,
      "Time_End": 2419.02,
      "Text": " load libraries. But if you make a binary loop like a library, you can also \u2011\u2011 you can also"
    },
    {
      "Time_Start": 2422.14,
      "Time_End": 2428.14,
      "Text": " get LD to load this binary. Okay. So later we are going to show you the links to all these"
    },
    {
      "Time_Start": 2434.8599999999997,
      "Time_End": 2441.48,
      "Text": " tools that we have just showed you. But here I just want to show you that this is actually"
    },
    {
      "Time_Start": 2441.48,
      "Time_End": 2447.48,
      "Text": " working. So we have here a container that I have already downloaded. And here what we are going"
    },
    {
      "Time_Start": 2448.48,
      "Time_End": 2454.48,
      "Text": " to be loading basically is just LS passing in the binary. So like this you can see that it's"
    },
    {
      "Time_Start": 2459.2400000000002,
      "Time_End": 2465.7400000000002,
      "Text": " actually much faster than the DXX technique. We are still working on this to improve some"
    },
    {
      "Time_Start": 2465.7400000000002,
      "Time_End": 2471.7400000000002,
      "Text": " things. This is actually a project that I haven't dedicated a lot of time. This needs a lot of"
    },
    {
      "Time_Start": 2472.7400000000002,
      "Time_End": 2478.7400000000002,
      "Text": " research. I have detected that it has problems with binaries that aren't position independent."
    },
    {
      "Time_Start": 2481.7400000000002,
      "Time_End": 2487.7400000000002,
      "Text": " But, well, I think that I will manage to fix these issues."
    },
    {
      "Time_Start": 2487.7400000000002,
      "Time_End": 2493.7400000000002,
      "Text": " Cool. So you want to show the code? So this is the shell code. It is long. And it takes a"
    },
    {
      "Time_Start": 2502.2400000000002,
      "Time_End": 2508.2400000000002,
      "Text": " long time. And it is complicated. Right now it is only implemented for ARM64. There is a proof"
    },
    {
      "Time_Start": 2509.6200000000003,
      "Time_End": 2515.6200000000003,
      "Text": " of concept written in C that is much, much more understandable. You can see the installation"
    },
    {
      "Time_Start": 2520.7400000000002,
      "Time_End": 2526.7400000000002,
      "Text": " of the signal handler. We have also the replacing \u2011\u2011 the replacement of the system instructions"
    },
    {
      "Time_Start": 2526.7400000000002,
      "Time_End": 2532.7400000000002,
      "Text": " with invalid ones. And we can see here how this signal handler is taken from the stack. All"
    },
    {
      "Time_Start": 2541.28,
      "Time_End": 2547.28,
      "Text": " the arguments that were intended for the system. Taking which system it was and faking each"
    },
    {
      "Time_Start": 2547.7000000000003,
      "Time_End": 2553.7000000000003,
      "Text": " one. Cool. I think you have all this code in the repository with some comments to help you"
    },
    {
      "Time_Start": 2559.0,
      "Time_End": 2565.9,
      "Text": " understand it. So actually the repository, you can find it in here. Here you have MEMDL"
    },
    {
      "Time_Start": 2565.9,
      "Time_End": 2572.9,
      "Text": " open. We are going to be sharing the slides. But if you want to take a quick photo, I will leave"
    },
    {
      "Time_Start": 2572.9,
      "Time_End": 2578.9,
      "Text": " it for ten seconds. Cool. Also, all the demos that I have been doing, you have them in this"
    },
    {
      "Time_Start": 2583.28,
      "Time_End": 2588.6600000000003,
      "Text": " repo if you want to try them yourself. I hope to find some nice CTF in the future using this"
    },
    {
      "Time_Start": 2588.6600000000003,
      "Time_End": 2596.6600000000003,
      "Text": " technique. What else? Also, Diago wants to share with us a challenge you have."
    },
    {
      "Time_Start": 2596.7799999999997,
      "Time_End": 2602.7799999999997,
      "Text": " It is just a really small challenge. But I think it is kind of weird. It is really easy to solve. But to"
    },
    {
      "Time_Start": 2606.0,
      "Time_End": 2612.0,
      "Text": " understand why it works is really interesting. I have shown it to \u2011\u2011 I posted it on Twitter and I"
    },
    {
      "Time_Start": 2613.3399999999997,
      "Time_End": 2619.3399999999997,
      "Text": " think nobody liked it. So if you get to solve it and tell me why it works, I will give you a hug."
    },
    {
      "Time_Start": 2620.34,
      "Time_End": 2626.34,
      "Text": " Thank you."
    },
    {
      "Time_Start": 2631.42,
      "Time_End": 2638.42,
      "Text": " Some final stuff to end this talk. Me and my mates at Hacktree are preparing a Hacktree AWS Red"
    },
    {
      "Time_Start": 2638.42,
      "Time_End": 2643.42,
      "Text": " Team Expert certification that we expect to release in Q4. So if you are interested in AWS Red"
    },
    {
      "Time_Start": 2643.46,
      "Time_End": 2650.3,
      "Text": " Teaming, just follow us on Twitter, link it in or go to this page. Thank you very much to you"
    },
    {
      "Time_Start": 2650.3,
      "Time_End": 2656.3,
      "Text": " people and to DEF CON for organizing this. It has been a great pleasure to be with you."
    }
  ]
}