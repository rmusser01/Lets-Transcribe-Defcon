{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 6.0,
      "Text": "This text was transcribed using whisper model: large-v2\n\n She's going to give you a presentation about riddles."
    },
    {
      "Time_Start": 12.58,
      "Time_End": 16.580000000000002,
      "Text": " Well, close enough. I'm talking about run time riddles. And I'm also standing on a"
    },
    {
      "Time_Start": 16.580000000000002,
      "Time_End": 22.66,
      "Text": " platform so I hope everybody is able to see me and I hope I don't fall off. But today I'm"
    },
    {
      "Time_Start": 22.66,
      "Time_End": 26.88,
      "Text": " going to be talking to you about abusing manipulation points in the Android 13 run time"
    },
    {
      "Time_Start": 26.88,
      "Time_End": 32.879999999999995,
      "Text": " for anti reverse engineering. So who am I? I'm Lori Kirk. I'm a reverse engineer at"
    },
    {
      "Time_Start": 34.0,
      "Time_End": 39.92,
      "Text": " Microsoft. I specialize in cross platform malware analysis with a focus on mobile threats. I"
    },
    {
      "Time_Start": 39.92,
      "Time_End": 45.3,
      "Text": " also run a YouTube channel under my alias Lori Wired and I'm also on GitHub and Twitter if"
    },
    {
      "Time_Start": 45.3,
      "Time_End": 49.72,
      "Text": " you want to connect with me. And today I will be representing myself as a security"
    },
    {
      "Time_Start": 49.72,
      "Time_End": 55.92,
      "Text": " researcher, not representing Microsoft. And if you'd like to follow along with this"
    },
    {
      "Time_Start": 55.92,
      "Time_End": 61.34,
      "Text": " presentation at all, feel free to go ahead and scan the sketchy QR code right there. I"
    },
    {
      "Time_Start": 61.34,
      "Time_End": 67.38,
      "Text": " promise it's not malicious. But I've also added the URL to my presentation if you don't"
    },
    {
      "Time_Start": 67.38,
      "Time_End": 73.38,
      "Text": " want to trust me, which is fine. So let's get right into it. Now imagine you're a seasoned"
    },
    {
      "Time_Start": 75.22,
      "Time_End": 80.92,
      "Text": " security analyst. And you're analyzing an Android application. And you've checked every"
    },
    {
      "Time_Start": 80.92,
      "Time_End": 86.26,
      "Text": " single method inside of this application and it's all looking clean and you're not finding"
    },
    {
      "Time_Start": 86.26,
      "Time_End": 91.3,
      "Text": " any malicious indicators inside of this application. So you're about to call it and say"
    },
    {
      "Time_Start": 91.3,
      "Time_End": 98.18,
      "Text": " that this application is indeed clean. And then you get to this part of the code. And you"
    },
    {
      "Time_Start": 98.18,
      "Time_End": 103.46000000000001,
      "Text": " might think this looks entirely benign. We have a log.e method which is an official"
    },
    {
      "Time_Start": 103.46000000000001,
      "Time_End": 109.04,
      "Text": " method inside of the Android framework used to log an error to the console. And it looks"
    },
    {
      "Time_Start": 109.04,
      "Time_End": 113.16000000000001,
      "Text": " like it's setting a button to the Android application screen that the user can interact"
    },
    {
      "Time_Start": 113.16000000000001,
      "Time_End": 118.96000000000001,
      "Text": " with. And you might think this code is perfectly safe. This code has actually been"
    },
    {
      "Time_Start": 118.96000000000001,
      "Time_End": 124.80000000000001,
      "Text": " dynamically modified and hooked during run time of the application so that every time the"
    },
    {
      "Time_Start": 124.80000000000001,
      "Time_End": 129.88,
      "Text": " official log.e method inside of the Android framework is invoked, it's actually"
    },
    {
      "Time_Start": 129.88,
      "Time_End": 135.54000000000002,
      "Text": " executing an underlying info stealer inside of custom code. So this actually just stole"
    },
    {
      "Time_Start": 135.57999999999998,
      "Time_End": 142.29999999999998,
      "Text": " your data. Which brings me into my agenda for today. We're going to manipulate the Android"
    },
    {
      "Time_Start": 142.29999999999998,
      "Time_End": 147.95999999999998,
      "Text": " 13 run time. We're actually going to replace the official Android APIs while our"
    },
    {
      "Time_Start": 147.95999999999998,
      "Time_End": 154.29999999999998,
      "Text": " application is executing to execute our own custom code. This also works on Android 14"
    },
    {
      "Time_Start": 154.29999999999998,
      "Time_End": 160.7,
      "Text": " in the upside down cake release, the beta version. And I'm also going to provide a new open"
    },
    {
      "Time_Start": 160.70000000000002,
      "Time_End": 165.70000000000002,
      "Text": " source tool to the community that I just released about an hour ago. And this is going to"
    },
    {
      "Time_Start": 165.70000000000002,
      "Time_End": 171.42000000000002,
      "Text": " let you import this as a library into your own Android applications to provide additional"
    },
    {
      "Time_Start": 171.42000000000002,
      "Time_End": 177.12,
      "Text": " obfuscation for your Android APKs. And this will work for any device that you're trying to"
    },
    {
      "Time_Start": 177.12,
      "Time_End": 182.58,
      "Text": " protect your Android applications against. And it's specifically designed before Android"
    },
    {
      "Time_Start": 182.58,
      "Time_End": 189.54000000000002,
      "Text": " 13 and 14. Now for a little bit of background before we really get into it. So the"
    },
    {
      "Time_Start": 189.54,
      "Time_End": 196.5,
      "Text": " primary goals for obfuscation inside of Android for dynamic obfuscation is to load"
    },
    {
      "Time_Start": 196.5,
      "Time_End": 202.22,
      "Text": " additional code into the Android run time. So basically this is trying to defeat static"
    },
    {
      "Time_Start": 202.22,
      "Time_End": 209.64,
      "Text": " analysis of Android applications. Basically there's an additional class or method or"
    },
    {
      "Time_Start": 209.64,
      "Time_End": 216.04,
      "Text": " even executable that is defined on disk that Android malicious or benign developers will"
    },
    {
      "Time_Start": 216.04,
      "Time_End": 221.57999999999998,
      "Text": " try to include inside of their Android applications to prevent static analysis of their"
    },
    {
      "Time_Start": 221.57999999999998,
      "Time_End": 226.68,
      "Text": " code on disk. So if they load and execute this code while the application is actually"
    },
    {
      "Time_Start": 226.68,
      "Time_End": 231.5,
      "Text": " running and a reverse engineer is taking a look at this code, they actually won't know"
    },
    {
      "Time_Start": 231.5,
      "Time_End": 236.92,
      "Text": " unless they dynamically analyze their code that this additional code is actually"
    },
    {
      "Time_Start": 236.92,
      "Time_End": 242.92,
      "Text": " executing. So there's a few methods that are really commonly used for dynamic code loading."
    },
    {
      "Time_Start": 246.57999999999998,
      "Time_End": 251.95999999999998,
      "Text": " These can be found inside of the Android framework. You might see DEX class loader, path"
    },
    {
      "Time_Start": 251.95999999999998,
      "Time_End": 257.34,
      "Text": " class loader or even some different Java reflective calls. And basically they will take an"
    },
    {
      "Time_Start": 257.34,
      "Time_End": 263.21999999999997,
      "Text": " additional Dalvik executable on disk and load that into the Android run time or they can"
    },
    {
      "Time_Start": 263.21999999999997,
      "Time_End": 269.62,
      "Text": " even work on different methods, classes or variables. So these are all effective at"
    },
    {
      "Time_Start": 269.62,
      "Time_End": 276.3,
      "Text": " actually altering the dynamic flow of the application. The only problem is, is that"
    },
    {
      "Time_Start": 276.3,
      "Time_End": 282.04,
      "Text": " these are really easy, easily searchable inside of the code. So I took a malicious"
    },
    {
      "Time_Start": 282.04,
      "Time_End": 287.58,
      "Text": " application and I threw this into my favorite Android decompiler JDEX and all I need to"
    },
    {
      "Time_Start": 287.58,
      "Time_End": 294.7,
      "Text": " do is go search text and then start typing in my favorite Android APIs and I can find all"
    },
    {
      "Time_Start": 294.7,
      "Time_End": 299.7,
      "Text": " of these dynamic code loading calls in plain text. So this is really simple and at that"
    },
    {
      "Time_Start": 299.7,
      "Time_End": 305.92,
      "Text": " point I'm able to fully understand what this is doing and be able to potentially analyze"
    },
    {
      "Time_Start": 305.92,
      "Time_End": 311.88,
      "Text": " those additional code loading calls. Furthermore, there's a lot of default frameworks"
    },
    {
      "Time_Start": 311.88,
      "Time_End": 317.46,
      "Text": " inside of Android. You might be familiar with Frida that's actually able to hook methods"
    },
    {
      "Time_Start": 317.46,
      "Time_End": 322.74,
      "Text": " for a lot of different platforms, not just Android while the application is running. Or"
    },
    {
      "Time_Start": 322.74,
      "Time_End": 327.58,
      "Text": " there are hooking frameworks that are designed specifically for Android applications. A"
    },
    {
      "Time_Start": 327.58,
      "Time_End": 333.62,
      "Text": " popular one might be Medusa which actually by default hooks a lot of these different"
    },
    {
      "Time_Start": 333.62,
      "Time_End": 338.78000000000003,
      "Text": " Android APIs that are specifically targeted for code loading and will dump the executable"
    },
    {
      "Time_Start": 338.78000000000003,
      "Time_End": 344.58,
      "Text": " for you so that you can take a look really easily and actually statically analyze that"
    },
    {
      "Time_Start": 344.58,
      "Time_End": 351.92,
      "Text": " additional binary. So when I started working on this presentation, I wanted to think, is"
    },
    {
      "Time_Start": 351.92,
      "Time_End": 358.42,
      "Text": " there a way that I could actually bypass these common API calls so I could try to hide"
    },
    {
      "Time_Start": 358.42,
      "Time_End": 365.64000000000004,
      "Text": " the dynamic modification of my Android application? Which brings me into my first point,"
    },
    {
      "Time_Start": 365.64000000000004,
      "Time_End": 372.3,
      "Text": " which is going to be manipulating the Android runtime directly. First of all, a little"
    },
    {
      "Time_Start": 372.3,
      "Time_End": 378.64,
      "Text": " background if you're not familiar. The Android runtime or also known as ART is responsible"
    },
    {
      "Time_Start": 378.64,
      "Time_End": 383.64,
      "Text": " for taking in binaries that are defined on disk. So these are going to be your Android"
    },
    {
      "Time_Start": 383.64,
      "Time_End": 389.47999999999996,
      "Text": " applications, your APK files. And actually parsing out all of the code from inside of"
    },
    {
      "Time_Start": 389.47999999999996,
      "Time_End": 395.02,
      "Text": " those, bringing those into the actual Android runtime environment, mapping those into memory,"
    },
    {
      "Time_Start": 395.02,
      "Time_End": 401.09999999999997,
      "Text": " making the relevant portions executable and actually executing the entry point of the"
    },
    {
      "Time_Start": 401.09999999999997,
      "Time_End": 407.52,
      "Text": " particular executable binary. So basically you have your Android runtime responsible for"
    },
    {
      "Time_Start": 407.56,
      "Time_End": 412.52,
      "Text": " taking your code on disk and bringing it into the runtime environment and importing any"
    },
    {
      "Time_Start": 412.52,
      "Time_End": 419.44,
      "Text": " necessary data inside of your application. The high level of it looks like this. You have"
    },
    {
      "Time_Start": 419.44,
      "Time_End": 424.47999999999996,
      "Text": " your method defined on disk. And then you have ART which is going to parse out all of that"
    },
    {
      "Time_Start": 424.47999999999996,
      "Time_End": 430.9,
      "Text": " data that I mentioned, bring that inside of our process memory and actually execute those"
    },
    {
      "Time_Start": 430.90000000000003,
      "Time_End": 436.90000000000003,
      "Text": " underlying instructions. So from here I had an idea. What if I could actually modify those"
    },
    {
      "Time_Start": 439.66,
      "Time_End": 444.98,
      "Text": " methods that have already been mapped inside of memory or even modify an entire executable"
    },
    {
      "Time_Start": 444.98,
      "Time_End": 449.48,
      "Text": " that has already been brought into the runtime environment instead of actually just messing"
    },
    {
      "Time_Start": 449.48,
      "Time_End": 457.02000000000004,
      "Text": " with it on disk? This means that we would avoid any of those plain text API calls that I"
    },
    {
      "Time_Start": 457.06,
      "Time_End": 462.4,
      "Text": " mentioned earlier, that DEX class loader, path class loader or in memory DEX class loader"
    },
    {
      "Time_Start": 462.4,
      "Time_End": 469.4,
      "Text": " that are so commonly used and such common targets for Android reverse engineers already. This"
    },
    {
      "Time_Start": 469.4,
      "Time_End": 474.32,
      "Text": " would also mean that we would not have any standard methods to hook with a lot of those"
    },
    {
      "Time_Start": 474.32,
      "Time_End": 478.97999999999996,
      "Text": " default Android frameworks that will commonly just dump the dynamic binaries that we're"
    },
    {
      "Time_Start": 478.97999999999996,
      "Time_End": 484.97999999999996,
      "Text": " trying to execute and hide. Now the only problem with this is that Android has a lot of"
    },
    {
      "Time_Start": 484.98,
      "Time_End": 491.86,
      "Text": " abstraction layers that we have to keep in mind if we're trying to actually hook and modify"
    },
    {
      "Time_Start": 491.86,
      "Time_End": 498.86,
      "Text": " these methods. So it's not just as easy as hooking the Java method, altering the behavior and"
    },
    {
      "Time_Start": 498.86,
      "Time_End": 504.70000000000005,
      "Text": " just having the execution. If we're actually trying to swap out entire methods or entire"
    },
    {
      "Time_Start": 504.70000000000005,
      "Time_End": 511.44,
      "Text": " executables and fields inside of our memory of our application, we actually need to modify"
    },
    {
      "Time_Start": 511.44,
      "Time_End": 519.06,
      "Text": " the underlying native structure of those Android methods. Now what you might be familiar"
    },
    {
      "Time_Start": 519.06,
      "Time_End": 524.78,
      "Text": " with is that the Android framework is actually written in Java. So this means that Android"
    },
    {
      "Time_Start": 524.78,
      "Time_End": 532.28,
      "Text": " developers write in Java or Kotlin and they'll import those Java defined official APIs into"
    },
    {
      "Time_Start": 532.28,
      "Time_End": 539.48,
      "Text": " their code. So the developer is only interfacing with the Java portion of these APIs. But what"
    },
    {
      "Time_Start": 539.48,
      "Time_End": 545.0600000000001,
      "Text": " you might not be familiar with is that the underlying implementation is actually defined in"
    },
    {
      "Time_Start": 545.0600000000001,
      "Time_End": 552.6800000000001,
      "Text": " native C++ code. So the Java basically works as a wrapper around a lot of underlying C++"
    },
    {
      "Time_Start": 552.6800000000001,
      "Time_End": 559.0600000000001,
      "Text": " implementation. The same thing goes for the official Android APIs as well as in our own user"
    },
    {
      "Time_Start": 559.0600000000001,
      "Time_End": 566.0600000000001,
      "Text": " binaries. We often have Java invoking the native C++ which actually contains a lot of the"
    },
    {
      "Time_Start": 566.1,
      "Time_End": 573.1800000000001,
      "Text": " implementation. The high level view looks something like this. You have your developer on"
    },
    {
      "Time_Start": 573.1800000000001,
      "Time_End": 577.84,
      "Text": " top interfacing with the Java portion of our application. And then we have this special"
    },
    {
      "Time_Start": 577.84,
      "Time_End": 583.22,
      "Text": " thing called the Java native interface or JNI that actually lets the developer and the"
    },
    {
      "Time_Start": 583.22,
      "Time_End": 589.1400000000001,
      "Text": " Java code communicate with the C++ code underneath and vice versa. So if you're trying to"
    },
    {
      "Time_Start": 589.1400000000001,
      "Time_End": 593.98,
      "Text": " think of the JNI, this is important so we're going to use it later. Think of it as the"
    },
    {
      "Time_Start": 593.98,
      "Time_End": 599.98,
      "Text": " bridge between our managed Java code and our native C++ code. And remember, we want to"
    },
    {
      "Time_Start": 602.22,
      "Time_End": 608.9,
      "Text": " modify the underlying C++ in our process memory instead of just looking at the Java"
    },
    {
      "Time_Start": 608.9,
      "Time_End": 614.6,
      "Text": " portion of this. So we're going to use the JNI to do that. This means that our new"
    },
    {
      "Time_Start": 614.6,
      "Time_End": 619.4,
      "Text": " methodology is going to be something like this. We're going to locate our Java target on"
    },
    {
      "Time_Start": 619.4,
      "Time_End": 625.74,
      "Text": " top. We're going to intercept those specific targets using that Java native interface"
    },
    {
      "Time_Start": 625.74,
      "Time_End": 630.86,
      "Text": " bridge between managed code and native code. And then we're actually going to dereference a"
    },
    {
      "Time_Start": 630.86,
      "Time_End": 636.6999999999999,
      "Text": " pointer that we're able to get with the JNI to modify and overwrite that underlying native"
    },
    {
      "Time_Start": 636.6999999999999,
      "Time_End": 643.86,
      "Text": " data inside of our process memory. So let's get on to our first point. We're going to talk"
    },
    {
      "Time_Start": 643.9,
      "Time_End": 649.44,
      "Text": " about finding entry points and targets within the Android source code inside of the"
    },
    {
      "Time_Start": 649.44,
      "Time_End": 655.44,
      "Text": " Android framework. This means that I'm going to first dive into the actual source code of"
    },
    {
      "Time_Start": 655.44,
      "Time_End": 659.32,
      "Text": " the Android framework. One thing that I really like about Android is that it's all"
    },
    {
      "Time_Start": 659.32,
      "Time_End": 664.5600000000001,
      "Text": " available for you online. You can read any of the source code. There's even really helpful"
    },
    {
      "Time_Start": 664.5600000000001,
      "Time_End": 669.24,
      "Text": " developer comments inside a lot of the code for you to understand. So we're going to look"
    },
    {
      "Time_Start": 669.24,
      "Time_End": 673.62,
      "Text": " into that top point right there and take a look at the Android platform and see if"
    },
    {
      "Time_Start": 673.62,
      "Time_End": 678.58,
      "Text": " there's any Java methods of interest that we could potentially use to actually swap"
    },
    {
      "Time_Start": 678.58,
      "Time_End": 685.7,
      "Text": " different relevant data inside of our application. Now the first target I looked at was"
    },
    {
      "Time_Start": 685.7,
      "Time_End": 692.66,
      "Text": " trying to swap an entire dex file. A dex file is a executable file and it contains all of"
    },
    {
      "Time_Start": 692.66,
      "Time_End": 697.92,
      "Text": " the actual Java byte code or executable code that's inside of your application that's"
    },
    {
      "Time_Start": 697.92,
      "Time_End": 703.42,
      "Text": " actually going to be run on the underlying processor. And if you take a look inside of"
    },
    {
      "Time_Start": 703.42,
      "Time_End": 708.9599999999999,
      "Text": " the Android framework, we have this dex file dot Java class that's defined that we're"
    },
    {
      "Time_Start": 708.9599999999999,
      "Time_End": 715.18,
      "Text": " able to locate. And this contains all of the relevant data for a dex file or Dalvik"
    },
    {
      "Time_Start": 715.18,
      "Time_End": 721.14,
      "Text": " executable file that's being mapped from disk into memory. Specifically if you look at"
    },
    {
      "Time_Start": 721.14,
      "Time_End": 727.38,
      "Text": " that M cookie field there on the left-hand side, this is containing a reference to that open"
    },
    {
      "Time_Start": 727.38,
      "Time_End": 733.3399999999999,
      "Text": " Dalvik executable file. So my first target was what if we took that M cookie field and"
    },
    {
      "Time_Start": 733.34,
      "Time_End": 738.52,
      "Text": " we actually swapped that with another field during execution so that we're executing an"
    },
    {
      "Time_Start": 738.52,
      "Time_End": 743.6,
      "Text": " entirely separate executable than what we would expect and what a reverse engineer or"
    },
    {
      "Time_Start": 743.6,
      "Time_End": 750.8000000000001,
      "Text": " anybody taking a look at our code would expect. But this didn't work super well for a"
    },
    {
      "Time_Start": 750.8000000000001,
      "Time_End": 755.9200000000001,
      "Text": " few different reasons. The main problem is kind of a chicken and egg scenario. So your"
    },
    {
      "Time_Start": 755.9200000000001,
      "Time_End": 762.6,
      "Text": " main Dalvik executable file is already initially kicked off as soon as ART gets the"
    },
    {
      "Time_Start": 762.6,
      "Time_End": 767.1800000000001,
      "Text": " input from the user to actually run this application, it's going to immediately call that"
    },
    {
      "Time_Start": 767.1800000000001,
      "Time_End": 772.48,
      "Text": " dex file that's already been mapped into memory. Now, how would you actually invoke your"
    },
    {
      "Time_Start": 772.48,
      "Time_End": 777.5600000000001,
      "Text": " code that's going to do the hook and swap if that main dex file hasn't already been mapped"
    },
    {
      "Time_Start": 777.5600000000001,
      "Time_End": 783.26,
      "Text": " inside? And if you're trying to map an additional dex file into memory, you have to use"
    },
    {
      "Time_Start": 783.26,
      "Time_End": 788.52,
      "Text": " those pesky API calls like dex class loader or path class loader that we were trying to"
    },
    {
      "Time_Start": 788.52,
      "Time_End": 793.64,
      "Text": " avoid that are so commonly hooked or else what's the point of doing any of this? So this"
    },
    {
      "Time_Start": 793.64,
      "Time_End": 800.4399999999999,
      "Text": " does not really seem like a viable option for us. So I moved on to trying to modify"
    },
    {
      "Time_Start": 800.4399999999999,
      "Time_End": 806.52,
      "Text": " individual members inside of a dex file. Specifically I found a very interesting portion of"
    },
    {
      "Time_Start": 806.52,
      "Time_End": 812.14,
      "Text": " code inside of the Android platform. So Android is actually built on top of Java and you"
    },
    {
      "Time_Start": 812.14,
      "Time_End": 816.9399999999999,
      "Text": " can see a lot of the original Java definitions and references are defined inside of our"
    },
    {
      "Time_Start": 816.98,
      "Time_End": 823.72,
      "Text": " platform. This is a field object. So every single field inside of an Android application is"
    },
    {
      "Time_Start": 823.72,
      "Time_End": 828.6800000000001,
      "Text": " going to be instantiated and get its own version of this when the application is actually"
    },
    {
      "Time_Start": 828.6800000000001,
      "Time_End": 834.86,
      "Text": " running. And this contains all of the relevant run time data for every single field inside"
    },
    {
      "Time_Start": 834.86,
      "Time_End": 840.4000000000001,
      "Text": " of an Android application. You can see we have our access flags, declaring class, and all"
    },
    {
      "Time_Start": 840.4000000000001,
      "Time_End": 846.44,
      "Text": " of the different run time data that we're actually going to need to use this field. So if"
    },
    {
      "Time_Start": 846.44,
      "Time_End": 850.94,
      "Text": " we keep on looking around here and try to find an interesting place to actually modify and"
    },
    {
      "Time_Start": 850.94,
      "Time_End": 857.94,
      "Text": " manipulate, I found this executable dot Java file and this actually contains an ART"
    },
    {
      "Time_Start": 857.94,
      "Time_End": 863.6800000000001,
      "Text": " method variable inside of it which is sounding really interesting. And if you take a"
    },
    {
      "Time_Start": 863.6800000000001,
      "Time_End": 868.86,
      "Text": " closer look at the ART method variable that I have highlighted right here from our"
    },
    {
      "Time_Start": 868.86,
      "Time_End": 875.86,
      "Text": " Android source code, this is going to contain the actual ART method structure for every"
    },
    {
      "Time_Start": 876.24,
      "Time_End": 881.52,
      "Text": " single method that is defined inside of an Android executable file. So every method"
    },
    {
      "Time_Start": 881.52,
      "Time_End": 888.14,
      "Text": " that's defined on disk gets a corresponding instantiation inside of the run time as defined"
    },
    {
      "Time_Start": 888.14,
      "Time_End": 895.26,
      "Text": " by this ART method structure in native code. So I have an idea here. How about we take"
    },
    {
      "Time_Start": 895.26,
      "Time_End": 900.86,
      "Text": " this ART method field and we try and swap two methods while the application is actually"
    },
    {
      "Time_Start": 900.86,
      "Time_End": 907.64,
      "Text": " running. So that's going to be my plan. We're going to have two methods and we're going to"
    },
    {
      "Time_Start": 907.64,
      "Time_End": 912.02,
      "Text": " try and overwrite one behavior with the behavior of another method to see if we can"
    },
    {
      "Time_Start": 912.02,
      "Time_End": 918.98,
      "Text": " actually do some manipulation. So I have my benign method, my fake malicious method, and"
    },
    {
      "Time_Start": 918.98,
      "Time_End": 924.02,
      "Text": " as soon as the application starts running, we're going to hook both instantiations of these"
    },
    {
      "Time_Start": 924.02,
      "Time_End": 929.98,
      "Text": " methods and try to overwrite that ART method field so that we can see if we can get"
    },
    {
      "Time_Start": 929.98,
      "Time_End": 935.98,
      "Text": " benign method to be called but malicious method code actually executed. So now we need to"
    },
    {
      "Time_Start": 939.64,
      "Time_End": 944.52,
      "Text": " move on to intercepting methods via the Java native interface. Remember that was that"
    },
    {
      "Time_Start": 944.52,
      "Time_End": 950.48,
      "Text": " really important bridge between native code and managed code. So what we need to do is we"
    },
    {
      "Time_Start": 950.48,
      "Time_End": 956.98,
      "Text": " actually need to call the JNI from our own native application in Android. We need to use"
    },
    {
      "Time_Start": 956.98,
      "Time_End": 962.9,
      "Text": " that to retrieve a reference or handle to both of those objects. And then we actually need"
    },
    {
      "Time_Start": 962.9,
      "Time_End": 969.14,
      "Text": " to load the corresponding ART method field for both of those. And then once we've"
    },
    {
      "Time_Start": 969.14,
      "Time_End": 974.1800000000001,
      "Text": " actually done that, we can do our overwriting. And this is going to be the code that's"
    },
    {
      "Time_Start": 974.1800000000001,
      "Time_End": 978.6800000000001,
      "Text": " actually going to be able to perform that. On the top there, you can see we're trying to"
    },
    {
      "Time_Start": 978.6800000000001,
      "Time_End": 985.22,
      "Text": " find the executable class that was defined inside of our Android platform. And then from"
    },
    {
      "Time_Start": 985.26,
      "Time_End": 991.9200000000001,
      "Text": " there, we're able to find that ART method field that is inside of that class defined in our"
    },
    {
      "Time_Start": 991.9200000000001,
      "Time_End": 998.26,
      "Text": " Android platform. And we also need to get this for malicious method and benign method so"
    },
    {
      "Time_Start": 998.26,
      "Time_End": 1003.22,
      "Text": " that we actually have the instantiations of both of these since every single method is"
    },
    {
      "Time_Start": 1003.22,
      "Time_End": 1009.22,
      "Text": " going to get its own. Now there's one problem you probably didn't notice or maybe you did."
    },
    {
      "Time_Start": 1010.22,
      "Time_End": 1016.8000000000001,
      "Text": " That ART method field is actually private. So this means that only instances of that"
    },
    {
      "Time_Start": 1016.8000000000001,
      "Time_End": 1023.14,
      "Text": " executable class or its children can actually access this ART method field which is kind"
    },
    {
      "Time_Start": 1023.14,
      "Time_End": 1027.84,
      "Text": " of a problem because we're trying to access that from code that has nothing to do with the"
    },
    {
      "Time_Start": 1027.84,
      "Time_End": 1034.5,
      "Text": " Android platform. We're just using it inside of our own user code. So this actually is a"
    },
    {
      "Time_Start": 1034.5,
      "Time_End": 1040.5,
      "Text": " really big problem because the ART method object is completely hidden from us. Or is it?"
    },
    {
      "Time_Start": 1043.5,
      "Time_End": 1049.54,
      "Text": " So actually the Java native interface does not respect access modifiers. So if we just"
    },
    {
      "Time_Start": 1049.54,
      "Time_End": 1054.38,
      "Text": " ignore the warning like any good hacker would, we can just run this code and it's going to"
    },
    {
      "Time_Start": 1054.38,
      "Time_End": 1059.66,
      "Text": " run and execute this just fine even though Android studio is telling me that this is wrong"
    },
    {
      "Time_Start": 1059.66,
      "Time_End": 1066.66,
      "Text": " and I should not be doing this. That's okay because it still runs. So now the first thing"
    },
    {
      "Time_Start": 1066.66,
      "Time_End": 1072.7,
      "Text": " that I wanted to do is I wanted to do something kind of simple. I basically just took the"
    },
    {
      "Time_Start": 1072.7,
      "Time_End": 1078.66,
      "Text": " handles to both of those objects that we were targeting and just set benign method equal"
    },
    {
      "Time_Start": 1078.66,
      "Time_End": 1085.0800000000002,
      "Text": " to malicious method and let's just see if it's actually going to work. So let's go to test"
    },
    {
      "Time_Start": 1085.08,
      "Time_End": 1091.08,
      "Text": " time. So I'm going to pull up my first video here. And let's take a look at this code"
    },
    {
      "Time_Start": 1096.58,
      "Time_End": 1104.08,
      "Text": " actually running. And if you're able to see here, I have two methods defined inside of my"
    },
    {
      "Time_Start": 1104.08,
      "Time_End": 1109.9199999999998,
      "Text": " Android application. I have benign method which is going to return the string I am benign. I"
    },
    {
      "Time_Start": 1109.92,
      "Time_End": 1116.8400000000001,
      "Text": " have malicious method which is going to return the string LOL. And we're just printing the"
    },
    {
      "Time_Start": 1116.8400000000001,
      "Time_End": 1123.8400000000001,
      "Text": " return value of benign method to the Android screen inside of our Android application. Now"
    },
    {
      "Time_Start": 1123.8400000000001,
      "Time_End": 1128.3400000000001,
      "Text": " this is my native code that we saw a little bit earlier. We're getting that executable class"
    },
    {
      "Time_Start": 1128.3400000000001,
      "Time_End": 1133.8400000000001,
      "Text": " with the respective ART method field. We're getting the objects for both of those benign"
    },
    {
      "Time_Start": 1133.8400000000001,
      "Time_End": 1138.3000000000002,
      "Text": " and malicious methods. And then if you can see highlighted there, we're doing something"
    },
    {
      "Time_Start": 1138.34,
      "Time_End": 1143.6399999999999,
      "Text": " really silly. Just setting benign method equal to malicious method. But hopefully this"
    },
    {
      "Time_Start": 1143.6399999999999,
      "Time_End": 1149.22,
      "Text": " actually works. And if it does, we're going to see LOL printed to the Android application"
    },
    {
      "Time_Start": 1149.22,
      "Time_End": 1154.8799999999999,
      "Text": " instead of the text I am benign. So let's actually let that run and see if this is going to"
    },
    {
      "Time_Start": 1154.8799999999999,
      "Time_End": 1162.8799999999999,
      "Text": " work. So real quick, show of hands who thinks this is going to work? Show of hands who"
    },
    {
      "Time_Start": 1162.88,
      "Time_End": 1168.88,
      "Text": " thinks this isn't going to work? Show of hands. Anybody asleep? Drunk? I don't know. Okay."
    },
    {
      "Time_Start": 1173.88,
      "Time_End": 1179.88,
      "Text": " That didn't work. That's too bad. So let's go back to our slides. And we finished our actual"
    },
    {
      "Time_Start": 1180.88,
      "Time_End": 1186.88,
      "Text": " test which was kind of a dumb test just setting one value equal to another. We didn't"
    },
    {
      "Time_Start": 1194.72,
      "Time_End": 1199.18,
      "Text": " actually do any effort to understand what was happening underneath. So all that means is we"
    },
    {
      "Time_Start": 1199.18,
      "Time_End": 1203.3000000000002,
      "Text": " just need to dive deeper and we need to actually understand that underlying native"
    },
    {
      "Time_Start": 1203.3000000000002,
      "Time_End": 1209.38,
      "Text": " structure inside of our Android application, inside of our Android framework. So let's go"
    },
    {
      "Time_Start": 1209.38,
      "Time_End": 1214.18,
      "Text": " through and let's understand that native structure. First of all, if we kept on going and"
    },
    {
      "Time_Start": 1214.18,
      "Time_End": 1219.18,
      "Text": " we started spending a lot of time or too much time inside of the Android source code, then we"
    },
    {
      "Time_Start": 1219.18,
      "Time_End": 1225.96,
      "Text": " would find out that that ART method field is actually a pointer to an underlying native"
    },
    {
      "Time_Start": 1225.96,
      "Time_End": 1233.38,
      "Text": " ART method structure. So this ART method actually defines the whole representation for a"
    },
    {
      "Time_Start": 1233.38,
      "Time_End": 1238.68,
      "Text": " native ART method object that's mapped into process memory. So this is the native"
    },
    {
      "Time_Start": 1238.68,
      "Time_End": 1245.98,
      "Text": " representation of an ART method inside of our Android runtime. And we can actually find the"
    },
    {
      "Time_Start": 1245.98,
      "Time_End": 1252.1000000000001,
      "Text": " declaration of this which is put inside of ART method dot H. And this contains all of the"
    },
    {
      "Time_Start": 1252.1000000000001,
      "Time_End": 1256.98,
      "Text": " relevant data for any method that's going to be running inside of our Android application."
    },
    {
      "Time_Start": 1256.98,
      "Time_End": 1262.76,
      "Text": " It's going to contain the access modifiers, the actual executable code or any data that is"
    },
    {
      "Time_Start": 1262.76,
      "Time_End": 1269.3799999999999,
      "Text": " needed for this method to fully execute and run. And if we keep on going, we can find the"
    },
    {
      "Time_Start": 1269.3799999999999,
      "Time_End": 1275.56,
      "Text": " individual fields defined inside of this ART method dot H. And one field of interest, if you"
    },
    {
      "Time_Start": 1275.56,
      "Time_End": 1281.76,
      "Text": " take a look, you can see entry point from quick compiled code. And as I said, really"
    },
    {
      "Time_Start": 1281.76,
      "Time_End": 1287.1,
      "Text": " helpfully, the Android source code provides a ton of comments defining what it's actually"
    },
    {
      "Time_Start": 1287.14,
      "Time_End": 1292.8200000000002,
      "Text": " doing. So we can figure out exactly what this variable stands for and what it is actually"
    },
    {
      "Time_Start": 1292.8200000000002,
      "Time_End": 1299.2800000000002,
      "Text": " doing. And this is going to be the actual native instructions compiled from this method"
    },
    {
      "Time_Start": 1299.2800000000002,
      "Time_End": 1304.0200000000002,
      "Text": " that are going to run directly on your underlying processor. So that sounds really"
    },
    {
      "Time_Start": 1304.0200000000002,
      "Time_End": 1309.0200000000002,
      "Text": " interesting. What if we actually change the instructions that are pointed to by this"
    },
    {
      "Time_Start": 1309.0200000000002,
      "Time_End": 1316.8200000000002,
      "Text": " entry point from quick compiled code? And I kept causing repeated crashes. So what I was"
    },
    {
      "Time_Start": 1316.82,
      "Time_End": 1322.12,
      "Text": " doing is I was working in a 64 bit operating system. So I just tried to take 8 byte"
    },
    {
      "Time_Start": 1322.12,
      "Time_End": 1328.54,
      "Text": " increments and actually just keep overriding those bytes bit by bit and seeing if I could"
    },
    {
      "Time_Start": 1328.54,
      "Time_End": 1333.86,
      "Text": " find where that entry point from quick compiled code actually lived inside of the process"
    },
    {
      "Time_Start": 1333.86,
      "Time_End": 1339.6599999999999,
      "Text": " memory since we had a handle to the beginning of that ART method field. But we don't"
    },
    {
      "Time_Start": 1339.6599999999999,
      "Time_End": 1344.96,
      "Text": " actually know where everything else is inside of that ART method field in memory. So my"
    },
    {
      "Time_Start": 1345.0,
      "Time_End": 1349.72,
      "Text": " new plan was, okay, I'm going to test every two bytes, keep going forward and forward"
    },
    {
      "Time_Start": 1349.72,
      "Time_End": 1355.38,
      "Text": " and forward with 8 byte increments and actually see if I could accidentally overwrite this"
    },
    {
      "Time_Start": 1355.38,
      "Time_End": 1363.14,
      "Text": " pointer in memory and then cause the malicious method to actually execute. But that was"
    },
    {
      "Time_Start": 1363.14,
      "Time_End": 1367.64,
      "Text": " totally not working and it was getting really frustrating because I was like, I don't"
    },
    {
      "Time_Start": 1367.64,
      "Time_End": 1371.76,
      "Text": " even know if I'm doing the right thing. I don't even know if I'm starting out correctly"
    },
    {
      "Time_Start": 1371.76,
      "Time_End": 1376.48,
      "Text": " right here because what if it's actually not the native structure? What if I'm looking"
    },
    {
      "Time_Start": 1376.48,
      "Time_End": 1381.86,
      "Text": " at something completely different and wrong? So I eventually just gave up on that. And"
    },
    {
      "Time_Start": 1381.86,
      "Time_End": 1388.36,
      "Text": " then I had a new bright idea. I thought, okay, I'm just going to take 64 random bytes"
    },
    {
      "Time_Start": 1388.36,
      "Time_End": 1394.56,
      "Text": " from malicious method and overwrite those with 64 bytes of benign method because I'm"
    },
    {
      "Time_Start": 1394.56,
      "Time_End": 1400.4,
      "Text": " working in a 64 bit operating system and there were like roughly 8 variables inside of"
    },
    {
      "Time_Start": 1400.4,
      "Time_End": 1405.2,
      "Text": " my ART method class. So I was trying to account for those sizes roughly. You can shout"
    },
    {
      "Time_Start": 1405.2,
      "Time_End": 1409.9,
      "Text": " it out if you disagree and think it should be another side. But we went with 64 bytes"
    },
    {
      "Time_Start": 1409.9,
      "Time_End": 1415.9,
      "Text": " here. So let's go to a second test and let's actually see if this is going to work."
    },
    {
      "Time_Start": 1430.98,
      "Time_End": 1435.16,
      "Text": " All right. So this should look familiar for you. We have our executable class that we're"
    },
    {
      "Time_Start": 1435.16,
      "Time_End": 1440.98,
      "Text": " trying to get a reference to. We found our respective ART method field. We have our"
    },
    {
      "Time_Start": 1440.98,
      "Time_End": 1446.7,
      "Text": " malicious and benign method. And then we have that nice pretty silly line there of mem"
    },
    {
      "Time_Start": 1446.7,
      "Time_End": 1452.48,
      "Text": " copy, completely unsafe. Let's just copy over 64 bytes from malicious method to benign"
    },
    {
      "Time_Start": 1452.48,
      "Time_End": 1458.48,
      "Text": " method. And let's see if that's going to work. Okay. So let's see if that's going to work."
    },
    {
      "Time_Start": 1460.7,
      "Time_End": 1466.7,
      "Text": " So what we want to see is LOL written to the screen instead of I am benign. So show of"
    },
    {
      "Time_Start": 1468.3200000000002,
      "Time_End": 1474.94,
      "Text": " hands now, who thinks that this is going to work? Who thinks that this isn't going to"
    },
    {
      "Time_Start": 1474.94,
      "Time_End": 1480.9,
      "Text": " work? Okay. I think that's the majority right now. Well, let's see. So I'm going to start"
    },
    {
      "Time_Start": 1480.9,
      "Time_End": 1486.9,
      "Text": " my application. Here we go. And it worked. So I'm going to go ahead and run my application."
    },
    {
      "Time_Start": 1490.7800000000002,
      "Time_End": 1495.5600000000002,
      "Text": " So I appreciate the vote of confidence from everybody who thought it wasn't going to work,"
    },
    {
      "Time_Start": 1495.5600000000002,
      "Time_End": 1501.5600000000002,
      "Text": " but it did. So I kept on going after I figured out that it was that easy and you could just"
    },
    {
      "Time_Start": 1511.7800000000002,
      "Time_End": 1516.24,
      "Text": " make it work. And I wanted to see what are the actual specifications and what can we do"
    },
    {
      "Time_Start": 1516.24,
      "Time_End": 1521.16,
      "Text": " with this? So after a lot of testing and a lot of breaking stuff, I found out that the"
    },
    {
      "Time_Start": 1521.16,
      "Time_End": 1525.7,
      "Text": " methods have to have the same signature, meaning they have to have the same parameters and"
    },
    {
      "Time_Start": 1525.7,
      "Time_End": 1531.74,
      "Text": " they have to return the same type. They must be static. They can be declared in separate"
    },
    {
      "Time_Start": 1531.74,
      "Time_End": 1536.48,
      "Text": " classes or wherever you want inside of your Android application. They can have completely"
    },
    {
      "Time_Start": 1536.48,
      "Time_End": 1541.52,
      "Text": " different functionality. And they will work inside of the application context, meaning"
    },
    {
      "Time_Start": 1541.52,
      "Time_End": 1545.86,
      "Text": " that if you're in your app, you actually can't modify the methods of another app, but you"
    },
    {
      "Time_Start": 1545.9,
      "Time_End": 1550.0600000000002,
      "Text": " can do whatever you want inside of your own application, which is good enough for us and"
    },
    {
      "Time_Start": 1550.0600000000002,
      "Time_End": 1556.0600000000002,
      "Text": " for obfuscation. So that's cool. And overriding random 64 bytes in memory does work, but"
    },
    {
      "Time_Start": 1558.0600000000002,
      "Time_End": 1562.9,
      "Text": " let's actually try to increase our accuracy a little bit. So I'm going to do some byte"
    },
    {
      "Time_Start": 1562.9,
      "Time_End": 1567.6000000000001,
      "Text": " math now and we're going to calculate all of the different offsets for this ART method"
    },
    {
      "Time_Start": 1567.6000000000001,
      "Time_End": 1574.72,
      "Text": " object and see where everything actually is in the process memory of our application. So"
    },
    {
      "Time_Start": 1574.72,
      "Time_End": 1581.54,
      "Text": " the Android source code, I was taking a look at it and it itself is actually finding these"
    },
    {
      "Time_Start": 1581.54,
      "Time_End": 1588.58,
      "Text": " offsets in memory using the actual size of the variables defined in our ART method dot"
    },
    {
      "Time_Start": 1588.58,
      "Time_End": 1594.96,
      "Text": " H that defined all of our method components. So this is actually used by the Android, the"
    },
    {
      "Time_Start": 1594.96,
      "Time_End": 1600.76,
      "Text": " official Android run time for getting and setting these values. So I thought I could"
    },
    {
      "Time_Start": 1600.8,
      "Time_End": 1606.96,
      "Text": " either count the sizes of all of these different variables inside of here or I could let it"
    },
    {
      "Time_Start": 1606.96,
      "Time_End": 1613.46,
      "Text": " calculate itself, which is exactly what I did. So I created a dummy ART method class. I"
    },
    {
      "Time_Start": 1613.46,
      "Time_End": 1618.84,
      "Text": " stole all of the source code that I thought was relevant for the ART method class, put it"
    },
    {
      "Time_Start": 1618.84,
      "Time_End": 1624.8,
      "Text": " in my own application and just added the necessary member variables for that. And then I"
    },
    {
      "Time_Start": 1624.8,
      "Time_End": 1630.34,
      "Text": " let the program calculate itself and print its own offsets to all of those in memory."
    },
    {
      "Time_Start": 1631.3400000000001,
      "Time_End": 1636.46,
      "Text": " And this is what it looked like. It worked really well. I found the corresponding"
    },
    {
      "Time_Start": 1636.46,
      "Time_End": 1642.18,
      "Text": " variables defined inside of our ART method dot H and I wrote those down so that it would"
    },
    {
      "Time_Start": 1642.18,
      "Time_End": 1648.3400000000001,
      "Text": " print out the offsets for every single one based off of the defined sizes that the"
    },
    {
      "Time_Start": 1648.3400000000001,
      "Time_End": 1654.2200000000003,
      "Text": " actual application, that dummy application that I was running actually found. So those are"
    },
    {
      "Time_Start": 1654.2200000000003,
      "Time_End": 1660.0400000000002,
      "Text": " all of the correct offsets in memory for every single variable that's defined inside of"
    },
    {
      "Time_Start": 1660.04,
      "Time_End": 1666.04,
      "Text": " our native C++ ART method structure. So now it's time for a little bit of byte math. If we"
    },
    {
      "Time_Start": 1669.54,
      "Time_End": 1675.54,
      "Text": " keep going and use those actual offsets that we found, we can take the actual bytes for two"
    },
    {
      "Time_Start": 1677.34,
      "Time_End": 1682.58,
      "Text": " objects or two methods that we were trying to calculate in memory and associate those"
    },
    {
      "Time_Start": 1682.58,
      "Time_End": 1687.8,
      "Text": " particular bytes with their actual variables and types. And we can see we have our"
    },
    {
      "Time_Start": 1687.8,
      "Time_End": 1692.8799999999999,
      "Text": " declaring class, our access flags, that really important entry point from quick"
    },
    {
      "Time_Start": 1692.8799999999999,
      "Time_End": 1697.96,
      "Text": " compiled code there on the bottom right hand side. And I was working in a 64 bit"
    },
    {
      "Time_Start": 1697.96,
      "Time_End": 1702.72,
      "Text": " architecture so those are 8 bytes long because those are actually pointers to different"
    },
    {
      "Time_Start": 1702.72,
      "Time_End": 1708.34,
      "Text": " locations in memory that are actually defining the implementation and data for our ART"
    },
    {
      "Time_Start": 1708.34,
      "Time_End": 1714.8799999999999,
      "Text": " method object. So now that looks cool but I wanted to know did it actually work? Are"
    },
    {
      "Time_Start": 1714.88,
      "Time_End": 1720.22,
      "Text": " these offsets correct? Because I'm saying they are and it looks kind of okay but did it"
    },
    {
      "Time_Start": 1720.22,
      "Time_End": 1726.3000000000002,
      "Text": " actually define the specific locations in memory and do those bytes point to anything? So I"
    },
    {
      "Time_Start": 1726.3000000000002,
      "Time_End": 1731.0,
      "Text": " wanted to look specifically at that entry point from quick compiled code because this should"
    },
    {
      "Time_Start": 1731.0,
      "Time_End": 1736.3400000000001,
      "Text": " just be arbitrary native code that's going to execute on your underlying processor. So this"
    },
    {
      "Time_Start": 1736.3400000000001,
      "Time_End": 1742.92,
      "Text": " is actually going to be assembly instructions if you disassemble them. And I look at it, I"
    },
    {
      "Time_Start": 1742.92,
      "Time_End": 1746.92,
      "Text": " mean that looks like disassembly to me, looks like a function prolog that's going to be"
    },
    {
      "Time_Start": 1746.92,
      "Time_End": 1753.54,
      "Text": " setting up the actual code for our Android method. And we have all of that, all of those"
    },
    {
      "Time_Start": 1753.54,
      "Time_End": 1759.5,
      "Text": " relevant native instructions that are going to be setting up this native method. So I"
    },
    {
      "Time_Start": 1759.5,
      "Time_End": 1764.0800000000002,
      "Text": " think that worked and I think we actually have our correct offsets and we know exactly"
    },
    {
      "Time_Start": 1764.0800000000002,
      "Time_End": 1769.0800000000002,
      "Text": " where everything stands in memory and we can override it if we wish. Now we have the"
    },
    {
      "Time_Start": 1769.08,
      "Time_End": 1774.58,
      "Text": " exact sizes that we need to do if we're trying to overwrite an entire method or affect any"
    },
    {
      "Time_Start": 1774.58,
      "Time_End": 1779.8999999999999,
      "Text": " of the individual variables inside of that method. And if you want you can look closely. I"
    },
    {
      "Time_Start": 1779.8999999999999,
      "Time_End": 1784.1999999999998,
      "Text": " have all the sizes written there but I won't go into the details too much. Feel free to do"
    },
    {
      "Time_Start": 1784.1999999999998,
      "Time_End": 1789.3999999999999,
      "Text": " that byte math on your own. And additionally you'll have to account for if you're running in"
    },
    {
      "Time_Start": 1789.3999999999999,
      "Time_End": 1795.24,
      "Text": " a 32 bit or 64 bit operating system but you should still have the same offsets for ARM or"
    },
    {
      "Time_Start": 1795.28,
      "Time_End": 1800.28,
      "Text": " x86. So our calculations are actually complete at this point and now we have successfully"
    },
    {
      "Time_Start": 1802.94,
      "Time_End": 1808.02,
      "Text": " finished our byte math and we fully understand the native and Java structure of our ART"
    },
    {
      "Time_Start": 1808.02,
      "Time_End": 1814.02,
      "Text": " method objects. And we can pretty much do whatever we want from here. So I thought okay,"
    },
    {
      "Time_Start": 1814.02,
      "Time_End": 1819.32,
      "Text": " let's have some fun. How far can we push this and what can we do with this? So I had"
    },
    {
      "Time_Start": 1819.32,
      "Time_End": 1824.52,
      "Text": " another bright idea. What if we took all of the official Android APIs and we tried to"
    },
    {
      "Time_Start": 1824.52,
      "Time_End": 1830.48,
      "Text": " replace them with our own custom code so that the developer or a reverse engineer is going"
    },
    {
      "Time_Start": 1830.48,
      "Time_End": 1835.6,
      "Text": " to think that we're calling those official Android APIs but we're actually executing"
    },
    {
      "Time_Start": 1835.6,
      "Time_End": 1842.22,
      "Text": " something entirely different. So my target now was the official log dot E method which"
    },
    {
      "Time_Start": 1842.22,
      "Time_End": 1847.52,
      "Text": " again is just logging a string error to the console. If you look at it in the Android log"
    },
    {
      "Time_Start": 1847.52,
      "Time_End": 1851.9,
      "Text": " cat you're able to see these messages. And this is used by many different Android"
    },
    {
      "Time_Start": 1851.9,
      "Time_End": 1856.9,
      "Text": " applications both malicious and benign. It's a very common method. Reverse engineers"
    },
    {
      "Time_Start": 1856.9,
      "Time_End": 1862.14,
      "Text": " will pretty much completely gloss over this method if they actually see it because it's"
    },
    {
      "Time_Start": 1862.14,
      "Time_End": 1869.14,
      "Text": " entirely benign. So what if we took this benign log dot E method and we actually had it"
    },
    {
      "Time_Start": 1869.14,
      "Time_End": 1875.9,
      "Text": " steal all of the data on the device and replaced the log dot E functionality with a"
    },
    {
      "Time_Start": 1875.94,
      "Time_End": 1883.14,
      "Text": " malicious info stealer. So what we would have to do is I had to create a static method"
    },
    {
      "Time_Start": 1883.14,
      "Time_End": 1887.26,
      "Text": " that had a matching signature. So remember it's going to have to have the same parameters"
    },
    {
      "Time_Start": 1887.26,
      "Time_End": 1894.02,
      "Text": " and return value but the actual implementation can be entirely different. So this is going"
    },
    {
      "Time_Start": 1894.02,
      "Time_End": 1899.52,
      "Text": " to contain the code that's actually going to get executed every time that log dot E"
    },
    {
      "Time_Start": 1899.52,
      "Time_End": 1904.68,
      "Text": " official Android framework method is invoked. So it's going to invoke my code instead of"
    },
    {
      "Time_Start": 1904.72,
      "Time_End": 1910.26,
      "Text": " theirs. So let's do a test and let's see if that's actually successful and see if it will"
    },
    {
      "Time_Start": 1910.26,
      "Time_End": 1916.26,
      "Text": " work. So I'm going to open up my video inside of here. Looks like it's already running."
    },
    {
      "Time_Start": 1916.26,
      "Time_End": 1922.26,
      "Text": " And this should start looking familiar to you. We have the Java native interface which"
    },
    {
      "Time_Start": 1936.18,
      "Time_End": 1941.08,
      "Text": " is hooking both instances. One is going to be the instance of the log dot E method and"
    },
    {
      "Time_Start": 1941.08,
      "Time_End": 1946.36,
      "Text": " then one is going to be the instance of our new custom method that's actually going to"
    },
    {
      "Time_Start": 1946.36,
      "Time_End": 1952.08,
      "Text": " get executed and then we're going to overwrite 32 bytes in memory since we upgraded from"
    },
    {
      "Time_Start": 1952.08,
      "Time_End": 1957.12,
      "Text": " our random 64 bytes to actually account for the correct size so that we can actually"
    },
    {
      "Time_Start": 1957.12,
      "Time_End": 1962.9399999999998,
      "Text": " completely overwrite this and execute our custom code. So now I'm going to be running"
    },
    {
      "Time_Start": 1962.9399999999998,
      "Time_End": 1968.8999999999999,
      "Text": " this and I'm going to pull up my application and I'm actually invoking that log dot E"
    },
    {
      "Time_Start": 1968.94,
      "Time_End": 1974.44,
      "Text": " method repeatedly. So every time that log dot E method is invoked, it's then going to"
    },
    {
      "Time_Start": 1974.44,
      "Time_End": 1981.22,
      "Text": " sleep for two seconds and instead it's going to be executing our fake info stealing"
    },
    {
      "Time_Start": 1981.22,
      "Time_End": 1986.72,
      "Text": " functionality. And on the right hand side, after it's sleeping for two seconds, you can"
    },
    {
      "Time_Start": 1986.72,
      "Time_End": 1992.5600000000002,
      "Text": " see it's going found installed application, found installed application, enumerating"
    },
    {
      "Time_Start": 1992.5600000000002,
      "Time_End": 1998.44,
      "Text": " through all of the applications in your device to actually steal that data from those. Even"
    },
    {
      "Time_Start": 1998.44,
      "Time_End": 2003.98,
      "Text": " though this has actually never been invoked if you take a look at the method on the device"
    },
    {
      "Time_Start": 2003.98,
      "Time_End": 2009.98,
      "Text": " statically. So let's go back to our slides. So now it's your turn to try your hand at"
    },
    {
      "Time_Start": 2010.72,
      "Time_End": 2016.72,
      "Text": " manipulating the Android run time. I just released an open source tool about an hour ago. This is"
    },
    {
      "Time_Start": 2016.72,
      "Time_End": 2022.72,
      "Text": " called Artful and it's built for manipulating the Android 13 run time but I did just do a"
    },
    {
      "Time_Start": 2022.72,
      "Time_End": 2028.72,
      "Text": " check on Android 14 upside down cake and it was perfectly successful at manipulating that"
    },
    {
      "Time_Start": 2028.72,
      "Time_End": 2034.72,
      "Text": " as well. This should work on many different API versions of Android although I have just"
    },
    {
      "Time_Start": 2052.56,
      "Time_End": 2058.18,
      "Text": " tested on the latest versions since those were my primary targets. So what is this? This"
    },
    {
      "Time_Start": 2058.18,
      "Time_End": 2063.48,
      "Text": " is a library that you can include inside of your Android applications for dynamically"
    },
    {
      "Time_Start": 2063.48,
      "Time_End": 2069.14,
      "Text": " swapping the behavior of methods from those that you would expect on disk. So it's doing"
    },
    {
      "Time_Start": 2069.14,
      "Time_End": 2074.1,
      "Text": " all of the complicated calculations on the back end so that you don't have to worry about"
    },
    {
      "Time_Start": 2074.1,
      "Time_End": 2078.68,
      "Text": " calling the Java native interface directly or actually doing the calculations of those"
    },
    {
      "Time_Start": 2078.68,
      "Time_End": 2084.68,
      "Text": " underlying bytes and native code. This works for your user methods. I have default"
    },
    {
      "Time_Start": 2085.68,
      "Time_End": 2092.02,
      "Text": " methods that will take either an object or the signature of two methods that are defined"
    },
    {
      "Time_Start": 2092.02,
      "Time_End": 2097.18,
      "Text": " inside of your application and you simply call the Artful library that you very easily"
    },
    {
      "Time_Start": 2097.18,
      "Time_End": 2102.2999999999997,
      "Text": " included into your app and then you can swap the behavior of any of those two methods."
    },
    {
      "Time_Start": 2102.2999999999997,
      "Time_End": 2108.3399999999997,
      "Text": " Additionally I have some default Android framework official APIs that this will replace and"
    },
    {
      "Time_Start": 2108.3399999999997,
      "Time_End": 2112.7599999999998,
      "Text": " you can call those and simply pass in the object that you would like that has your new"
    },
    {
      "Time_Start": 2112.8,
      "Time_End": 2117.5600000000004,
      "Text": " custom code that's going to actually be run every time that Android framework method is"
    },
    {
      "Time_Start": 2117.5600000000004,
      "Time_End": 2122.2200000000003,
      "Text": " called or you can call the first method and actually swap out different Android APIs if"
    },
    {
      "Time_Start": 2122.2200000000003,
      "Time_End": 2128.34,
      "Text": " those are not implemented. Additionally I included the dummy ART method class that's"
    },
    {
      "Time_Start": 2128.34,
      "Time_End": 2132.7200000000003,
      "Text": " defined inside of the Android source code so that you could print those offsets if you"
    },
    {
      "Time_Start": 2132.7200000000003,
      "Time_End": 2138.6400000000003,
      "Text": " wanted to do additional calculations and if you want to actually try this and extend it to"
    },
    {
      "Time_Start": 2138.64,
      "Time_End": 2143.2999999999997,
      "Text": " support a different API version, all you need to do is take those variables that are"
    },
    {
      "Time_Start": 2143.2999999999997,
      "Time_End": 2150.14,
      "Text": " defined inside of the ART method object of the specific API that you're trying to"
    },
    {
      "Time_Start": 2150.14,
      "Time_End": 2157.56,
      "Text": " support and it will calculate the updated offsets for you. So let's go through and let's"
    },
    {
      "Time_Start": 2157.56,
      "Time_End": 2164.14,
      "Text": " summarize some of our results. Primarily the main challenges for this are understanding"
    },
    {
      "Time_Start": 2164.14,
      "Time_End": 2169.02,
      "Text": " the code inside of the Android open source project. It might be open source but there's a"
    },
    {
      "Time_Start": 2169.02,
      "Time_End": 2174.22,
      "Text": " lot of overhead that you need to understand to be able to actually follow the flow of"
    },
    {
      "Time_Start": 2174.22,
      "Time_End": 2180.14,
      "Text": " control inside of the Android source code. You need to be able to follow from Java land"
    },
    {
      "Time_Start": 2180.14,
      "Time_End": 2185.64,
      "Text": " over to native C++ land and understand where you're going. Additionally you need to be"
    },
    {
      "Time_Start": 2185.64,
      "Time_End": 2191.06,
      "Text": " able to know which Java target you have and be able to calculate the sizes of the"
    },
    {
      "Time_Start": 2191.06,
      "Time_End": 2197.14,
      "Text": " underlying C++ objects that you're trying to manipulate. Also you have to do that"
    },
    {
      "Time_Start": 2197.14,
      "Time_End": 2202.44,
      "Text": " complicated pointer math if you're trying to find the offset to a particular variable"
    },
    {
      "Time_Start": 2202.44,
      "Time_End": 2208.18,
      "Text": " inside of the Android source code and you also have to account for the differences in"
    },
    {
      "Time_Start": 2208.18,
      "Time_End": 2213.56,
      "Text": " Android versions since with every single code change inside of every single Android API"
    },
    {
      "Time_Start": 2213.56,
      "Time_End": 2218.6,
      "Text": " release or update, these calculations could be entirely different if they added additional"
    },
    {
      "Time_Start": 2218.6,
      "Time_End": 2224.3399999999997,
      "Text": " functionality or if they removed different variables from the source code. Now the"
    },
    {
      "Time_Start": 2224.3399999999997,
      "Time_End": 2229.3399999999997,
      "Text": " benefits of this, if you're able to do that, is you're going to be able to avoid all of"
    },
    {
      "Time_Start": 2229.3399999999997,
      "Time_End": 2235.22,
      "Text": " those standard class loader API calls from inside of your code and you're going to be"
    },
    {
      "Time_Start": 2235.22,
      "Time_End": 2241.02,
      "Text": " able to completely avoid that dex class loader, path class loader or any of those Java"
    },
    {
      "Time_Start": 2241.02,
      "Time_End": 2247.06,
      "Text": " reflective calls. This means that you're going to be able to execute unexpected code while"
    },
    {
      "Time_Start": 2247.1,
      "Time_End": 2252.2999999999997,
      "Text": " the application is running. So if you have your two methods in memory, you're going to be"
    },
    {
      "Time_Start": 2252.2999999999997,
      "Time_End": 2258.06,
      "Text": " able to define your entire custom code and if a reverse engineer is taking a look at your"
    },
    {
      "Time_Start": 2258.06,
      "Time_End": 2263.7599999999998,
      "Text": " application on disk, they won't realize that your actual target method is being invoked and"
    },
    {
      "Time_Start": 2263.7599999999998,
      "Time_End": 2270.64,
      "Text": " they'll only see invocations of the benign methods that appear on disk. So this effectively"
    },
    {
      "Time_Start": 2270.72,
      "Time_End": 2277.1,
      "Text": " thwarts a lot of different reverse engineering and any static analysis of your binary so"
    },
    {
      "Time_Start": 2277.1,
      "Time_End": 2281.6,
      "Text": " that you can further obfuscate and protect your applications without use of the standard"
    },
    {
      "Time_Start": 2281.6,
      "Time_End": 2287.6,
      "Text": " API calls. So here's an example of an application that I created using my artful library and I"
    },
    {
      "Time_Start": 2290.7999999999997,
      "Time_End": 2296.3799999999997,
      "Text": " had one call that's going to replace a benign method with a new method that had custom"
    },
    {
      "Time_Start": 2296.38,
      "Time_End": 2301.76,
      "Text": " behavior inside of it. And I threw this again into my favorite Android decompiler,"
    },
    {
      "Time_Start": 2301.76,
      "Time_End": 2307.46,
      "Text": " jdex, and I just hit the cross references button and there's actually no references to this"
    },
    {
      "Time_Start": 2307.46,
      "Time_End": 2312.62,
      "Text": " method. So if a reverse engineer is taking a look top down from the application, they"
    },
    {
      "Time_Start": 2312.62,
      "Time_End": 2317.34,
      "Text": " might entirely avoid actually looking at this method and never see that it's referenced and"
    },
    {
      "Time_Start": 2317.34,
      "Time_End": 2324.7000000000003,
      "Text": " see that it's completely hidden. Additionally, this has no calls to those standard class"
    },
    {
      "Time_Start": 2324.7400000000002,
      "Time_End": 2330.2000000000003,
      "Text": " loaders for dex class loader or path class loader or the standard Java reflective calls. So"
    },
    {
      "Time_Start": 2330.2000000000003,
      "Time_End": 2335.7400000000002,
      "Text": " that means if you remember those frameworks that automatically hook a lot of relevant"
    },
    {
      "Time_Start": 2335.7400000000002,
      "Time_End": 2340.44,
      "Text": " methods that reverse engineers will try to use to dump the dynamic code that's getting"
    },
    {
      "Time_Start": 2340.44,
      "Time_End": 2345.78,
      "Text": " executed on the system, all of those checks are going to actually fail and they're not going"
    },
    {
      "Time_Start": 2345.78,
      "Time_End": 2351.2000000000003,
      "Text": " to be able to find these methods that are getting invoked. Now they could try to hook the"
    },
    {
      "Time_Start": 2351.2000000000003,
      "Time_End": 2356.1600000000003,
      "Text": " different Java native interface calls that are actually doing the manipulation of these"
    },
    {
      "Time_Start": 2356.1600000000003,
      "Time_End": 2362.9,
      "Text": " methods, but those JNI calls actually look entirely benign since a lot of applications will"
    },
    {
      "Time_Start": 2362.9,
      "Time_End": 2368.1200000000003,
      "Text": " use the Java native interface to communicate back and forth between their managed Java"
    },
    {
      "Time_Start": 2368.1200000000003,
      "Time_End": 2373.78,
      "Text": " code and their native C++ code. So how would anybody know that this is actually an"
    },
    {
      "Time_Start": 2373.78,
      "Time_End": 2380.36,
      "Text": " obfuscation technique? Now go modify the Android runtime and you should be able to solve"
    },
    {
      "Time_Start": 2380.36,
      "Time_End": 2386.36,
      "Text": " this. So thank you so much, everyone. So I do have time for questions if anybody wants to"
    },
    {
      "Time_Start": 2396.86,
      "Time_End": 2403.1600000000003,
      "Text": " ask them. Otherwise I'll step down up front if you would like to ask me directly. And this"
    },
    {
      "Time_Start": 2403.1600000000003,
      "Time_End": 2408.2000000000003,
      "Text": " again is another sketchy QR code but it links to the artful tool that I was talking about. So"
    },
    {
      "Time_Start": 2408.2000000000003,
      "Time_End": 2414.2000000000003,
      "Text": " if you're feeling brave, go ahead and scan it. Yes."
    },
    {
      "Time_Start": 2438.2000000000003,
      "Time_End": 2451.32,
      "Text": " So the question was, if you're having reflective calls inside of Java code and you're"
    },
    {
      "Time_Start": 2451.32,
      "Time_End": 2457.28,
      "Text": " having reflective calls inside of native code, how does this benefit if you're having those"
    },
    {
      "Time_Start": 2457.28,
      "Time_End": 2461.9600000000005,
      "Text": " reflective calls inside of native code instead? So the way that a lot of the hooking"
    },
    {
      "Time_Start": 2461.9600000000005,
      "Time_End": 2467.4,
      "Text": " frameworks actually work is they'll hook these API calls no matter what if they're invoked"
    },
    {
      "Time_Start": 2467.44,
      "Time_End": 2473.2000000000003,
      "Text": " from Java code or native code. It actually doesn't matter. So if you're using these JNI"
    },
    {
      "Time_Start": 2473.2000000000003,
      "Time_End": 2480.7000000000003,
      "Text": " calls, yes, they could be hooked and analyzed by a reverse engineer. But there's nothing to"
    },
    {
      "Time_Start": 2480.7000000000003,
      "Time_End": 2486.48,
      "Text": " say that they'll know exactly what's happening. They'll probably just be very confused and"
    },
    {
      "Time_Start": 2486.48,
      "Time_End": 2491.56,
      "Text": " not realize that this is doing anything interesting since it's actually not commonly used"
    },
    {
      "Time_Start": 2491.6,
      "Time_End": 2497.7599999999998,
      "Text": " as a dynamic code loading thing. It's basically just hooking the actual ART method object."
    },
    {
      "Time_Start": 2497.7599999999998,
      "Time_End": 2502.86,
      "Text": " So there's not any dynamic code loading happening since this method has already been loaded"
    },
    {
      "Time_Start": 2502.86,
      "Time_End": 2508.86,
      "Text": " into the run time. So it basically just looks benign. Any other questions? All right. Thanks"
    },
    {
      "Time_Start": 2515.02,
      "Time_End": 2518.02,
      "Text": " everybody."
    }
  ]
}