**Introduction**
- Presenter: Patrick Wardle, founder of the Objective-C Foundation
- Topics covered: Leveraging macOS networking frameworks to heuristically detect malware
- Four main areas:
    - Examples of macOS malware that utilize the network
    - Taking snapshots of network state
    - Comprehensive tools for continuous network monitoring
    - Tying network activity to processes and determining if they are suspicious/malicious

**Examples of macOS Malware Utilizing the Network**
- **Dummy**: Bash script that executes Python commands to establish a reverse shell with an attacker's server
- **IPStorm**: Originally written for Linux, now ported to macOS; propagates via SSH brute force attacks and opens a reverse shell
- **GoRat**: Feature-complete backdoor with additional capabilities like port scanning, tunnel creation, and proxy setup
- **Supply Chain Attacks**: e.g., 3CX, where a PBX software update was trojanized, leading to infections on user systems

**Taking Snapshots of Network State**
- Enumerating network activity using **file descriptors**: querying the OS for a list of file descriptors (including sockets) for a given process ID
- Extracting relevant information from sockets: local/remote ports, remote IP addresses, etc.
- **Network Statistics Framework**: provides global view of network activity, including statistics like bytes transferred, but is private and requires reverse engineering
- **Netikit**: a UI tool built on the Network Statistics Framework, providing a snapshot of network activity organized by process

**Comprehensive Tools for Continuous Network Monitoring**
- **DNS Monitor**: a host-based DNS monitoring tool built using Apple's Network Extensions Framework
- **Prerequisites and challenges**: entitlements, building/packaging, user permissions, and handling user responses
- **Activating a System Extension**: three steps—generating a request, setting a delegate, and submitting the request
- **Activating the Network Extension**: five steps—loading preferences, setting description, initializing provider protocol, enabling, and saving preferences
- **Handling DNS Requests**: parsing DNS packets, identifying responsible processes using audit tokens, and optionally blocking requests/responses
- **Blocking DNS Requests/Responses**: examining the domain or IP address and closing the flow if it matches a blocklist
- **Limitations**: only sees DNS traffic, doesn't work with hardcoded IP addresses

**Tying Network Activity to Processes and Determining if They Are Suspicious/Malicious**
- **Heuristics**: analyzing network information (state, statistics) and responsible processes to identify unauthorized/malicious activity
- **Examining Responsible Processes**: determining if a process belongs to macOS, is notarized, is persistently installed, or has an unusual process hierarchy
- **Determining Platform Binaries and Notarization**: using code signing APIs to query the OS about Apple binaries and notarization status
- **Identifying Persistent Installations**: examining the undocumented 'background items' database to find persistently installed items
- **Analyzing Process Hierarchy**: checking if a process is a child of another process, indicating potential abuse (e.g., Python being spawned by Bash)
- **Combining Indicators**: e.g., established connection to unknown IP, script running as root via Python spawned by Bash, and persistent installation—a strong indication of malware