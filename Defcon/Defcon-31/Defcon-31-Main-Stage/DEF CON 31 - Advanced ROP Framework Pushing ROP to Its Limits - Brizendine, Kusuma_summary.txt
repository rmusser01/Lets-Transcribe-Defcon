**Introduction**
- Speakers: Dr. Bramall Brisendine and Shiva
- Brisendine: Former and founding director of the Verona Lab, creator of Shell Wasp, Jop Rocket, and Cherim, and assistant professor at UAH
- Shiva: Master's student in Computer Science at UAH, interested in software and web app development, and blockchain
- Goal of their research: Bring something fresh and exciting to Return-Oriented Programming (ROP)

**ROP Rocket: Next-Generation ROP Framework**
- **Automatic ROP Chain Generation**: Capable of creating chains for various techniques, including novel approaches.
- **Adapting Heaven's Gate to ROP**: Expanding the attack surface by switching between 32-bit and 64-bit modes on-demand.
- **Utilizing Windows Syscalls**: Bypassing Data Execution Prevention (DEP) using Windows syscalls instead of traditional WinAPIs.
- **Shellcodeless ROP**: Invoking shellcode-like functionality directly by calling appropriate Windows APIs, avoiding the need to bypass DEP.
- **Obfuscation of ROP Gadgets**: Encoding and decoding gadgets on-the-fly to use forbidden gadgets with bad bytes.
- **Emulation of ROP Gadgets and Chains**: Internally emulating gadgets and chains to find optimal solutions and calculate distances to parameters.

**Heaven's Gate and ROP**
- **Overview**: Traditional method involves transitioning from x86 to 64-bit mode, commonly used by malware or shellcode.
- **Brisendine's Approach**: Utilizing push add instruction to set up registers and perform Heaven's Gate, allowing flexibility in destination address placement.
- **Pattern 7 Demonstration**: Loading registers with appropriate values, using push add to push them in a predefined order, and initiating Heaven's Gate with a jump dereference.
- **Pattern 11**: Simpler approach, involving ROP NOPs, POP EBP, and RET to set up the destination address and selector.
- **Advantages**: Expanding the attack surface by accessing additional 64-bit registers and valuable structures in x64 mode.

**Transitioning Back to x86**
- **Challenge**: Push ad instruction is forbidden in x64 mode, requiring a different approach.
- **Solution**: Using a series of move dereferences and a stack pivot to set up the stack and transition back to x86.
- **Demonstration**: Showing the steps to get a pointer to memory, write the RedF address, write the destination address and selector, and perform a stack pivot to return to x86.

**Windows Syscalls**
- **Overview**: Syscalls are low-level calls to the kernel, harder to hook by EDR, and used to bypass DEP.
- **Portability Issue**: Syscall System Numbers (SSNs) can change with different OS builds, requiring knowledge of the target OS.
- **Reversing Syscalls**: Demonstrating how to reverse engineer syscalls in Windows 7, 10, and 11, focusing on NT allocate virtual memory and NT protect virtual memory.
- **Performing Syscalls in Windows 10 and 11**: Following the proper calling convention and setting up the stack with return addresses to initiate the syscall.
- **Important Windows Syscalls**: NT allocate virtual memory and NT protect virtual memory, used for memory allocation and permission modification.

**NT Protect Virtual Memory in ROP**
- **Overview**: Demonstrating how to set up NT protect virtual memory in ROP, focusing on pointer creation and stack alignment.
- **Pointer Creation**: Using move dereference and increments/decrements to create pointers for base address, number of bytes to protect, and old access protection.
- **Stack Alignment**: Ensuring the stack is properly aligned with return addresses and syscall invocation method before initiating the syscall.
- **Demonstration**: Stepping through the process of setting up the stack, writing the syscall invocation method, and performing the syscall to modify memory permissions.

**Shellcodeless ROP**
- **Overview**: Demonstrating how to use multiple Windows APIs together to execute system commands without needing a shellcode or bypassing DEP.
- **APIs Used**: Load library, get ROP address, and system, allowing the execution of any command.
- **Finding Patterns**: Determining the push add order and creating patterns for each API, with each register holding a value or ROP gadget.
- **System Pattern**: Demonstrating the pattern for the system API, including the pointer to the command and the push add instruction.
- **Demonstration**: Stepping through the stack after the push add, showing the execution of load library, get ROP address, and system, and finally executing the command (calc.exe).

**Pattern Styles and Emulation**
- **Pattern Styles**: Demonstrating a variety of patterns created for load library, get ROP address, and system APIs, allowing ROP Rocket to try different patterns if one fails.
- **Emulation**: Discussing how ROP Rocket uses internal emulation to evaluate gadgets and chains, calculate distances to parameters, and recursively guess and correct values until the desired goal is achieved.

**Conclusion**
- **Recap**: Highlighting the innovative contributions of ROP Rocket, including automatic ROP chain generation, Heaven's Gate adaptation, Windows syscall usage, shellcodeless ROP, gadget obfuscation, and emulation.
- **Tool Availability**: Announcing that the ROP Rocket tool will be released within the next week, encouraging attendees to try it out and provide feedback.