**Introduction**
- Speakers: Noah Moshe and Sharon Brezinov
- Topic: Exploiting Cloud Connectivity to PWN NAS Devices
- **Pwn2Own Competition**: Goal was to achieve RCE on NAS devices via cloud services

**NAS Devices and Cloud Services**
- NAS (Network-Attached Storage) devices allow remote access to files through cloud platforms:
  - Western Digital: My Cloud OS5
  - Synology: We Connect
- **Use Case**: Accessing files stored on NAS devices from anywhere, including sensitive data

**Western Digital Case Study**
- **Device**: PR4100, a custom Linux-based machine with various services
- **Firmware**: Unencrypted, allowing access to files, binaries, and configurations
- **Web Management Architecture**: Previous vulnerabilities found in PHP and CGI scripts
- **Golang Binary**: Added layer of authentication and authorization for all requests
- **Focus on Cloud Features**: Enabled cloud access, prompting for potential vulnerabilities

**Exploiting Cloud Connectivity**
- **Device Identification**: Each NAS device identified by a unique GUID
- **Certificate Transparency Log (CTL)**: Allowed real-time access to device GUIDs upon connection
- **Bypassing Authentication**: API routes accepted modified GUIDs, bypassing authentication checks
- **Authorisation Bypass**: Certain API routes worked without proper authorisation, granting access to files
- **Man-in-the-Middle Attack**: Analysed traffic between device and cloud, discovered device connection process
- **Impersonating Devices**: By knowing the GUID, attackers could impersonate devices and gain access
- **Token Theft**: User tokens included in background app refresh requests, granting admin access to NAS devices

**Achieving Remote Code Execution (RCE)**
- **Share and Mount Routes**: Allowed modification of directories and creation of new mounting points
- **File System API**: Enabled writing files to specific directories, providing read and write primitives
- **Reboot Process**: Writing specific files to /temp directory allowed injection into system commands, leading to RCE
- **Full Chain**: Leaked GUIDs, impersonated devices, obtained user tokens, modified mounting points, wrote files, and initiated reboot for RCE

**Synology Case Study**
- **Device**: DS920, Linux-based with a rich web interface and Nginx web server
- **Quick Connect Cloud Platform**: Allowed users to access devices via alias.quickconnect.to
- **Device Identification**: Required MAC address, serial number, device model, and tokens for cloud connection
- **Token Generation**: Bugs in cloud platform allowed generation of new API and authentication tokens
- **Impersonating Devices**: By gathering required identifiers and tokens, attackers could fully impersonate devices
- **Redirecting Users**: Manipulated cloud platform to relay users to attacker's CNC, obtaining user tokens
- **Impersonating Users**: Used tokens to connect to real devices, achieving RCE through share and mount routes, and file system API

**Conclusion**
- Emphasises the importance of strong device authentication in IOT architectures
- **Vulnerabilities**: Highlighted flaws in cloud architecture, allowing device and user impersonation
- **Responsible Disclosure**: Worked with vendors to resolve issues and prevent potential exploits