**Introduction**
- **Alexander Kroh**: Vulnerability researcher at Vectorize and CTF player.
- **Co-presenter**: Graph student at the Danish Technical University.
- Talk focuses on **microcode** and **hacking CPUs**.

**Computer Architecture Primer**
- CPU core consists of a **front end** (fetching and decoding instructions) and a **back end** (ALU, FPU, etc.).
- Instructions are **decoded into micro-operations**, which are executed by the back end.
- **Complex instructions** are handled by **ROM** and require multiple micro-operations.

**Microcode Basics**
- **Micro-operations** are stored in **writable RAM** and **read-only ROM**.
- **ROM** contains **complex instructions** that cannot be directly implemented in transistors.
- **RAM** is used for **post-production bug fixes** via **microcode updates**.
- **Match and Patch Registers** redirect execution to updated microcode in RAM.

**Microcode Address Space**
- Linear address space with **read-only** and **writable** sections.
- **Instructions** are grouped into **triads** (three instructions and one implicit knob instruction).
- **Sequence words** control flow and branching.

**Example: XADR Instruction**
- Exchange and addition instruction composed of three micro-operations.
- Operates on **source** and **destination** registers.
- **Sequence word** indicates the end of the macro instruction.

**Microcode Registers**
- **Temporary registers**: Used within microcode and not accessible to macrocode.
- **Floating-point registers**: Similar to temporary registers but for floating-point operations.
- **System registers**: Hold CPU state information (e.g., 32-bit mode, 64-bit mode, hypervised space).
- **Control registers**: Communicate with other CPU components (e.g., caches, microcode sequencer).

**Memory Access and Storage**
- Microcode can access **virtual address space** and **physical address space**.
- **UCode memory**: Separate address space for data and instructions, providing temporary storage.
- **Buses and fabric**: Communication channels within the CPU and with external components.

**Applying Microcode Updates**
- **Match and Patch Registers** redirect execution to updated microcode in RAM.
- **Bit fields** determine if a match is found and the destination address to jump to.
- **Destination address** is shifted by one, resulting in a loss of one bit of position.

**Dynamic Inspection and Debugging**
- **Match and Patch Registers** can be used to redirect execution for inspection and debugging.
- **Positive Technology** discovered a vulnerability in the Intel Management Engine, enabling access to hidden instructions.
- **UDEBUG READ** and **UDEBUG WRITE** instructions allow reading and writing to microcode data areas.

**Assembling Microcode**
- **Custom Processing Unit**: An assembler for creating microcode patches.
- **Dynamic library approach**: Allows for more dynamic tooling but with a more complex syntax.
- **YOLO function**: Demonstrates setting values in temporary and destination registers.

**Tracing and Debugging Microcode**
- Created microcode to trace the current instruction and microcode instruction pointers.
- Discovered that instructions reading from port IO space had side effects and were much longer than expected.
- By disabling parts of these instructions, they were able to make stable microcode changes.

**Demonstration: YOLO Function**
- Shows how to apply a microcode patch using the YOLO function.
- Uses GDB to step through the code and verify that the patch is applied successfully.

**Backdoor Demonstration**
- Shows how a backdoor can be implemented by hooking into the syscall instruction.
- The backdoor triggers when a specific RAX syscall and magic value are detected.
- The backdoor saves the CPU state, modifies RCX and RSI registers, and uses the mprotect syscall to make the image data executable.
- The backdoor spawns a child thread to execute the shellcode while the parent thread continues browser execution.

**Reversing Microcode Instructions**
- Used side-by-side reversing, dynamic tracing, and copy-pasting techniques to understand unknown opcodes.
- Identified "playground instructions" that are rarely used and can be repurposed for experimentation.

**Future Work**
- Analyzing official microcode patches from Intel to discover and exploit CPU bugs.
- Attempting to red unlock the CPU and gain access to Intel's debug mode without physical access.
- Acknowledging the work of previous researchers in the field.