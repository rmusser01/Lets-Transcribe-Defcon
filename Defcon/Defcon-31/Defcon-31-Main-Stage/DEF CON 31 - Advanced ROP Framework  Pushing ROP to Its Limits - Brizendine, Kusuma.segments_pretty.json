{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 5.0,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Good morning DEF CON. Thank you for coming to see our session. Hopefully you'll enjoy it. A"
    },
    {
      "Time_Start": 11.84,
      "Time_End": 15.74,
      "Text": " little bit about m- a little bit about myself. My name is Dr. Bramall Brisendine. I'm the"
    },
    {
      "Time_Start": 15.74,
      "Time_End": 20.080000000000002,
      "Text": " former and founding director of the Verona Lab, which specializes in vulnerability and"
    },
    {
      "Time_Start": 20.080000000000002,
      "Time_End": 26.080000000000002,
      "Text": " exploitation research. Uh creator- creator of several different tools, the Shell Wasp,"
    },
    {
      "Time_Start": 26.1,
      "Time_End": 32.88,
      "Text": " Jop Rocket, and Cherim. And I'm presently an assistant professor at UAH. Uh I do have a"
    },
    {
      "Time_Start": 32.88,
      "Time_End": 39.22,
      "Text": " Ph.D. in cyber operations, which is a highly uh technical uh degree specializing in"
    },
    {
      "Time_Start": 39.22,
      "Time_End": 45.260000000000005,
      "Text": " reverse engineering and exploitation. Um just as a kind of a side note, I have kind of"
    },
    {
      "Time_Start": 45.260000000000005,
      "Time_End": 50.42,
      "Text": " lost my voice a bit but it has been improving so I'll just try to do the best that I can."
    },
    {
      "Time_Start": 50.440000000000005,
      "Time_End": 56.28,
      "Text": " Uh there is some contact information down below so feel free to uh reach out to me if you so"
    },
    {
      "Time_Start": 56.28,
      "Time_End": 61.28,
      "Text": " desire. Uh I'm joined by my graduate student, Shiva, and he is a master's of computer"
    },
    {
      "Time_Start": 64.26,
      "Time_End": 69.92,
      "Text": " science student at UAH and he's interested in writing software, uh web apps, as well as"
    },
    {
      "Time_Start": 69.92,
      "Time_End": 76.14,
      "Text": " block chain. Uh he's got a lot of contact information there so feel- feel free to reach out"
    },
    {
      "Time_Start": 76.16,
      "Time_End": 81.16,
      "Text": " with any uh opportunities for Shiva. So when we started this research the- the goal, the"
    },
    {
      "Time_Start": 84.34,
      "Time_End": 90.34,
      "Text": " idea was can we bring something fresh, something- something new to ROP because quite"
    },
    {
      "Time_Start": 90.34,
      "Time_End": 95.18,
      "Text": " frankly it seemed to be getting a little bit kind of stale, kind of predictable. Uh no"
    },
    {
      "Time_Start": 95.18,
      "Time_End": 100.68,
      "Text": " doubt it- the techniques that we used seemed to work very well but it's just a lot of the"
    },
    {
      "Time_Start": 100.7,
      "Time_End": 105.7,
      "Text": " same types of things uh over and over. Now there are a number of tools that can facilitate uh"
    },
    {
      "Time_Start": 107.44000000000001,
      "Time_End": 113.94000000000001,
      "Text": " getting uh ROP gadgets, uh MONA, which of course has been around forever, ROP gadget, uh"
    },
    {
      "Time_Start": 113.94000000000001,
      "Time_End": 118.94000000000001,
      "Text": " ROPR, uh as well as others. And additionally for jump oriented programming, the JopRocket"
    },
    {
      "Time_Start": 120.52000000000001,
      "Time_End": 125.52000000000001,
      "Text": " which is actually a tool that uh I created myself and presented it at DEF CON in 2019. So"
    },
    {
      "Time_Start": 125.88,
      "Time_End": 130.88,
      "Text": " again um the idea is to try to make it fresh, to try to make it exciting again. Uh and part of"
    },
    {
      "Time_Start": 136.32,
      "Time_End": 141.32,
      "Text": " this inspiration is because code reuse attacks in general should be inherently um very free,"
    },
    {
      "Time_Start": 143.82,
      "Time_End": 148.82,
      "Text": " very flexible. We shouldn't be confined by the shackles of what has been done before but"
    },
    {
      "Time_Start": 149.18,
      "Time_End": 154.18,
      "Text": " instead I'd rather see us embrace an openness, a desire to do something new, something a"
    },
    {
      "Time_Start": 156.98,
      "Time_End": 161.98,
      "Text": " little bit different. So part of my thinking is trying to kind of uh think out of the box. So"
    },
    {
      "Time_Start": 164.26,
      "Time_End": 168.5,
      "Text": " I spend a huge amount of time, uh actually thousands of hours working with jump oriented"
    },
    {
      "Time_Start": 168.5,
      "Time_End": 172.4,
      "Text": " programming. Now I didn't create it but I did create the- the tool that helped to"
    },
    {
      "Time_Start": 172.4,
      "Time_End": 177.4,
      "Text": " facilitate that. And a lot of uh practical jobs just really had not been documented or"
    },
    {
      "Time_Start": 179.04,
      "Time_End": 184.0,
      "Text": " so I set about uh providing that documentation uh so that people actually wanted to do"
    },
    {
      "Time_Start": 184.0,
      "Time_End": 188.92,
      "Text": " something significant with it, they'd have the capability of doing so. And there are a few"
    },
    {
      "Time_Start": 188.92,
      "Time_End": 194.18,
      "Text": " different white papers out there that myself and Austin Babcock have re- have written. So uh by"
    },
    {
      "Time_Start": 194.18,
      "Time_End": 200.62,
      "Text": " its very nature, Jop is extraordinarily flexible and I wanted to try to bring some of that"
    },
    {
      "Time_Start": 200.62,
      "Time_End": 207.12,
      "Text": " to- to ROP and to introduce some new ideas. So um without further ado then, let's uh see"
    },
    {
      "Time_Start": 207.16,
      "Time_End": 214.20000000000002,
      "Text": " what some of these novel contributions may include. So um the next generation state of the"
    },
    {
      "Time_Start": 214.20000000000002,
      "Time_End": 219.20000000000002,
      "Text": " art uh ROP gadget tool, ROP rocket is going to be uh among these. Uh part of the- part of"
    },
    {
      "Time_Start": 222.1,
      "Time_End": 226.78,
      "Text": " it is going to be uh all- everything you see here will have automatic ROP chain"
    },
    {
      "Time_Start": 226.78,
      "Time_End": 232.18,
      "Text": " generation so it will create the chains for these different techniques. Um some of them"
    },
    {
      "Time_Start": 232.18,
      "Time_End": 238.92000000000002,
      "Text": " are also in their own regard uh novel approaches or novel techniques so adapting"
    },
    {
      "Time_Start": 238.92000000000002,
      "Time_End": 245.46,
      "Text": " Heaven's Gate to- to return oriented programming. Utilizing Windows Syscalls to bypass"
    },
    {
      "Time_Start": 245.46,
      "Time_End": 251.10000000000002,
      "Text": " DEP rather than the traditional Windows APIs. Uh and then something that I like to call uh"
    },
    {
      "Time_Start": 251.10000000000002,
      "Time_End": 256.1,
      "Text": " shellcodeless ROP where we're instead of uh trying to avoid data ex- or avoid uh trying to"
    },
    {
      "Time_Start": 256.90000000000003,
      "Time_End": 261.90000000000003,
      "Text": " bypass data execution prevention, we just simply uh avoid it and invoke that uh"
    },
    {
      "Time_Start": 265.28000000000003,
      "Time_End": 270.98,
      "Text": " shellcode-like functionality directly by calling the- the appropriate Windows APIs. Uh"
    },
    {
      "Time_Start": 270.98,
      "Time_End": 275.98,
      "Text": " obfuscation of- of ROP gadgets which I'll get into uh more later on and then emulation of uh"
    },
    {
      "Time_Start": 278.56,
      "Time_End": 285.46000000000004,
      "Text": " ROP gadgets and as well as chains which does help us uh quite significantly. Okay so we're"
    },
    {
      "Time_Start": 285.46,
      "Time_End": 290.79999999999995,
      "Text": " going to start out here with uh Heaven's Gate and ROP. And I know that uh some of you are"
    },
    {
      "Time_Start": 290.79999999999995,
      "Time_End": 294.85999999999996,
      "Text": " going to be very familiar with Heaven's Gate, for others it may be uh your first time"
    },
    {
      "Time_Start": 294.85999999999996,
      "Time_End": 299.74,
      "Text": " encountering it so a little bit of history lesson. Now this is a traditional way in which we"
    },
    {
      "Time_Start": 299.74,
      "Time_End": 304.74,
      "Text": " invoke it so uh we're going to go from x86 transition to 64 bit mode. This is something that"
    },
    {
      "Time_Start": 307.14,
      "Time_End": 313.08,
      "Text": " uh the Windows operating system does continuously uh whenever we make use of an"
    },
    {
      "Time_Start": 313.4,
      "Time_End": 318.74,
      "Text": " N- N- NTDOL function so it just happens automatically as part of uh making use of Windows"
    },
    {
      "Time_Start": 318.74,
      "Time_End": 323.74,
      "Text": " syscalls. So the- the- the old kind of uh formula if you want to call it that that you'll see in"
    },
    {
      "Time_Start": 326.36,
      "Time_End": 331.36,
      "Text": " malware or shellcode is you'll do uh pu- push 33 for the 33 uh CS selector which designates"
    },
    {
      "Time_Start": 334.0,
      "Time_End": 340.26,
      "Text": " it going to 64 bit mode. And then we do call red F, call next red F, which is just an"
    },
    {
      "Time_Start": 340.28,
      "Time_End": 346.62,
      "Text": " address so the compiler would then produce that address. And then we're going to then at"
    },
    {
      "Time_Start": 346.62,
      "Time_End": 351.62,
      "Text": " that particular location we're going to modify ESP, add 5 to it so that uh our dest- our"
    },
    {
      "Time_Start": 353.7,
      "Time_End": 357.5,
      "Text": " return address or destination address as I like to call it will be immediately after the"
    },
    {
      "Time_Start": 357.5,
      "Time_End": 363.94,
      "Text": " red F. And that's typically how we uh how it's always done when you see this but the reality"
    },
    {
      "Time_Start": 363.94,
      "Time_End": 368.84,
      "Text": " is you don't have to have that return address or that destination address uh immediately"
    },
    {
      "Time_Start": 368.86,
      "Time_End": 373.06000000000006,
      "Text": " after the red F it could be anywhere in process memory so that's a tremendous amount of"
    },
    {
      "Time_Start": 373.06000000000006,
      "Time_End": 379.66,
      "Text": " flexibility that just isn't really being used. So uh of course we're not writing shellcode"
    },
    {
      "Time_Start": 379.66,
      "Time_End": 385.34000000000003,
      "Text": " we are writing uh return oriented programming so we need to find a new way to- to do that"
    },
    {
      "Time_Start": 385.34000000000003,
      "Time_End": 390.78000000000003,
      "Text": " because we can't just simply write shellcode so uh we- we are introducing a couple new ways"
    },
    {
      "Time_Start": 390.78000000000003,
      "Time_End": 397.16,
      "Text": " to do that that will um allow us to perform heaven's gate and by doing this we can thereby"
    },
    {
      "Time_Start": 397.20000000000005,
      "Time_End": 402.44,
      "Text": " expand the attack surface from uh while 64 which means we're working in 32 bit, we're"
    },
    {
      "Time_Start": 402.44,
      "Time_End": 409.02000000000004,
      "Text": " emulating a 32 bit application uh to 64 bit mode. Now you could do the opposite if you"
    },
    {
      "Time_Start": 409.02000000000004,
      "Time_End": 414.02000000000004,
      "Text": " wanted, I don't really see much of a point but that's fine you can still do it. So uh our"
    },
    {
      "Time_Start": 416.92,
      "Time_End": 421.12,
      "Text": " approach here is we're going to be utilizing the push add instruction so if you're familiar"
    },
    {
      "Time_Start": 421.12,
      "Time_End": 426.04,
      "Text": " with virtual alloc or virtual protect uh the types of change produced by something like"
    },
    {
      "Time_Start": 426.04,
      "Time_End": 431.38,
      "Text": " Mona is following the same idea and Shiva will be talking a little bit more about uh how"
    },
    {
      "Time_Start": 431.38,
      "Time_End": 436.38,
      "Text": " this works um but these are the patterns for uh for heaven's gate so we have 11 of them and I"
    },
    {
      "Time_Start": 438.86,
      "Time_End": 443.86,
      "Text": " can actually increase it to- to more than those uh 11 and uh so if one of these is not"
    },
    {
      "Time_Start": 446.40000000000003,
      "Time_End": 450.70000000000005,
      "Text": " able to work then the tool will just simply try another one. Now these gadgets are not"
    },
    {
      "Time_Start": 450.7,
      "Time_End": 456.84,
      "Text": " exceedingly difficult to find so very likely we will succeed. So let's take a look here at"
    },
    {
      "Time_Start": 456.84,
      "Time_End": 463.14,
      "Text": " pattern 7. So we just simply load up the registers with the uh appropriate values uh and"
    },
    {
      "Time_Start": 463.14,
      "Time_End": 467.91999999999996,
      "Text": " these values a lot- a lot of them are very simple, they're ROP NOPS or uh in this case when"
    },
    {
      "Time_Start": 467.91999999999996,
      "Time_End": 473.12,
      "Text": " we do the push add it's going to push them in a predefined order so it'll go EDI, ESI, all"
    },
    {
      "Time_Start": 473.12,
      "Time_End": 478.12,
      "Text": " the way to EAX and so we'll have there that RET uh 0 uh C and that's going to skip over"
    },
    {
      "Time_Start": 480.7,
      "Time_End": 485.94,
      "Text": " a bunch of- it'll- it'll firstly execute the ROP NOP and ESI and then it'll skip over stuff"
    },
    {
      "Time_Start": 485.94,
      "Time_End": 492.34,
      "Text": " until we get to that jump dereference EBX and then that will then cause us to go to EBX,"
    },
    {
      "Time_Start": 492.34,
      "Time_End": 497.82,
      "Text": " what is EBX? Well that's the RET F. And so then the RET F will then uh cause- that's going to"
    },
    {
      "Time_Start": 497.82,
      "Time_End": 504.46,
      "Text": " what's going to initiate the heaven's gate and then on the stack after that we'll have uh the"
    },
    {
      "Time_Start": 504.46,
      "Time_End": 509.5,
      "Text": " destination address and the 33 selector so everything will be perfectly set up and it"
    },
    {
      "Time_Start": 509.5,
      "Time_End": 515.74,
      "Text": " should work. So let's take a look at the stack before and after so uh DDESP we can see we"
    },
    {
      "Time_Start": 515.74,
      "Time_End": 520.74,
      "Text": " have our destination address and the 33 selector and then after that RET F uh they're gone"
    },
    {
      "Time_Start": 524.02,
      "Time_End": 530.72,
      "Text": " and you'll notice that the- the address is now a Q word instead of a D word it has expanded"
    },
    {
      "Time_Start": 530.72,
      "Time_End": 536.36,
      "Text": " and we have actually switched architecture so uh we have that RET F up above and then down"
    },
    {
      "Time_Start": 536.36,
      "Time_End": 543.0,
      "Text": " below again everything we have Q words and then notice we have push uh RBP instead of uh"
    },
    {
      "Time_Start": 543.0,
      "Time_End": 548.8000000000001,
      "Text": " EBP so we have switched to- to 64 bit mode. Now just one little note for those who may not"
    },
    {
      "Time_Start": 548.8000000000001,
      "Time_End": 554.98,
      "Text": " be aware the only time you can actually view this is if you're in the 64 bit version of uh"
    },
    {
      "Time_Start": 554.98,
      "Time_End": 560.62,
      "Text": " WinDebug. Any other debugger will not work or it will produce uh aberrant behavior and"
    },
    {
      "Time_Start": 560.62,
      "Time_End": 565.96,
      "Text": " there's no reason you can't uh open up a 32 bit application and then attach it with a 64"
    },
    {
      "Time_Start": 566.0600000000001,
      "Time_End": 572.2,
      "Text": " bit uh WinDebug. Let's take a look quickly here at pattern number 11. Now this one is very"
    },
    {
      "Time_Start": 572.2,
      "Time_End": 578.26,
      "Text": " very simple. So we have a couple ROP NOPs, we have a POP EBP to consume the- the- the ESP"
    },
    {
      "Time_Start": 578.26,
      "Time_End": 584.9000000000001,
      "Text": " which we just want to skip. Uh we have another ROP NOP and then the RET F and everything is"
    },
    {
      "Time_Start": 584.9000000000001,
      "Time_End": 591.88,
      "Text": " set up. We have the destination address and we have the 33 selector. So okay we've done the"
    },
    {
      "Time_Start": 591.9,
      "Time_End": 597.38,
      "Text": " Heaven's Gate uh what is the advantage of this? Why do we want to do this? Good question, wow"
    },
    {
      "Time_Start": 597.38,
      "Time_End": 602.38,
      "Text": " excellent question. So uh by doing this there could be many more registers, 64 bit registers"
    },
    {
      "Time_Start": 605.72,
      "Time_End": 611.68,
      "Text": " and the idea is maybe there's something that we're- we want to do in 32 bit mode but we just"
    },
    {
      "Time_Start": 611.68,
      "Time_End": 616.0,
      "Text": " don't have the right gadgets but if we expand it to 64 bit mode maybe there are additional"
    },
    {
      "Time_Start": 616.06,
      "Time_End": 623.06,
      "Text": " gadgets. Now um the reality is a lot of times however um there may not be some of these"
    },
    {
      "Time_Start": 623.06,
      "Time_End": 629.24,
      "Text": " extra 64 bit gadgets just- just because the bytes required to produce them may not be"
    },
    {
      "Time_Start": 629.24,
      "Time_End": 636.14,
      "Text": " there and so um sometimes they will be purely by happenstance. And additionally there can"
    },
    {
      "Time_Start": 636.14,
      "Time_End": 641.78,
      "Text": " be some very valuable structures that are accessible in x64 which you can access via the"
    },
    {
      "Time_Start": 641.8,
      "Time_End": 646.8,
      "Text": " R- R12 register. For instance the the tab 64. You get the tab 64 you can go to tab 32 and"
    },
    {
      "Time_Start": 649.9399999999999,
      "Time_End": 656.0799999999999,
      "Text": " then tab 32 and tab 64 so it's actually immensely valuable so if you can do that and then"
    },
    {
      "Time_Start": 656.0799999999999,
      "Time_End": 661.0799999999999,
      "Text": " leak the R12 then that's very useful. Okay so we've done uh x86 we want to go back to x64"
    },
    {
      "Time_Start": 665.3199999999999,
      "Time_End": 671.22,
      "Text": " because otherwise you're in 64 bit mode for 32 bit application uh technically you could"
    },
    {
      "Time_Start": 671.24,
      "Time_End": 677.2,
      "Text": " call uh 64 bit NTDL functions uh that'd be very difficult uh it's not something I"
    },
    {
      "Time_Start": 677.2,
      "Time_End": 682.5400000000001,
      "Text": " personally would recommend uh trying to do. Uh people out out there have done that uh in"
    },
    {
      "Time_Start": 682.5400000000001,
      "Time_End": 687.62,
      "Text": " terms of um malware development but I don't think it's too terribly realistic for for"
    },
    {
      "Time_Start": 687.62,
      "Time_End": 692.62,
      "Text": " return order to programming so at this stage you would want to return back. Back to um"
    },
    {
      "Time_Start": 693.5,
      "Time_End": 698.5,
      "Text": " x86. Um and so we have a forbidding gadget unfortunately so the push ad simply doesn't"
    },
    {
      "Time_Start": 702.0,
      "Time_End": 707.0,
      "Text": " exist so if you try to do a push ad you'll see hex 60 and 3 question marks. How sad. So in"
    },
    {
      "Time_Start": 709.34,
      "Time_End": 715.34,
      "Text": " this case we're going to do a series of move dereferences and uh kind of like a snipe"
    },
    {
      "Time_Start": 715.34,
      "Time_End": 719.26,
      "Text": " gadget so we'll create an allocation of memory and we'll just set up what we want the"
    },
    {
      "Time_Start": 719.26,
      "Time_End": 724.4,
      "Text": " stack to be and then we'll do a stack pivot and then everything should be should be good and"
    },
    {
      "Time_Start": 724.4,
      "Time_End": 729.4,
      "Text": " jolly. So we'll take a look at some of these uh different uh steps that we can it can"
    },
    {
      "Time_Start": 732.0,
      "Time_End": 735.54,
      "Text": " take so first thing we want to do we want to get a pointer to memory let's make it easy and"
    },
    {
      "Time_Start": 735.54,
      "Time_End": 740.54,
      "Text": " simple we can do ESP and we're going to go move ahead 250 bytes and that's going to be our"
    },
    {
      "Time_Start": 742.8199999999999,
      "Time_End": 747.52,
      "Text": " pointer reference we're going to start building our different uh parameters our return"
    },
    {
      "Time_Start": 747.54,
      "Time_End": 752.02,
      "Text": " address etc. And we're not going to do every little thing here cause it'll be a little bit"
    },
    {
      "Time_Start": 752.02,
      "Time_End": 758.16,
      "Text": " tedious we'll do a few of them so uh we do want to write the the red F cause remember that"
    },
    {
      "Time_Start": 758.16,
      "Time_End": 762.56,
      "Text": " red F is going to be what's going to kick it off it's that that's a far ret. We only we're"
    },
    {
      "Time_Start": 762.56,
      "Time_End": 766.84,
      "Text": " not going to typically do that and and ROP but it does allow us to initiate the heavens"
    },
    {
      "Time_Start": 766.84,
      "Time_End": 771.5,
      "Text": " gate. So we'll get a red F it doesn't matter which red F and we'll write that address"
    },
    {
      "Time_Start": 771.5,
      "Time_End": 776.5,
      "Text": " there and we do that with a move dereference so it's move D word pointer RBX EAX and"
    },
    {
      "Time_Start": 778.28,
      "Time_End": 784.72,
      "Text": " and it's not a Q word uh which some of you who are very observant may notice um it's going to"
    },
    {
      "Time_Start": 784.72,
      "Time_End": 791.06,
      "Text": " be a lot more common you'll see the D words just because you're going from 32 bit to 64 bit."
    },
    {
      "Time_Start": 791.06,
      "Time_End": 796.02,
      "Text": " And um a lot of times when you do a move dereference technique which is very uh"
    },
    {
      "Time_Start": 796.02,
      "Time_End": 800.96,
      "Text": " effective by the way in traditional ROP you'll do a series of four increments well guess"
    },
    {
      "Time_Start": 800.96,
      "Time_End": 806.6999999999999,
      "Text": " what it's not going to work out too well uh with with this because the the byte to produce"
    },
    {
      "Time_Start": 806.72,
      "Time_End": 811.98,
      "Text": " those increments uh will no longer produce increments so the only increments you have will be"
    },
    {
      "Time_Start": 811.98,
      "Time_End": 818.5200000000001,
      "Text": " created by happenstance. So instead we'll just do an add register register uh and do a"
    },
    {
      "Time_Start": 818.5200000000001,
      "Time_End": 823.0,
      "Text": " distance of four it's a little bit more tedious uh but it's something that the tool can"
    },
    {
      "Time_Start": 823.0,
      "Time_End": 829.0400000000001,
      "Text": " automate for us so we don't have to worry about it too much. Um and then we also want to"
    },
    {
      "Time_Start": 829.0400000000001,
      "Time_End": 833.5,
      "Text": " finish writing the address of the red F because remember we're 64 bit mode so we're we"
    },
    {
      "Time_Start": 833.5,
      "Time_End": 839.04,
      "Text": " need to do a Q word rather than a D word and our move dereference gadget was a D word so"
    },
    {
      "Time_Start": 839.04,
      "Time_End": 845.12,
      "Text": " we're going to do uh XOR EAX EAX the result is zero and we're going to write that there so"
    },
    {
      "Time_Start": 845.12,
      "Time_End": 851.96,
      "Text": " we get a monstrously long uh a red F gadget address there. And then now we need to do the"
    },
    {
      "Time_Start": 851.96,
      "Time_End": 856.96,
      "Text": " destination address and the 23 selector so the 23 selector allows us to go back to 64"
    },
    {
      "Time_Start": 857.8000000000001,
      "Time_End": 862.8000000000001,
      "Text": " bit mode. Um and this is kind of where it's kind of a little weird kind of funky um we're"
    },
    {
      "Time_Start": 866.44,
      "Time_End": 871.7800000000001,
      "Text": " 64 bit mode we've been dealing with Q words but now we're going to go back to to D words so"
    },
    {
      "Time_Start": 871.7800000000001,
      "Time_End": 877.2800000000001,
      "Text": " we're going to represent the destination address on the 23 selector as D words. Hey it"
    },
    {
      "Time_Start": 877.2800000000001,
      "Time_End": 882.58,
      "Text": " makes our life a little bit easier so I'm not complaining. So uh I I didn't show the steps"
    },
    {
      "Time_Start": 882.58,
      "Time_End": 887.58,
      "Text": " for those uh but now what we want to do is do a stack pivot and of course there are many"
    },
    {
      "Time_Start": 887.58,
      "Time_End": 893.22,
      "Text": " different ways to do a stack pivot. Um but what we're going to do is we're going to get it"
    },
    {
      "Time_Start": 893.22,
      "Time_End": 898.22,
      "Text": " aligned so that um RAX which is kind of where we've been building our gadgets we want it to"
    },
    {
      "Time_Start": 900.86,
      "Time_End": 907.76,
      "Text": " point to to the red F and so we're going to do uh a very long 16 digit number which is"
    },
    {
      "Time_Start": 907.76,
      "Time_End": 912.76,
      "Text": " actually equal to negative 12. And then once we do that then um we can just take another"
    },
    {
      "Time_Start": 916.0,
      "Time_End": 921.74,
      "Text": " before and after so do DDESP we have the the return address and the 23 selector and then"
    },
    {
      "Time_Start": 921.74,
      "Time_End": 926.74,
      "Text": " after that you'll notice that x86 is present and um we have succeeded we've gone back to x86"
    },
    {
      "Time_Start": 929.8,
      "Time_End": 936.78,
      "Text": " so let's actually do a quick little demo here. Okay it's all set up for us so there's our"
    },
    {
      "Time_Start": 936.78,
      "Time_End": 941.78,
      "Text": " push ad and uh we can do that red F right there so it's going to be the first red F and we"
    },
    {
      "Time_Start": 944.48,
      "Time_End": 951.48,
      "Text": " go from x86 to x64 we have a destination address 33 selector so now we are in x64 you can see"
    },
    {
      "Time_Start": 951.48,
      "Time_End": 957.06,
      "Text": " the registers have indeed changed. That's awesome. And we're going to skip ahead a little"
    },
    {
      "Time_Start": 957.06,
      "Time_End": 962.06,
      "Text": " bit to not be too tedious and we are going to uh we're at the red F to go from x64 to x86"
    },
    {
      "Time_Start": 967.56,
      "Time_End": 971.74,
      "Text": " let's look at the stack we have the destination address and the 23 selector and now we're back"
    },
    {
      "Time_Start": 971.74,
      "Time_End": 976.74,
      "Text": " at x86 so we did it we did 2 heavens gates uh right there in that little demo. Okay so this"
    },
    {
      "Time_Start": 987.22,
      "Time_End": 991.02,
      "Text": " novel form of heavens gate again it's going to allow us to go back and forth uh between"
    },
    {
      "Time_Start": 991.04,
      "Time_End": 996.64,
      "Text": " them obviously a consideration is going to be the size of the payload we want to be very uh we"
    },
    {
      "Time_Start": 996.64,
      "Time_End": 1001.68,
      "Text": " would want definitely want to be aware of that and it's really designed for uh for wow"
    },
    {
      "Time_Start": 1001.68,
      "Time_End": 1008.3199999999999,
      "Text": " 64 or 32 bit uh applications I mean you there's no reason you can't do it in 64 bit mode I"
    },
    {
      "Time_Start": 1008.3199999999999,
      "Time_End": 1014.8199999999999,
      "Text": " just can't really think of a good reason why except maybe just for the novelty of it. Uh and"
    },
    {
      "Time_Start": 1014.86,
      "Time_End": 1019.86,
      "Text": " again this this is potentially capable of expanding the attack surface um and the the"
    },
    {
      "Time_Start": 1024.04,
      "Time_End": 1028.5,
      "Text": " technique or the approach that we've introduced is a little bit more complex and different"
    },
    {
      "Time_Start": 1028.5,
      "Time_End": 1034.94,
      "Text": " from the the standard approach that we showed you earlier. Okay so I'm going to segue into"
    },
    {
      "Time_Start": 1034.94,
      "Time_End": 1039.94,
      "Text": " our uh next topic here which is going to be uh Windows syscalls. Okay so I'm going to"
    },
    {
      "Time_Start": 1044.86,
      "Time_End": 1049.22,
      "Text": " so very uh briefly I'm going to speed through some of these just to kind of refresher uh for"
    },
    {
      "Time_Start": 1049.22,
      "Time_End": 1053.7,
      "Text": " some people. So what is a Windows syscall? Um it's going to be something where you you"
    },
    {
      "Time_Start": 1053.7,
      "Time_End": 1060.7,
      "Text": " could call a kernel 32 function like virtual alloc that will call an NTDL function such as NT"
    },
    {
      "Time_Start": 1060.7,
      "Time_End": 1066.54,
      "Text": " allocate virtual memory and then that uh NTDL function will then call a Windows syscall. In"
    },
    {
      "Time_Start": 1066.54,
      "Time_End": 1073.02,
      "Text": " order to do that it will load into EAX the appropriate SSN syscall system number and then uh"
    },
    {
      "Time_Start": 1073.02,
      "Time_End": 1079.46,
      "Text": " you transition from user mode to kernel mode and then after that um there's a bunch of stuff"
    },
    {
      "Time_Start": 1079.46,
      "Time_End": 1083.06,
      "Text": " going on in kernel mode it's really outside the scope of this. So this is not something that's"
    },
    {
      "Time_Start": 1083.06,
      "Time_End": 1090.1,
      "Text": " really intended for the average programmer uh to be doing. And the appeal of Windows syscalls"
    },
    {
      "Time_Start": 1090.1,
      "Time_End": 1095.1,
      "Text": " is um it's much much harder for it to be hooked by EDR and to be to to prevent it from from"
    },
    {
      "Time_Start": 1095.6000000000001,
      "Time_End": 1100.6000000000001,
      "Text": " from working um so that can definitely be very beneficial. Um malicious 8 Windows APIs is"
    },
    {
      "Time_Start": 1107.0800000000002,
      "Time_End": 1112.0800000000002,
      "Text": " much easier to to hook those thereby preventing their their usage. Uh to my knowledge I don't"
    },
    {
      "Time_Start": 1114.42,
      "Time_End": 1119.42,
      "Text": " think this has been used in uh x86 uh while 64. Again that's the 32 bit um if you're doing"
    },
    {
      "Time_Start": 1120.42,
      "Time_End": 1126.8600000000001,
      "Text": " syscalls in 64 bit mode the the technique and approach is going to be a little bit"
    },
    {
      "Time_Start": 1126.8600000000001,
      "Time_End": 1132.26,
      "Text": " different you can actually use an actual syscall instruction a 64 bit instruction you're not"
    },
    {
      "Time_Start": 1132.26,
      "Time_End": 1137.96,
      "Text": " going to be using that and um while 64 will be doing things in a different way. And one of the"
    },
    {
      "Time_Start": 1137.96,
      "Time_End": 1143.0,
      "Text": " issues with syscalls is we have a what we call a problem of portability so with Windows 10"
    },
    {
      "Time_Start": 1143.02,
      "Time_End": 1148.02,
      "Text": " for instance um that SSN potentially could change you have more than 13 different OS builds"
    },
    {
      "Time_Start": 1150.6,
      "Time_End": 1156.44,
      "Text": " so sometimes those SSNs will stay the same but other times they will change. So you could"
    },
    {
      "Time_Start": 1156.44,
      "Time_End": 1161.44,
      "Text": " have um I think uh NT protect virtual memory I think for Windows 7 is hex 15 and I think for"
    },
    {
      "Time_Start": 1165.12,
      "Time_End": 1171.98,
      "Text": " Windows 10 and 11 it's hex 18. So um those have changed others will change much more"
    },
    {
      "Time_Start": 1172.0,
      "Time_End": 1177.5,
      "Text": " frequently some less frequently. So very briefly let's um go over how we could reverse"
    },
    {
      "Time_Start": 1177.5,
      "Time_End": 1182.74,
      "Text": " engineer them so Windows 7 what we're going to be looking for is that call DWORD FSC0 that"
    },
    {
      "Time_Start": 1182.74,
      "Time_End": 1187.64,
      "Text": " will point to a special address which will be a far jump and you can see we're loading into"
    },
    {
      "Time_Start": 1187.64,
      "Time_End": 1192.64,
      "Text": " EAX hex 15 um so alt because it's NT allocate virtual memory is off there. And uh that FS"
    },
    {
      "Time_Start": 1192.64,
      "Time_End": 1197.66,
      "Text": " register is going to be pointing to the the thread environment block. Um so what we can do is"
    },
    {
      "Time_Start": 1204.1200000000001,
      "Time_End": 1209.96,
      "Text": " we can weaponize that we can utilize that that now that FSC0 is going to be reliable uh way"
    },
    {
      "Time_Start": 1209.96,
      "Time_End": 1215.14,
      "Text": " for us to interface with that and the FS is actually a register so it's going to always be"
    },
    {
      "Time_Start": 1215.14,
      "Time_End": 1220.94,
      "Text": " there so we just need to get uh instructions that have FS in it and GS is going to be the"
    },
    {
      "Time_Start": 1220.94,
      "Time_End": 1226.18,
      "Text": " 64 bit equivalent. So there you see the you have a jump and you have a 33 selector and"
    },
    {
      "Time_Start": 1226.18,
      "Time_End": 1231.96,
      "Text": " colon and then the address so that'll be switching to 64 bit mode so that'll be a form of"
    },
    {
      "Time_Start": 1231.96,
      "Time_End": 1238.6200000000001,
      "Text": " heaven's gate in and of itself. In Windows 10 it's a little bit different so uh we have hex"
    },
    {
      "Time_Start": 1238.6200000000001,
      "Time_End": 1243.64,
      "Text": " 18 NT allocate virtual memory and the um setup is a little bit different but for our"
    },
    {
      "Time_Start": 1244.64,
      "Time_End": 1249.64,
      "Text": " purposes we don't really care because we go to FSC0 it's going to be pointing to that same"
    },
    {
      "Time_Start": 1251.5200000000002,
      "Time_End": 1256.5200000000002,
      "Text": " address so we can still continue to use that FSC0. In Windows 11 things are a little bit"
    },
    {
      "Time_Start": 1259.8200000000002,
      "Time_End": 1265.5200000000002,
      "Text": " different again but again that Windows 7 way of invoking the syscalls is still able to to"
    },
    {
      "Time_Start": 1265.5200000000002,
      "Time_End": 1271.0,
      "Text": " work so um uh as many of you are aware a lot of uh Windows based ROP is going to be focused"
    },
    {
      "Time_Start": 1271.0,
      "Time_End": 1274.46,
      "Text": " on bypassing mitigations. One of the most prevalent mitigations is going to be data"
    },
    {
      "Time_Start": 1274.46,
      "Time_End": 1280.74,
      "Text": " execution prevention which says the memory should be readable and writable or executable"
    },
    {
      "Time_Start": 1280.74,
      "Time_End": 1286.04,
      "Text": " but not both. That doesn't mean it can't be both it can be but we need to use certain APIs"
    },
    {
      "Time_Start": 1286.04,
      "Time_End": 1290.54,
      "Text": " or or syscalls in order to make that happen. Virtual alloc we create a region of memory"
    },
    {
      "Time_Start": 1290.54,
      "Time_End": 1297.28,
      "Text": " that has the desired permissions. Virtual protect we modify the permissions of existing"
    },
    {
      "Time_Start": 1297.3,
      "Time_End": 1303.48,
      "Text": " memory allocations. So those are some very old very uh simple ways of doing it and can be"
    },
    {
      "Time_Start": 1303.48,
      "Time_End": 1308.48,
      "Text": " easily blocked. Uh there are alternative ways as well or ways to make them work um but"
    },
    {
      "Time_Start": 1310.78,
      "Time_End": 1316.08,
      "Text": " Windows syscalls is going to be something that is uh a little bit a little bit more low"
    },
    {
      "Time_Start": 1316.08,
      "Time_End": 1322.6,
      "Text": " level a little bit deeper way of of doing this um and again those syscall SSNs do change"
    },
    {
      "Time_Start": 1322.6200000000001,
      "Time_End": 1328.42,
      "Text": " but the good news is for for Windows um ten and eleven they're going to stay the same for"
    },
    {
      "Time_Start": 1328.42,
      "Time_End": 1335.42,
      "Text": " the two that we care about and Windows 7 is going to be the same so um that works out uh"
    },
    {
      "Time_Start": 1335.42,
      "Time_End": 1341.3600000000001,
      "Text": " very well for us. We don't what this means practically speaking is we don't have to worry"
    },
    {
      "Time_Start": 1341.3600000000001,
      "Time_End": 1348.1000000000001,
      "Text": " about um resolving the OS build like you would if you were using a traditional Windows"
    },
    {
      "Time_Start": 1348.2,
      "Time_End": 1353.4800000000002,
      "Text": " syscall tool. We can just say okay I'm attacking Windows 10, doing Windows 11, I've done a"
    },
    {
      "Time_Start": 1353.4800000000002,
      "Time_End": 1358.4800000000002,
      "Text": " little bit of reconnaissance, I know about my target so um we can dispense with that step."
    },
    {
      "Time_Start": 1360.66,
      "Time_End": 1365.66,
      "Text": " It's not necessary for these particular APIs. And I think it'd be a lot more challenging to"
    },
    {
      "Time_Start": 1367.9,
      "Time_End": 1372.9,
      "Text": " uh to do that and um in ROP but uh maybe we'll do that later on. So how do we perform these uh"
    },
    {
      "Time_Start": 1373.9,
      "Time_End": 1379.64,
      "Text": " the Windows syscall in Windows 10 and 11 particularly while 64? Well that can be a little bit"
    },
    {
      "Time_Start": 1379.64,
      "Time_End": 1384.2800000000002,
      "Text": " challenging but ultimately as long as we follow the proper calling convention whether it be"
    },
    {
      "Time_Start": 1384.2800000000002,
      "Time_End": 1389.88,
      "Text": " for the API or the syscall it's going to work. So we just simply get the stack aligned"
    },
    {
      "Time_Start": 1389.88,
      "Time_End": 1395.76,
      "Text": " properly uh with the return addresses and notice I did say return addresses that's not a I"
    },
    {
      "Time_Start": 1395.76,
      "Time_End": 1400.76,
      "Text": " didn't misspeak there it it is indeed plural for for Windows syscalls. Um and then uh"
    },
    {
      "Time_Start": 1403.3400000000001,
      "Time_End": 1408.3400000000001,
      "Text": " initiate things and it should work. So uh we'll see how that works here um shortly. So"
    },
    {
      "Time_Start": 1410.9,
      "Time_End": 1415.38,
      "Text": " important Windows syscalls that are this tool utilizes is going to be NT allocate virtual"
    },
    {
      "Time_Start": 1415.38,
      "Time_End": 1420.5800000000002,
      "Text": " memory, the deeper version of virtual alloc. And NT protect virtual memory which is the"
    },
    {
      "Time_Start": 1420.5800000000002,
      "Time_End": 1426.26,
      "Text": " deeper version of virtual protect. So we're going to focus here on NT protect virtual"
    },
    {
      "Time_Start": 1426.26,
      "Time_End": 1432.26,
      "Text": " memory from a ROP standpoint it's a little bit more challenging to set up. And one of the"
    },
    {
      "Time_Start": 1432.32,
      "Time_End": 1437.96,
      "Text": " big things with Windows syscalls is instead of just using direct values like your Windows"
    },
    {
      "Time_Start": 1437.96,
      "Time_End": 1444.2,
      "Text": " APIs, you'll have a lot of pointers. So a pointer is going to be you go inside of the"
    },
    {
      "Time_Start": 1444.2,
      "Time_End": 1449.2,
      "Text": " pointer and it has that value so we need to somehow um create these pointers for for base"
    },
    {
      "Time_Start": 1451.28,
      "Time_End": 1456.28,
      "Text": " address, number of bytes to protect and uh old access protection. And if we do that then"
    },
    {
      "Time_Start": 1457.28,
      "Time_End": 1462.28,
      "Text": " um we should be in a good position. So we're using the move dereference approach rather"
    },
    {
      "Time_Start": 1465.48,
      "Time_End": 1470.96,
      "Text": " than the push that approach and um so we want to get a a pointer reference to memory this"
    },
    {
      "Time_Start": 1470.96,
      "Time_End": 1476.76,
      "Text": " is going to be where we are going to build our parameters, our return addresses and we're"
    },
    {
      "Time_Start": 1476.76,
      "Time_End": 1481.8,
      "Text": " going to put uh a gadget there to invoke the Windows syscall which we'll talk about"
    },
    {
      "Time_Start": 1481.82,
      "Time_End": 1486.82,
      "Text": " momentarily. So we'll just move uh ESP to EAX and then push it ahead 250 bytes. Uh now"
    },
    {
      "Time_Start": 1490.76,
      "Time_End": 1493.96,
      "Text": " what this is going to be something that will be a little bit different for a lot of people"
    },
    {
      "Time_Start": 1493.96,
      "Time_End": 1500.44,
      "Text": " is we need to set up a value for for a pointer how do we do this uh and ROP. And my solution"
    },
    {
      "Time_Start": 1500.44,
      "Time_End": 1506.24,
      "Text": " is uh so you could either do increments or decrements. I've choose chosen to do uh"
    },
    {
      "Time_Start": 1506.32,
      "Time_End": 1512.82,
      "Text": " decrements um for the automation and for this example. And so we're just going to build the"
    },
    {
      "Time_Start": 1512.82,
      "Time_End": 1517.96,
      "Text": " values for the pointers immediately after the parameters and then that just makes it easier"
    },
    {
      "Time_Start": 1517.96,
      "Time_End": 1522.96,
      "Text": " for us to then move the pointers over to uh the parameters where where where they where"
    },
    {
      "Time_Start": 1525.5,
      "Time_End": 1532.34,
      "Text": " they need to be. So get base address value for pointer is what we're creating here and this"
    },
    {
      "Time_Start": 1532.3400000000001,
      "Time_End": 1538.0200000000002,
      "Text": " may look a little weird if you're scrutinizing it very closely. We moved ESP into EAX and"
    },
    {
      "Time_Start": 1538.0200000000002,
      "Time_End": 1542.7600000000002,
      "Text": " now I'm moving that into EBX so that doesn't really seem to make much sense does it? Why"
    },
    {
      "Time_Start": 1542.7600000000002,
      "Time_End": 1547.7600000000002,
      "Text": " am I not choosing a better one? Well uh I'll address that in a little bit. Um and so then we"
    },
    {
      "Time_Start": 1551.3600000000001,
      "Time_End": 1555.8400000000001,
      "Text": " then write that base address to to memory with uh a move dereference and then we have a"
    },
    {
      "Time_Start": 1555.88,
      "Time_End": 1560.88,
      "Text": " series of four decrements. So we then decrement to our next slot that we will then initialize"
    },
    {
      "Time_Start": 1563.92,
      "Time_End": 1568.5800000000002,
      "Text": " with the next uh value for another pointer. And this one's gonna be number of bytes to"
    },
    {
      "Time_Start": 1568.5800000000002,
      "Time_End": 1574.8600000000001,
      "Text": " protect. And if you look very closely I'm putting one byte. I'm gonna protect one byte. That's"
    },
    {
      "Time_Start": 1574.8600000000001,
      "Time_End": 1579.8600000000001,
      "Text": " kind of bizarre. Um I'll explain that again momentarily. It's kind of a what I like to"
    },
    {
      "Time_Start": 1580.22,
      "Time_End": 1585.22,
      "Text": " call a little trick just uh to save on gadgets. So we'll write that with a move dereference"
    },
    {
      "Time_Start": 1587.96,
      "Time_End": 1593.64,
      "Text": " and four decrements. And I'm also gonna at this point I'm gonna save a point of reference to"
    },
    {
      "Time_Start": 1593.64,
      "Time_End": 1598.64,
      "Text": " the number of bytes um moving that into EDI. I'll be using that in a little bit. And I'm"
    },
    {
      "Time_Start": 1601.5400000000002,
      "Time_End": 1604.5200000000002,
      "Text": " gonna skip through some of these. I'm not gonna go through the whole thing. There is gonna"
    },
    {
      "Time_Start": 1604.5200000000002,
      "Time_End": 1608.6200000000001,
      "Text": " be a white paper so if you wanna scrutinize the entire source code you'll have that"
    },
    {
      "Time_Start": 1608.8400000000001,
      "Time_End": 1615.5200000000002,
      "Text": " available as well as the tool itself. So then uh we've skipped a little bit here but giving"
    },
    {
      "Time_Start": 1615.5200000000002,
      "Time_End": 1621.96,
      "Text": " the pointer is a parameter. So we have the point of reference now in EDI. We're gonna move"
    },
    {
      "Time_Start": 1621.96,
      "Time_End": 1626.46,
      "Text": " EDI into EBX and now we're gonna increment EBX four times. So we're incrementing not"
    },
    {
      "Time_Start": 1626.46,
      "Time_End": 1631.46,
      "Text": " decrementing. And then we're gonna write that to uh EAX. And that's gonna be our number of"
    },
    {
      "Time_Start": 1631.6200000000001,
      "Time_End": 1636.6200000000001,
      "Text": " bytes to protect. Which again is just the value of one. Which is odd. And so now I'm gonna"
    },
    {
      "Time_Start": 1640.16,
      "Time_End": 1644.1000000000001,
      "Text": " explain why I'm doing some of these kind of bizarre and odd type things. So the base"
    },
    {
      "Time_Start": 1644.1000000000001,
      "Time_End": 1650.74,
      "Text": " address um what we're gonna do is we're gonna get it to to round down to the to the the"
    },
    {
      "Time_Start": 1650.74,
      "Time_End": 1655.94,
      "Text": " base address of that particular allocation. So I don't need to be precise here. The number"
    },
    {
      "Time_Start": 1655.94,
      "Time_End": 1660.78,
      "Text": " of bytes it because it's so low it's just gonna round up to the maximum size for that"
    },
    {
      "Time_Start": 1660.8,
      "Time_End": 1666.8999999999999,
      "Text": " allocation. So in some of my examples that allocation maximum size was 1,000 bytes. So it'll"
    },
    {
      "Time_Start": 1666.8999999999999,
      "Time_End": 1672.04,
      "Text": " be uh 1,000 bytes. Uh and that will just happen automatically for us. So we don't have to"
    },
    {
      "Time_Start": 1672.04,
      "Time_End": 1678.18,
      "Text": " tediously try to put a particular value in there that's not necessary. So let's try to finish"
    },
    {
      "Time_Start": 1678.18,
      "Time_End": 1684.56,
      "Text": " things up. And uh again I I alluded to the fact that we're gonna have two return addresses."
    },
    {
      "Time_Start": 1684.56,
      "Time_End": 1689.66,
      "Text": " And so if you were trying to do this and you do one return address it's never gonna work"
    },
    {
      "Time_Start": 1689.68,
      "Time_End": 1694.28,
      "Text": " because it's an insufficient number. So you would really only know this if you were going"
    },
    {
      "Time_Start": 1694.28,
      "Time_End": 1699.28,
      "Text": " through and reverse engineering um very closely. Um so in any case uh we go ahead and write"
    },
    {
      "Time_Start": 1702.52,
      "Time_End": 1708.22,
      "Text": " that. And you'll notice a lot of these gadgets are repetitive. The same gadgets. That's just"
    },
    {
      "Time_Start": 1708.22,
      "Time_End": 1712.46,
      "Text": " how a lot of this types of type of things works. And then we do another return address. In"
    },
    {
      "Time_Start": 1712.46,
      "Time_End": 1717.64,
      "Text": " this case it's just simply a a ROP NOP. A RET. It doesn't really do anything. But we could"
    },
    {
      "Time_Start": 1717.64,
      "Time_End": 1722.66,
      "Text": " also um make that something else if we wanted. So now we're gonna write our Windows sys call"
    },
    {
      "Time_Start": 1725.0200000000002,
      "Time_End": 1730.16,
      "Text": " or method of invoking that to the stack. And so there are a number of ways in which to do"
    },
    {
      "Time_Start": 1730.16,
      "Time_End": 1735.64,
      "Text": " that. The one that I prefer the most is gonna be something like PUSH DWORD POINTER FS uh and"
    },
    {
      "Time_Start": 1735.64,
      "Time_End": 1740.64,
      "Text": " then EDX. Um and that EDX we can then change that to to C0. Now a more desirable one would"
    },
    {
      "Time_Start": 1740.64,
      "Time_End": 1745.66,
      "Text": " be like PUSH DWORD POINTER uh FS C0. Uh but something like that is gonna be so obscure it's"
    },
    {
      "Time_Start": 1750.66,
      "Time_End": 1757.6000000000001,
      "Text": " not likely to be found. Uh but we just simply write that address to the stack. And there are"
    },
    {
      "Time_Start": 1757.6000000000001,
      "Time_End": 1763.24,
      "Text": " many other possibilities where the FS register is present and we could select one of them"
    },
    {
      "Time_Start": 1763.24,
      "Time_End": 1768.7,
      "Text": " and we can manipulate manipulate things in such a fashion that they could be in the form of a"
    },
    {
      "Time_Start": 1768.74,
      "Time_End": 1772.94,
      "Text": " PUSH RED. Um we don't have have time to talk about that but there are a lot of other"
    },
    {
      "Time_Start": 1772.94,
      "Time_End": 1779.98,
      "Text": " possibilities just as long as we can kind of leak that FS register then we're good. And if"
    },
    {
      "Time_Start": 1779.98,
      "Time_End": 1784.88,
      "Text": " there is not a direct way, well we actually could potentially find that from the R12"
    },
    {
      "Time_Start": 1784.88,
      "Time_End": 1790.46,
      "Text": " register via Heaven's Gate. It's a little bit more tedious to set that up. Uh and the"
    },
    {
      "Time_Start": 1790.46,
      "Time_End": 1796.8600000000001,
      "Text": " automation actually doesn't do that. Uh at least not at present. So we wanna also specify"
    },
    {
      "Time_Start": 1796.8600000000001,
      "Time_End": 1801.5600000000002,
      "Text": " NT protect virtual memory. All we gotta do is just load the appropriate SSN. So it's gonna"
    },
    {
      "Time_Start": 1801.5600000000002,
      "Time_End": 1806.5600000000002,
      "Text": " be hex 50 for Windows 10. And if you're doing Windows 7 there are gonna be additional"
    },
    {
      "Time_Start": 1806.5600000000002,
      "Time_End": 1812.5400000000002,
      "Text": " steps. So the ECX will need to be 0. And then EDI will then need to load the first"
    },
    {
      "Time_Start": 1812.5400000000002,
      "Time_End": 1818.14,
      "Text": " parameter uh address or or pointer. And there are a few different ways you can do that"
    },
    {
      "Time_Start": 1818.14,
      "Time_End": 1822.72,
      "Text": " through ROP and the the white paper will go into more detail. Uh you can do this with"
    },
    {
      "Time_Start": 1822.74,
      "Time_End": 1828.24,
      "Text": " Windows 10. It doesn't hurt any hurt anything. It just does it's not required. And then our"
    },
    {
      "Time_Start": 1828.24,
      "Time_End": 1833.24,
      "Text": " final step here is uh do a stack pivot to to the start of everything. So start of um uh"
    },
    {
      "Time_Start": 1836.82,
      "Time_End": 1842.96,
      "Text": " invoking the the syscall. So let's look at our ESP. We have the pointer to uh the gadget to"
    },
    {
      "Time_Start": 1842.96,
      "Time_End": 1848.26,
      "Text": " invoke the syscall. We have a return address. Two of them. And then our NT protect virtual"
    },
    {
      "Time_Start": 1848.3,
      "Time_End": 1853.3,
      "Text": " memory addresses. Um we can go ahead and do that. We have the the push keyword pointer FSEBX."
    },
    {
      "Time_Start": 1858.22,
      "Time_End": 1863.22,
      "Text": " That then takes us to a far jump. And then after that call we can see our return addresses are"
    },
    {
      "Time_Start": 1865.68,
      "Time_End": 1870.52,
      "Text": " still there. There is no stack cleanup. You're responsible for that yourself. So you might"
    },
    {
      "Time_Start": 1870.52,
      "Time_End": 1877.04,
      "Text": " want to do a small little stack pivot. Uh with your return address. Uh or one of them. And"
    },
    {
      "Time_Start": 1877.08,
      "Time_End": 1882.82,
      "Text": " the um you can see the size has been upgraded to a thousand bytes and the base address has"
    },
    {
      "Time_Start": 1882.82,
      "Time_End": 1888.5,
      "Text": " been provided rather than the address that we had input previously. And we can look at the"
    },
    {
      "Time_Start": 1888.5,
      "Time_End": 1893.5,
      "Text": " VPROC uh permissions there. And it's 18. Or we have page execute uh read write. Um NT"
    },
    {
      "Time_Start": 1898.84,
      "Time_End": 1903.04,
      "Text": " allocate virtual memory. The setup is going to be similar. Um we're not going to go into"
    },
    {
      "Time_Start": 1903.04,
      "Time_End": 1908.04,
      "Text": " that just in the interest of time. We'll do a quick little demo here. Alright so we're"
    },
    {
      "Time_Start": 1920.08,
      "Time_End": 1925.08,
      "Text": " gonna get things set up. Right here we're doing that uh far jump to invoke the uh this is"
    },
    {
      "Time_Start": 1925.48,
      "Time_End": 1930.48,
      "Text": " messed up. Oh let's just skip this demo. Alright uh with that we are going to change"
    },
    {
      "Time_Start": 1948.6599999999999,
      "Time_End": 1954.9399999999998,
      "Text": " directions a bit. And we are going to um talk about shell coalesce ROP and invite my"
    },
    {
      "Time_Start": 1954.94,
      "Time_End": 1955.94,
      "Text": " co-speaker."
    },
    {
      "Time_Start": 1955.94,
      "Time_End": 1960.94,
      "Text": " Hi everyone. Um the purpose of this exploit is to have three different Windows APIs"
    },
    {
      "Time_Start": 1972.42,
      "Time_End": 1978.68,
      "Text": " working together collectively. This allows us to realize more advanced data than just"
    },
    {
      "Time_Start": 1978.68,
      "Time_End": 1983.96,
      "Text": " having just one API. We can implement the functionality of a shell code directly"
    },
    {
      "Time_Start": 1983.98,
      "Time_End": 1989.02,
      "Text": " without needing to bypass step and without actually having a shell code. This one is"
    },
    {
      "Time_Start": 1989.02,
      "Time_End": 1993.82,
      "Text": " relatively simple. Uh we'll use the load library to get the handle to the module also known"
    },
    {
      "Time_Start": 1993.82,
      "Time_End": 1999.1000000000001,
      "Text": " as H module. And then pass it to get ROP address um to get the run time address of the"
    },
    {
      "Time_Start": 1999.1000000000001,
      "Time_End": 2004.1000000000001,
      "Text": " system and then system enables us to execute any command. Let's talk briefly about some"
    },
    {
      "Time_Start": 2006.8400000000001,
      "Time_End": 2012.74,
      "Text": " of these APIs. Load library. The purpose here is to load a DLL or a module or if it is"
    },
    {
      "Time_Start": 2012.76,
      "Time_End": 2017.76,
      "Text": " already loaded which is in in a lot of times we simply return the address of it. That is"
    },
    {
      "Time_Start": 2017.76,
      "Time_End": 2023.4,
      "Text": " the H module. We have the handle to the module now which is the absolute requirement. Our"
    },
    {
      "Time_Start": 2023.4,
      "Time_End": 2028.4,
      "Text": " return address which is ROP now which will then take us to the next gadget. Get ROP address"
    },
    {
      "Time_Start": 2030.58,
      "Time_End": 2035.02,
      "Text": " allows us to take that handle and then we can provide the name of the function and then"
    },
    {
      "Time_Start": 2035.02,
      "Time_End": 2039.96,
      "Text": " function gives us the run time address of the system. Then there is return address as"
    },
    {
      "Time_Start": 2039.98,
      "Time_End": 2044.98,
      "Text": " well. Finally the most important API is going to be system which allows us to execute system"
    },
    {
      "Time_Start": 2047.58,
      "Time_End": 2053.36,
      "Text": " commands directly. In this case we are doing proof of concept string calc dot exe but you"
    },
    {
      "Time_Start": 2053.36,
      "Time_End": 2058.6,
      "Text": " can use any command you want to execute. Our point with this is not just to call this one"
    },
    {
      "Time_Start": 2058.6,
      "Time_End": 2064.9,
      "Text": " time but in a sense is to create a recipe so that we can automate the ROP chain generation"
    },
    {
      "Time_Start": 2064.92,
      "Time_End": 2070.52,
      "Text": " which enables us to do it on many different binaries. Next we're going to talk about"
    },
    {
      "Time_Start": 2070.52,
      "Time_End": 2075.82,
      "Text": " finding patterns. How do we find patterns for a specific Windows API? First determine the"
    },
    {
      "Time_Start": 2075.82,
      "Time_End": 2081.2000000000003,
      "Text": " push add order. As you can see from the ABO table the ADI is in slot 1 ranging all the way"
    },
    {
      "Time_Start": 2081.2000000000003,
      "Time_End": 2087.0,
      "Text": " till EAX in slot 8. Push add puts the registers on the stack in predefined predictable"
    },
    {
      "Time_Start": 2087.0,
      "Time_End": 2092.0,
      "Text": " order. This push add order is helpful to create many patterns. This is one set of"
    },
    {
      "Time_Start": 2095.38,
      "Time_End": 2100.28,
      "Text": " patterns that could be used. We have many that we are we going to talk about later. Each"
    },
    {
      "Time_Start": 2100.28,
      "Time_End": 2106.6600000000003,
      "Text": " register holds a value but in the case of ESP we'll always keep over it. This is a pattern"
    },
    {
      "Time_Start": 2106.6600000000003,
      "Time_End": 2112.3,
      "Text": " for system. As you can see each register holds a value or a ROP gadget. For command we have"
    },
    {
      "Time_Start": 2112.3,
      "Time_End": 2118.56,
      "Text": " to provide the pointer to the command and command will be part of the payload. This is one"
    },
    {
      "Time_Start": 2118.56,
      "Time_End": 2124.2400000000002,
      "Text": " of the script that is generated by ROP rocket. Each register has its own slot. It is usually"
    },
    {
      "Time_Start": 2124.2400000000002,
      "Time_End": 2129.42,
      "Text": " not that difficult to load registers but in the case of EAX it is using a temporary"
    },
    {
      "Time_Start": 2129.42,
      "Time_End": 2135.42,
      "Text": " register EBX to locate the string MSVCRT on the stack dynamically. I would have to"
    },
    {
      "Time_Start": 2135.42,
      "Time_End": 2140.46,
      "Text": " calculate that value manually but with emulation ROP rocket can do that for you. At the end"
    },
    {
      "Time_Start": 2140.46,
      "Time_End": 2145.46,
      "Text": " of all the slots we have push add. Let's see what happens after push add. Let's take a look"
    },
    {
      "Time_Start": 2146.26,
      "Time_End": 2151.26,
      "Text": " at the stack values. The ROP NOP is in EDI and then there is retry which will execute the"
    },
    {
      "Time_Start": 2154.4,
      "Time_End": 2159.7400000000002,
      "Text": " next one and skip over the following two. Then there is load library pointer and gem"
    },
    {
      "Time_Start": 2159.7400000000002,
      "Time_End": 2165.98,
      "Text": " dereference to that load library along with the return address and MSVCRT as a parameter."
    },
    {
      "Time_Start": 2165.98,
      "Time_End": 2170.98,
      "Text": " As you can see the value of EAX is a base address of MSVCRT. This is the result for get"
    },
    {
      "Time_Start": 2171.64,
      "Time_End": 2176.64,
      "Text": " ROP address as well as you can see the value is like run time address of system. And"
    },
    {
      "Time_Start": 2179.52,
      "Time_End": 2185.86,
      "Text": " finally if all three ROP chain functions correctly the command will be executed which is just"
    },
    {
      "Time_Start": 2185.86,
      "Time_End": 2190.7,
      "Text": " popping up a calculator at this point. This is a good demonstration of using shell code"
    },
    {
      "Time_Start": 2190.7,
      "Time_End": 2195.86,
      "Text": " list ROP. We are able to execute shell code like functionality without needing to bypass"
    },
    {
      "Time_Start": 2195.88,
      "Time_End": 2202.42,
      "Text": " step. But seriously you can do a lot more than just popping up a boring calculator. The"
    },
    {
      "Time_Start": 2202.42,
      "Time_End": 2207.42,
      "Text": " possibilities are endless. Throughout this research I have created a lot of time to develop"
    },
    {
      "Time_Start": 2210.4,
      "Time_End": 2215.7000000000003,
      "Text": " this pattern style and experimentation with debuggers and these are some of the patterns I"
    },
    {
      "Time_Start": 2215.7000000000003,
      "Time_End": 2220.7000000000003,
      "Text": " found. Here we have a dozen patterns for load library and here I have like 11 patterns for"
    },
    {
      "Time_Start": 2221.1800000000003,
      "Time_End": 2226.1800000000003,
      "Text": " get ROP address and finally 9 patterns for system. I created these patterns for ROP rocket"
    },
    {
      "Time_Start": 2229.9600000000005,
      "Time_End": 2235.86,
      "Text": " if it is not able to build a chain using one pattern it can go and try the other one. Since"
    },
    {
      "Time_Start": 2235.86,
      "Time_End": 2241.7000000000003,
      "Text": " we have a lot of patterns it is likely to succeed. If one pattern fails due to lack of ROP"
    },
    {
      "Time_Start": 2241.7000000000003,
      "Time_End": 2246.7000000000003,
      "Text": " gadgets having multiple patterns can be really helpful. Let's take a look at the demo."
    },
    {
      "Time_Start": 2250.7400000000002,
      "Time_End": 2255.7400000000002,
      "Text": " Here is a script generated by ROP rocket and there is a payload at the bottom of the script."
    },
    {
      "Time_Start": 2260.4800000000005,
      "Time_End": 2266.78,
      "Text": " We have like three push ads. We're going to stop at the third push ad. And we can finally"
    },
    {
      "Time_Start": 2266.78,
      "Time_End": 2273.8,
      "Text": " execute the push ad. We'll get inside the system. We are gem dereferencing to the system."
    },
    {
      "Time_Start": 2273.8,
      "Time_End": 2278.8,
      "Text": " And now we are inside the system. We're going to step out of that. And here we go. So"
    },
    {
      "Time_Start": 2280.7000000000003,
      "Time_End": 2285.7000000000003,
      "Text": " there we go. Thank you very much Shiva. So the purpose with this shell cool is um ROP attack"
    },
    {
      "Time_Start": 2294.5400000000004,
      "Time_End": 2301.2200000000003,
      "Text": " is to again automate the whole process so that we can have one of a multitude of of"
    },
    {
      "Time_Start": 2301.2200000000003,
      "Time_End": 2307.2000000000003,
      "Text": " possibilities and then ROP rocket if one doesn't work then there are many others that are"
    },
    {
      "Time_Start": 2307.2000000000003,
      "Time_End": 2312.3,
      "Text": " available. Uh we have created other chains as well that are not currently part of the tool"
    },
    {
      "Time_Start": 2312.3,
      "Time_End": 2318.84,
      "Text": " but will be included in the future such as uh Gitproc address at low library um URL"
    },
    {
      "Time_Start": 2318.84,
      "Time_End": 2322.94,
      "Text": " download download to file link and create process A so you can download a file from the"
    },
    {
      "Time_Start": 2322.94,
      "Time_End": 2329.7200000000003,
      "Text": " internet and then execute it. Okay so uh onto the next topic uh obfuscation of ROP gadgets."
    },
    {
      "Time_Start": 2329.7200000000003,
      "Time_End": 2336.36,
      "Text": " Now why do a lot of ROP gadgets fail? Uh sometimes it may be due to the recipe uh used to"
    },
    {
      "Time_Start": 2336.38,
      "Time_End": 2341.38,
      "Text": " generate them. Um we may need particular gadgets that simply cannot be found or it could be"
    },
    {
      "Time_Start": 2344.3,
      "Time_End": 2350.3,
      "Text": " badbytes. So badbytes could be something like you have a push ad but there are badbytes"
    },
    {
      "Time_Start": 2350.3,
      "Time_End": 2355.3,
      "Text": " there. We could also call some of these uh gadgets that have badbytes uh forbidding"
    },
    {
      "Time_Start": 2357.88,
      "Time_End": 2363.02,
      "Text": " gadgets. They're not supposed to be accessible because of uh the so called badbytes but"
    },
    {
      "Time_Start": 2363.04,
      "Time_End": 2369.02,
      "Text": " what if we were to to encode them or obfuscate them? Could we use them directly? So this is a"
    },
    {
      "Time_Start": 2369.02,
      "Time_End": 2374.82,
      "Text": " script uh created by a student of mine, Bailey Belisario, a few years back during the"
    },
    {
      "Time_Start": 2374.82,
      "Time_End": 2379.82,
      "Text": " pandemic and it was a challenging assignment and the the only push ad available wasn't"
    },
    {
      "Time_Start": 2379.82,
      "Time_End": 2386.84,
      "Text": " really something that could be easily done because of um badbytes and so he essentially"
    },
    {
      "Time_Start": 2386.86,
      "Time_End": 2393.8,
      "Text": " uh encoded it and then decoded it in memory and then used that push rat to then cause it to be"
    },
    {
      "Time_Start": 2393.8,
      "Time_End": 2400.6400000000003,
      "Text": " executed. So very clever, very uh elite if you will. And how he did that was an integer"
    },
    {
      "Time_Start": 2400.6400000000003,
      "Time_End": 2407.28,
      "Text": " overflow so that integer overflow will exceed the con- constraints of a D word and then be"
    },
    {
      "Time_Start": 2407.28,
      "Time_End": 2414.36,
      "Text": " truncated producing the desired result. So he used a found ad gadget to do that and then a"
    },
    {
      "Time_Start": 2414.38,
      "Time_End": 2419.38,
      "Text": " push um EAX return. So four very common ways to encode a value all supported by ROPROCKET,"
    },
    {
      "Time_Start": 2423.46,
      "Time_End": 2428.46,
      "Text": " XOR, NOT, NAG and uh integer overflow. So here's an example produced by ROPROCKET which"
    },
    {
      "Time_Start": 2431.06,
      "Time_End": 2437.4,
      "Text": " gives us some lovely commentary. Uh the NAG gadget and it just automates that so you can"
    },
    {
      "Time_Start": 2437.4,
      "Time_End": 2443.84,
      "Text": " specify hex 40, read write executable and it'll do the magic for you. So these are pretty"
    },
    {
      "Time_Start": 2443.86,
      "Time_End": 2449.76,
      "Text": " simple other tool- tools can do these. You have the NOT gadget there. Uh we have the XOR"
    },
    {
      "Time_Start": 2449.76,
      "Time_End": 2455.3,
      "Text": " gadget so we can weaponize that. We have a couple pops and then a XOR giving us the desired"
    },
    {
      "Time_Start": 2455.3,
      "Time_End": 2460.3,
      "Text": " result. And we also have a found XOR gadget so we can evaluate the something like XOR EAX 1"
    },
    {
      "Time_Start": 2463.4,
      "Time_End": 2470.08,
      "Text": " and figure out hey it needs uh 41 in order to create uh hex 40. And then integer overflow"
    },
    {
      "Time_Start": 2470.12,
      "Time_End": 2476.2999999999997,
      "Text": " with a found uh ad gadget so we have add EAX and some large number and the ROPROCKET will"
    },
    {
      "Time_Start": 2476.2999999999997,
      "Time_End": 2481.2999999999997,
      "Text": " calculate exactly what it needs to be to produce hex 40. And then also integer overflow where"
    },
    {
      "Time_Start": 2483.4,
      "Time_End": 2488.64,
      "Text": " we have two pops uh and then we do an add register register and in this case we're doing"
    },
    {
      "Time_Start": 2488.64,
      "Time_End": 2494.52,
      "Text": " hex 40 uh once again so you can input a desired value and the tool will just automatically"
    },
    {
      "Time_Start": 2494.52,
      "Time_End": 2501.2,
      "Text": " do this on its own. So ROPROCKET is actually very special in terms of how it generates"
    },
    {
      "Time_Start": 2501.2,
      "Time_End": 2507.4,
      "Text": " these uh integer overflows. It will have start out with 10 predetermined values if those"
    },
    {
      "Time_Start": 2507.4,
      "Time_End": 2512.72,
      "Text": " fail it will generate it from the available character set. It'll keep on doing that using"
    },
    {
      "Time_Start": 2512.72,
      "Time_End": 2519.62,
      "Text": " its own unique formula until it finds a set of two values that are free of bad bytes and"
    },
    {
      "Time_Start": 2519.62,
      "Time_End": 2526.16,
      "Text": " produce a desired uh value. So uh let's get back to our example from from uh Bailey can we"
    },
    {
      "Time_Start": 2526.16,
      "Time_End": 2531.16,
      "Text": " be elite? Uh sorry. And uh do an integer overflow to get our push ad. And so um in this"
    },
    {
      "Time_Start": 2535.04,
      "Time_End": 2540.04,
      "Text": " case we actually can so it starts out with uh uh 8 E's a rather large number and then we add"
    },
    {
      "Time_Start": 2542.48,
      "Time_End": 2548.3599999999997,
      "Text": " another uh value and that gives us an integer overflow producing 40 1 8 1 12 which is indeed"
    },
    {
      "Time_Start": 2548.36,
      "Time_End": 2553.54,
      "Text": " push ad. And so this is something that ROPROCKET can just uh automate and do in you know"
    },
    {
      "Time_Start": 2553.54,
      "Time_End": 2558.5,
      "Text": " less than a second. Makes our life a little bit easier. We can also do that with a found add"
    },
    {
      "Time_Start": 2558.5,
      "Time_End": 2563.94,
      "Text": " gadget too. It's another option. And we get the same exact result and so that push EX"
    },
    {
      "Time_Start": 2563.94,
      "Time_End": 2570.7200000000003,
      "Text": " RET allows us to access that forbidden gadget. So highly effective as a way to obscure um"
    },
    {
      "Time_Start": 2570.7200000000003,
      "Time_End": 2577.42,
      "Text": " or obfuscate ROP gadgets and so uh greatly expands the number of possibilities. Uh so the"
    },
    {
      "Time_Start": 2577.42,
      "Time_End": 2582.32,
      "Text": " tool does have a remake function so that remake function can allow us to if something"
    },
    {
      "Time_Start": 2582.32,
      "Time_End": 2588.7000000000003,
      "Text": " doesn't work um because of bad bytes we can still use it and we can remake it by encoding it"
    },
    {
      "Time_Start": 2588.7000000000003,
      "Time_End": 2594.14,
      "Text": " and then having it decode on the fly and then do a push for it. So that really really expands"
    },
    {
      "Time_Start": 2594.14,
      "Time_End": 2600.34,
      "Text": " the attack surface. So the tool is really fast. It does have parallelism to maximize"
    },
    {
      "Time_Start": 2600.34,
      "Time_End": 2605.34,
      "Text": " available cores persistence so um if you've already evaluated a uh a binary it'll save um"
    },
    {
      "Time_Start": 2606.34,
      "Time_End": 2611.34,
      "Text": " the gadgets found. And you can see some of what it looks like right there. Um and it also"
    },
    {
      "Time_Start": 2615.6400000000003,
      "Time_End": 2621.82,
      "Text": " provides emulation. Emulation is done internally. Um so it can evaluate each and every gadget"
    },
    {
      "Time_Start": 2621.82,
      "Time_End": 2626.58,
      "Text": " if it needs to to try to find something that may be suboptimal. So an optimal gadget could be"
    },
    {
      "Time_Start": 2626.58,
      "Time_End": 2631.6000000000004,
      "Text": " a very short brief gadget like uh add EBX 5 and then a less optimal one may have other uh"
    },
    {
      "Time_Start": 2632.6,
      "Time_End": 2637.6,
      "Text": " intervening lines. But it might be okay. So um the emulation can allow us to find other"
    },
    {
      "Time_Start": 2641.2999999999997,
      "Time_End": 2646.48,
      "Text": " possibilities and this is not something you would see it's just internal debugging output."
    },
    {
      "Time_Start": 2646.48,
      "Time_End": 2651.74,
      "Text": " And it also will uh emulate uh actual ROP chains. So sometimes we need to calculate the"
    },
    {
      "Time_Start": 2651.74,
      "Time_End": 2656.7599999999998,
      "Text": " distance to a parameter cause we need a pointer and so it can recursively uh do that and"
    },
    {
      "Time_Start": 2657.26,
      "Time_End": 2662.26,
      "Text": " how it will work is it will start with a guess and if it's wrong it probably will be wrong. It'll"
    },
    {
      "Time_Start": 2667.6000000000004,
      "Time_End": 2672.46,
      "Text": " try again and it'll use the output to try to get it closer and it'll keep doing that"
    },
    {
      "Time_Start": 2672.46,
      "Time_End": 2677.94,
      "Text": " recursively until it is correct. And it's smart enough that it knows when it has actually"
    },
    {
      "Time_Start": 2677.94,
      "Time_End": 2683.6400000000003,
      "Text": " achieved its goal and so that's some more internal debugging information there. And there"
    },
    {
      "Time_Start": 2683.66,
      "Time_End": 2688.4,
      "Text": " is a great deal of metadata to help facilitate that so it has return addresses, this is a"
    },
    {
      "Time_Start": 2688.4,
      "Time_End": 2693.4,
      "Text": " syscall, uh different parameters and so it can check to see um you know if we've achieved a"
    },
    {
      "Time_Start": 2695.68,
      "Time_End": 2700.68,
      "Text": " certain particular goal. And so calculating distances for certain types of syscalls uh or"
    },
    {
      "Time_Start": 2703.62,
      "Time_End": 2710.12,
      "Text": " even some of the what what Shiva did is going to be a nec- necessary for success. And so"
    },
    {
      "Time_Start": 2710.14,
      "Time_End": 2715.14,
      "Text": " that emulation makes some of this possible. Without this emulation we couldn't do that so uh"
    },
    {
      "Time_Start": 2717.2799999999997,
      "Time_End": 2722.2799999999997,
      "Text": " it is immensely useful. Uh we are we come to the conclusion of our talk. Uh the tool is not"
    },
    {
      "Time_Start": 2724.52,
      "Time_End": 2729.16,
      "Text": " up right now but it should be up uh about sometime in the next week or so. Uh so go ahead and"
    },
    {
      "Time_Start": 2729.16,
      "Time_End": 2734.8599999999997,
      "Text": " take a picture of that if you like and um be sure to check it out and if you have any"
    },
    {
      "Time_Start": 2734.88,
      "Time_End": 2739.88,
      "Text": " feedback um be sure to let us know. Uh we are happy to meet down there and take any"
    },
    {
      "Time_Start": 2742.6200000000003,
      "Time_End": 2746.92,
      "Text": " questions I think we're about out of our time so uh thank you very much for attending our"
    },
    {
      "Time_Start": 2746.92,
      "Time_End": 2749.4,
      "Text": " session and hope you enjoy the rest of your DEF CON."
    },
    {
      "Time_Start": 2749.4,
      "Time_End": 2754.4,
      "Text": " Applause"
    }
  ]
}