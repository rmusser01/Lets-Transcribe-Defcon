**Introduction**:
- Exploring **Linux Memory Manipulation** for **Stealth and Evasion** in **constrained environments** like **read-only**, **no-exec**, and **distroless setups**.
- Techniques can be used by **malware** to **evade detection** and **remain stealthy**.

**Overview of Challenges and Prevalence**:
- **Unique challenges** in constrained environments and their **increasing prevalence**.
- **Exploiting vulnerabilities** within these constraints and **novel methods** for manipulating Linux memory.

**Presentation Content**:
- **Real-world examples** and **step-by-step explanations** of techniques.
- **Countermeasures** and **mitigation strategies** for security professionals.
- **Valuable insights** into the latest advancements in Linux memory manipulation.

**Speaker Introduction**:
- **Carlos Palop**, **technical leader** at **HALBORN**.
- Captain of the **Spanish team** at the **European Cybersecurity Conference**.
- **Member** of the **winning European team** at the **International Cybersecurity Challenge**.
- **Author** of *Hot Trees, Hot Trees Clouds and Peace*.

**What Will Be Covered**:
- **Introduction** to the **technique**.
- **Initial technique** called **DDXSEC**.
- **Demos** of the technique in action.
- **New technique** recently developed.

**How It Started**:
- **Containers** were being moved to **distressed containers**, which were considered more **secure and hack-proof**.
- **Difficulties** in **exploiting vulnerabilities** and **executing code** in distressed containers due to **limited access** and **constraints**.
- **Question** arose: Is distressed the new hackable system?

**Exploring Distressed Containers**:
- **Lack of access** to common tools like **SH** and **bus**.
- **Kubernetes** adds an extra layer of protection with **read-only file systems** and **no-exec bit**.
- **Idea**: Can we **load and execute something in memory** to bypass these protections?

**State of the Art in Memory Manipulation**:
- **Blog** from **Sector 7** on **overwriting memory** using the `memfd_create` syscall.
- **David Buchanan's** technique to **write to bash memory** and **execute native code**.
- **Need** for a more **reliable** and **versatile** technique.

**DDXSEC Technique**:
- **Trick DD** into **overwriting its own memory** through the `memfile` in the `broker` file system.
- **Benefit**: No need to **disable ASLR** as the address to write to is known beforehand.
- **Parse the binary**, **prepare the memory**, and **jump to the loader's entry point**.

**Demo 1: Bypassing Protections with DDX**:
- **Read-only root file system** and **no-exec SHM**.
- **Using DDX** to **load and execute LS**, **QCTL**, and other binaries.
- **Demonstration** of the technique's effectiveness.

**Improving DDXSEC**:
- **POSIX file descriptors** have a **quirk** when inherited â€“ they share the same structure in the kernel.
- **Using DD** to **seek** and then **write** to a specific offset in memory.
- **Other seekers** like `TAIL` or `CMP` can be used, making the technique more **resilient** and **difficult to detect**.

**Demo 2: Using Other Seekers**:
- **Demonstration** of using **alternative seekers** like `CMP` to load and execute binaries.
- **Bypassing EDR** and other security measures.

**Understanding Distressed Containers**:
- **Minimum needed packages** and **dependencies** to run specific applications.
- **Removal** of **unnecessary libraries**, **commands**, and **packages** to reduce the container's **size** and **attack surface**.
- **Example**: Google's **Node Distressed Container** and **Chainwar Distressed Images**.

**Demo 3: Distressed Container Environment**:
- **Kubernetes environment** with **distressed containers** and an **Ubuntu machine**.
- **Demonstration** of a **vulnerable Python bot** running a web server.
- **Exploiting a prototype pollution vulnerability** to get a **Python rubber shell**.

**Bypassing Protections in Distressed Containers**:
- **Scripting languages** like **Python**, **Ruby**, and **Perl** can be used to **call raw syscalls**.
- **Project**: Transferring **Python**, **Ruby**, or **Perl** code to **execute binaries in memory**.

**Demo 4: Executing in Memory with Scripting Languages**:
- **Demonstration** of using **Python** to **execute kubectl in memory**.
- **No need** for **DDXSEC** in this case.

**Node Distressed Container Example**:
- **Node server** with an **RC vulnerability** but **no SH**.
- **Node rubber shell** can be obtained and used to **enumerate files** and **execute code in memory**.
- **Using ddexec** to **modify a Node process** and **load/execute anything desired**.

**Demo 5: Node Distressed Container**:
- **Live demonstration** of exploiting a **Node server** with a **prototype pollution vulnerability**.
- **Using ddexec** to **load and execute kubectl** in a **Node digital list container**.

**PHP Distressed Container**:
- **No SH** or **bus** available.
- **PHP shell** and **PHP rebel shell** can be obtained.
- **Using ddxsec** to **load and execute binaries** in a **PHP digital list**.

**Demo 6: PHP Distressed Container**:
- **Live demonstration** of exploiting a **PHP web application** with an **RC vulnerability**.
- **Loading a BusyBox shell** into the **PHP rebel shell**.

**Bonus Technique: MEMDL_OPEN**:
- **Paper** from **2004** on **tricking the loader** into **thinking the binary is somewhere else**.
- **Hooking** into **syscalls** and **faking file descriptors** to **load and execute binaries**.
- **Implementation** by **mimics** on **GitHub** using **code signatures**.

**Diago's Technique**:
- **Installing a signal handler** for the **SIGILL** signal to **hook into syscalls**.
- **Replacing syscall instructions** with **invalid ones** and **faking the syscalls**.
- **Proof of concept** in **C** and a **shellcode** implementation.

**Demo 7: MEMDL_OPEN**:
- **Loading and executing LS** using the **MEMDL_OPEN technique**.
- **Faster** than **DDXSEC** but with some **limitations** and **compatibility issues**.

**Conclusion**:
- **Links** to all the **tools** and **demos** mentioned in the talk.
- **Challenge** and **invitation** for attendees to solve and understand.
- **Upcoming** **Hacktree AWS Red Team Expert certification**.
- **Thanks** to **DEF CON** and the **community**.