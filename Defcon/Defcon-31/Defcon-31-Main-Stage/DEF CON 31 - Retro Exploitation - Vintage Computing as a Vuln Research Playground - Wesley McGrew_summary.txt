**Introduction**
- Talk focuses on **historical software** from the **early '90s** and **late '80s**
- Specifically, software for the **Commodore Amiga**, a **16-bit** system
- Using vintage computing platforms as a **playground** for learning about **vulnerability research** and **exploiting**

**Vintage Computing Environments**
- Provide an interesting and fun **playground environment** for learning and experimenting with **reverse engineering**, **vulnerability discovery**, and **exploit development**
- Serve as an introduction to **hacking** for those new to the field
- Allow for experimentation without the complexity and security measures of modern systems

**Commodore Amiga**
- One of the first systems to use **C** as a first-class language, have a **multitasking OS**, and a **TCP/IP stack**
- Has a dedicated following of users and software even today
- Offers a unique system among retro systems

**Retrocomputing Interest**
- Large interest in vintage and retrocomputing systems, with many **YouTube channels** and **Twitter users** dedicated to the topic
- People collect hardware, software, and documentation, and work on preservation and restoration
- There is a huge body of software from the '80s and '90s that is no longer in active use but is still interesting to explore

**Advantages of Using Vintage Systems**
- **Emulated environments** are inexpensive and easily accessible, requiring just a few gigabytes of space
- Provide a **wholly self-contained environment** for research with comprehensive **emulation**, **documentation**, and **preserved software archives**
- Offer an **easy-to-use toolset** with built-in **debuggers** for emulation developers
- Pre-date modern security awareness and exploit mitigations, providing a simpler environment for learning

**Potential Benefits**
- Environment for exploring software with the **longest computing history**
- High yield of **zero-day findings** due to less competition and more vulnerable software
- No ethical concerns as most vintage software is no longer in active use
- Legacy systems using similar architectures may still be in operation, providing real-world applicability

**Motorola 68K Processors**
- Found in a variety of systems, including printers, industrial controllers, networking equipment, automotive systems, and more
- The Amiga is one of the best desktop computer platforms for tinkering with the 68K
- Offers a range of processors, from the 6820 to the 6860

**Amiga Hardware**
- Custom chipsets, such as Paula, Denise, Lisa, and Agnes, are what make an Amiga unique
- Memory architecture involves **chip RAM** (shared between the 68K and custom chips) and **fast RAM** (exclusive to the 68K)
- Available in all-in-one models and desktop models, with the latter being more common in the US for video production

**Amiga OS**
- Classic Amiga OS (for 68K Amigas) is a perfect playground for vulnerability research
- No virtual memory, multi-user capabilities, or complex page tables to understand
- Preemptive, multitasking OS, allowing for seamless switching between processes
- Rich file formats, parsers, and communication software, providing ample targets for research

**Modern Modifications**
- **PiStorm** accelerator replaces the 68K with a Raspberry Pi, providing faster clock speeds and a smoother experience
- **Network adapters**, **storage solutions**, and **FPGA recreations** of the entire system are also available
- **WinUAE** is an incredibly accurate Amiga emulator, providing easy access to low-level debug features and save states

**Setting up WinUAE**
- Requires configuration of CPU, speed, floating-point unit, just-in-time recompilation, chipset, ROM, memory, hard drives, etc.
- Can add hardware features like BSD Sockets library for networking and RTG graphics
- Kickstart ROM should match the OS version on disk to avoid wasting memory

**Resources for Amiga OS**
- Hyperion continues to release patches and updates for Amiga OS, with the latest version being 3.2.2
- Development environment includes SAS C compiler, DevPack assembler, and matching NDK for headers and data structures
- Old computer books and archives like Tosec and Archive.org provide valuable documentation and software

**Amiga OS Architecture**
- EXEC library handles most communication with hardware and is crucial for porting Amiga OS
- Libraries loaded into memory have a base address and a jump table for API calls
- Sys base at hexadecimal address four is the bootstrap into the system

**Case Study: GUI FTP**
- Simple FTP client software from the early '90s, pre-dating awareness of buffer overflow vulnerabilities
- Long server welcome messages, file names, and file lists cause crashes
- By connecting to a local FTP server with a payload, it is possible to gain control over the program counter and execute code

**Exploit Development**
- Creating a minimal FTP server allows for easy insertion of exploit code
- Code execution clobbers the first 56 bytes, providing a limited range for payload
- Code reuse technique is employed, jumping to the stack pointer to find reliable code execution
- Payload is split across two code regions, with the first acting as a trampoline to move the stack pointer and jump to the second part
- Shellcode writes a file to disk, taking advantage of Amiga APIs
- At the end, the system is put to sleep to avoid crashing

**Conclusion**
- Vintage systems provide an accessible and educational environment for learning about vulnerability research and exploitation
- They offer a fun and nostalgic alternative to modern systems, allowing for exploration and experimentation
- By understanding the basics of these simpler systems, one can build a foundation for tackling more complex architectures