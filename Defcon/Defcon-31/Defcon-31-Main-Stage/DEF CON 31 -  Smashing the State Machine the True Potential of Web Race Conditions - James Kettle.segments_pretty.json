{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 9.040000000000001,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Thank you. Thanks for coming. I know it's an early start. Good morning and welcome to"
    },
    {
      "Time_Start": 9.040000000000001,
      "Time_End": 15.08,
      "Text": " Smashing the State Machine, the True Potential of Web Race Conditions."
    },
    {
      "Time_Start": 15.08,
      "Time_End": 20.88,
      "Text": " Have you ever seen a vulnerability that made absolutely no sense? Something that didn't"
    },
    {
      "Time_Start": 20.88,
      "Time_End": 27.6,
      "Text": " just leave you wondering why would anyone code that, but asking how is it even possible"
    },
    {
      "Time_Start": 27.6,
      "Time_End": 33.92,
      "Text": " to write code that has that effect? Maybe you even got hold of the code and stared at"
    },
    {
      "Time_Start": 33.92,
      "Time_End": 40.44,
      "Text": " it for hours and it still made no sense. And perhaps if you showed it to somebody else,"
    },
    {
      "Time_Start": 40.44,
      "Time_End": 46.68000000000001,
      "Text": " they'd say something like, oh, it must be a race condition. In this session, I'm going"
    },
    {
      "Time_Start": 46.68000000000001,
      "Time_End": 53.88,
      "Text": " to share with you tools and techniques to discover and exploit that kind of race condition."
    },
    {
      "Time_Start": 53.88,
      "Time_End": 58.160000000000004,
      "Text": " Let's start by surveying what we do understand. What race conditions have you seen or exploited"
    },
    {
      "Time_Start": 58.160000000000004,
      "Time_End": 65.16,
      "Text": " in the wild? Maybe things like reusing a single use voucher multiple times or bypassing some"
    },
    {
      "Time_Start": 66.32000000000001,
      "Time_End": 72.88,
      "Text": " kind of rate limit or reviewing a single product multiple times. One of my favorite ones that"
    },
    {
      "Time_Start": 72.88,
      "Time_End": 79.88,
      "Text": " I found is I noticed that you can reuse a valid single reCAPTCHA solution multiple times"
    },
    {
      "Time_Start": 80.36,
      "Time_End": 86.32,
      "Text": " within a short time window. And when I reported that to Google, they were like, oh, yeah,"
    },
    {
      "Time_Start": 86.32,
      "Time_End": 91.16,
      "Text": " that's not good, but, well, unfortunately our system is so distributed that we can't"
    },
    {
      "Time_Start": 91.16,
      "Time_End": 98.16,
      "Text": " patch this. So that technique still works on a bunch of websites today. But all of these"
    },
    {
      "Time_Start": 98.32,
      "Time_End": 105.19999999999999,
      "Text": " examples could be classed as limit overruns, right? They're all about doing something more"
    },
    {
      "Time_Start": 105.2,
      "Time_End": 111.44,
      "Text": " times than you're supposed to. But if you go digging through every post that you can"
    },
    {
      "Time_Start": 111.44,
      "Time_End": 118.44,
      "Text": " find on the topic, you'll land on one called race conditions on the web by Josip Frankovic."
    },
    {
      "Time_Start": 118.48,
      "Time_End": 125.36,
      "Text": " And in this post, he describes four vulnerabilities and three of them are regular limit overruns"
    },
    {
      "Time_Start": 125.36,
      "Time_End": 132.36,
      "Text": " and one of them is different. The vulnerability that he found took two months just for him"
    },
    {
      "Time_Start": 132.84,
      "Time_End": 139.12,
      "Text": " and Facebook's security team to figure out how to replicate it. And the issue was that"
    },
    {
      "Time_Start": 139.12,
      "Time_End": 144.56,
      "Text": " sometimes when changing your email, Facebook would put two confirmation codes for two different"
    },
    {
      "Time_Start": 144.56,
      "Time_End": 151.56,
      "Text": " addresses using two different parameter names in a single email. Now, I had no idea what"
    },
    {
      "Time_Start": 152.20000000000002,
      "Time_End": 156.0,
      "Text": " was happening here and I don't think they did either, but one thing was clear. This"
    },
    {
      "Time_Start": 156.12,
      "Time_End": 163.12,
      "Text": " wasn't a limit overrun vulnerability. And so last September, six years after I first"
    },
    {
      "Time_Start": 163.8,
      "Time_End": 169.76,
      "Text": " read that blog post, I decided to try and figure out what happened. And gradually came"
    },
    {
      "Time_Start": 169.76,
      "Time_End": 174.0,
      "Text": " to realize that the race condition attacks that we all know and love already are just"
    },
    {
      "Time_Start": 174.0,
      "Time_End": 180.8,
      "Text": " toy vulnerabilities compared with what else is out there. So in this session, I'm going"
    },
    {
      "Time_Start": 180.8,
      "Time_End": 186.16000000000003,
      "Text": " to show you the true potential of this attack class, tools and techniques to achieve this"
    },
    {
      "Time_Start": 186.16000000000003,
      "Time_End": 191.16000000000003,
      "Text": " potential, and case studies and a live demo to show some of the insanity that's out there"
    },
    {
      "Time_Start": 191.16000000000003,
      "Time_End": 196.96,
      "Text": " waiting for you to discover it. After that, I'll share where things can be taken further,"
    },
    {
      "Time_Start": 196.96,
      "Time_End": 203.12,
      "Text": " how to prevent these attacks and the key takeaways leaving five minutes for questions. On certain"
    },
    {
      "Time_Start": 203.12,
      "Time_End": 209.48000000000002,
      "Text": " slides you'll see there's a mortar board icon and that just means I've designed a free online"
    },
    {
      "Time_Start": 209.56000000000003,
      "Time_End": 215.84000000000003,
      "Text": " replica of this vulnerability and published it in the web security academy. So you can"
    },
    {
      "Time_Start": 215.84000000000003,
      "Time_End": 222.84000000000003,
      "Text": " practice exploiting that vulnerability on a live system for yourself. Now, to communicate"
    },
    {
      "Time_Start": 225.00000000000003,
      "Time_End": 230.84000000000003,
      "Text": " the true potential of this attack class, I'm going to use a multi-step vulnerability that"
    },
    {
      "Time_Start": 230.84000000000003,
      "Time_End": 237.04000000000002,
      "Text": " I discovered by accident a while back. I noticed that when I logged into this website, it asked"
    },
    {
      "Time_Start": 237.07999999999998,
      "Time_End": 242.72,
      "Text": " me to select a role before proceeding to the application. So I thought, okay, if I visualize"
    },
    {
      "Time_Start": 242.72,
      "Time_End": 248.76,
      "Text": " the state machine for the user's role, it will look something like this. And well, maybe"
    },
    {
      "Time_Start": 248.76,
      "Time_End": 253.23999999999998,
      "Text": " we can just jump from the role selection page to the back end without choosing a role and"
    },
    {
      "Time_Start": 253.23999999999998,
      "Time_End": 258.12,
      "Text": " get some kind of privilege escalation going. And I tried that and it didn't work. And I"
    },
    {
      "Time_Start": 258.12,
      "Time_End": 262.28,
      "Text": " thought, well, I guess it's secure then. I mean, look at that diagram. It looks pretty"
    },
    {
      "Time_Start": 262.28000000000003,
      "Time_End": 269.28000000000003,
      "Text": " secure, right? But the diagram was actually wrong. It's missing a state because it's not"
    },
    {
      "Time_Start": 270.6,
      "Time_End": 277.6,
      "Text": " zoomed in enough because it's assuming that the get request to the role selection page"
    },
    {
      "Time_Start": 277.6,
      "Time_End": 284.6,
      "Text": " doesn't change the application state. And as it so happened, for reasons that I don't"
    },
    {
      "Time_Start": 284.96000000000004,
      "Time_End": 290.96000000000004,
      "Text": " entirely understand, the application was creating every session with administrative privileges"
    },
    {
      "Time_Start": 290.96,
      "Time_End": 298.0,
      "Text": " and then the get request was revoking those privileges. So by failing to zoom in, I almost"
    },
    {
      "Time_Start": 298.0,
      "Time_End": 304.68,
      "Text": " missed quite a serious vulnerability. But, you know, that's just my bad, right? Because"
    },
    {
      "Time_Start": 304.68,
      "Time_End": 309.96,
      "Text": " everyone knows that multi-step sequences are a wonderful source for all kinds of serious"
    },
    {
      "Time_Start": 309.96,
      "Time_End": 316.12,
      "Text": " vulnerabilities and so it's essential to always zoom in as much as possible and test every"
    },
    {
      "Time_Start": 316.16,
      "Time_End": 323.16,
      "Text": " possible permutation of a process like this. But researching race conditions, I found myself"
    },
    {
      "Time_Start": 324.12,
      "Time_End": 329.12,
      "Text": " looking back at this finding and thinking, well, is that the furthest that we can zoom"
    },
    {
      "Time_Start": 329.12,
      "Time_End": 336.12,
      "Text": " in or can we go further still? What if the application had dropped our privileges immediately"
    },
    {
      "Time_Start": 336.16,
      "Time_End": 342.48,
      "Text": " using a second database statement? There would still be maybe one millisecond time window"
    },
    {
      "Time_Start": 342.48,
      "Time_End": 349.48,
      "Text": " where every session had administrator privileges, but I would never have discovered it. And"
    },
    {
      "Time_Start": 350.20000000000005,
      "Time_End": 355.52000000000004,
      "Text": " that's a little bit of a scary thought because, well, any login form could have that vulnerability."
    },
    {
      "Time_Start": 355.52000000000004,
      "Time_End": 361.84000000000003,
      "Text": " It doesn't need to be a multi-step login. And actually worse than that, it shows any"
    },
    {
      "Time_Start": 361.84000000000003,
      "Time_End": 368.84000000000003,
      "Text": " HTTP request might be transitioning the application through invisible vulnerable substates like"
    },
    {
      "Time_Start": 369.16,
      "Time_End": 375.96000000000004,
      "Text": " that one and these could potentially lead to some serious attacks. In other words, we"
    },
    {
      "Time_Start": 375.96000000000004,
      "Time_End": 382.96000000000004,
      "Text": " all know that multi-step sequences are really dangerous. And with race conditions, everything"
    },
    {
      "Time_Start": 383.48,
      "Time_End": 390.44000000000005,
      "Text": " is potentially multi-step. That is the true potential of web race conditions and now it's"
    },
    {
      "Time_Start": 390.44000000000005,
      "Time_End": 397.44000000000005,
      "Text": " time to start hacking some stuff. To discover a substate, you need to know"
    },
    {
      "Time_Start": 399.00000000000006,
      "Time_End": 404.52000000000004,
      "Text": " we need a collision. That means we need two requests, one to trigger the substate or the"
    },
    {
      "Time_Start": 404.52000000000004,
      "Time_End": 409.88000000000005,
      "Text": " race window and another that accesses the same resource at the same time. So in the"
    },
    {
      "Time_Start": 409.88000000000005,
      "Time_End": 415.24,
      "Text": " example we just saw, that might mean trying to log in and access the admin panel simultaneously."
    },
    {
      "Time_Start": 415.24,
      "Time_End": 421.52000000000004,
      "Text": " However, there's a major barrier to making this happen which has plagued this attack"
    },
    {
      "Time_Start": 421.52000000000004,
      "Time_End": 427.24,
      "Text": " class ever since it was invented pretty much which is network jitter which randomly delays"
    },
    {
      "Time_Start": 427.24,
      "Time_End": 432.48,
      "Text": " our requests inconsistently meaning that the race windows don't line up and the"
    },
    {
      "Time_Start": 432.48,
      "Time_End": 438.6,
      "Text": " vulnerabilities don't get discovered. To solve this problem, I've developed the single packet"
    },
    {
      "Time_Start": 438.6,
      "Time_End": 445.6,
      "Text": " attack which lets you make 20 to 30 HTTP requests arrive at the server simultaneously"
    },
    {
      "Time_Start": 447.72,
      "Time_End": 455.52,
      "Text": " regardless of how bad the network jitter is on your connection. Under the hood, this technique"
    },
    {
      "Time_Start": 455.52,
      "Time_End": 460.88,
      "Text": " is all about TCP and HTTP. The previously best known technique was called last byte"
    },
    {
      "Time_Start": 460.88,
      "Time_End": 466.84,
      "Text": " synchronization and it takes advantage of the fact that web servers generally won't"
    },
    {
      "Time_Start": 466.84,
      "Time_End": 473.52,
      "Text": " start to process a request until the whole request has arrived. So with last byte sync,"
    },
    {
      "Time_Start": 473.52,
      "Time_End": 478.76,
      "Text": " you withhold the final byte of each request and that makes the final packet of each request"
    },
    {
      "Time_Start": 478.76,
      "Time_End": 485.59999999999997,
      "Text": " nice and small and it makes the jitter not quite so bad but it only goes so far. But a"
    },
    {
      "Time_Start": 485.59999999999997,
      "Time_End": 491.56,
      "Text": " couple years back, I read an academic white paper called timeless timing attacks and there"
    },
    {
      "Time_Start": 491.56,
      "Time_End": 499.56,
      "Text": " they noticed that with HTTP 2, you can actually stuff two entire requests into a single TCP"
    },
    {
      "Time_Start": 499.56,
      "Time_End": 504.68,
      "Text": " packet. And they used that for timing attacks which was pretty cool. But I was wondering,"
    },
    {
      "Time_Start": 504.68,
      "Time_End": 511.6,
      "Text": " well, can we adapt this and use it for base conditions? There's only one barrier here"
    },
    {
      "Time_Start": 511.6,
      "Time_End": 517.8,
      "Text": " really which is to find a base condition reliably thanks to factors like server side jitter,"
    },
    {
      "Time_Start": 517.8,
      "Time_End": 524.72,
      "Text": " we need more than two requests. So what I did was I took these two techniques and smushed"
    },
    {
      "Time_Start": 524.72,
      "Time_End": 532.08,
      "Text": " them together to create a single packet attack which completes 20 to 30 requests in a single"
    },
    {
      "Time_Start": 532.12,
      "Time_End": 538.2,
      "Text": " packet eliminating network jitter. And I've just released this in an update to the open"
    },
    {
      "Time_Start": 538.2,
      "Time_End": 544.2,
      "Text": " source tool turbo intruder. Now, this technique frankly is pretty obvious. And actually I was"
    },
    {
      "Time_Start": 547.96,
      "Time_End": 553.5,
      "Text": " like this is so obvious and I was like, well, I wonder if anyone else has already done it."
    },
    {
      "Time_Start": 553.5,
      "Time_End": 557.9200000000001,
      "Text": " And I Googled and it turns out someone else implemented something quite similar for a"
    },
    {
      "Time_Start": 557.9599999999999,
      "Time_End": 563.9599999999999,
      "Text": " master's project back in 2020 but nobody noticed. So why is this, why am I so excited about"
    },
    {
      "Time_Start": 566.8399999999999,
      "Time_End": 574.04,
      "Text": " this technique? Well, it's because this isn't just some cool implementation trick. After"
    },
    {
      "Time_Start": 574.04,
      "Time_End": 580.2199999999999,
      "Text": " refining this technique over months of research, it now works on all major web servers. I can"
    },
    {
      "Time_Start": 580.2199999999999,
      "Time_End": 586.0799999999999,
      "Text": " still fit the entire algorithm on a single slide. And ultimately it brings insane"
    },
    {
      "Time_Start": 586.12,
      "Time_End": 591.62,
      "Text": " performance in a parcel that's so easy to implement, I think it will end up in all major"
    },
    {
      "Time_Start": 591.62,
      "Time_End": 597.76,
      "Text": " web testing tools. The reason it's so easy to implement is that thanks to some creative"
    },
    {
      "Time_Start": 597.76,
      "Time_End": 603.5400000000001,
      "Text": " abuse of Nagle's algorithm which is in all operating system network stacks, you don't"
    },
    {
      "Time_Start": 603.5400000000001,
      "Time_End": 610.08,
      "Text": " need to code a custom TCP or TLS stack. You can just take a HB2 library and bolt this"
    },
    {
      "Time_Start": 610.08,
      "Time_End": 616.0400000000001,
      "Text": " feature onto the site. If you're tempted to make your own version, I'd say go for it."
    },
    {
      "Time_Start": 616.04,
      "Time_End": 621.9599999999999,
      "Text": " And I think Golang's HB2 stack is probably one of the easiest to extend in that manner."
    },
    {
      "Time_Start": 621.9599999999999,
      "Time_End": 626.12,
      "Text": " And I'm really looking forward to seeing where other people take this technique in the"
    },
    {
      "Time_Start": 626.12,
      "Time_End": 630.4599999999999,
      "Text": " future because it can definitely be developed further. But of course the thing I'm most"
    },
    {
      "Time_Start": 630.4599999999999,
      "Time_End": 637.3399999999999,
      "Text": " excited about is the performance. So to benchmark this technique, I repeatedly sent a"
    },
    {
      "Time_Start": 637.3399999999999,
      "Time_End": 644.62,
      "Text": " batch of 20 requests from Melbourne to Dublin and I measured the gap in the execution"
    },
    {
      "Time_Start": 644.62,
      "Time_End": 650.24,
      "Text": " time stamp of the first and last requests to reach the server in each batch. In other"
    },
    {
      "Time_Start": 650.24,
      "Time_End": 658.24,
      "Text": " words, how close together the whole batch landed. And using last by sync, I saw a median"
    },
    {
      "Time_Start": 658.24,
      "Time_End": 664.04,
      "Text": " spread of 4 milliseconds and a standard deviation of 3 which is to be honest, not that"
    },
    {
      "Time_Start": 664.04,
      "Time_End": 668.66,
      "Text": " bad. It's better than I expected. I think that's because I had data centers at both ends"
    },
    {
      "Time_Start": 668.66,
      "Time_End": 673.16,
      "Text": " of this benchmark and if you were using Australian consumer broadband, you might have a"
    },
    {
      "Time_Start": 673.1999999999999,
      "Time_End": 680.24,
      "Text": " different experience. And then I retried it with a single packet attack and saw a median"
    },
    {
      "Time_Start": 680.24,
      "Time_End": 687.12,
      "Text": " spread of 1 millisecond and a standard deviation of 0.3. In other words, the majority of"
    },
    {
      "Time_Start": 687.12,
      "Time_End": 692.24,
      "Text": " these 20 requests traveling 17,000 kilometers were getting executed in the same"
    },
    {
      "Time_Start": 692.24,
      "Time_End": 698.12,
      "Text": " millisecond on the target server. In terms of what that means in practice, well, you"
    },
    {
      "Time_Start": 698.12,
      "Time_End": 704.12,
      "Text": " could say, okay, it makes this technique 4 to 10 times more effective than last by sync. Or"
    },
    {
      "Time_Start": 704.12,
      "Time_End": 710.92,
      "Text": " on one real vulnerability that I found, I was able to replicate the issue within 30"
    },
    {
      "Time_Start": 710.92,
      "Time_End": 717.24,
      "Text": " seconds using single packet attack and it took over two hours of automated attempts to"
    },
    {
      "Time_Start": 717.24,
      "Time_End": 723.62,
      "Text": " replicate the same issue using last by sync. In other words, if you want to kind of"
    },
    {
      "Time_Start": 723.62,
      "Time_End": 728.66,
      "Text": " summarize this up in a little sound bite, I would say by eliminating network jitter, the"
    },
    {
      "Time_Start": 728.66,
      "Time_End": 736.66,
      "Text": " single packet attack makes remote race conditions local. Now that we've solved network"
    },
    {
      "Time_Start": 736.66,
      "Time_End": 741.32,
      "Text": " jitter, it's time to go hunting for some bugs. Now limit overrun vulnerabilities are easy to"
    },
    {
      "Time_Start": 741.32,
      "Time_End": 747.92,
      "Text": " find. You look for a limit, you try and overrun it. But going beyond that, things get a bit"
    },
    {
      "Time_Start": 747.92,
      "Time_End": 754.16,
      "Text": " trickier. And after months of manual testing and discovering every possible pitfall, I've"
    },
    {
      "Time_Start": 754.16,
      "Time_End": 758.3399999999999,
      "Text": " developed the following three\u2011step methodology to find these bugs reasonably"
    },
    {
      "Time_Start": 758.3399999999999,
      "Time_End": 764.66,
      "Text": " efficiently. First you predict where you might have potential collisions. Then you probe"
    },
    {
      "Time_Start": 764.66,
      "Time_End": 769.3,
      "Text": " those places to identify clues that there's a substate there. And finally, you prove the"
    },
    {
      "Time_Start": 769.3,
      "Time_End": 776.26,
      "Text": " concept by figuring out what happened and using that knowledge to build an exploit."
    },
    {
      "Time_Start": 777.1,
      "Time_End": 785.18,
      "Text": " Prediction is just about efficiency. In theory, because everything is multi\u2011step, every"
    },
    {
      "Time_Start": 785.18,
      "Time_End": 790.72,
      "Text": " single request is an arbitrary complex multi\u2011step process, we ought to test every possible"
    },
    {
      "Time_Start": 790.72,
      "Time_End": 795.42,
      "Text": " combination of end points on the entire website and any other websites that have the same"
    },
    {
      "Time_Start": 795.42,
      "Time_End": 801.68,
      "Text": " back end. But that's not very practical. So instead, we're going to home in on places"
    },
    {
      "Time_Start": 801.6800000000001,
      "Time_End": 807.6800000000001,
      "Text": " likely to have collisions that have serious consequences. After doing that, we can"
    },
    {
      "Time_Start": 807.6800000000001,
      "Time_End": 813.1,
      "Text": " furthermore rule out end points that don't have as much collision potential. So for"
    },
    {
      "Time_Start": 813.1,
      "Time_End": 818.22,
      "Text": " example, two threads that are editing a single piece of data at the same time, that could be"
    },
    {
      "Time_Start": 818.22,
      "Time_End": 822.1,
      "Text": " quite interesting. Whereas if the two threads are just depending to the same piece of"
    },
    {
      "Time_Start": 822.1,
      "Time_End": 829.6,
      "Text": " data, that's less likely to have an interesting outcome. Similarly, you can ask, are these"
    },
    {
      "Time_Start": 829.6,
      "Time_End": 835.52,
      "Text": " requests going to be editing the same record in the database? If the password reset"
    },
    {
      "Time_Start": 835.52,
      "Time_End": 841.86,
      "Text": " system is storing tokens in the users table, then if you do two resets for two different"
    },
    {
      "Time_Start": 841.86,
      "Time_End": 846.36,
      "Text": " users at the same time, then two different rows of this table are going to be edited and"
    },
    {
      "Time_Start": 846.36,
      "Time_End": 850.98,
      "Text": " you're not going to have a collision. Meanwhile, if it's a password reset system that"
    },
    {
      "Time_Start": 850.98,
      "Time_End": 857.26,
      "Text": " maybe SMSs you a pin and it stores the pin in your session, then you can use your single"
    },
    {
      "Time_Start": 857.3,
      "Time_End": 862.8,
      "Text": " session to do resets for two users and cause a collision and maybe something interesting"
    },
    {
      "Time_Start": 862.8,
      "Time_End": 868.8,
      "Text": " will happen. Once you've built your requests, it's time to just take them and probe for"
    },
    {
      "Time_Start": 871.22,
      "Time_End": 877.14,
      "Text": " clues. The essential thing here is that it's quite easy to fail to recognize a clue. So"
    },
    {
      "Time_Start": 877.14,
      "Time_End": 882.92,
      "Text": " the first step is to benchmark the normal standard behavior of the application by sending"
    },
    {
      "Time_Start": 883.8000000000001,
      "Time_End": 889.2600000000001,
      "Text": " your requests one at a time with a delay between each of them so you don't trigger any races."
    },
    {
      "Time_Start": 889.2600000000001,
      "Time_End": 894.58,
      "Text": " And then you just resend them all at once using the single packet attack and look for"
    },
    {
      "Time_Start": 894.58,
      "Time_End": 901.6600000000001,
      "Text": " anomalies, clues, any deviation from the behavior that you saw during the baseline. If you"
    },
    {
      "Time_Start": 901.6600000000001,
      "Time_End": 906.0400000000001,
      "Text": " don't see any, it might mean that they're secure or it could just mean that you need to tune"
    },
    {
      "Time_Start": 906.0400000000001,
      "Time_End": 912.46,
      "Text": " your attack timing which I'll talk more about in a case study later on. Finally, by this"
    },
    {
      "Time_Start": 912.5,
      "Time_End": 918.08,
      "Text": " point we should have found an anomaly. So all you need to do, which is often the hardest"
    },
    {
      "Time_Start": 918.08,
      "Time_End": 924.62,
      "Text": " part, is actually understand what happened, clean it up and replicate the behavior and"
    },
    {
      "Time_Start": 924.62,
      "Time_End": 931.96,
      "Text": " explore the impact. Now, a word of warning here. Exploring the impact might sound kind of"
    },
    {
      "Time_Start": 931.96,
      "Time_End": 938.12,
      "Text": " obvious, but if you're doing this methodology right and being ambitious with it, you're"
    },
    {
      "Time_Start": 938.12,
      "Time_End": 943.44,
      "Text": " going to run into some quite weird and unfamiliar behavior and as a result the path to"
    },
    {
      "Time_Start": 943.44,
      "Time_End": 949.44,
      "Text": " maximum impact may be quite hard to find. So I would suggest thinking of the behavior you"
    },
    {
      "Time_Start": 952.54,
      "Time_End": 958.74,
      "Text": " found as a structural weakness and looking throughout the application to find security"
    },
    {
      "Time_Start": 958.74,
      "Time_End": 963.48,
      "Text": " relevant features that rely on that structure and also don't just stop and report the first"
    },
    {
      "Time_Start": 963.52,
      "Time_End": 969.9,
      "Text": " exploit that you find. I actually made that mistake myself and lost out on around $5,000 of"
    },
    {
      "Time_Start": 969.9,
      "Time_End": 975.9,
      "Text": " bug bounty as a result. So now we're going to take a look at a tiny slice of what you might"
    },
    {
      "Time_Start": 978.84,
      "Time_End": 984.84,
      "Text": " find if you apply this approach in the wild. Git lab lets you invite unregistered users to"
    },
    {
      "Time_Start": 986.72,
      "Time_End": 992.9,
      "Text": " administer projects via their e\u2011mail address and I thought, okay, sounds juicy, I'll test"
    },
    {
      "Time_Start": 992.9,
      "Time_End": 998.9,
      "Text": " it. So as a baseline, I just invited one address six times. This created one invitation,"
    },
    {
      "Time_Start": 1000.68,
      "Time_End": 1006.68,
      "Text": " one invitation e\u2011mail and caused six responses saying status success. When I resent these"
    },
    {
      "Time_Start": 1008.28,
      "Time_End": 1014.28,
      "Text": " requests in one packet, we saw one status success, five error messages and two e\u2011mails. So"
    },
    {
      "Time_Start": 1015.16,
      "Time_End": 1022.86,
      "Text": " we've got two clues that we've hit a race condition here. The first clue is obviously two"
    },
    {
      "Time_Start": 1022.86,
      "Time_End": 1029.3999999999999,
      "Text": " e\u2011mails from six requests is quite suspicious. And the other one is that the responses that"
    },
    {
      "Time_Start": 1029.3999999999999,
      "Time_End": 1035.3999999999999,
      "Text": " we got differed from when we did the baseline. Note that if we hadn't done the baseline and"
    },
    {
      "Time_Start": 1037.02,
      "Time_End": 1043.32,
      "Text": " we just looked at those responses, we probably wouldn't have spotted that second clue. So"
    },
    {
      "Time_Start": 1043.32,
      "Time_End": 1049.86,
      "Text": " using that race, I was able to create multiple invitations with the same e\u2011mail address,"
    },
    {
      "Time_Start": 1049.86,
      "Time_End": 1057.06,
      "Text": " which I at first thought, well, that's nice, but kind of useless. But I noticed that the"
    },
    {
      "Time_Start": 1057.06,
      "Time_End": 1065.06,
      "Text": " Git lab, the page on Git lab that lists pending invitations only displays one invitation per"
    },
    {
      "Time_Start": 1065.06,
      "Time_End": 1069.56,
      "Text": " e\u2011mail address because it doesn't think that multiple ones can exist. So you can make"
    },
    {
      "Time_Start": 1069.56,
      "Time_End": 1074.6399999999999,
      "Text": " a kind of a low privileged invitation. And if an admin sees it and deletes it, it actually"
    },
    {
      "Time_Start": 1074.6399999999999,
      "Time_End": 1080.3799999999999,
      "Text": " effectively says user \u2011\u2011 it says user was successfully removed from project and replaces"
    },
    {
      "Time_Start": 1080.3799999999999,
      "Time_End": 1087.0,
      "Text": " it with a higher level invitation behind the scenes. Now, that impact isn't amazing because"
    },
    {
      "Time_Start": 1087.0,
      "Time_End": 1092.3799999999999,
      "Text": " you need quite high privileges to exploit it in the first place. But it got my attention"
    },
    {
      "Time_Start": 1092.3799999999999,
      "Time_End": 1099.34,
      "Text": " kind of focused on Git lab. And it left me wondering, well, maybe there's another"
    },
    {
      "Time_Start": 1099.34,
      "Time_End": 1105.3799999999999,
      "Text": " angle that I can take that's a bit more deliberate and will achieve a more serious impact."
    },
    {
      "Time_Start": 1105.3799999999999,
      "Time_End": 1111.08,
      "Text": " Now, one approach to finding inspiration for these kinds of race conditions is to look"
    },
    {
      "Time_Start": 1111.08,
      "Time_End": 1117.4599999999998,
      "Text": " to classic multi\u2011step exploits and see if you can find a race condition adaption. So"
    },
    {
      "Time_Start": 1117.4599999999998,
      "Time_End": 1123.58,
      "Text": " for example, there's a classic exploit where you add an extra product to your basket somewhere"
    },
    {
      "Time_Start": 1123.62,
      "Time_End": 1130.3999999999999,
      "Text": " in the payment validation process after taking it to checkout. And if you time that right,"
    },
    {
      "Time_Start": 1130.3999999999999,
      "Time_End": 1136.1599999999999,
      "Text": " you can get the extra product for free. And I noticed that if you draw the state machine"
    },
    {
      "Time_Start": 1136.1599999999999,
      "Time_End": 1143.1599999999999,
      "Text": " for Git lab's e\u2011mail verification process, it looks kind of similar. So maybe if we change"
    },
    {
      "Time_Start": 1144.62,
      "Time_End": 1149.6599999999999,
      "Text": " our e\u2011mail address while Git lab is validating our previous e\u2011mail address, it will end"
    },
    {
      "Time_Start": 1149.66,
      "Time_End": 1155.78,
      "Text": " up validating the wrong one. And that would be high impact because it would let me hijack"
    },
    {
      "Time_Start": 1155.78,
      "Time_End": 1162.78,
      "Text": " administrator invitations intended for other users. So I tried probing for this and it"
    },
    {
      "Time_Start": 1163.3600000000001,
      "Time_End": 1170.3600000000001,
      "Text": " didn't get any clues or anomalies. But I noticed that the e\u2011mail change response was arriving"
    },
    {
      "Time_Start": 1170.4,
      "Time_End": 1175.7,
      "Text": " after the confirmation response every single time. Presumably because changing e\u2011mail"
    },
    {
      "Time_Start": 1175.74,
      "Time_End": 1181.16,
      "Text": " was a slower operation. So it was possible that there was a race condition present, but"
    },
    {
      "Time_Start": 1181.16,
      "Time_End": 1187.1000000000001,
      "Text": " I just wasn't lining the requests up correctly. And after some trial and error, I was able"
    },
    {
      "Time_Start": 1187.1000000000001,
      "Time_End": 1193.8600000000001,
      "Text": " to fix this by sending the confirmation request 90 milliseconds after the e\u2011mail change."
    },
    {
      "Time_Start": 1193.8600000000001,
      "Time_End": 1198.38,
      "Text": " But that approach, although it did work on Git lab, it's not ideal because it rules out"
    },
    {
      "Time_Start": 1198.38,
      "Time_End": 1205.38,
      "Text": " the single packet attack. And I later discovered an alternative approach that I think is better."
    },
    {
      "Time_Start": 1205.5600000000002,
      "Time_End": 1212.6200000000001,
      "Text": " Web servers often delay requests that are sent too quickly. And we can take advantage"
    },
    {
      "Time_Start": 1212.6200000000001,
      "Time_End": 1218.72,
      "Text": " of that by sending a single packet which contains first the slow processing request followed"
    },
    {
      "Time_Start": 1218.72,
      "Time_End": 1224.16,
      "Text": " by a load of dummy requests that trigger the right amount of delay server side and then"
    },
    {
      "Time_Start": 1224.16,
      "Time_End": 1229.66,
      "Text": " finally the fast processing one at the end. So using that technique, you can do a kind"
    },
    {
      "Time_Start": 1229.66,
      "Time_End": 1235.96,
      "Text": " of staggered attack and because the delay is implemented for you, server side network"
    },
    {
      "Time_Start": 1235.96,
      "Time_End": 1242.4,
      "Text": " jitter is not going to make that technique fail. Lining the race window up like this"
    },
    {
      "Time_Start": 1242.4,
      "Time_End": 1248.3600000000001,
      "Text": " on Git lab revealed a massive clue. Sometimes the e\u2011mail confirmation token was sent to"
    },
    {
      "Time_Start": 1248.3600000000001,
      "Time_End": 1254.6000000000001,
      "Text": " the wrong address. Unfortunately for me, although this looked really exciting, the misdirected"
    },
    {
      "Time_Start": 1254.6000000000001,
      "Time_End": 1260.9,
      "Text": " code was only ever valid for confirming the already confirmed address and therefore it"
    },
    {
      "Time_Start": 1260.9,
      "Time_End": 1267.9,
      "Text": " was useless. But it showed that there's at least one sub state hidden inside Git lab's"
    },
    {
      "Time_Start": 1267.9,
      "Time_End": 1274.3000000000002,
      "Text": " e\u2011mail change end point. And so it's worth digging further on that functionality. And"
    },
    {
      "Time_Start": 1274.3000000000002,
      "Time_End": 1280.0600000000002,
      "Text": " I'm going to do this via means of a live demo on a remote server hosted in Ireland over"
    },
    {
      "Time_Start": 1280.06,
      "Time_End": 1286.06,
      "Text": " the conference Wi\u2011Fi. Cool. So here we have Git lab. And here I'm just going to show, if I"
    },
    {
      "Time_Start": 1294.3999999999999,
      "Time_End": 1300.3999999999999,
      "Text": " change my e\u2011mail address, then the new one I entered, it's just been set as pending,"
    },
    {
      "Time_Start": 1304.6,
      "Time_End": 1309.52,
      "Text": " right? Because I have to click the confirmation link to prove that I own this e\u2011mail. So"
    },
    {
      "Time_Start": 1309.56,
      "Time_End": 1314.82,
      "Text": " that's what we're going to be targeting. So let's see how it goes. I did test this earlier."
    },
    {
      "Time_Start": 1314.82,
      "Time_End": 1320.82,
      "Text": " It's not 100% reliable. Sorry. Okay. On this Wi\u2011Fi, it was \u2011\u2011 I mean, it's never really 100%"
    },
    {
      "Time_Start": 1323.02,
      "Time_End": 1329.02,
      "Text": " reliable to be honest. Okay. So first I'm going to probe for clues. So I'm going to try and"
    },
    {
      "Time_Start": 1329.74,
      "Time_End": 1335.74,
      "Text": " change my e\u2011mail to six different e\u2011mail addresses in the same millisecond using the"
    },
    {
      "Time_Start": 1341.12,
      "Time_End": 1346.24,
      "Text": " single packet attack. And I'm going to get all of these e\u2011mails. They're all going to me,"
    },
    {
      "Time_Start": 1346.24,
      "Time_End": 1352.24,
      "Text": " but every e\u2011mail address is unique. So I'm going to send this. The responses should"
    },
    {
      "Time_Start": 1352.24,
      "Time_End": 1358.32,
      "Text": " arrive all at once. Yep. Good. And the first kind of tiny little hint that something"
    },
    {
      "Time_Start": 1358.32,
      "Time_End": 1363.82,
      "Text": " interesting might be happening is in this X runtime header. So we can see the server"
    },
    {
      "Time_Start": 1363.82,
      "Time_End": 1369.62,
      "Text": " processed this request in 350 milliseconds. And for something that we know is sending"
    },
    {
      "Time_Start": 1369.62,
      "Time_End": 1375.62,
      "Text": " an e\u2011mail, that's quite fast. It's almost like they're passing some data to a background"
    },
    {
      "Time_Start": 1378.1599999999999,
      "Time_End": 1382.74,
      "Text": " thread. And the background thread is sending the e\u2011mail. And as soon as you've got data"
    },
    {
      "Time_Start": 1382.74,
      "Time_End": 1388.0,
      "Text": " being passed between different threads, race conditions become a lot more likely. So that's"
    },
    {
      "Time_Start": 1388.04,
      "Time_End": 1393.42,
      "Text": " a nice little hint. But it's definitely not evidence that there's a vulnerability there."
    },
    {
      "Time_Start": 1393.42,
      "Time_End": 1399.42,
      "Text": " For evidence, I'm going to check my inbox and we'll see what we have. Okay. So we've got"
    },
    {
      "Time_Start": 1401.42,
      "Time_End": 1406.22,
      "Text": " our eight confirmation e\u2011mails. And if I scroll through these with a bit of \u2011\u2011 right."
    },
    {
      "Time_Start": 1406.22,
      "Time_End": 1412.42,
      "Text": " There we go. Okay. So here this was sent to demo six at port swigger.net. It was sent to"
    },
    {
      "Time_Start": 1412.42,
      "Time_End": 1419.18,
      "Text": " demo four. But it's intended to confirm demo six. So this is our clue. This has been sent"
    },
    {
      "Time_Start": 1419.18,
      "Time_End": 1426.18,
      "Text": " to the wrong address. But it's not a vulnerability because this link isn't actually going to"
    },
    {
      "Time_Start": 1429.72,
      "Time_End": 1435.1000000000001,
      "Text": " work. It's just going to say the confirmation token is invalid because that confirmation"
    },
    {
      "Time_Start": 1435.1000000000001,
      "Time_End": 1440.72,
      "Text": " token has been overwritten by one of the ones that came after it. And for some other"
    },
    {
      "Time_Start": 1440.76,
      "Time_End": 1446.98,
      "Text": " reason. So we've completed the probe phase and now we're going to prove the vulnerability"
    },
    {
      "Time_Start": 1446.98,
      "Time_End": 1453.98,
      "Text": " by switching to an exploit. And this is where things get a little bit less reliable. So"
    },
    {
      "Time_Start": 1455.94,
      "Time_End": 1461.16,
      "Text": " I'm just sending two requests in a single packet. One is setting an e\u2011mail address"
    },
    {
      "Time_Start": 1461.16,
      "Time_End": 1466.1000000000001,
      "Text": " that goes to my inbox and one is setting spoofed at local host which is obviously not supposed"
    },
    {
      "Time_Start": 1466.1000000000001,
      "Time_End": 1473.1000000000001,
      "Text": " to go to my inbox. And this is one other thing to mention here. This little line here."
    },
    {
      "Time_Start": 1474.4800000000002,
      "Time_End": 1480.8400000000001,
      "Text": " So in order for the misdirected confirmation token to ever be valid, you have to trigger"
    },
    {
      "Time_Start": 1480.8400000000001,
      "Time_End": 1486.42,
      "Text": " Git labs re\u2011send token functionality which you can do by changing your e\u2011mail address"
    },
    {
      "Time_Start": 1486.42,
      "Time_End": 1492.88,
      "Text": " to the same value twice in a row. And if you don't do that, the token is never valid and"
    },
    {
      "Time_Start": 1492.88,
      "Time_End": 1499.88,
      "Text": " it took me around two months to discover that. So I'm going to run this and if we're"
    },
    {
      "Time_Start": 1500.3400000000001,
      "Time_End": 1504.66,
      "Text": " really lucky, we'll get a misdirected token and if we're even luckier, the token will"
    },
    {
      "Time_Start": 1504.66,
      "Time_End": 1511.66,
      "Text": " actually work. Okay. So that looks kind of promising. This is intended to go to spoofed"
    },
    {
      "Time_Start": 1512.44,
      "Time_End": 1519.44,
      "Text": " at local host and it went to me. The killer question is, is the link going to work? It"
    },
    {
      "Time_Start": 1526.16,
      "Time_End": 1533.16,
      "Text": " does first time. I should have pretended it was always going to work first time. Cool."
    },
    {
      "Time_Start": 1541.68,
      "Time_End": 1547.0400000000002,
      "Text": " So yeah, that was that. So I originally found that vulnerability on Git lab.com and I could"
    },
    {
      "Time_Start": 1547.0400000000002,
      "Time_End": 1552.0800000000002,
      "Text": " not resist obtaining the e\u2011mail address albinowaxed at Git lab.com and you can view"
    },
    {
      "Time_Start": 1552.0800000000002,
      "Time_End": 1558.76,
      "Text": " that e\u2011mail address on my profile if you go there. But that shiny finding left me wondering"
    },
    {
      "Time_Start": 1558.76,
      "Time_End": 1565.76,
      "Text": " about what a code looked like. And the vulnerable code starts out in a Ruby on Rails framework"
    },
    {
      "Time_Start": 1566.06,
      "Time_End": 1572.5,
      "Text": " called devise. And the problem is there's an inconsistency between how the system decides"
    },
    {
      "Time_Start": 1572.5,
      "Time_End": 1578.46,
      "Text": " where to send the e\u2011mail and what to put inside it. The e\u2011mail is sent to an address"
    },
    {
      "Time_Start": 1578.46,
      "Time_End": 1585.46,
      "Text": " stored in an instance variable which is passed directly to the thread that sends the message."
    },
    {
      "Time_Start": 1585.78,
      "Time_End": 1592.24,
      "Text": " Meanwhile, the body of the e\u2011mail is populated using data from a server side template engine"
    },
    {
      "Time_Start": 1592.24,
      "Time_End": 1598.7,
      "Text": " fetched from the database. Which means that the data in the database can change in the"
    },
    {
      "Time_Start": 1598.7,
      "Time_End": 1605.7,
      "Text": " meantime leading to this discrepancy. And the impact is quite significant. So as I mentioned,"
    },
    {
      "Time_Start": 1606.54,
      "Time_End": 1612.06,
      "Text": " you can use this to hijack pending invitations intended for other people and just gain administrator"
    },
    {
      "Time_Start": 1612.06,
      "Time_End": 1618.86,
      "Text": " access to random projects. But also Git lab can be used as an open ID provider by third"
    },
    {
      "Time_Start": 1618.88,
      "Time_End": 1625.64,
      "Text": " party websites to create a sign\u2011in with Git lab button. And depending on how the third"
    },
    {
      "Time_Start": 1625.64,
      "Time_End": 1631.2400000000002,
      "Text": " party website does that integration, this can enable a load of follow\u2011up attacks against"
    },
    {
      "Time_Start": 1631.2400000000002,
      "Time_End": 1637.6000000000001,
      "Text": " that third party all the way up to arbitrary account hijacking if you're lucky. If you"
    },
    {
      "Time_Start": 1637.6000000000001,
      "Time_End": 1644.6000000000001,
      "Text": " were to find this bug in a major open ID provider, it would be a pretty big deal. Now, I reported"
    },
    {
      "Time_Start": 1645.3000000000002,
      "Time_End": 1650.22,
      "Text": " this to Git lab and they patched it pretty fast and then I reported it to devise and"
    },
    {
      "Time_Start": 1650.22,
      "Time_End": 1657.22,
      "Text": " things did not go so well. Over the span of 200 days I reported to over four addresses"
    },
    {
      "Time_Start": 1658.2600000000002,
      "Time_End": 1665.2600000000002,
      "Text": " and I received no reply from them until last week. And there's no patch available yet but"
    },
    {
      "Time_Start": 1665.38,
      "Time_End": 1671.46,
      "Text": " at least they've applied so maybe there will be a patch soon. So I went hunting for other"
    },
    {
      "Time_Start": 1671.64,
      "Time_End": 1677.68,
      "Text": " bug bounty sites using this library. And as it turns out, it's really popular. Loads of"
    },
    {
      "Time_Start": 1677.68,
      "Time_End": 1683.96,
      "Text": " Rails\u2011based sites use it. It's really easy to fingerprint because it registers an unauthenticated"
    },
    {
      "Time_Start": 1683.96,
      "Time_End": 1690.32,
      "Text": " end point slash users slash confirmation that you can just spot. And because of the way"
    },
    {
      "Time_Start": 1690.32,
      "Time_End": 1695.88,
      "Text": " the library is written, every website integrates with it slightly differently and as such every"
    },
    {
      "Time_Start": 1695.88,
      "Time_End": 1701.1200000000001,
      "Text": " exploitation journey is slightly different and it's great practice and good fun. So a"
    },
    {
      "Time_Start": 1701.1200000000001,
      "Time_End": 1706.46,
      "Text": " couple of highlights that I encountered during this process were some sites had visible"
    },
    {
      "Time_Start": 1706.46,
      "Time_End": 1712.7800000000002,
      "Text": " locking. They were obviously only processing one email change at a time. So they were secure."
    },
    {
      "Time_Start": 1712.7800000000002,
      "Time_End": 1719.5400000000002,
      "Text": " On another site, the confirmation email that they generated didn't tell you which address"
    },
    {
      "Time_Start": 1719.5400000000002,
      "Time_End": 1724.7,
      "Text": " it was supposed to confirm. So there were no hints that the vulnerability was present"
    },
    {
      "Time_Start": 1724.7,
      "Time_End": 1729.42,
      "Text": " and it was really unreliable on that site. So I had to write a script that would do the"
    },
    {
      "Time_Start": 1729.52,
      "Time_End": 1734.16,
      "Text": " attack, receive the email, pause it, click the link and reload my profile to work out which"
    },
    {
      "Time_Start": 1734.16,
      "Time_End": 1739.16,
      "Text": " email address had actually been confirmed and then I had to run it for 14 hours to actually"
    },
    {
      "Time_Start": 1739.16,
      "Time_End": 1746.04,
      "Text": " compromise another email. On a couple of other targets, their visible email change"
    },
    {
      "Time_Start": 1746.04,
      "Time_End": 1752.1200000000001,
      "Text": " functionality is secure against this attack but device registers a different hidden end"
    },
    {
      "Time_Start": 1752.1200000000001,
      "Time_End": 1759.1200000000001,
      "Text": " point for triggering an email resend and that was still vulnerable. Now with that, let's"
    },
    {
      "Time_Start": 1759.46,
      "Time_End": 1765.64,
      "Text": " move on from GitLab and device. So race conditions are weird and I've saved the weirdest one"
    },
    {
      "Time_Start": 1765.64,
      "Time_End": 1772.3200000000002,
      "Text": " for last. This was another token misrouting flaw but the two requests that triggered it"
    },
    {
      "Time_Start": 1772.3200000000002,
      "Time_End": 1778.2,
      "Text": " could be sent with a 20 minute delay in between them. So you might be thinking, well, that"
    },
    {
      "Time_Start": 1778.2,
      "Time_End": 1783.6000000000001,
      "Text": " doesn't look like a race condition but it was really unreliable so chances are it was"
    },
    {
      "Time_Start": 1783.7400000000002,
      "Time_End": 1790.2600000000002,
      "Text": " and after some analysis, what I think was happening is that my email change requests"
    },
    {
      "Time_Start": 1790.2600000000002,
      "Time_End": 1794.5800000000002,
      "Text": " were getting put on a queue which was then being processed by a multi\u2011threaded batch"
    },
    {
      "Time_Start": 1794.5800000000002,
      "Time_End": 1801.5800000000002,
      "Text": " job once every 30 minutes or so. So the timing of my request was practically irrelevant and"
    },
    {
      "Time_Start": 1802.66,
      "Time_End": 1808.42,
      "Text": " the vulnerability was triggered basically by my request volume rather than the timing"
    },
    {
      "Time_Start": 1808.42,
      "Time_End": 1813.5000000000002,
      "Text": " and also the only reason I discovered it is because I noticed two emails were sent to"
    },
    {
      "Time_Start": 1813.5,
      "Time_End": 1820.5,
      "Text": " the same address. Which over the course of this research, due to things like this, I've"
    },
    {
      "Time_Start": 1821.76,
      "Time_End": 1827.72,
      "Text": " begun to regard spotting anomalies like that as the single most important skill for finding"
    },
    {
      "Time_Start": 1827.72,
      "Time_End": 1832.96,
      "Text": " race conditions, especially for deferred ones like this where the response the application"
    },
    {
      "Time_Start": 1832.96,
      "Time_End": 1837.24,
      "Text": " sends to your actual request is never going to tell you a vulnerability is present because"
    },
    {
      "Time_Start": 1837.24,
      "Time_End": 1844.24,
      "Text": " the vulnerability hasn't even been triggered yet. Now, I focused on email\u2011based attacks"
    },
    {
      "Time_Start": 1844.78,
      "Time_End": 1848.94,
      "Text": " during my research but where else can you find these things? Well, basically everywhere"
    },
    {
      "Time_Start": 1848.94,
      "Time_End": 1855.94,
      "Text": " but one pattern that you may well encounter is partial construction attacks. These occur"
    },
    {
      "Time_Start": 1856.26,
      "Time_End": 1862.86,
      "Text": " when an object is created in multiple steps creating an insecure middle state like you"
    },
    {
      "Time_Start": 1862.88,
      "Time_End": 1869.3200000000002,
      "Text": " can see in the code snippet here where this token variable is briefly not set. I didn't"
    },
    {
      "Time_Start": 1869.3200000000002,
      "Time_End": 1872.92,
      "Text": " use this as a case study because I actually wrote this code myself about ten years ago"
    },
    {
      "Time_Start": 1872.92,
      "Time_End": 1879.68,
      "Text": " but it was not supposed to be vulnerable. Now, this type of attack is most likely to"
    },
    {
      "Time_Start": 1879.68,
      "Time_End": 1886.68,
      "Text": " work on applications that support default or null type values and don't just throw exceptions"
    },
    {
      "Time_Start": 1887.42,
      "Time_End": 1894.42,
      "Text": " when they encounter them. So think SQL PHP. But that's not a strict requirement and for"
    },
    {
      "Time_Start": 1895.3,
      "Time_End": 1900.3,
      "Text": " a completely different type of partial construction attack, check out the linked vulnerability"
    },
    {
      "Time_Start": 1900.3,
      "Time_End": 1907.3,
      "Text": " found by Natalie Silvanovich in Google's web RTC implementation."
    },
    {
      "Time_Start": 1908.94,
      "Time_End": 1914.42,
      "Text": " Another angle for further research is exploring the root cause of race conditions from the"
    },
    {
      "Time_Start": 1914.42,
      "Time_End": 1921.0,
      "Text": " ground up which is unsafe combinations of data structures and locking strategies. There's"
    },
    {
      "Time_Start": 1921.0,
      "Time_End": 1927.3600000000001,
      "Text": " three main strategies that you'll run into. The classic defense is locking. So, for example,"
    },
    {
      "Time_Start": 1927.3600000000001,
      "Time_End": 1934.3600000000001,
      "Text": " PHP's default session handler only processes one request at a time in a given session."
    },
    {
      "Time_Start": 1934.8600000000001,
      "Time_End": 1939.5600000000002,
      "Text": " So that means two things. Firstly, they're not going to have a session\u2011based race condition"
    },
    {
      "Time_Start": 1939.58,
      "Time_End": 1946.3,
      "Text": " but also if you trigger, if you try to trigger a database layer race condition using a single"
    },
    {
      "Time_Start": 1946.3,
      "Time_End": 1952.7,
      "Text": " session, you'll fail to find it every time. So it's important to recognize this behavior"
    },
    {
      "Time_Start": 1952.7,
      "Time_End": 1958.1799999999998,
      "Text": " and work around it by doing things like using multiple sessions."
    },
    {
      "Time_Start": 1958.1799999999998,
      "Time_End": 1963.5,
      "Text": " The probably the most common approach that you'll see in session handlers and ORMs is"
    },
    {
      "Time_Start": 1963.52,
      "Time_End": 1969.72,
      "Text": " batching. So this is where they read the entire session, let's say from the database into"
    },
    {
      "Time_Start": 1969.72,
      "Time_End": 1974.84,
      "Text": " a local in\u2011memory copy and then any reason writes that the application does during that"
    },
    {
      "Time_Start": 1974.84,
      "Time_End": 1980.96,
      "Text": " request are applied to that local copy and the whole copy is written back to the database"
    },
    {
      "Time_Start": 1980.96,
      "Time_End": 1987.96,
      "Text": " at the end of the request life cycle. So this makes the values internally consistent during"
    },
    {
      "Time_Start": 1988.96,
      "Time_End": 1995.8600000000001,
      "Text": " that request life cycle. But as we saw with device, as soon as data gets passed to a background"
    },
    {
      "Time_Start": 1995.8600000000001,
      "Time_End": 2002.46,
      "Text": " thread, you're kind of outside the scope of that protection and everything falls apart."
    },
    {
      "Time_Start": 2002.46,
      "Time_End": 2009.18,
      "Text": " And also, if you have two requests operating on the same record simultaneously, then generally"
    },
    {
      "Time_Start": 2009.18,
      "Time_End": 2014.22,
      "Text": " one will end up overwriting the database changes from the other."
    },
    {
      "Time_Start": 2014.6000000000001,
      "Time_End": 2021.6000000000001,
      "Text": " Finally, if there's no defense present, all the bets are off basically. And you see that"
    },
    {
      "Time_Start": 2022.64,
      "Time_End": 2028.56,
      "Text": " most commonly with databases where people aren't making adequate uses of transactions."
    },
    {
      "Time_Start": 2028.56,
      "Time_End": 2035.56,
      "Text": " But you also see it occasionally with custom session handlers. And if you find a session"
    },
    {
      "Time_Start": 2035.92,
      "Time_End": 2042.18,
      "Text": " handler that has that property that's not doing batching or locking, that needs some"
    },
    {
      "Time_Start": 2042.28,
      "Time_End": 2048.44,
      "Text": " really heavy testing because there's a whole load of completely plausible, reasonable code"
    },
    {
      "Time_Start": 2048.44,
      "Time_End": 2054.76,
      "Text": " patterns that suddenly have critical vulnerabilities if they're built on top of a vulnerable session"
    },
    {
      "Time_Start": 2054.76,
      "Time_End": 2061.76,
      "Text": " handler. So it's \u2011\u2011 I would say I think it's almost impossible to write secure code"
    },
    {
      "Time_Start": 2062.52,
      "Time_End": 2066.96,
      "Text": " at the application layer when you're building on top of a session handler that's not doing"
    },
    {
      "Time_Start": 2066.98,
      "Time_End": 2073.98,
      "Text": " some kind of synchronization or batching. Now, the final area for the research is improving"
    },
    {
      "Time_Start": 2075.54,
      "Time_End": 2082.54,
      "Text": " the single packet attack. So my implementation lets you get about 20 to 30 requests into"
    },
    {
      "Time_Start": 2082.66,
      "Time_End": 2087.86,
      "Text": " one packet. And if you get more than that, the operating system just puts them in another"
    },
    {
      "Time_Start": 2087.86,
      "Time_End": 2093.42,
      "Text": " packet shortly later. And I'm certain you can fit a lot more requests into a single"
    },
    {
      "Time_Start": 2093.42,
      "Time_End": 2099.78,
      "Text": " packet with enough effort. You can totally do it with a custom TCP or TLS stack and there"
    },
    {
      "Time_Start": 2099.78,
      "Time_End": 2105.46,
      "Text": " may be other easier ways of making it happen that I didn't think of. I didn't try to push"
    },
    {
      "Time_Start": 2105.46,
      "Time_End": 2111.48,
      "Text": " that side of the research that far because 20 requests is enough to cause a lot of damage"
    },
    {
      "Time_Start": 2111.48,
      "Time_End": 2116.92,
      "Text": " in the wild by itself. The other thing that would be really valuable on that angle is"
    },
    {
      "Time_Start": 2116.92,
      "Time_End": 2123.92,
      "Text": " other ways of causing server side delays because that will let you trigger staggered"
    },
    {
      "Time_Start": 2124.1,
      "Time_End": 2129.94,
      "Text": " attacks more reliably and it will also help out with the timing attack side a little bit"
    },
    {
      "Time_Start": 2129.94,
      "Time_End": 2136.5,
      "Text": " as well. And more generic techniques would be especially valuable there."
    },
    {
      "Time_Start": 2136.5,
      "Time_End": 2142.3,
      "Text": " Now one final word of advice. This is a slide just for DEF CON and this might be a controversial"
    },
    {
      "Time_Start": 2142.52,
      "Time_End": 2149.1600000000003,
      "Text": " take. We'll see. Now in this session I've tried to squeeze six months of research into"
    },
    {
      "Time_Start": 2149.1600000000003,
      "Time_End": 2155.9,
      "Text": " the space of 40 minutes. And one thing that can get lost in that condensing process is"
    },
    {
      "Time_Start": 2155.9,
      "Time_End": 2162.4,
      "Text": " how big the gap can get between exploiting something and actually understanding it. So"
    },
    {
      "Time_Start": 2162.4,
      "Time_End": 2168.36,
      "Text": " for example, that GitLab vulnerability, I exploited GitLab.com successfully in I can't"
    },
    {
      "Time_Start": 2168.36,
      "Time_End": 2173.38,
      "Text": " remember, but I think maybe two days. Whereas when I built my own local replica for the"
    },
    {
      "Time_Start": 2173.38,
      "Time_End": 2180.38,
      "Text": " live demo, it took me so I could get the token to be misrouted, but the token was never ever"
    },
    {
      "Time_Start": 2181.98,
      "Time_End": 2188.38,
      "Text": " valid. I like ran attacks running every ten seconds for weeks and it was never valid."
    },
    {
      "Time_Start": 2188.38,
      "Time_End": 2193.2200000000003,
      "Text": " And it took me over two months to figure out why that was happening and gain the understanding"
    },
    {
      "Time_Start": 2193.2200000000003,
      "Time_End": 2199.6400000000003,
      "Text": " to actually replicate it successfully. And similarly, I've mentioned timing information"
    },
    {
      "Time_Start": 2199.6400000000003,
      "Time_End": 2205.5600000000004,
      "Text": " can be really valuable, but front ends can do all kinds of different things with your"
    },
    {
      "Time_Start": 2205.5600000000004,
      "Time_End": 2212.36,
      "Text": " requests which can cause other timing delays and massive timing red herrings. Now you can"
    },
    {
      "Time_Start": 2212.36,
      "Time_End": 2219.36,
      "Text": " recognize that behavior and work around it, but what I'm getting at is with this bug class"
    },
    {
      "Time_Start": 2219.38,
      "Time_End": 2226.26,
      "Text": " you will encounter things that don't make sense. And that's absolutely fine. My advice"
    },
    {
      "Time_Start": 2226.26,
      "Time_End": 2231.78,
      "Text": " is just to embrace the chaos. Normally I would say you should understand a system and then"
    },
    {
      "Time_Start": 2231.78,
      "Time_End": 2236.6600000000003,
      "Text": " use that understanding to exploit it. But with race conditions there's a risk that that"
    },
    {
      "Time_Start": 2236.6600000000003,
      "Time_End": 2241.78,
      "Text": " limits you to finding vulnerabilities that make sense. And in my experience, the coolest"
    },
    {
      "Time_Start": 2241.78,
      "Time_End": 2248.46,
      "Text": " race conditions make the least sense. In other words, it's nice to have an explanation, but"
    },
    {
      "Time_Start": 2248.46,
      "Time_End": 2255.46,
      "Text": " all you really need is an exploit. Now for defense, when a single request can push an"
    },
    {
      "Time_Start": 2257.08,
      "Time_End": 2262.6,
      "Text": " application through multiple invisible substates, understanding that application and predicting"
    },
    {
      "Time_Start": 2262.6,
      "Time_End": 2269.6,
      "Text": " its behavior is incredibly difficult. And defense is just not practical. So my advice"
    },
    {
      "Time_Start": 2270.88,
      "Time_End": 2277.88,
      "Text": " is try to eliminate substates entirely. Like the effects of each request should be atomic."
    },
    {
      "Time_Start": 2278.76,
      "Time_End": 2284.04,
      "Text": " You can achieve that generally using your data store consistency features and another"
    },
    {
      "Time_Start": 2284.04,
      "Time_End": 2289.96,
      "Text": " thing that will help with that is avoid mixing data sources. So device was vulnerable because"
    },
    {
      "Time_Start": 2289.96,
      "Time_End": 2294.2,
      "Text": " they sent an e\u2011mail to an address from an instance variable but took the contents from"
    },
    {
      "Time_Start": 2294.2,
      "Time_End": 2299.32,
      "Text": " the database. If they took the e\u2011mail address and the contents from the database, they would"
    },
    {
      "Time_Start": 2299.32,
      "Time_End": 2306.32,
      "Text": " have been absolutely fine. The other key thing is to make sure that you know what kind of"
    },
    {
      "Time_Start": 2306.78,
      "Time_End": 2312.46,
      "Text": " locking system your session handler is using because if it's not doing any locking, that's"
    },
    {
      "Time_Start": 2312.46,
      "Time_End": 2319.46,
      "Text": " bad news. Now there's a lot of further reading available. The three key things I would suggest"
    },
    {
      "Time_Start": 2320.6200000000003,
      "Time_End": 2325.78,
      "Text": " are check out the white paper. That's basically the written up version of this presentation."
    },
    {
      "Time_Start": 2325.78,
      "Time_End": 2330.78,
      "Text": " It does have a little bit of extra info and some different angles on stuff. Have a practice"
    },
    {
      "Time_Start": 2330.88,
      "Time_End": 2337.1600000000003,
      "Text": " on our online labs because there's no substitute for real experience with these vulnerabilities"
    },
    {
      "Time_Start": 2337.1600000000003,
      "Time_End": 2342.4,
      "Text": " and finally grab my code, take a single packet attack and find some real vulnerabilities"
    },
    {
      "Time_Start": 2342.4,
      "Time_End": 2347.3,
      "Text": " out in the wild. If you have any crazy findings with these techniques that you would like"
    },
    {
      "Time_Start": 2347.3,
      "Time_End": 2352.2000000000003,
      "Text": " to share, I would absolutely love to hear all about it. And the three key things to"
    },
    {
      "Time_Start": 2352.2000000000003,
      "Time_End": 2359.2000000000003,
      "Text": " take away are the single packet attack makes remote race conditions local. With race conditions"
    },
    {
      "Time_Start": 2359.82,
      "Time_End": 2366.82,
      "Text": " everything is potentially multi\u2011step and to find these bugs, predict, probe and prove."
    },
    {
      "Time_Start": 2367.1000000000004,
      "Time_End": 2371.0200000000004,
      "Text": " I'm going to take five minutes of questions now. If you have any more after that, just"
    },
    {
      "Time_Start": 2371.0200000000004,
      "Time_End": 2376.0200000000004,
      "Text": " come and chat to me at the back or chop me an e\u2011mail. Thank you for listening."
    },
    {
      "Time_Start": 2376.0200000000004,
      "Time_End": 2383.0200000000004,
      "Text": " Any questions? Yeah. Can you use the mic? There's a microphone over there."
    },
    {
      "Time_Start": 2390.2000000000003,
      "Time_End": 2392.2000000000003,
      "Text": " In the middle. Sorry."
    },
    {
      "Time_Start": 2404.2000000000003,
      "Time_End": 2409.2000000000003,
      "Text": " What severity did GitLab eventually rate that vulnerability as?"
    },
    {
      "Time_Start": 2409.2000000000003,
      "Time_End": 2416.2000000000003,
      "Text": " So sadly for me, GitLab rated it as medium which I don't think is accurate. I think it's"
    },
    {
      "Time_Start": 2420.2000000000003,
      "Time_End": 2425.76,
      "Text": " because I hadn't discovered \u2011\u2011 so when I initially reported that, I didn't discover"
    },
    {
      "Time_Start": 2425.76,
      "Time_End": 2430.5200000000004,
      "Text": " the invitation hijacking angle. I didn't realize getting a validated e\u2011mail would actually"
    },
    {
      "Time_Start": 2430.5200000000004,
      "Time_End": 2435.7200000000003,
      "Text": " let you do that. And by the time I realized that, it was already fixed and paid out. So"
    },
    {
      "Time_Start": 2435.7200000000003,
      "Time_End": 2441.0800000000004,
      "Text": " I think if I had originally reported it with that impact, it would have got high whereas"
    },
    {
      "Time_Start": 2441.0800000000004,
      "Time_End": 2447.2000000000003,
      "Text": " as it was, it was only risky to people using GitLab via the signing with GitLab button"
    },
    {
      "Time_Start": 2447.2000000000003,
      "Time_End": 2452.2000000000003,
      "Text": " which thankfully not many people are doing. Anyone else?"
    },
    {
      "Time_Start": 2460.2000000000003,
      "Time_End": 2464.2000000000003,
      "Text": " Thanks for the really interesting talk. You mentioned that frontends and load balancers"
    },
    {
      "Time_Start": 2464.2000000000003,
      "Time_End": 2469.2000000000003,
      "Text": " cause issues with this sort of thing. And you said there are some workarounds. What"
    },
    {
      "Time_Start": 2469.2000000000003,
      "Time_End": 2475.2000000000003,
      "Text": " are they? Yeah. They're not all trivial. But you basically"
    },
    {
      "Time_Start": 2475.2000000000003,
      "Time_End": 2481.2000000000003,
      "Text": " you have to observe what's happening. So you can notice if you send your requests"
    },
    {
      "Time_Start": 2481.2000000000003,
      "Time_End": 2487.2000000000003,
      "Text": " in a batch and the first request always comes back faster, you can try changing the order"
    },
    {
      "Time_Start": 2487.2000000000003,
      "Time_End": 2497.2000000000003,
      "Text": " of the requests. And so sometimes by flipping the order, you can fix the issue or just adding"
    },
    {
      "Time_Start": 2497.2000000000003,
      "Time_End": 2504.2000000000003,
      "Text": " a dummy request at the start. That's one way of dealing with it. But there's like so many"
    },
    {
      "Time_Start": 2504.2000000000003,
      "Time_End": 2509.2000000000003,
      "Text": " different things that they can do. It's hard to give like a playbook for every kind of"
    },
    {
      "Time_Start": 2509.2000000000003,
      "Time_End": 2516.2000000000003,
      "Text": " scenario. I think the most important thing there is when you see a delay, don't assume"
    },
    {
      "Time_Start": 2516.2000000000003,
      "Time_End": 2521.2000000000003,
      "Text": " that that's something that's happening server side. That could just be the load balancer."
    },
    {
      "Time_Start": 2521.2000000000003,
      "Time_End": 2525.2000000000003,
      "Text": " So test that assumption before you try and work around it."
    },
    {
      "Time_Start": 2525.2000000000003,
      "Time_End": 2532.2000000000003,
      "Text": " Cool. I think that's everyone. Thanks."
    }
  ]
}