**Introduction**
- **Austin Emmitt**: Currently a vulnerability researcher at Vigilant Labs, previously worked at the Trellis Advanced Research Center.
- **NSPredicate Exploitation**: A technique used to bypass security measures on Apple devices, allowing arbitrary code execution.

**Background**
- **iOS Security**: iOS is considered a hard target due to its robust security measures, including ASLR, strict code signing, sandboxing, and PAC.
- **Objective-C**: The primary language used in iOS user-space code, with dynamic messaging and method invocation at runtime.
- **NSPredicate**: A tool for filtering objects and arrays, allowing dynamic scripting and bypassing of security restrictions.

**NSPredicate Basics**
- **Definition**: NSPredicate is a "definition of logical conditions for constraining a search or for in-memory filtering."
- **Format**: NSPredicate uses format strings and supports serialization, making it ubiquitous in iOS and macOS first-party and third-party code.
- **XPC (Interprocess Communication)**: NSPredicate arguments are often used to filter results, reducing serialization overhead.
- **Syntax**: NSPredicate has a rich syntax, including variables, functions, key paths, control flow constructs, and arithmetic/bitwise operators.

**NSPredicate as a Scripting Language**
- **Capabilities**: NSPredicate can be used as a powerful scripting language, allowing arbitrary method invocations and object initialization.
- **Function Expressions**: Added in Mac OS 10.5, function expressions enable dynamic scripting and access to any exported C function.
- **Bypassing Security Measures**: NSPredicate can sidestep ASLR, code signing, and PAC, making it a valuable tool for hackers.

**Exploitation Techniques**
- **Before ForcedEntry**: NSPredicate scripts were unrestricted, allowing arbitrary code execution, especially in third-party apps.
- **NSPredicate Visitors**: A protocol implemented by daemons to validate NSPredicate components, limiting expressions to safe subsets.
- **Bypassing Restrictions**: Apple introduced denialists to prevent dangerous classes and methods, but these could be bypassed by modifying flag values and list lengths.
- **Arbitrary Writes**: The 'get value' method allowed arbitrary writes, enabling the modification of security flag values and denialist lengths.
- **Pointer Types Restriction**: Apple restricted function expressions to exclude pointer types, but the asterisk type ('*') was overlooked, allowing arbitrary writes with 'getCString'.
- **DVT Instruments Framework**: Provides a signed reference to 'DLSim', enabling the invocation of exported functions and bypassing PAC.
- **RBStroke Accumulator**: The 'applyFunctionInfo' method uses the 'BRAZ' instruction to call function pointers signed with a zero context value.

**Exploiting Daemons**
- **Core2EditD, ContextStoreD**: Daemons that aggregate user behavior data, vulnerable to NSPredicate exploitation.
- **AppStoreD**: Allows installation of arbitrary apps, but they still need to be signed.
- **OSLogService**: Accessible by any app, providing access to sensitive log information.
- **SpringBoard (iPadOS)**: The home app, similar to Explorer.exe on Windows, vulnerable to NSPredicate exploitation.

**Bypassing NSPredicate Visitors**
- **Expression Type Property**: NSPredicate visitors rely on the 'expression type' property to validate expressions, but this property is controlled by the sender.
- **Setting Expression Type to Zero**: By setting the expression type to zero, malicious predicates can be interpreted as containing only constant values, bypassing additional validation.
- **UITargetContentIdentifierPredicateValidator**: Used by SpringBoard to validate predicates, but can be bypassed by setting expression types to zero.

**Demo: Exploiting SpringBoard**
- **Notification Theft**: A malicious app uses a crafted NSPredicate to steal notifications and user data from SpringBoard.
- **Arbitrary Writes and Security Flag Modification**: The predicate performs arbitrary writes to clear denialists and set the internal release type, then unsets the high-security flag.
- **Copying Notification Data**: The NSFileManager class is used to copy notification data to the crash report directory for retrieval by the attacker.

**Conclusion**
- **Apple's Response**: Apple has implemented stronger restrictions on NSPredicate, requiring object return and argument types for function expressions.
- **Remaining Threats**: NSPredicate can still be used to bypass App Store review and exploit vulnerabilities in third-party apps.
- **Future Outlook**: Until fundamental changes are made to function and key path expressions, NSPredicate will remain a dangerous tool for exploitation.