**Introduction**
- Dr. Bramwell Brisendine, professor and former director of the Verona Lab, introduces the topic of **Windows** **shellcode** analysis and the need for better tooling.
- Brisendine is joined by his former student, Jake, and Max Gerson (aka Libra) from Trellix.

**SHAREM Framework**
- **SHAREM** (**S**hellcode **H**igh-fidelity **A**nalysis and **R**econstruction via **EM**ulation) is a **game-changing** solution for **shellcode** analysis.
- It includes a **shellcode** emulator, complete **code coverage**, an accurate disassembler, and features for handling deceptive **encoding** and **obfuscation**.

**SHAREM Emulator**
- Built with the **Unicorn CPU** emulation framework, SHAREM can hook and log over **20,000 Windows APIs** and **99% of Windows syscalls**.
- It supports both raw.bin files and the hex byte representation of **shellcode**, and is useful for **high-level IOC analysis**.
- SHAREM's emulator is designed to look and behave like an actual **Windows** process, with features like **PEB walking** and API emulation.
- It also includes handwritten hooks for essential functions like **virtual alloc**, ensuring high-fidelity representation during emulation.

**Windows Syscall Emulation**
- Windows syscalls have become trendy in recent years, but support for their emulation has been lacking.
- SHAREM addresses this by developing its own techniques and tooling, with a previous **DEF CON** talk and an expanded presentation at **Hack in the Box 2023**.
- Syscalls require the shellcode author to handle stack cleanup, and the specific syscall values change with different **OS** builds.

**Analyzing SHAREM's Output**
- SHAREM provides detailed output, including parameters, structures, and **IOC** information such as commands run, file paths, and URLs accessed.
- It includes an optional feature to pull live artifacts from the web if the **shellcode** reaches out to download external dependencies.
- SHAREM's output also includes **timeless debugging** information, providing a log of every CPU instruction and register value during emulation.

**Complete Code Coverage**
- SHAREM's complete **code coverage** feature ensures that all possible code paths are executed, even in the presence of jumps or conditional statements.
- By capturing metadata and stack snapshots, SHAREM can restart the **shellcode** and restore the CPU register state to explore alternative paths.
- This dynamic analysis approach guarantees the discovery of all possible APIs and parameters, even in encoded or self-modifying **shellcode**.

**SHAREM's Disassembler**
- Brisendine discusses the disappointing quality of disassembly provided by tools like **IDA Pro** and **Ghidra**, which often misclassify data as instructions.
- SHAREM's disassembler utilizes multiple analysis phases and maintains complex metadata about each byte of **shellcode** to improve accuracy.
- It can identify functions, APIs, disassembly annotations, **PEB** features, API tables, and distinguish between instructions and data.
- SHAREM also integrates emulation data in a unique way, prioritizing the executed form of the **shellcode** to produce more accurate disassembly.

**Ghidra Plugin by Trellix**
- Max Gerson from Trellix demonstrates a new **Ghidra** plugin that integrates SHAREM's enhanced disassembly and API identification into the **Ghidra** environment.
- The plugin allows users to run SHAREM in the background and add comments to the disassembly, providing a quick overview of the shellcode's functionality.
- It utilizes SHAREM's output to update data types, function calls, and strings, improving the accuracy of **Ghidra's** analysis.

**Conclusion**
- The presenters summarize the key features and benefits of SHAREM and the **Ghidra** plugin, highlighting their usefulness for **shellcode** analysis and reverse engineering.
- They provide links to download SHAREM and the **Ghidra** plugin, as well as acknowledging the **NSA** grant that supported the research.