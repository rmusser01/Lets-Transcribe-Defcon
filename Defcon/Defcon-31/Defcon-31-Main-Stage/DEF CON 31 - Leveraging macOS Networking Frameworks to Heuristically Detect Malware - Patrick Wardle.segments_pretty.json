{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 5.0,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Thank you. Uh, aloha and welcome to my talk, Nothing But Nets. Yes, I am Patrick Wordle. I am"
    },
    {
      "Time_Start": 11.22,
      "Time_End": 16.32,
      "Text": " the founder of the Objective-C Foundation. Uh, you might know me from some of the uh"
    },
    {
      "Time_Start": 16.32,
      "Time_End": 21.16,
      "Text": " Objective-C free open source Mac security tools. I also write the Art of Mac Malware book"
    },
    {
      "Time_Start": 21.16,
      "Time_End": 27.86,
      "Text": " series. And finally organize Objective by the Sea security conference. So, what will you"
    },
    {
      "Time_Start": 27.86,
      "Time_End": 31.56,
      "Text": " learn today? What are we going to talk about? What are we going to dive into? Well, pretty"
    },
    {
      "Time_Start": 31.56,
      "Time_End": 37.3,
      "Text": " much four things that really in a nutshell will show us how to leverage uh Mac OS's"
    },
    {
      "Time_Start": 37.3,
      "Time_End": 44.0,
      "Text": " Apple's networking frameworks to heuristically detect malware directly on uh a host. So,"
    },
    {
      "Time_Start": 44.0,
      "Time_End": 47.64,
      "Text": " we're going to start by looking at some examples of Mac malware that utilize the network"
    },
    {
      "Time_Start": 47.64,
      "Time_End": 52.019999999999996,
      "Text": " because well, before we write tools to detect such activity, we should have at least a"
    },
    {
      "Time_Start": 52.019999999999996,
      "Time_End": 56.78,
      "Text": " baseline understanding of well, what we're looking for. We're then going to talk about how"
    },
    {
      "Time_Start": 56.78,
      "Time_End": 61.620000000000005,
      "Text": " to take a snapshot, enumerate the network state on a Mac to see things like active"
    },
    {
      "Time_Start": 61.620000000000005,
      "Time_End": 65.98,
      "Text": " connections, open sockets, etc. We're then going to kind of graduate up to more"
    },
    {
      "Time_Start": 65.98,
      "Time_End": 70.82000000000001,
      "Text": " comprehensive tools that will allow us to continually monitor the network. Both DNS"
    },
    {
      "Time_Start": 70.82000000000001,
      "Time_End": 75.96000000000001,
      "Text": " traffic and all traffic including filtering and blocking certain connections. And then"
    },
    {
      "Time_Start": 75.96000000000001,
      "Time_End": 81.16,
      "Text": " finally we're going to end with how to then tie that activity back to processes and"
    },
    {
      "Time_Start": 81.16,
      "Time_End": 85.98,
      "Text": " determine if those processes are suspicious or malicious because you know, obviously"
    },
    {
      "Time_Start": 85.98,
      "Time_End": 90.28,
      "Text": " legitimate software is also going to be using the network as well so we need a way to"
    },
    {
      "Time_Start": 90.28,
      "Time_End": 96.72,
      "Text": " identify what is unauthorized. Now, this is the main idea and this is a very obvious idea"
    },
    {
      "Time_Start": 96.72,
      "Time_End": 101.46000000000001,
      "Text": " so I'm not claiming this is new and it's just let's detect malware via unauthorized network"
    },
    {
      "Time_Start": 101.46000000000001,
      "Time_End": 106.66,
      "Text": " activity. This is based on two, again, very obvious uh observations which is first,"
    },
    {
      "Time_Start": 106.66,
      "Time_End": 112.4,
      "Text": " malware uses the network. How? Good question. In a variety of ways. For example, it pops"
    },
    {
      "Time_Start": 112.4,
      "Time_End": 117.5,
      "Text": " reverse shells. Uh it might use the network to propagate to other machines. A lot of"
    },
    {
      "Time_Start": 117.5,
      "Time_End": 121.66000000000001,
      "Text": " malware, especially backdoors, will interact with a command and control server and take"
    },
    {
      "Time_Start": 121.66000000000001,
      "Time_End": 126.60000000000001,
      "Text": " tasking from a remote server. And then a lot of malware will also, for example, download"
    },
    {
      "Time_Start": 126.60000000000001,
      "Time_End": 132.08,
      "Text": " additional payloads or files or exfiltrate up uh files to uh a remote server. So again, a lot"
    },
    {
      "Time_Start": 132.08,
      "Time_End": 137.98000000000002,
      "Text": " of opportunities for detecting the malware based on its network traffic. So the idea is if"
    },
    {
      "Time_Start": 138.0,
      "Time_End": 143.44,
      "Text": " we can observe this network activity and classify it as suspicious or unauthorized, we should"
    },
    {
      "Time_Start": 143.44,
      "Time_End": 148.44,
      "Text": " be able to generically uncover malware. Now the way network monitoring is normally done is"
    },
    {
      "Time_Start": 151.07999999999998,
      "Time_End": 155.62,
      "Text": " via placing an application net uh network application in the network, especially in the"
    },
    {
      "Time_Start": 155.62,
      "Time_End": 160.22,
      "Text": " context of the enterprise. So this is a separate hardware device that all traffic from the"
    },
    {
      "Time_Start": 160.22,
      "Time_End": 164.39999999999998,
      "Text": " network may be routed through and it can then examine and look for anomalies. And this"
    },
    {
      "Time_Start": 164.42000000000002,
      "Time_End": 168.62,
      "Text": " definitely works. There's some pros to this approach but there's definitely some cons. So"
    },
    {
      "Time_Start": 168.62,
      "Time_End": 174.12,
      "Text": " this talk instead we're going to focus on host based network monitoring. Meaning our code"
    },
    {
      "Time_Start": 174.12,
      "Time_End": 179.84,
      "Text": " is going to run directly on the host. The benefits of this are three fold. First and most"
    },
    {
      "Time_Start": 179.84,
      "Time_End": 184.74,
      "Text": " importantly is the fact that if we are running on the host where we are observing network"
    },
    {
      "Time_Start": 184.74,
      "Time_End": 189.94,
      "Text": " traffic, we will be able to identify the responsible process. Imagine you are a network"
    },
    {
      "Time_Start": 189.94,
      "Time_End": 194.12,
      "Text": " appliance, you see a DNS request, you might not be able to say what application generated"
    },
    {
      "Time_Start": 194.14000000000001,
      "Time_End": 198.34,
      "Text": " this, right? Is this the user's browser or a malicious backdoor? Well if our code is running"
    },
    {
      "Time_Start": 198.34,
      "Time_End": 203.88,
      "Text": " on the host and we observe that same DNS request, we will able, we will be able to pinpoint"
    },
    {
      "Time_Start": 203.88,
      "Time_End": 208.82,
      "Text": " or tie that back to the process and then analyze that process to answer the question, is it"
    },
    {
      "Time_Start": 208.82,
      "Time_End": 213.22,
      "Text": " malicious or not? So that's really kind of the main benefit of host based network"
    },
    {
      "Time_Start": 213.22,
      "Time_End": 218.42000000000002,
      "Text": " monitoring. It also happens pre-encryption. So if you want to do full packet capturing, well"
    },
    {
      "Time_Start": 218.42000000000002,
      "Time_End": 223.26,
      "Text": " you don't have to worry about removing SSL certificates, manning the middle, it's just there"
    },
    {
      "Time_Start": 223.29999999999998,
      "Time_End": 227.64,
      "Text": " before it gets encrypted to go out on the wire. And then thirdly it's more simple and maybe"
    },
    {
      "Time_Start": 227.64,
      "Time_End": 232.78,
      "Text": " more cost effective. You don't need to buy any additional hardware. Uh and especially"
    },
    {
      "Time_Start": 232.78,
      "Time_End": 236.84,
      "Text": " recently a lot of these hardware network appliances have security vulnerabilities that"
    },
    {
      "Time_Start": 236.84,
      "Time_End": 241.82,
      "Text": " hackers are actually using to get into the network. So not ideal. Now you might be"
    },
    {
      "Time_Start": 241.82,
      "Time_End": 246.22,
      "Text": " thinking, okay cool, host based network monitoring, it's pretty well understood, some good"
    },
    {
      "Time_Start": 246.22,
      "Time_End": 251.0,
      "Text": " pros, why are we giving a talk about it? Well a few main reasons. One of them is on Mac"
    },
    {
      "Time_Start": 251.0,
      "Time_End": 256.58,
      "Text": " OS there's just really not been a lot of research or examples of how to do this. And there's a"
    },
    {
      "Time_Start": 256.58,
      "Time_End": 261.72,
      "Text": " variety of reasons for this. One of the main reasons is a lot of the frameworks and uh"
    },
    {
      "Time_Start": 261.72,
      "Time_End": 266.72,
      "Text": " capabilities we're gonna use are only uh pretty new. They've only been recently introduced"
    },
    {
      "Time_Start": 266.72,
      "Time_End": 271.66,
      "Text": " by Apple. There's also a lot of challenges, blood, sweat and tears that I've been through the"
    },
    {
      "Time_Start": 271.66,
      "Time_End": 277.06,
      "Text": " last few years developing host based networking tools on Mac OS. So I want to kind of share"
    },
    {
      "Time_Start": 277.06,
      "Time_End": 282.56,
      "Text": " some of the pain points so y'all don't have to. So one example is Apple's networking"
    },
    {
      "Time_Start": 282.56,
      "Time_End": 288.3,
      "Text": " frameworks used to be incredibly buggy. So you write this lovely user mode tool that"
    },
    {
      "Time_Start": 288.3,
      "Time_End": 294.04,
      "Text": " leverages Apple's documented frameworks and then the user runs it and it panics the box."
    },
    {
      "Time_Start": 294.04,
      "Time_End": 297.94,
      "Text": " What do they do? They file a bug report saying your tool is crap and you're like, is it? It runs"
    },
    {
      "Time_Start": 297.94,
      "Time_End": 302.08,
      "Text": " in user mode, how can it panic the box? And you look into it and it turns out that Apple has a"
    },
    {
      "Time_Start": 302.08,
      "Time_End": 307.28,
      "Text": " kernel bug in their networking logic and you're like, thanks Cupertino. Now Apple is pretty"
    },
    {
      "Time_Start": 307.28,
      "Time_End": 312.56,
      "Text": " receptive about fixing this but again an example of you know kind of a uh uh trials and"
    },
    {
      "Time_Start": 312.56,
      "Time_End": 318.15999999999997,
      "Text": " tribulations let's just say. Other challenges, uh a lot of the frameworks are private. So you"
    },
    {
      "Time_Start": 318.15999999999997,
      "Time_End": 321.7,
      "Text": " have a very powerful networking framework you want to use but there's no documentation,"
    },
    {
      "Time_Start": 321.7,
      "Time_End": 325.96,
      "Text": " there's no source code. So you have to go through and reverse engineer it. Also a pain. And"
    },
    {
      "Time_Start": 325.96,
      "Time_End": 332.03999999999996,
      "Text": " finally the documentation, super lacking. The other thing that Apple originally did which"
    },
    {
      "Time_Start": 332.04,
      "Time_End": 337.40000000000003,
      "Text": " was really not cool was that they actually neutered capabilities themselves. So story"
    },
    {
      "Time_Start": 337.40000000000003,
      "Time_End": 341.78000000000003,
      "Text": " time, you used to run network monitoring tools that ran directly in the kernel. Uh this"
    },
    {
      "Time_Start": 341.78000000000003,
      "Time_End": 346.42,
      "Text": " makes sense, it's where the networking stack is. Apple said mm we don't want third party"
    },
    {
      "Time_Start": 346.42,
      "Time_End": 350.46000000000004,
      "Text": " kernel extensions anymore in Mac OS so we're going to kick you all out of the kernel but"
    },
    {
      "Time_Start": 350.46000000000004,
      "Time_End": 355.76,
      "Text": " don't worry we've introduced some new frameworks that your code can link against and"
    },
    {
      "Time_Start": 355.76,
      "Time_End": 359.66,
      "Text": " utilize to give you the same capabilities. And I was like okay this is actually kind of"
    },
    {
      "Time_Start": 359.66,
      "Time_End": 363.26000000000005,
      "Text": " neat. Writing kernel code is a pain in the butt. If there's a bug in it it's going to panic"
    },
    {
      "Time_Start": 363.26000000000005,
      "Time_End": 367.82000000000005,
      "Text": " the box so yes I would rather write a tool that runs in user mode if it gives me the same"
    },
    {
      "Time_Start": 367.82000000000005,
      "Time_End": 373.70000000000005,
      "Text": " capabilities as before. What Apple didn't tell anybody is they exempted a large number of"
    },
    {
      "Time_Start": 373.70000000000005,
      "Time_End": 379.3,
      "Text": " processes that would not be routed through these user mode networking frameworks. So"
    },
    {
      "Time_Start": 379.3,
      "Time_End": 384.04,
      "Text": " imagine you wanted to write a firewall that maybe blocked all traffic. Yeah good luck"
    },
    {
      "Time_Start": 384.04,
      "Time_End": 388.54,
      "Text": " because Apple's system processes would be exempted from that. And again they did this"
    },
    {
      "Time_Start": 388.56,
      "Time_End": 393.94,
      "Text": " without telling anybody which in my opinion is well wrong. So we reversed engineering and"
    },
    {
      "Time_Start": 393.94,
      "Time_End": 398.90000000000003,
      "Text": " figured this out and called Apple out. Turned out it was trivial to leverage these trusted"
    },
    {
      "Time_Start": 398.90000000000003,
      "Time_End": 404.5,
      "Text": " processes to generate network activity on your own behalf. So once we created a proof of"
    },
    {
      "Time_Start": 404.5,
      "Time_End": 409.58000000000004,
      "Text": " concept that was able to bypass this and reported it to Apple, they said nah this is"
    },
    {
      "Time_Start": 409.58000000000004,
      "Time_End": 414.56,
      "Text": " functionality by design. Went to the press, made some noise, made Apple look bad, they"
    },
    {
      "Time_Start": 414.58,
      "Time_End": 419.58,
      "Text": " immediately fixed it. So a takeaway if you want to enact change at Apple, make them look bad."
    },
    {
      "Time_Start": 421.84,
      "Time_End": 426.88,
      "Text": " The unfortunate reality. So now as I mentioned let's look at some Mac malware, ones that"
    },
    {
      "Time_Start": 426.88,
      "Time_End": 430.82,
      "Text": " access the network to get a good understanding of the kind of activity we're going to look"
    },
    {
      "Time_Start": 430.82,
      "Time_End": 435.92,
      "Text": " for. The first malware sample I want to talk about is called dummy. I named it dummy"
    },
    {
      "Time_Start": 435.92,
      "Time_End": 440.6,
      "Text": " because it's pretty dumb. Uh but it's simple and effective in a way so maybe that's a kind"
    },
    {
      "Time_Start": 440.6,
      "Time_End": 446.14000000000004,
      "Text": " of a harsh name. We can see on the slide it's basically a bash script that executes various"
    },
    {
      "Time_Start": 446.14000000000004,
      "Time_End": 452.42,
      "Text": " Python commands that do three things. Connect out to the attacker's remote server, redirect"
    },
    {
      "Time_Start": 452.42,
      "Time_End": 458.22,
      "Text": " standard in out error, and then spawn an interactive shell that's tied to those sockets. And"
    },
    {
      "Time_Start": 458.22,
      "Time_End": 462.12,
      "Text": " again because the file descriptors for standard in and error have been redirected to the"
    },
    {
      "Time_Start": 462.12,
      "Time_End": 467.16,
      "Text": " socket, this gives the remote attacker a reverse shell on the infected system. So again it's"
    },
    {
      "Time_Start": 467.16,
      "Time_End": 473.56,
      "Text": " kind of a standard vanilla reverse shell. Another piece of Mac malware that uses the network"
    },
    {
      "Time_Start": 473.56,
      "Time_End": 478.34000000000003,
      "Text": " is IPStorm. IPStorm is interesting for a variety of reasons. One of the reasons is it was"
    },
    {
      "Time_Start": 478.34000000000003,
      "Time_End": 483.78000000000003,
      "Text": " originally written on Linux. As Macs become more popular, more prevalent, especially in the"
    },
    {
      "Time_Start": 483.78000000000003,
      "Time_End": 488.92,
      "Text": " enterprise, we're seeing a trend of malware authors and adversaries porting or"
    },
    {
      "Time_Start": 488.92,
      "Time_End": 494.08000000000004,
      "Text": " recompiling their malicious creations to run natively on Mac OS. IPStorm is a great example"
    },
    {
      "Time_Start": 494.09999999999997,
      "Time_End": 501.03999999999996,
      "Text": " of that. So hackers are definitely taking notice of Mac OS's increased popularity. Now as we"
    },
    {
      "Time_Start": 501.03999999999996,
      "Time_End": 506.76,
      "Text": " can see on the slide, the quote from the company that did the initial analysis, the malware"
    },
    {
      "Time_Start": 506.76,
      "Time_End": 512.02,
      "Text": " would propagate from one system to the next by SSH brute force attacks. Uh so the idea is if it"
    },
    {
      "Time_Start": 512.02,
      "Time_End": 516.0,
      "Text": " could guess the password or brute force in, it would then infect the system. So it had some"
    },
    {
      "Time_Start": 516.0,
      "Time_End": 521.36,
      "Text": " worm-like capabilities. Again this network activity, if we can uh observe that, maybe that's"
    },
    {
      "Time_Start": 521.38,
      "Time_End": 527.72,
      "Text": " an opportunity to detect this malware. Once IPStorm successfully infected a system, it would"
    },
    {
      "Time_Start": 527.72,
      "Time_End": 533.66,
      "Text": " then open a reverse shell. So again, network activity that we could perhaps use to detect uh"
    },
    {
      "Time_Start": 533.66,
      "Time_End": 539.9,
      "Text": " the infection. Another recent Mac malware specimen that leverages the network is GoRat. GoRat"
    },
    {
      "Time_Start": 539.9,
      "Time_End": 544.88,
      "Text": " is a pretty standard but fairly feature complete backdoor for Mac OS. I've listed its"
    },
    {
      "Time_Start": 544.88,
      "Time_End": 550.08,
      "Text": " capabilities. You can see it things, it does things like upload files, download files, pretty"
    },
    {
      "Time_Start": 550.1,
      "Time_End": 555.24,
      "Text": " standard. However it does have some additional capabilities which we don't commonly see in Mac"
    },
    {
      "Time_Start": 555.24,
      "Time_End": 560.5200000000001,
      "Text": " malware that allow it to interact with other systems via the network. For example it has the"
    },
    {
      "Time_Start": 560.5200000000001,
      "Time_End": 564.7800000000001,
      "Text": " ability to generate a port scan. So again if we're interested in detecting malware via network"
    },
    {
      "Time_Start": 564.7800000000001,
      "Time_End": 569.2800000000001,
      "Text": " activity, if the malware is generating port scans of remote systems, maybe something uh that's"
    },
    {
      "Time_Start": 569.2800000000001,
      "Time_End": 573.96,
      "Text": " something we can pick up on. It also has the ability to set up tun- tunnels and proxies, more"
    },
    {
      "Time_Start": 573.96,
      "Time_End": 579.9000000000001,
      "Text": " network activity to- for us to detect. It's also worth talking about supply chain attacks."
    },
    {
      "Time_Start": 579.92,
      "Time_End": 584.78,
      "Text": " These are becoming unfortunately ever more prolific. And again the adversaries are now"
    },
    {
      "Time_Start": 584.78,
      "Time_End": 591.26,
      "Text": " starting to target Mac OS systems. Normally supply chain attacks mostly impacted uh Windows"
    },
    {
      "Time_Start": 591.26,
      "Time_End": 596.84,
      "Text": " systems. A great example of this, of a supply chain attack attacking and targeting Mac systems"
    },
    {
      "Time_Start": 596.84,
      "Time_End": 601.84,
      "Text": " is 3CX. Uh what happened is an APT group associated with the North Koreans broke into 3CX"
    },
    {
      "Time_Start": 602.46,
      "Time_End": 607.46,
      "Text": " which is a popular PBX software for uh the enterprise. They installed a Mac OS backdoor on"
    },
    {
      "Time_Start": 611.1,
      "Time_End": 616.1,
      "Text": " 3CX's build server and trojanized 3CX's desktop application. This meant when users around"
    },
    {
      "Time_Start": 618.44,
      "Time_End": 623.9,
      "Text": " the world downloaded the update they would inadvertently get infected. One thing to note is"
    },
    {
      "Time_Start": 623.9,
      "Time_End": 628.64,
      "Text": " before the adversaries did this uh after they infected the installer but before they"
    },
    {
      "Time_Start": 628.64,
      "Time_End": 632.92,
      "Text": " distributed it they actually sent it to Apple. And this is because on recent versions of"
    },
    {
      "Time_Start": 632.92,
      "Time_End": 637.72,
      "Text": " Mac OS software has to be notarized which means Apple has scanned it and given it their stamp"
    },
    {
      "Time_Start": 637.72,
      "Time_End": 642.36,
      "Text": " of approval before it will run. So the attackers took a little bit of a gamble here"
    },
    {
      "Time_Start": 642.36,
      "Time_End": 648.1,
      "Text": " essentially sending the infected installer to Cupertino. Apple happily notarized it. Less"
    },
    {
      "Time_Start": 648.1,
      "Time_End": 654.34,
      "Text": " than ideal. So how was 3CX, how was the supply chain found? Because again, super stealthy"
    },
    {
      "Time_Start": 654.34,
      "Time_End": 659.6800000000001,
      "Text": " uh and the payload is you know signed and notarized. Well it turns out via network traffic."
    },
    {
      "Time_Start": 659.6800000000001,
      "Time_End": 665.1800000000001,
      "Text": " So as we can see on the slide from the 3CX forums the user basically said hey one of my EDR"
    },
    {
      "Time_Start": 665.1800000000001,
      "Time_End": 671.52,
      "Text": " products noticed anomalous DNS requests gener- generated from the 3CX application. So"
    },
    {
      "Time_Start": 671.52,
      "Time_End": 675.2,
      "Text": " again this kind of drives home the point of the power of network detection and especially in"
    },
    {
      "Time_Start": 675.2,
      "Time_End": 680.2,
      "Text": " the context of supply chain attacks. This is probably the best approach for us to detect"
    },
    {
      "Time_Start": 680.2,
      "Time_End": 686.6400000000001,
      "Text": " intrusions. Speaking of best approaches, also worth mentioning iOS. Now this talk is"
    },
    {
      "Time_Start": 686.6400000000001,
      "Time_End": 691.74,
      "Text": " predominantly about Mac OS but a lot of the techniques we talk about, the frameworks also"
    },
    {
      "Time_Start": 691.74,
      "Time_End": 698.48,
      "Text": " exist on iOS. So it would be not that difficult to write similar capabilities on iOS. Now to"
    },
    {
      "Time_Start": 698.48,
      "Time_End": 704.38,
      "Text": " detect malware on iOS you're basically SOL because iOS is so locked down. On a non GL"
    },
    {
      "Time_Start": 704.38,
      "Time_End": 709.26,
      "Text": " broken iPhone you can't even get a list of running processes. So like how are you going to"
    },
    {
      "Time_Start": 709.28,
      "Time_End": 713.76,
      "Text": " detect malware? Unfortunately nation states have zero click zero day vulnerabilities that"
    },
    {
      "Time_Start": 713.76,
      "Time_End": 718.72,
      "Text": " allow them to infect iOS devices by merely knowing someone's phone number. Uh so"
    },
    {
      "Time_Start": 718.72,
      "Time_End": 723.76,
      "Text": " anywhere in the world they can hit you. And once they're in, yes that's a hard target to get"
    },
    {
      "Time_Start": 723.76,
      "Time_End": 728.9,
      "Text": " into, but they can actually leverage the security of that system as a protection mechanism."
    },
    {
      "Time_Start": 728.9,
      "Time_End": 733.6,
      "Text": " For example I just mentioned you can't run a list, a process list thing, so the adversaries"
    },
    {
      "Time_Start": 733.62,
      "Time_End": 739.46,
      "Text": " once they're in they're like happy. An example of this is Kaspersky and the triangulation"
    },
    {
      "Time_Start": 739.46,
      "Time_End": 744.86,
      "Text": " malware. This recently came out where an unknown adversary hacked into corporate and"
    },
    {
      "Time_Start": 744.86,
      "Time_End": 750.7,
      "Text": " employee devices uh of Kaspersky, the Russian antivirus company. Uh and remained undetected"
    },
    {
      "Time_Start": 750.7,
      "Time_End": 756.38,
      "Text": " for 4 years existing on their iOS devices. That is insane. Kaspersky is one of the top"
    },
    {
      "Time_Start": 756.38,
      "Time_End": 761.12,
      "Text": " security EDR AV companies in the world. They did not detect uh an infection on their own"
    },
    {
      "Time_Start": 761.14,
      "Time_End": 766.34,
      "Text": " systems for 4 years and that's not their fault per se. How did they eventually detect it?"
    },
    {
      "Time_Start": 766.34,
      "Time_End": 770.62,
      "Text": " Network traffic as we can see on the slide. So again if you're doing malware analysis on"
    },
    {
      "Time_Start": 770.62,
      "Time_End": 775.76,
      "Text": " iOS or malware detection rather, network is really the place you want to be and perhaps the"
    },
    {
      "Time_Start": 775.76,
      "Time_End": 781.5600000000001,
      "Text": " only way you're going to detect especially these more stealthy and advanced uh attacks."
    },
    {
      "Time_Start": 781.5600000000001,
      "Time_End": 786.74,
      "Text": " Okay so that gives us an overview of macOS malware. Hopefully you've illustrated that we"
    },
    {
      "Time_Start": 786.74,
      "Time_End": 790.78,
      "Text": " really want to be looking at network activity uh because again most of the malware is going"
    },
    {
      "Time_Start": 790.8,
      "Time_End": 796.24,
      "Text": " to generate something that's observable. So now let's talk about how to uh enumerate this"
    },
    {
      "Time_Start": 796.24,
      "Time_End": 802.0,
      "Text": " network activity starting by using file descriptors. The idea is pretty basic and that is"
    },
    {
      "Time_Start": 802.0,
      "Time_End": 808.28,
      "Text": " on macOS very similar to BSD and some other Linux-y like operating systems. File descriptors"
    },
    {
      "Time_Start": 808.28,
      "Time_End": 812.98,
      "Text": " are kind of everything meaning sockets themselves are also file descriptors. So what we're"
    },
    {
      "Time_Start": 812.98,
      "Time_End": 818.36,
      "Text": " going to do is we simply query the operating system, we specify the process ID of a process"
    },
    {
      "Time_Start": 818.38,
      "Time_End": 824.1800000000001,
      "Text": " we're interested in and the operating system will give us a list of file descriptors that"
    },
    {
      "Time_Start": 824.1800000000001,
      "Time_End": 829.98,
      "Text": " that process has open. What we can then do is iterate through that focusing only on"
    },
    {
      "Time_Start": 829.98,
      "Time_End": 834.42,
      "Text": " sockets right? We don't really care about normal file descriptors. And for those sockets"
    },
    {
      "Time_Start": 834.42,
      "Time_End": 839.86,
      "Text": " then we can query the operating system again to get information about those. So here's the"
    },
    {
      "Time_Start": 839.86,
      "Time_End": 843.96,
      "Text": " example code. I'm not going to walk through the code because I don't think you want me up"
    },
    {
      "Time_Start": 843.96,
      "Time_End": 849.88,
      "Text": " here like going line by line but you know I wanted to put this up here for uh you know like as a"
    },
    {
      "Time_Start": 849.88,
      "Time_End": 854.34,
      "Text": " resource so later you can go back and and check it out. But I'll briefly describe some of it."
    },
    {
      "Time_Start": 854.34,
      "Time_End": 859.38,
      "Text": " So on the bottom what we're doing is we're invoking the proc PID info API. We invoke this"
    },
    {
      "Time_Start": 859.38,
      "Time_End": 865.26,
      "Text": " first with a PID uh the process we're interested in file descriptors uh and then a bunch of nulls"
    },
    {
      "Time_Start": 865.26,
      "Time_End": 870.6,
      "Text": " the operating system will return to us the size of the buffer we need to allocate to store"
    },
    {
      "Time_Start": 870.6,
      "Time_End": 875.88,
      "Text": " the file descriptors in memory. Uh we allocate that buffer, call that API again with the size"
    },
    {
      "Time_Start": 875.88,
      "Time_End": 880.52,
      "Text": " and our newly allocated buffer and voila we get a list of the file descriptors that the"
    },
    {
      "Time_Start": 880.52,
      "Time_End": 886.96,
      "Text": " process has open. Again this is gonna include normal files but also sockets. Now what we're"
    },
    {
      "Time_Start": 886.96,
      "Time_End": 890.86,
      "Text": " gonna do is we're gonna iterate through all of those file descriptors and we're gonna focus"
    },
    {
      "Time_Start": 890.86,
      "Time_End": 897.0,
      "Text": " on those that are just sockets. So you can see again some example code that implements this."
    },
    {
      "Time_Start": 897.0,
      "Time_End": 903.1,
      "Text": " For each file descriptor that is a socket we then call the proc PID FD info with that"
    },
    {
      "Time_Start": 903.1,
      "Time_End": 910.32,
      "Text": " socket file descriptor to get socket specific information. From that we can now examine the"
    },
    {
      "Time_Start": 910.32,
      "Time_End": 914.98,
      "Text": " socket. The first thing we do is we make sure it's a networking socket. On Mac OS you can"
    },
    {
      "Time_Start": 914.98,
      "Time_End": 920.26,
      "Text": " also have Unix sockets which are local sockets used for IPC mechanisms. We don't care about"
    },
    {
      "Time_Start": 920.26,
      "Time_End": 925.7,
      "Text": " those in the context of detecting Mac malware. So you can see on the slide we focus on AF"
    },
    {
      "Time_Start": 925.7,
      "Time_End": 932.7,
      "Text": " INET or AF INET 6 IPV4 or 6 sockets only. We compile this code and run it. I run it against uh"
    },
    {
      "Time_Start": 932.7,
      "Time_End": 937.5400000000001,
      "Text": " the GitHub desktop application that's running on my system. We can see it found 70 file"
    },
    {
      "Time_Start": 937.5400000000001,
      "Time_End": 943.38,
      "Text": " descriptors and has filtered out those that are sockets which is a very small subset. Why am I"
    },
    {
      "Time_Start": 943.38,
      "Time_End": 948.4200000000001,
      "Text": " using GitHub desktop? Great question. Uh it's obviously a legitimate application. This is not"
    },
    {
      "Time_Start": 948.4200000000001,
      "Time_End": 952.86,
      "Text": " malware. It's easy to test with. It has a lot of legitimate connections. I always like to test"
    },
    {
      "Time_Start": 952.86,
      "Time_End": 958.8000000000001,
      "Text": " my code on legitimate software before trying it on malware. And also re-illustrates the"
    },
    {
      "Time_Start": 958.8000000000001,
      "Time_End": 963.8000000000001,
      "Text": " point that legitimate applications obviously are gonna use the network uh as well. So now"
    },
    {
      "Time_Start": 965.74,
      "Time_End": 971.64,
      "Text": " that we have a network socket we can start extracting relevant information from that. If it's"
    },
    {
      "Time_Start": 971.64,
      "Time_End": 976.88,
      "Text": " a UDP socket there's not a ton of information because it's stateless. But we can at least for"
    },
    {
      "Time_Start": 976.88,
      "Time_End": 981.88,
      "Text": " example extract the local port. For TCP sockets there's tons more information available to us."
    },
    {
      "Time_Start": 984.04,
      "Time_End": 988.02,
      "Text": " Again not gonna walk through all of this. Kind of some boring code. But you can see we're able"
    },
    {
      "Time_Start": 988.02,
      "Time_End": 993.62,
      "Text": " to extract for example the information about the remote endpoint. The remote uh remote IP"
    },
    {
      "Time_Start": 993.62,
      "Time_End": 997.72,
      "Text": " address and remote port. Clearly you can see if we're trying to detect malware this is useful"
    },
    {
      "Time_Start": 997.72,
      "Time_End": 1001.5,
      "Text": " right? Where is this application talking to? Is it a command and control server in North"
    },
    {
      "Time_Start": 1001.52,
      "Time_End": 1007.82,
      "Text": " Korea? Okay that's a big red flag. Or is it just some well-known trusted endpoint? So if we"
    },
    {
      "Time_Start": 1007.82,
      "Time_End": 1012.5,
      "Text": " compile and run this against uh GitHub Desktop now since we're extracting all the socket"
    },
    {
      "Time_Start": 1012.5,
      "Time_End": 1018.04,
      "Text": " information we can see all the information about GitHub Desktop's network activity. Uh so"
    },
    {
      "Time_Start": 1018.04,
      "Time_End": 1023.48,
      "Text": " socket details such as the family, the port, the protocol, remote uh local information,"
    },
    {
      "Time_Start": 1023.48,
      "Time_End": 1029.92,
      "Text": " et cetera et cetera. So now if we run this code against uh or on a system that is infected"
    },
    {
      "Time_Start": 1029.94,
      "Time_End": 1035.78,
      "Text": " with OS dummy, OXX dummy, we can see that this code picks up the fact that there is a"
    },
    {
      "Time_Start": 1035.78,
      "Time_End": 1040.78,
      "Text": " established connection on port 1337, yes this is the port the malware uses, uh to some"
    },
    {
      "Time_Start": 1042.8600000000001,
      "Time_End": 1047.1200000000001,
      "Text": " remote uh command and control server. And you're like okay that's that's interesting now we"
    },
    {
      "Time_Start": 1047.1200000000001,
      "Time_End": 1052.9,
      "Text": " can determine that but you know dummy as we know uses Python to set up the reverse shell."
    },
    {
      "Time_Start": 1052.9,
      "Time_End": 1059.0,
      "Text": " So the question is how can I tell from solely this network activity that this instance of"
    },
    {
      "Time_Start": 1059.02,
      "Time_End": 1064.96,
      "Text": " Python is being used maliciously? Great question, we'll get to that shortly. Now let's talk"
    },
    {
      "Time_Start": 1064.96,
      "Time_End": 1069.92,
      "Text": " about enumerating network state using the private network statistics framework. And the"
    },
    {
      "Time_Start": 1069.92,
      "Time_End": 1074.66,
      "Text": " reason I want to talk about this other way is that it has some additional pros over the"
    },
    {
      "Time_Start": 1074.66,
      "Time_End": 1079.6,
      "Text": " method we just talked, the file descriptor method. So via the ProcPid API method that we"
    },
    {
      "Time_Start": 1079.6,
      "Time_End": 1084.94,
      "Text": " just talked about, a few kind of perhaps downsides to it, it's process specific so you only"
    },
    {
      "Time_Start": 1084.98,
      "Time_End": 1089.76,
      "Text": " get the file handles for the process you specify. Of course you can just enumerate all the"
    },
    {
      "Time_Start": 1089.76,
      "Time_End": 1094.6000000000001,
      "Text": " processes and make the requests for each one but that's some additional code. Also we get"
    },
    {
      "Time_Start": 1094.6000000000001,
      "Time_End": 1099.26,
      "Text": " all the file descriptors so we had to add additional code to filter out the sockets. Again"
    },
    {
      "Time_Start": 1099.26,
      "Time_End": 1105.3600000000001,
      "Text": " totally doable but extra code. Most notably though it doesn't provide us any statistics."
    },
    {
      "Time_Start": 1105.3600000000001,
      "Time_End": 1110.64,
      "Text": " Like I want to know how much data, how many bytes uh a network connection is responsible"
    },
    {
      "Time_Start": 1110.64,
      "Time_End": 1116.26,
      "Text": " for. Uh for example is an application exfiltrating gigs of data? That's super interesting. We"
    },
    {
      "Time_Start": 1116.26,
      "Time_End": 1122.76,
      "Text": " cannot determine that from file handles, file descriptors alone. So what do we do? Well it"
    },
    {
      "Time_Start": 1122.76,
      "Time_End": 1127.6000000000001,
      "Text": " turns out there's a very interesting utility that's built into Mac OS, it's an Apple utility"
    },
    {
      "Time_Start": 1127.6000000000001,
      "Time_End": 1133.0600000000002,
      "Text": " uh called NetTop. And if you execute it, it gives us all the information we're looking for. So"
    },
    {
      "Time_Start": 1133.0600000000002,
      "Time_End": 1137.9,
      "Text": " it's global, so it's for every process. Uh it's just sockets so we don't have to worry about"
    },
    {
      "Time_Start": 1137.9,
      "Time_End": 1143.24,
      "Text": " other files. And also it provides statistics, how many bytes up and down uh each connection"
    },
    {
      "Time_Start": 1143.24,
      "Time_End": 1149.92,
      "Text": " is responsible for. Unfortunately this utility is closed source uh so we can't utilize it"
    },
    {
      "Time_Start": 1149.92,
      "Time_End": 1155.26,
      "Text": " pro-programmatically very easily. But if we look at its dependencies, the libraries it's"
    },
    {
      "Time_Start": 1155.26,
      "Time_End": 1159.96,
      "Text": " linked against, and we can do that with the o-tool utility, we can see that it's linked"
    },
    {
      "Time_Start": 1159.96,
      "Time_End": 1164.96,
      "Text": " against a private framework called network statistics dot framework. Now the well regarded"
    },
    {
      "Time_Start": 1165.7,
      "Time_End": 1171.74,
      "Text": " noted security researcher Jonathan Levin actually fully reversed engineered this framework"
    },
    {
      "Time_Start": 1171.74,
      "Time_End": 1177.68,
      "Text": " and wrote a nice open source command line utility leveraging this uh network private"
    },
    {
      "Time_Start": 1177.68,
      "Time_End": 1183.18,
      "Text": " framework. So you can check that out. I love that but I wanted a UI version. I wanted a tool"
    },
    {
      "Time_Start": 1183.18,
      "Time_End": 1188.26,
      "Text": " that a user would be very easily able to double click and see all network activity on their"
    },
    {
      "Time_Start": 1188.26,
      "Time_End": 1193.42,
      "Text": " system. So the first tool I want to talk about today is called Netikit. It's built on top of"
    },
    {
      "Time_Start": 1193.42,
      "Time_End": 1198.3600000000001,
      "Text": " the private uh network statistics framework and it's a nice UI. It's a pretty simple tool"
    },
    {
      "Time_Start": 1198.3600000000001,
      "Time_End": 1203.8000000000002,
      "Text": " but it will show you all the network activity on your system, a snapshot of that. Uh kind of"
    },
    {
      "Time_Start": 1203.8000000000002,
      "Time_End": 1209.64,
      "Text": " organized by process. You can also see information as you would expect about the interface"
    },
    {
      "Time_Start": 1209.64,
      "Time_End": 1214.6000000000001,
      "Text": " it's bound to, the state of the connection, but yes also bytes up and down. If you're"
    },
    {
      "Time_Start": 1214.6000000000001,
      "Time_End": 1219.3200000000002,
      "Text": " interested in learning more about this tool, pop over to the Objective-C website. It's free,"
    },
    {
      "Time_Start": 1219.4199999999998,
      "Time_End": 1226.62,
      "Text": " fully open source. But let's look briefly at some of the code uh behind it. The code that"
    },
    {
      "Time_Start": 1226.62,
      "Time_End": 1230.7,
      "Text": " interacts with the private network statistics framework because it's actually pretty"
    },
    {
      "Time_Start": 1230.7,
      "Time_End": 1236.26,
      "Text": " straightforward. So the first thing you have to do is create a nstat manager, a network"
    },
    {
      "Time_Start": 1236.26,
      "Time_End": 1242.1799999999998,
      "Text": " statistics manager. You allocate that. Once that has been created you set a callback block"
    },
    {
      "Time_Start": 1242.1799999999998,
      "Time_End": 1248.12,
      "Text": " via the nstat sort set description block function. And we'll get to that in a second. Then"
    },
    {
      "Time_Start": 1248.14,
      "Time_End": 1252.48,
      "Text": " you tell the operating system that framework that you're interested in all TCP and all"
    },
    {
      "Time_Start": 1252.48,
      "Time_End": 1258.16,
      "Text": " UDP connection. There are uh APIs for that. And then what you do is you start a query. This"
    },
    {
      "Time_Start": 1258.16,
      "Time_End": 1263.7600000000002,
      "Text": " tells the operating system to call the API in the framework and enumerate all current"
    },
    {
      "Time_Start": 1263.7600000000002,
      "Time_End": 1269.8400000000001,
      "Text": " network activity. And for each connection it will invoke the callback block that you set."
    },
    {
      "Time_Start": 1269.8400000000001,
      "Time_End": 1275.98,
      "Text": " So here we just call NS log which will print out information about that. We then link in"
    },
    {
      "Time_Start": 1276.0,
      "Time_End": 1280.58,
      "Text": " the network statistics framework and run it. What information do we get for each"
    },
    {
      "Time_Start": 1280.58,
      "Time_End": 1285.28,
      "Text": " connection? A ton. Which is great. Detecting malware, the more information we have, the"
    },
    {
      "Time_Start": 1285.28,
      "Time_End": 1291.48,
      "Text": " better. So here are the details from one single connection from GitHub Desktop. A little"
    },
    {
      "Time_Start": 1291.48,
      "Time_End": 1295.72,
      "Text": " hard to read that's kind of by design just to show you how much information this private"
    },
    {
      "Time_Start": 1295.72,
      "Time_End": 1300.7,
      "Text": " framework gives you again for every connection on the host. You can see the responsible"
    },
    {
      "Time_Start": 1300.7,
      "Time_End": 1304.64,
      "Text": " process. Again this is something we really are interested in. Is it malware or is it you"
    },
    {
      "Time_Start": 1304.66,
      "Time_End": 1309.5,
      "Text": " know GitHub Desktop. We also get the transmitted bytes up and down. And then if it's a TCP"
    },
    {
      "Time_Start": 1309.5,
      "Time_End": 1314.9,
      "Text": " connection a ton of information uh about the connection as well. So a really powerful"
    },
    {
      "Time_Start": 1314.9,
      "Time_End": 1320.94,
      "Text": " framework to use. Now there's always pros and cons to everything so I always like to point"
    },
    {
      "Time_Start": 1320.94,
      "Time_End": 1326.0800000000002,
      "Text": " out some of the downsides. And the biggest downsides to the two approaches we've talked"
    },
    {
      "Time_Start": 1326.0800000000002,
      "Time_End": 1331.96,
      "Text": " about so far are that they only provide you a snapshot of the current state of the network"
    },
    {
      "Time_Start": 1331.98,
      "Time_End": 1338.58,
      "Text": " on the host. Why is this problematic? Well if malware is sleeping or only beacons out once"
    },
    {
      "Time_Start": 1338.58,
      "Time_End": 1343.6200000000001,
      "Text": " an hour and you perform your snapshot of network activity between that you will not see the"
    },
    {
      "Time_Start": 1343.6200000000001,
      "Time_End": 1347.96,
      "Text": " network activity associated with the malware. And this is actually very common. For example"
    },
    {
      "Time_Start": 1347.96,
      "Time_End": 1352.96,
      "Text": " both dummy and some of the 3CX payloads utilize sleep or beacon or connect out on certain"
    },
    {
      "Time_Start": 1355.3,
      "Time_End": 1359.8400000000001,
      "Text": " intervals. So again perhaps our tools might miss them. Now of course you could take a"
    },
    {
      "Time_Start": 1359.86,
      "Time_End": 1365.02,
      "Text": " snapshot every 5 seconds but that might be somewhat resource intensive and also you still"
    },
    {
      "Time_Start": 1365.02,
      "Time_End": 1370.9599999999998,
      "Text": " might miss the malware. So what we need to do now is kind of graduate up and talk about more"
    },
    {
      "Time_Start": 1370.9599999999998,
      "Time_End": 1377.6999999999998,
      "Text": " comprehensive tools that allow us to continually monitor the network. So at any time if the"
    },
    {
      "Time_Start": 1377.6999999999998,
      "Time_End": 1383.1,
      "Text": " network or a malicious uh piece of software tries to access the network in an unauthorized"
    },
    {
      "Time_Start": 1383.1,
      "Time_End": 1389.04,
      "Text": " manner we will be there to observe it. So let's start by talking about how to build a DNS"
    },
    {
      "Time_Start": 1389.04,
      "Time_End": 1394.82,
      "Text": " monitor. That's gonna run natively on macOS fully in user mode. The idea is pretty"
    },
    {
      "Time_Start": 1394.82,
      "Time_End": 1399.28,
      "Text": " straightforward. The majority of malware regardless of how it gets onto your system is going"
    },
    {
      "Time_Start": 1399.28,
      "Time_End": 1404.76,
      "Text": " to connect out to a remote server and most malware does that via domain which means it's"
    },
    {
      "Time_Start": 1404.76,
      "Time_End": 1411.04,
      "Text": " first going to have to resolve the name. Sure we all know how DNS works but a quick recap."
    },
    {
      "Time_Start": 1411.04,
      "Time_End": 1415.8,
      "Text": " The malware tries to connect out. This generates a DNS request to the DNS server. The DNS"
    },
    {
      "Time_Start": 1415.8,
      "Time_End": 1421.74,
      "Text": " server returns the IP address and then the malware connects out to the IP address. So the"
    },
    {
      "Time_Start": 1421.74,
      "Time_End": 1427.08,
      "Text": " question is, is this a good approach to detect malware? And I think the answer is yes. It's"
    },
    {
      "Time_Start": 1427.08,
      "Time_End": 1431.22,
      "Text": " very efficient because again most malware is gonna be generating DNS requests. We don't"
    },
    {
      "Time_Start": 1431.22,
      "Time_End": 1436.02,
      "Text": " have to monitor all network traffic. And in the case of some very stealthy malware attacks"
    },
    {
      "Time_Start": 1436.02,
      "Time_End": 1441.86,
      "Text": " like the 3CX one, this was actually how the malware was detected in the first place."
    },
    {
      "Time_Start": 1441.8600000000001,
      "Time_End": 1448.4,
      "Text": " Anomalous DNS requests. So how do we build a DNS monitor for macOS? More generically, how"
    },
    {
      "Time_Start": 1448.4,
      "Time_End": 1454.1000000000001,
      "Text": " do we build these monitoring tools that allow us to continually monitor the network? The"
    },
    {
      "Time_Start": 1454.1000000000001,
      "Time_End": 1459.64,
      "Text": " answer is to use Apple's network extensions framework. This is a pretty new framework that"
    },
    {
      "Time_Start": 1459.64,
      "Time_End": 1465.18,
      "Text": " Apple uh now affords us to use. Uh I believe originally was available on iOS but now you can"
    },
    {
      "Time_Start": 1465.18,
      "Time_End": 1470.3600000000001,
      "Text": " utilize it on macOS. And like some of the other frameworks and APIs I've talked about, this"
    },
    {
      "Time_Start": 1470.38,
      "Time_End": 1476.16,
      "Text": " is actually decently documented. So kudos to Apple here. You can read on Apple's site all the"
    },
    {
      "Time_Start": 1476.16,
      "Time_End": 1480.8600000000001,
      "Text": " cool things you can do with network extensions. They're actually incredibly powerful. We're"
    },
    {
      "Time_Start": 1480.8600000000001,
      "Time_End": 1486.2,
      "Text": " gonna focus on the last two. Uh specifically how to intercept DNS traffic and then we're gonna"
    },
    {
      "Time_Start": 1486.2,
      "Time_End": 1491.44,
      "Text": " talk at the very end about how to filter all network traffic. So again we can use network"
    },
    {
      "Time_Start": 1491.44,
      "Time_End": 1496.48,
      "Text": " extensions to do both of these. There's a great WWDC video where Apple explains exactly how"
    },
    {
      "Time_Start": 1496.5,
      "Time_End": 1501.5,
      "Text": " to use these. Have a watch. So in order to build a DNS uh monitor we actually are going to"
    },
    {
      "Time_Start": 1504.14,
      "Time_End": 1509.14,
      "Text": " use a DNS proxy class. Uh and that is the NEDNS proxy manager class. So I saw this in the"
    },
    {
      "Time_Start": 1511.48,
      "Time_End": 1517.22,
      "Text": " documentation and it says hey this will allow your application to intercept all DNS traffic."
    },
    {
      "Time_Start": 1517.22,
      "Time_End": 1522.22,
      "Text": " Perfect. How do I do this? So I write code by Googling things. Uh and so I just Googled it and"
    },
    {
      "Time_Start": 1522.44,
      "Time_End": 1529.24,
      "Text": " there was like two hits. The first one was Apple's developer documentation that kinda"
    },
    {
      "Time_Start": 1529.24,
      "Time_End": 1534.68,
      "Text": " described the APIs but not much more. And then the second hit was like hey y'all how do we do"
    },
    {
      "Time_Start": 1534.68,
      "Time_End": 1540.48,
      "Text": " this? So I was like ah well other people are in the same boat as me. There's no example code."
    },
    {
      "Time_Start": 1540.48,
      "Time_End": 1545.56,
      "Text": " There's no great documentation. So this could also be a learning experience for me. This is a"
    },
    {
      "Time_Start": 1545.56,
      "Time_End": 1550.56,
      "Text": " tool I wanna write anyways. Uh so I saw that there would be some uh other interest as well."
    },
    {
      "Time_Start": 1550.6,
      "Time_End": 1554.7,
      "Text": " You know I'm not the only person who wants a host based DNS monitor for macOS. There's at"
    },
    {
      "Time_Start": 1554.7,
      "Time_End": 1561.22,
      "Text": " least one other person. So worth it. So the tool I wrote is called DNS monitor. Uh again it's"
    },
    {
      "Time_Start": 1561.22,
      "Time_End": 1565.72,
      "Text": " fully open source free on Objective-C dot org. And you see when we execute it from the"
    },
    {
      "Time_Start": 1565.72,
      "Time_End": 1571.52,
      "Text": " terminal if we then resolve a DNS name, for example Objective-C dot org via NS lookup, this"
    },
    {
      "Time_Start": 1571.52,
      "Time_End": 1576.52,
      "Text": " will generate a DNS request that we can intercept. Now unfortunately there are several"
    },
    {
      "Time_Start": 1577.02,
      "Time_End": 1582.02,
      "Text": " prerequisites. So if you're interested in writing your own network monitoring tools, which you"
    },
    {
      "Time_Start": 1584.5,
      "Time_End": 1589.5,
      "Text": " should. It's great fun. Uh there are some hoops you have to jump through unfortunately. So"
    },
    {
      "Time_Start": 1591.1,
      "Time_End": 1595.8799999999999,
      "Text": " first when building it you have to have certain entitlements that Apple may or may not give"
    },
    {
      "Time_Start": 1595.8799999999999,
      "Time_End": 1601.52,
      "Text": " you. So be prepared to beg. Also then when you build it there's a lot of constraints. Uh"
    },
    {
      "Time_Start": 1601.52,
      "Time_End": 1606.42,
      "Text": " specifically you have to put your network extension in a certain place of the application. Uh"
    },
    {
      "Time_Start": 1606.42,
      "Time_End": 1610.3600000000001,
      "Text": " so building the project can get a little hairy. And then of course you have to sign and"
    },
    {
      "Time_Start": 1610.3600000000001,
      "Time_End": 1613.8000000000002,
      "Text": " notarize this. So this means you have to at least pay Apple a few hundred bucks for the"
    },
    {
      "Time_Start": 1613.8000000000002,
      "Time_End": 1620.8000000000002,
      "Text": " developer ID and get them to uh validate and notarize it. Okay now you want your runner, your"
    },
    {
      "Time_Start": 1620.8000000000002,
      "Time_End": 1627.24,
      "Text": " user to run it. What do they have to do? Click a lot. So if you go to Objective-C dot org and"
    },
    {
      "Time_Start": 1627.24,
      "Time_End": 1632.48,
      "Text": " download DNS monitor, which is entitled, which means Apple gave me permission to do this. It's"
    },
    {
      "Time_Start": 1632.48,
      "Time_End": 1637.32,
      "Text": " signed and notarized which means Apple has scanned it and verified it. You still have to"
    },
    {
      "Time_Start": 1637.32,
      "Time_End": 1642.1200000000001,
      "Text": " click allow on this Safari prompt. When you open it Gatekeeper's gonna bug you. So you're"
    },
    {
      "Time_Start": 1642.1200000000001,
      "Time_End": 1646.06,
      "Text": " gonna have to click allow there. When you go to launch the app it's gonna say hey wait a"
    },
    {
      "Time_Start": 1646.06,
      "Time_End": 1650.66,
      "Text": " minute this is a network extension instead of system extension. You need to approve that. So"
    },
    {
      "Time_Start": 1650.66,
      "Time_End": 1656.26,
      "Text": " you have to click open security systems. Uh you then once in there have to approve that."
    },
    {
      "Time_Start": 1656.26,
      "Time_End": 1660.14,
      "Text": " Which is gonna require you to authorize. So you're gonna have to put in your password. Uh and"
    },
    {
      "Time_Start": 1660.14,
      "Time_End": 1664.2,
      "Text": " then finally before it's able to access the network to monitor for traffic you're gonna have"
    },
    {
      "Time_Start": 1664.2,
      "Time_End": 1668.44,
      "Text": " to click allow one more time. So this is slightly annoying and if you're writing code you"
    },
    {
      "Time_Start": 1668.44,
      "Time_End": 1672.44,
      "Text": " have to handle all these situations. Like what if the user clicks no? You have to handle code"
    },
    {
      "Time_Start": 1672.44,
      "Time_End": 1677.38,
      "Text": " to maybe do this again or fail gracefully. So this is a little annoying and at this point I'm"
    },
    {
      "Time_Start": 1677.38,
      "Time_End": 1683.5600000000002,
      "Text": " like man macOS has really become like Windows Vista. You might not be as old as I am so you"
    },
    {
      "Time_Start": 1683.5600000000002,
      "Time_End": 1687.42,
      "Text": " might not remember Vista but Vista was like this Windows operating system where you had to"
    },
    {
      "Time_Start": 1687.44,
      "Time_End": 1692.42,
      "Text": " click allow on everything. And everyone like made fun of it. Guess who made the most fun of it?"
    },
    {
      "Time_Start": 1692.42,
      "Time_End": 1698.02,
      "Text": " Apple. They made these hilarious commercials basically ragging on Vista for having a user"
    },
    {
      "Time_Start": 1698.02,
      "Time_End": 1703.96,
      "Text": " click allow. And since you might not remember that I have the commercial here that we are now"
    },
    {
      "Time_Start": 1703.96,
      "Time_End": 1709.26,
      "Text": " gonna watch. So I hope the audio works if not there's subtitles. Hello I'm a Mac. Mac has"
    },
    {
      "Time_Start": 1709.26,
      "Time_End": 1713.3400000000001,
      "Text": " issued a salutation cancel or allow. This is an Apple commercial. Allow and I'm a PC. You're"
    },
    {
      "Time_Start": 1713.3600000000001,
      "Time_End": 1719.3600000000001,
      "Text": " returning Mac's salutation cancel or allow. Allow. Mac is asking question cancel or allow."
    },
    {
      "Time_Start": 1719.3600000000001,
      "Time_End": 1724.4,
      "Text": " Allow. He's part of Vista my new operating system. PCs have a lot of security problems so he"
    },
    {
      "Time_Start": 1724.4,
      "Time_End": 1728.2800000000002,
      "Text": " asked me to authorize pretty much anything I do. You're pointing out Vista's flaws cancel or"
    },
    {
      "Time_Start": 1728.2800000000002,
      "Time_End": 1731.68,
      "Text": " allow. Allow. I could turn him off but then he wouldn't give me any warnings at all and that"
    },
    {
      "Time_Start": 1731.68,
      "Time_End": 1736.68,
      "Text": " would defeat the purpose. You are coming to a sad realization cancel or allow. Allow."
    },
    {
      "Time_Start": 1737.3400000000001,
      "Time_End": 1742.3400000000001,
      "Text": " Hilarious. So I don't know if you were counting but there was 5 allows. How many allows did we"
    },
    {
      "Time_Start": 1745.04,
      "Time_End": 1749.74,
      "Text": " need to install a network extension? 6. So you know come on Apple if you're gonna like rag on"
    },
    {
      "Time_Start": 1749.74,
      "Time_End": 1755.02,
      "Text": " Windows like don't become them. Now we're not here to pick on Apple too much so let's get back"
    },
    {
      "Time_Start": 1755.02,
      "Time_End": 1761.02,
      "Text": " to some code but that was some good comic relief. So let's talk about how to activate a system"
    },
    {
      "Time_Start": 1761.02,
      "Time_End": 1766.3200000000002,
      "Text": " extension. And network extensions are a subset of system extensions so any network extension"
    },
    {
      "Time_Start": 1766.34,
      "Time_End": 1770.6,
      "Text": " is also gonna be a system extension. So again I'm not gonna walk through the code too much."
    },
    {
      "Time_Start": 1770.6,
      "Time_End": 1775.24,
      "Text": " This is more of kind of a resource but at a high level there's 3 steps. You basically"
    },
    {
      "Time_Start": 1775.24,
      "Time_End": 1781.6799999999998,
      "Text": " requa- generate a request to activate a system extension. You then set your delegate. This is a"
    },
    {
      "Time_Start": 1781.6799999999998,
      "Time_End": 1786.3799999999999,
      "Text": " class that's gonna handle various methods that the operating system will invoke. And then"
    },
    {
      "Time_Start": 1786.3799999999999,
      "Time_End": 1790.6599999999999,
      "Text": " finally you submit the request. This is what's gonna generate one of the pros- pop ups and if"
    },
    {
      "Time_Start": 1790.6599999999999,
      "Time_End": 1795.82,
      "Text": " the user approves it your system extension is gonna be off and running. Now though we also"
    },
    {
      "Time_Start": 1795.82,
      "Time_End": 1800.32,
      "Text": " wanna monitor network traffic. Again we're having a network extension. So what we need to"
    },
    {
      "Time_Start": 1800.32,
      "Time_End": 1805.8999999999999,
      "Text": " do is we need to activate the network extension. This requires 5 steps. We load the current"
    },
    {
      "Time_Start": 1805.8999999999999,
      "Time_End": 1812.04,
      "Text": " preferences. We set a description. We initialize and configure a provider protocol. In this"
    },
    {
      "Time_Start": 1812.04,
      "Time_End": 1817.8799999999999,
      "Text": " case we're using the end DNS proxy provider protocol because we wanna proxy DNS traffic. We"
    },
    {
      "Time_Start": 1817.8799999999999,
      "Time_End": 1823.72,
      "Text": " set the uh flag to enable and then we save the preferences which triggers another pop up"
    },
    {
      "Time_Start": 1823.72,
      "Time_End": 1828.92,
      "Text": " that the user has to approve. Which then if they approve will activate the network extension."
    },
    {
      "Time_Start": 1828.92,
      "Time_End": 1833.7,
      "Text": " At this point our network extension will be off and running. You can confirm this using"
    },
    {
      "Time_Start": 1833.7,
      "Time_End": 1839.1000000000001,
      "Text": " Apple's system extension control utility with the list command. If we do that we can see that"
    },
    {
      "Time_Start": 1839.1000000000001,
      "Time_End": 1844.28,
      "Text": " our DNS networking monitor has been loaded. Behind the scenes what Apple has done is copied"
    },
    {
      "Time_Start": 1844.28,
      "Time_End": 1849.14,
      "Text": " it from your application bundle and moved it into a root owned directory and loaded it from"
    },
    {
      "Time_Start": 1849.14,
      "Time_End": 1852.38,
      "Text": " there. So this is one of the reasons you have to be very careful about packaging up your"
    },
    {
      "Time_Start": 1852.38,
      "Time_End": 1856.7800000000002,
      "Text": " application that contains a network extension because the operating system needs it to be in"
    },
    {
      "Time_Start": 1856.7800000000002,
      "Time_End": 1862.6200000000001,
      "Text": " that specific location. Okay so now we're off off and running. That code so far was executed"
    },
    {
      "Time_Start": 1862.6200000000001,
      "Time_End": 1867.66,
      "Text": " in our application. Now since our network extension is loaded it's gonna be running as a"
    },
    {
      "Time_Start": 1867.66,
      "Time_End": 1873.8000000000002,
      "Text": " separate process in the root session. We need to start monitoring DNS traffic. So the first"
    },
    {
      "Time_Start": 1873.8000000000002,
      "Time_End": 1878.5,
      "Text": " thing is we do is we call the start system extension mode function. Apple says do this right"
    },
    {
      "Time_Start": 1878.5,
      "Time_End": 1883.84,
      "Text": " away. I don't really know what it does. Kicks things off. Behind the scenes Mac OS will"
    },
    {
      "Time_Start": 1883.84,
      "Time_End": 1889.64,
      "Text": " consult the info.plist file of the network extension. Which you will have to set up in a"
    },
    {
      "Time_Start": 1889.64,
      "Time_End": 1895.52,
      "Text": " way to specify what class in your program is going to implement the delegates for example"
    },
    {
      "Time_Start": 1895.52,
      "Time_End": 1902.36,
      "Text": " to handle new DNS requests. So on the slide we can see how to do that. So what are these"
    },
    {
      "Time_Start": 1902.36,
      "Time_End": 1906.66,
      "Text": " delegate methods that this class has to implement? Well there's three. There's a start one"
    },
    {
      "Time_Start": 1906.66,
      "Time_End": 1911.52,
      "Text": " and a stop one. This just gives you the opportunity to perform any initializations or"
    },
    {
      "Time_Start": 1911.52,
      "Time_End": 1917.8000000000002,
      "Text": " cleanup. The most important one is the handle new flow API method. Apple's documentation"
    },
    {
      "Time_Start": 1917.8000000000002,
      "Time_End": 1923.3000000000002,
      "Text": " says this will be invoked anytime a new DNS flow which is essentially a connection is"
    },
    {
      "Time_Start": 1923.3000000000002,
      "Time_End": 1928.3200000000002,
      "Text": " generated. Perfect. Now remember we are building a DNS monitor but we're using this proxy"
    },
    {
      "Time_Start": 1928.84,
      "Time_End": 1933.84,
      "Text": " class. Which means as a proxy we are actually responsible for well proxying on the data. So"
    },
    {
      "Time_Start": 1937.32,
      "Time_End": 1942.3,
      "Text": " what we have to do is six or so different steps. And I'll walk you through that. So an"
    },
    {
      "Time_Start": 1942.3,
      "Time_End": 1948.7,
      "Text": " application or some malicious software needs to resolve a domain. So they do that. That"
    },
    {
      "Time_Start": 1948.7,
      "Time_End": 1953.54,
      "Text": " generates a DNS request. Before that DNS request goes out to the DNS server because we've"
    },
    {
      "Time_Start": 1953.56,
      "Time_End": 1958.26,
      "Text": " installed a network extension, the operating system is going to deliver it to us. It's"
    },
    {
      "Time_Start": 1958.26,
      "Time_End": 1964.74,
      "Text": " gonna call our handle new flow method. What we have to do is open the local flow, read the"
    },
    {
      "Time_Start": 1964.74,
      "Time_End": 1971.74,
      "Text": " datagrams which is gonna be a DNS question, a DNS query and then connect out to the DNS"
    },
    {
      "Time_Start": 1971.74,
      "Time_End": 1977.68,
      "Text": " server ourselves, build a new connection and then write the datagrams, the DNS request out"
    },
    {
      "Time_Start": 1977.68,
      "Time_End": 1982.36,
      "Text": " to that remote endpoint. So we're basically responsible for taking it and now delivering it"
    },
    {
      "Time_Start": 1982.38,
      "Time_End": 1988.68,
      "Text": " because again we're proxying the request. This also means we're responsible for reading and"
    },
    {
      "Time_Start": 1988.68,
      "Time_End": 1994.2600000000002,
      "Text": " delivering the response from the DNS server. So the next two steps are we were, we read the"
    },
    {
      "Time_Start": 1994.2600000000002,
      "Time_End": 1999.22,
      "Text": " response from the DNS server and then write it to the local flow which means it will then be"
    },
    {
      "Time_Start": 1999.22,
      "Time_End": 2006.2400000000002,
      "Text": " delivered to the local application or the malware, whoever generated the DNS request. Now you"
    },
    {
      "Time_Start": 2006.2400000000002,
      "Time_End": 2009.8000000000002,
      "Text": " might be wondering, okay that's cool but how do we parse the DNS packets? And this is a"
    },
    {
      "Time_Start": 2009.82,
      "Time_End": 2014.82,
      "Text": " question I had and I thought do I have to do this myself? And I tried and then I was like wait"
    },
    {
      "Time_Start": 2014.82,
      "Time_End": 2019.02,
      "Text": " this is a horrible idea. There's probably gotta be a better way. Turns out there's a relatively"
    },
    {
      "Time_Start": 2019.02,
      "Time_End": 2024.5,
      "Text": " unknown library called LibResolve, it was at least unknown to me, that uh ships with Mac OS"
    },
    {
      "Time_Start": 2024.5,
      "Time_End": 2028.36,
      "Text": " that you can link into your application or your network extension and you can parse DNS"
    },
    {
      "Time_Start": 2028.36,
      "Time_End": 2033.1,
      "Text": " packets. So on the slide we have an example of that. We give it a packet, a DNS request or"
    },
    {
      "Time_Start": 2033.1,
      "Time_End": 2038.84,
      "Text": " response. We call the DNS parse packet and it returns to us a structure with all the members"
    },
    {
      "Time_Start": 2038.88,
      "Time_End": 2044.9800000000002,
      "Text": " of the DNS nicely par- parsed out. This is super helpful, definitely use this library. What"
    },
    {
      "Time_Start": 2044.9800000000002,
      "Time_End": 2050.92,
      "Text": " we haven't talked about yet is how do we identify the process that was responsible for"
    },
    {
      "Time_Start": 2050.92,
      "Time_End": 2054.76,
      "Text": " generating the DNS request. At the beginning of this talk I said this is the best thing"
    },
    {
      "Time_Start": 2054.76,
      "Time_End": 2059.8,
      "Text": " about host based network monitoring and well it is, so how do we do that? Turns out it's"
    },
    {
      "Time_Start": 2059.8,
      "Time_End": 2065.8,
      "Text": " pretty easy, the flow object that gets passed to the handle new flow method has what is"
    },
    {
      "Time_Start": 2065.8,
      "Time_End": 2070.8,
      "Text": " known as an audit token that uniquely identifies the responsible process, the application,"
    },
    {
      "Time_Start": 2070.8,
      "Time_End": 2076.48,
      "Text": " the malware, whomever is trying to make the DNS request. Audit tokens are kind of modern ways"
    },
    {
      "Time_Start": 2076.48,
      "Time_End": 2082.02,
      "Text": " to uniquely identify processes, they're more secure than PIDs uh but once we have this audit"
    },
    {
      "Time_Start": 2082.02,
      "Time_End": 2087.42,
      "Text": " token we can retrieve the process's PID, it's path, etc etc. Anything about that. So that's"
    },
    {
      "Time_Start": 2087.42,
      "Time_End": 2091.6600000000003,
      "Text": " really helpful because that can allow us to identify who is responsible for that DNS"
    },
    {
      "Time_Start": 2091.66,
      "Time_End": 2097.96,
      "Text": " request. So we compile and execute this code on a system that's infected with 3CX, we can"
    },
    {
      "Time_Start": 2097.96,
      "Time_End": 2103.7,
      "Text": " now see that when again this very stealthy supply chain attack is executed, when the"
    },
    {
      "Time_Start": 2103.7,
      "Time_End": 2108.18,
      "Text": " malware tries to connect out to the trojanized installer, connects out to the attacker's"
    },
    {
      "Time_Start": 2108.18,
      "Time_End": 2114.18,
      "Text": " command and control server, we can observe this and say hey wait a minute, this isn't you"
    },
    {
      "Time_Start": 2114.18,
      "Time_End": 2119.18,
      "Text": " know 3CX, it's talking to some like MS storage boxes dot com, big red flag. Now via the"
    },
    {
      "Time_Start": 2121.72,
      "Time_End": 2127.2999999999997,
      "Text": " DNS monitor we can also do things like block DNS requests or responses because again we're"
    },
    {
      "Time_Start": 2127.2999999999997,
      "Time_End": 2132.5,
      "Text": " proxying all the traffic. So this is great if we want to build perhaps a more uh proactive"
    },
    {
      "Time_Start": 2132.5,
      "Time_End": 2138.8399999999997,
      "Text": " security tool. So let's look at how to do that. Super simple. What we do is we get the DNS"
    },
    {
      "Time_Start": 2138.8399999999997,
      "Time_End": 2143.24,
      "Text": " request via the handle new flow API that again is gonna be automatically executed for each"
    },
    {
      "Time_Start": 2143.24,
      "Time_End": 2149.12,
      "Text": " new DNS request. We parse that packet using lib resolve and then what we can do is we can"
    },
    {
      "Time_Start": 2149.12,
      "Time_End": 2154.22,
      "Text": " extract the question, that is the domain that the application or the malware is trying to"
    },
    {
      "Time_Start": 2154.22,
      "Time_End": 2160.52,
      "Text": " resolve and if it's on a block list that we specify, we simply close out the flow. This means"
    },
    {
      "Time_Start": 2160.52,
      "Time_End": 2164.5,
      "Text": " that the connection is actually never gonna go out and from the application's point of view"
    },
    {
      "Time_Start": 2164.5,
      "Time_End": 2170.3399999999997,
      "Text": " the DNS resolution has just failed. So we implement this in the DNS monitor, we can now see"
    },
    {
      "Time_Start": 2170.3399999999997,
      "Time_End": 2175.74,
      "Text": " that if for example I've told it to block google dot com, if we try to resolve do google dot"
    },
    {
      "Time_Start": 2175.7400000000002,
      "Time_End": 2181.5400000000004,
      "Text": " com via you know NS look up or any other way, it's just gonna time out and the system is"
    },
    {
      "Time_Start": 2181.5400000000004,
      "Time_End": 2185.4,
      "Text": " gonna be like ah I can't help you. So this is great. This means now if we know the"
    },
    {
      "Time_Start": 2185.4,
      "Time_End": 2188.94,
      "Text": " command and control server we can block where the malware is trying to connect out to. It"
    },
    {
      "Time_Start": 2188.94,
      "Time_End": 2193.78,
      "Text": " won't be able to resolve it and then won't be able to connect out. We can also block the"
    },
    {
      "Time_Start": 2193.78,
      "Time_End": 2199.6600000000003,
      "Text": " answer. The answer is going to be the IP address that the domain resolves to. So perhaps we"
    },
    {
      "Time_Start": 2199.6600000000003,
      "Time_End": 2204.8,
      "Text": " might not know what all domains uh malicious IP address is mapped to. As long as we know"
    },
    {
      "Time_Start": 2204.82,
      "Time_End": 2211.76,
      "Text": " that the IP itself is suspicious or bad uh when the answer comes back, the answer recall is"
    },
    {
      "Time_Start": 2211.76,
      "Time_End": 2216.7000000000003,
      "Text": " proxied through us before it gets back to the application. So again we can simply say is"
    },
    {
      "Time_Start": 2216.7000000000003,
      "Time_End": 2220.84,
      "Text": " this something we wanna block and if so close the flow which will have the same effect, the"
    },
    {
      "Time_Start": 2220.84,
      "Time_End": 2226.2400000000002,
      "Text": " application will never get the response. Last feature of DNS monitor, you can dump the"
    },
    {
      "Time_Start": 2226.2400000000002,
      "Time_End": 2230.52,
      "Text": " cache. This was actually one of the features I wanted the operating system to give me and"
    },
    {
      "Time_Start": 2230.54,
      "Time_End": 2235.48,
      "Text": " when I was one of the reasons why I wrote this tool. So what we can do is we can send a"
    },
    {
      "Time_Start": 2235.48,
      "Time_End": 2240.78,
      "Text": " signal to the DNS monitor and it'll basically dump uh all its records. All the domains and"
    },
    {
      "Time_Start": 2240.78,
      "Time_End": 2245.42,
      "Text": " the IP addresses for all the queries on the system. This is great perhaps as a troubleshooting"
    },
    {
      "Time_Start": 2245.42,
      "Time_End": 2250.7,
      "Text": " DNS troubleshooting tool. Now there's one shortcoming, again pros and cons, everything's a"
    },
    {
      "Time_Start": 2250.7,
      "Time_End": 2256.9,
      "Text": " package deal and that is that we're only gonna see DNS traffic. So let's turn our eyes back"
    },
    {
      "Time_Start": 2256.92,
      "Time_End": 2262.02,
      "Text": " to dummy and if we look at line number 6 we can see it connects out to the attacker's"
    },
    {
      "Time_Start": 2262.02,
      "Time_End": 2267.8,
      "Text": " command and control server. It uses a hardcoded IP address which means what? No DNS traffic."
    },
    {
      "Time_Start": 2267.8,
      "Time_End": 2273.1,
      "Text": " Which means we will not see any of dummy's network traffic because it doesn't need to use"
    },
    {
      "Time_Start": 2273.1,
      "Time_End": 2279.6,
      "Text": " DNS. So the next question is can we enhance our DNS monitor or take a more comprehensive"
    },
    {
      "Time_Start": 2279.6,
      "Time_End": 2284.54,
      "Text": " approach to see all network traffic? And the answer is of course. We can do this and also"
    },
    {
      "Time_Start": 2284.56,
      "Time_End": 2290.2599999999998,
      "Text": " throw in some rules to build a utility such as a firewall. So Lulu you might be familiar,"
    },
    {
      "Time_Start": 2290.2599999999998,
      "Time_End": 2294.3,
      "Text": " it's been around for a while, recently updated it to use Apple's new network extensions"
    },
    {
      "Time_Start": 2294.3,
      "Time_End": 2299.24,
      "Text": " framework. Previously it used a kernel extension. And well it's a firewall right? I don't"
    },
    {
      "Time_Start": 2299.24,
      "Time_End": 2303.4,
      "Text": " need to explain this but the idea is it sees all network traffic and if it's from an"
    },
    {
      "Time_Start": 2303.4,
      "Time_End": 2308.58,
      "Text": " authorized or trusted process it allows it. If it's something that it doesn't recognize it"
    },
    {
      "Time_Start": 2308.58,
      "Time_End": 2313.32,
      "Text": " prompts the user to be like yo something's happening, confirm or deny. Oops maybe I do it"
    },
    {
      "Time_Start": 2313.34,
      "Time_End": 2318.34,
      "Text": " too. Alright so how do we do this? We use another class that the network extension APIs and"
    },
    {
      "Time_Start": 2320.54,
      "Time_End": 2326.98,
      "Text": " library affords to us which is the NE filter data provider. This allows you to monitor and"
    },
    {
      "Time_Start": 2326.98,
      "Time_End": 2333.1200000000003,
      "Text": " govern all network flows as we can see from the header file description. The idea is all"
    },
    {
      "Time_Start": 2333.1200000000003,
      "Time_End": 2338.76,
      "Text": " network traffic comes to us and then we can classify it as benign, authorized or perhaps"
    },
    {
      "Time_Start": 2338.8,
      "Time_End": 2343.6800000000003,
      "Text": " suspicious and malicious. The way we do that and we'll dive into that shortly is by either"
    },
    {
      "Time_Start": 2343.6800000000003,
      "Time_End": 2349.38,
      "Text": " looking at the responsible process. We can do some analysis on the traffic itself or we can"
    },
    {
      "Time_Start": 2349.38,
      "Time_End": 2354.38,
      "Text": " ask the user. So very similar to the DNS monitor we need to enable the network extension uh"
    },
    {
      "Time_Start": 2357.88,
      "Time_End": 2362.6000000000004,
      "Text": " by again these four steps. There's a few differences here since we're monitoring all"
    },
    {
      "Time_Start": 2362.6000000000004,
      "Time_End": 2367.3,
      "Text": " network traffic we have some more customization capabilities including the fact that we"
    },
    {
      "Time_Start": 2367.3,
      "Time_End": 2372.54,
      "Text": " could in theory monitor or rather examine all packets. For a firewall we don't want to we"
    },
    {
      "Time_Start": 2372.54,
      "Time_End": 2377.6200000000003,
      "Text": " just care more about the connections so we say no. However we do say we want to filter all"
    },
    {
      "Time_Start": 2377.6200000000003,
      "Time_End": 2382.46,
      "Text": " sockets so we set that to yes. Once we've saved these configuration changes this will"
    },
    {
      "Time_Start": 2382.46,
      "Time_End": 2387.46,
      "Text": " activate the network filter and all network traffic will now be routed through us. Again"
    },
    {
      "Time_Start": 2389.6200000000003,
      "Time_End": 2396.2000000000003,
      "Text": " the handle new flow method will be invoked. Apple describes the handle new flow method. It's"
    },
    {
      "Time_Start": 2396.2000000000003,
      "Time_End": 2401.4800000000005,
      "Text": " pretty similar to the DNS monitor with one separate or new thing and that is it expects a"
    },
    {
      "Time_Start": 2401.4800000000005,
      "Time_End": 2406.9800000000005,
      "Text": " response from us whether to allow or deny the connection. So there's three answers you can"
    },
    {
      "Time_Start": 2406.9800000000005,
      "Time_End": 2411.0800000000004,
      "Text": " give and you have to give an answer. Either block which will cause the operating system to"
    },
    {
      "Time_Start": 2411.0800000000004,
      "Time_End": 2416.7200000000003,
      "Text": " drop the connection uh allow it which will allow it or pause it for example if you want to"
    },
    {
      "Time_Start": 2416.7200000000003,
      "Time_End": 2420.9,
      "Text": " ask the user and then you can resume or block it at a later time. Now if you want a passive"
    },
    {
      "Time_Start": 2420.9,
      "Time_End": 2427.1,
      "Text": " monitor you just click or return allow for all connections. Okay so now maybe the most"
    },
    {
      "Time_Start": 2427.1,
      "Time_End": 2431.48,
      "Text": " important part of the con uh the talk the conversation is okay now we have the ability to take"
    },
    {
      "Time_Start": 2431.48,
      "Time_End": 2436.62,
      "Text": " snapshots of network activity, traffic uh look at DNS traffic uh or even you know monitor"
    },
    {
      "Time_Start": 2436.62,
      "Time_End": 2441.76,
      "Text": " all system traffic. How do we and this is an incredibly important question determine if that"
    },
    {
      "Time_Start": 2441.76,
      "Time_End": 2447.12,
      "Text": " traffic is unauthorized malicious belongs to something that should not be on the system"
    },
    {
      "Time_Start": 2447.12,
      "Time_End": 2452.56,
      "Text": " talking to the network. So let's talk about some heuristics. I mentioned there's two main"
    },
    {
      "Time_Start": 2452.56,
      "Time_End": 2457.2599999999998,
      "Text": " ways, three if you ask the user but let's just focus on two here. The most common way and"
    },
    {
      "Time_Start": 2457.2599999999998,
      "Time_End": 2462.54,
      "Text": " this is well established is via the network information that is provided in the flow. Now"
    },
    {
      "Time_Start": 2462.54,
      "Time_End": 2466.96,
      "Text": " there's been talks about this, books written on it, this is how most network appliances"
    },
    {
      "Time_Start": 2466.96,
      "Time_End": 2473.2,
      "Text": " classify network traffic as being unauthorized or not. So things like state right like a"
    },
    {
      "Time_Start": 2473.26,
      "Time_End": 2478.26,
      "Text": " listening socket bound to the external interface on port 1337 or 666 like big red flags right."
    },
    {
      "Time_Start": 2480.9600000000005,
      "Time_End": 2486.7000000000003,
      "Text": " Also maybe statistics, is something beaconing every hour or perhaps once a day at midnight"
    },
    {
      "Time_Start": 2486.7000000000003,
      "Time_End": 2492.94,
      "Text": " and uploading a gig of data to some unknown end point. That's suspicious. But again since"
    },
    {
      "Time_Start": 2492.94,
      "Time_End": 2497.5800000000004,
      "Text": " we're doing host based traffic analysis and running on the host we can also bring in the"
    },
    {
      "Time_Start": 2497.6,
      "Time_End": 2503.54,
      "Text": " responsible process. Perhaps for example that process that's beaconing at midnight and"
    },
    {
      "Time_Start": 2503.54,
      "Time_End": 2507.34,
      "Text": " sending a gig of data somewhere is the backup solution just backing up the user's files at"
    },
    {
      "Time_Start": 2507.34,
      "Time_End": 2512.62,
      "Text": " midnight and that's fine. You will not be able to tell that from a network application uh or"
    },
    {
      "Time_Start": 2512.62,
      "Time_End": 2516.56,
      "Text": " a network appliance. But if we're on the host we can say hey who is doing this and answer"
    },
    {
      "Time_Start": 2516.56,
      "Time_End": 2523.02,
      "Text": " that question conclusively. So let's talk about now how to examine that that responsible"
    },
    {
      "Time_Start": 2523.04,
      "Time_End": 2528.98,
      "Text": " process to perhaps determine if it's malicious or not. Now I will caveat there are many ways"
    },
    {
      "Time_Start": 2528.98,
      "Time_End": 2533.28,
      "Text": " to do that. That could be a talk unto itself but let's look at some recent examples that"
    },
    {
      "Time_Start": 2533.28,
      "Time_End": 2538.2599999999998,
      "Text": " would at least be able to uh identify the malware samples we talked about earlier in the"
    },
    {
      "Time_Start": 2538.2599999999998,
      "Time_End": 2543.2599999999998,
      "Text": " talk as well malware. So some examples you know is the item that's running a non platform"
    },
    {
      "Time_Start": 2545.36,
      "Time_End": 2551.0,
      "Text": " binary? Is it something that's non notarized? Uh is it persistently installed? Perhaps a"
    },
    {
      "Time_Start": 2551.02,
      "Time_End": 2555.92,
      "Text": " red flag. And is it doing something unusual for example with the process hierarchy? So let's"
    },
    {
      "Time_Start": 2555.92,
      "Time_End": 2562.64,
      "Text": " look at that. The first one is how to determine if something belongs to Mac OS proper. In"
    },
    {
      "Time_Start": 2562.64,
      "Time_End": 2568.3,
      "Text": " Apple parlance they say that's a platform binary. Uh and also if it's notarized or not. So"
    },
    {
      "Time_Start": 2568.3,
      "Time_End": 2572.38,
      "Text": " notarizations I talked about is a method where applications, programs are submitted to"
    },
    {
      "Time_Start": 2572.38,
      "Time_End": 2578.48,
      "Text": " Apple and they are approved. Yes Apple sometimes inadvertently approves malware but"
    },
    {
      "Time_Start": 2578.5,
      "Time_End": 2584.04,
      "Text": " generally speaking all legitimate third party software is mostly notarized whereas most"
    },
    {
      "Time_Start": 2584.04,
      "Time_End": 2588.8,
      "Text": " malware is not. So this is kind of a good pretty solid red flag if you see something that's"
    },
    {
      "Time_Start": 2588.8,
      "Time_End": 2594.58,
      "Text": " not notarized. Not gonna go through all the code but once we have an audit token for the"
    },
    {
      "Time_Start": 2594.58,
      "Time_End": 2600.08,
      "Text": " responsible process or even a PID what we can do is we can invoke various code signing APIs"
    },
    {
      "Time_Start": 2600.08,
      "Time_End": 2606.12,
      "Text": " in Mac OS to ask questions like is this an Apple binary? Is this notarized? And then the"
    },
    {
      "Time_Start": 2606.16,
      "Time_End": 2610.2999999999997,
      "Text": " operating system will figure that out and give us an answer that will allow us to well answer"
    },
    {
      "Time_Start": 2610.2999999999997,
      "Time_End": 2614.54,
      "Text": " this question. If you're interested in the full implementation I wrote a utility called"
    },
    {
      "Time_Start": 2614.54,
      "Time_End": 2620.7799999999997,
      "Text": " BlockBlock which does some other stuff but it also has a full implementation of this code."
    },
    {
      "Time_Start": 2620.7799999999997,
      "Time_End": 2625.88,
      "Text": " Next question is it persistently installed? The majority of Mac malware is going to persist."
    },
    {
      "Time_Start": 2625.88,
      "Time_End": 2631.38,
      "Text": " Uh so if you see a network connection that's tied to a persistent process maybe cause for"
    },
    {
      "Time_Start": 2631.38,
      "Time_End": 2635.9,
      "Text": " concern or at least something you're gonna want to look at a little closer. On recent versions"
    },
    {
      "Time_Start": 2635.9,
      "Time_End": 2641.94,
      "Text": " of Mac OS persistence is governed or managed by this undocumented backgrounds item"
    },
    {
      "Time_Start": 2641.94,
      "Time_End": 2647.6600000000003,
      "Text": " database. I wrote an open source utility that will deserialize the items in this database and"
    },
    {
      "Time_Start": 2647.6600000000003,
      "Time_End": 2653.46,
      "Text": " print them out for you. So this for example is what dummy looks like in the database. So OSX"
    },
    {
      "Time_Start": 2653.46,
      "Time_End": 2659.6600000000003,
      "Text": " dummy persists as a launch daemon. It's component as we saw is a script that will run as root"
    },
    {
      "Time_Start": 2659.6600000000003,
      "Time_End": 2665.2000000000003,
      "Text": " and since it's a script it's not signed. So we have a persistent script running as root."
    },
    {
      "Time_Start": 2665.2000000000003,
      "Time_End": 2671.2000000000003,
      "Text": " That's not common. That's that's cause for concern. And then finally and we'll stick with"
    },
    {
      "Time_Start": 2671.2000000000003,
      "Time_End": 2675.1800000000003,
      "Text": " dummy here. You should also look at the process hierarchy. So at the very beginning I posed"
    },
    {
      "Time_Start": 2675.1800000000003,
      "Time_End": 2680.1800000000003,
      "Text": " the question how do we know that this instance of Python is malicious or being abused rather?"
    },
    {
      "Time_Start": 2682.4600000000005,
      "Time_End": 2688.32,
      "Text": " Well if you look at the process hierarchy for it you will see that Python is a child of Bash"
    },
    {
      "Time_Start": 2688.32,
      "Time_End": 2694.2400000000002,
      "Text": " which is a child of launch D. Meaning that it has been persisted and then executed via"
    },
    {
      "Time_Start": 2694.2400000000002,
      "Time_End": 2699.0800000000004,
      "Text": " Bash. We can also see it's running as root. So now what we have just to put everything"
    },
    {
      "Time_Start": 2699.0800000000004,
      "Time_End": 2705.42,
      "Text": " together. We have a established connection to some unknown IP address on port one three"
    },
    {
      "Time_Start": 2705.42,
      "Time_End": 2710.92,
      "Text": " three seven. Strange. Uh it's tied back to a script that's running as root uh via Python that's"
    },
    {
      "Time_Start": 2713.0200000000004,
      "Time_End": 2719.0600000000004,
      "Text": " spawned via Bash that's persistently installed. Like all those things are kind of individually"
    },
    {
      "Time_Start": 2719.0600000000004,
      "Time_End": 2723.3,
      "Text": " strange but then if we combine them all together that's a huge red flag. 99% of the time"
    },
    {
      "Time_Start": 2723.3,
      "Time_End": 2728.2400000000002,
      "Text": " that's probably going to be malware. At least something you want to take a closer look at."
    },
    {
      "Time_Start": 2728.2400000000002,
      "Time_End": 2734.48,
      "Text": " Alright so let's conclude this and wrap this all up. So hopefully I've illustrated to you that"
    },
    {
      "Time_Start": 2734.48,
      "Time_End": 2740.28,
      "Text": " by leveraging Mac OS's networking frameworks we can heuristically detect malware directly"
    },
    {
      "Time_Start": 2740.28,
      "Time_End": 2745.42,
      "Text": " from the host. Again this is based on the uh very keen observation that malware uses the"
    },
    {
      "Time_Start": 2745.42,
      "Time_End": 2751.82,
      "Text": " network and so if we can detect this unauthorized activity we can uncover malware. If you're"
    },
    {
      "Time_Start": 2751.82,
      "Time_End": 2757.6600000000003,
      "Text": " interested in learning more I've written a book on analyzing Mac malware. It's 100% free uh on"
    },
    {
      "Time_Start": 2757.6600000000003,
      "Time_End": 2763.96,
      "Text": " taomm.org for the art of Mac malware. I'm also writing a another uh volume which will be"
    },
    {
      "Time_Start": 2763.96,
      "Time_End": 2769.84,
      "Text": " about the programmatic detection. So think this topic plus many more. This will also be free"
    },
    {
      "Time_Start": 2769.84,
      "Time_End": 2774.84,
      "Text": " as well. I'm going to be doing a book signing tomorrow on volume one at the no starch press"
    },
    {
      "Time_Start": 2774.84,
      "Time_End": 2779.84,
      "Text": " table at 11 AM. So if you want to pick up a copy of the book or have me sign it, stop by and"
    },
    {
      "Time_Start": 2779.86,
      "Time_End": 2785.4,
      "Text": " say hi. I want to end by briefly talking about our organization cause I think it's amazing and"
    },
    {
      "Time_Start": 2785.4,
      "Time_End": 2790.54,
      "Text": " I'm super stoked. So the Objective-C Foundation is a non-profit and we do some really cool"
    },
    {
      "Time_Start": 2790.54,
      "Time_End": 2794.54,
      "Text": " things that I just want to share with you cause I'm excited about it. So we organize the"
    },
    {
      "Time_Start": 2794.54,
      "Time_End": 2799.32,
      "Text": " OBTS security conference. I look around and I see many familiar faces from the conference,"
    },
    {
      "Time_Start": 2799.32,
      "Time_End": 2804.1600000000003,
      "Text": " speakers, attendees. If you haven't heard about Objective by the Sea, it's awesome. We also"
    },
    {
      "Time_Start": 2804.1600000000003,
      "Time_End": 2808.92,
      "Text": " generate uh uh raise money for college scholarships for high school students and have some"
    },
    {
      "Time_Start": 2808.94,
      "Time_End": 2813.6800000000003,
      "Text": " diversity programs uh which we're really stoked on as well. So again, pop over to"
    },
    {
      "Time_Start": 2813.6800000000003,
      "Time_End": 2819.42,
      "Text": " Objective-C.org. Now I want to end, maybe not on the happiest note, uh many of you know I"
    },
    {
      "Time_Start": 2819.42,
      "Time_End": 2825.46,
      "Text": " live in Maui. The Objective-C Foundation is born in Maui. The OBTS conference started on"
    },
    {
      "Time_Start": 2825.46,
      "Time_End": 2830.96,
      "Text": " Maui. Uh I made all these slides on Maui. Uh and earlier this week there was some really uh"
    },
    {
      "Time_Start": 2830.96,
      "Time_End": 2835.7000000000003,
      "Text": " catastrophic wildfires on Maui. Many people died, lost everything. So what we're doing is"
    },
    {
      "Time_Start": 2835.7200000000003,
      "Time_End": 2841.8,
      "Text": " we are uh launching a fundraiser through our non-profit, our 501 CC, 501 C3 to raise money"
    },
    {
      "Time_Start": 2841.8,
      "Time_End": 2846.8,
      "Text": " for that. Uh so if you're called to support a great cause uh check that out or just even pass"
    },
    {
      "Time_Start": 2846.8,
      "Time_End": 2850.5000000000005,
      "Text": " share on the link. 100% of the money is gonna go to you know the residents of Maui that have"
    },
    {
      "Time_Start": 2850.5000000000005,
      "Time_End": 2855.5400000000004,
      "Text": " literally lost uh everything including uh loved ones. Uh so again, pop over to"
    },
    {
      "Time_Start": 2855.5400000000004,
      "Time_End": 2860.6400000000003,
      "Text": " Objective-C.org to uh get some more information about that. Finally I just want to thank the"
    },
    {
      "Time_Start": 2860.6400000000003,
      "Time_End": 2865.1200000000003,
      "Text": " companies who support the Objective-C Foundation. They're the ones that allow us to"
    },
    {
      "Time_Start": 2865.14,
      "Time_End": 2869.94,
      "Text": " organize a conference, uh support my research, allow you know uh me to be able to write a"
    },
    {
      "Time_Start": 2869.94,
      "Time_End": 2875.3199999999997,
      "Text": " book and make it free. The goal is really for us as a foundation, me as a researcher to uh"
    },
    {
      "Time_Start": 2875.3199999999997,
      "Time_End": 2879.98,
      "Text": " empower the community, share my knowledge and that is, I'm able to do that because of these"
    },
    {
      "Time_Start": 2879.98,
      "Time_End": 2885.0,
      "Text": " companies. So uh just again want to end by thanking them. I also want to thank you for"
    },
    {
      "Time_Start": 2885.0,
      "Time_End": 2890.2599999999998,
      "Text": " sitting through my talk. Really appreciate your attendance. I think I'm out of time so"
    },
    {
      "Time_Start": 2890.2599999999998,
      "Time_End": 2894.1,
      "Text": " maybe no public Q and A's but I will pop over here and since this is the last talk of the day"
    },
    {
      "Time_Start": 2894.12,
      "Time_End": 2900.18,
      "Text": " we can hang out here as long as uh y'all want and so if there's any questions uh come ask"
    },
    {
      "Time_Start": 2900.18,
      "Time_End": 2903.2,
      "Text": " away. Again, thank you so much. I really appreciate y'all being here."
    }
  ]
}