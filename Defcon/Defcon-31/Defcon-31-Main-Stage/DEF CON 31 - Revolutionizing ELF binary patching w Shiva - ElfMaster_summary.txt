**Introduction**
- Presenter: Ryan O'Neill
- Book: *Learning Linux Binary Analysis*
- Journals: Frack, Pocker GTFO, VX Heaven, Temp Out
- Founder: BitLackies.org, Arcana Research
- Website: arcanaresearch.io, arcanatechnologies.io

**Shiva: An Overview**
- Shiva: A state-of-the-art **binary patching solution** for **ELF**
- Custom **dynamic linker** with advanced linking and relocation operations
- Bridges gap between developers and reverse engineers
- Facilitates **bug fixing** in **legacy software** without source code
- **DARPA AMP Program**: Focused on reverse engineering and ELF binary patching

**Evolution of Shiva**
- Origin: O'Neill's desire to write a custom ELF interpreter
- **Interpreter chaining**: Chaining two dynamic linkers in the same process image
- **Modular ELF virus loader interpreter**: Evolved into the first version of Shiva (x86-64)
- **Current Version**: Shiva Alpha v0.11, forked from original, tailored for DARPA AMP and NASA

**History of ELF Binary Patching**
- **Early Unix Virus Research**: Silvio Cesar's work in the 90s (e.g., "UNIX Viruses" paper)
- **ELF Virus Technology**: Similar to ELF instrumentation, involving code insertion and relocation
- **Userland-exec()**: A function allowing userland execution without kernel involvement, by The Gruck
- **IRISI**: Profound ELF reverse engineering software by Mayhem, chief editor of Frack
- **Insmod for Kernel Modules**: Silvio's work on manually handling relocations to install kernel modules

**Influential Academic Research**
- **Katana**: A Dwarf-aware patching framework for ELF by Sergey Bratis and James Oakley
- **Pebble**: An ELF instrumentation framework, primarily for software profiling
- **Weird Machines in ELF**: Research by Rebecca Shapiro and Sergey Bratis on using dynamic linker relocations as a Turing-complete machine

**Linking Concepts and Workflow**
- **LibShiva**: An ELF linker, loader, and transformer, built on LibElfMaster (forensic reconstruction of broken binaries)
- **Linker Chaining**: Cooperating with LD Linux.so to transform program with patches and shared libraries
- **ELF Relocatable Objects**: Rich symbolic metadata, compiled with a large code model for absolute addresses
- **Shiva Module Loader**: Handles loading, linking, and transforming patch and executable
- **Userland-exec() Functionality**: Allows dynamic testing of patches without modifying the target binary
- **Shiva Prelinker**: Updates interpreter path and adds new dynamic segment for permanent patching

**Symbol Interposition**
- Allows rewriting of code and data by name, including global data and functions
- **Example**: Redefining a constant string in a program by patching it with a new value

**Transformations and Function Splicing**
- **Transformations**: Extending relocations to support complex patching operations like function splicing
- **Function Splicing**: Inserting C code into any function, with full relocation and symbolic access
- **Spliceable Code Characteristics**: Fully relocatable, rich symbolic access, no size limit, access to live variables and registers

**Confluent Linking Technologies**
- **Cross Relocations**: One dynamic linker relying on another to solve its own relocation
- **Delayed Relocations**: Handled by Shiva post-linker after LD Linux.so has finished
- **Shiva Post-linker**: Updates AT entry in auxiliary vector to handle delayed relocations

**Demonstration**
- **Symbol Interposition**: Rewriting global code and data dynamically and permanently
- **Function Splicing**: Inserting code into an existing function, updating relocations and control flow graph

**Conclusion**
- Shiva: A powerful tool for ELF binary patching, open-sourced by O'Neill
- Useful for developers, reverse engineers, and security researchers
- Websites: arcanaresearch.io, arcanatechnologies.io
- Contact: Email for queries