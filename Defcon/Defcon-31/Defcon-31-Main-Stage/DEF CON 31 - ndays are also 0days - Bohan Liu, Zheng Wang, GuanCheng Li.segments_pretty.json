{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 4.5200000000000005,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Hello everyone, welcome to our talk, Endless Also Zero-Disk."
    },
    {
      "Time_Start": 4.5200000000000005,
      "Time_End": 10.4,
      "Text": " Can hackers launch a Zero-DRC attack on popular software only with Chromium Endless?"
    },
    {
      "Time_Start": 10.4,
      "Time_End": 16.76,
      "Text": " In this talk, I will introduce how we use Chromium Endless pop-up compilators in many"
    },
    {
      "Time_Start": 16.76,
      "Time_End": 22.72,
      "Text": " popular software, hoping to draw attention to browser security in application software."
    },
    {
      "Time_Start": 22.72,
      "Time_End": 27.400000000000002,
      "Text": " This is our first DEF CON presentation, let's introduce ourselves first."
    },
    {
      "Time_Start": 27.8,
      "Time_End": 31.76,
      "Text": " We are all security researchers at Tencent Security's Xuanwu Lab."
    },
    {
      "Time_Start": 31.76,
      "Time_End": 35.24,
      "Text": " I'm Bohan Liu, mainly engaged in browser security."
    },
    {
      "Time_Start": 35.24,
      "Time_End": 40.84,
      "Text": " I'm also a Google Chrome bug hunter, and Zheng Wang is our co-speaker."
    },
    {
      "Time_Start": 40.84,
      "Time_End": 44.400000000000006,
      "Text": " He's mainly engaged in browser security and kernel security."
    },
    {
      "Time_Start": 44.400000000000006,
      "Time_End": 49.56,
      "Text": " He found several bugs in Apple Safari, Linux Kernel, and VirtualBox."
    },
    {
      "Time_Start": 49.56,
      "Time_End": 54.6,
      "Text": " Another co-speaker is Guan Chengli, he's the co-founder and former captain of RecaPig's"
    },
    {
      "Time_Start": 54.6,
      "Time_End": 55.6,
      "Text": " CTF team."
    },
    {
      "Time_Start": 55.6,
      "Time_End": 65.44,
      "Text": " He previously focused on system and software security, currently focuses on LLM with security."
    },
    {
      "Time_Start": 65.44,
      "Time_End": 69.32000000000001,
      "Text": " There are six sections in this talk, let's begin."
    },
    {
      "Time_Start": 69.32000000000001,
      "Time_End": 71.88,
      "Text": " First is introduction."
    },
    {
      "Time_Start": 71.88,
      "Time_End": 78.04,
      "Text": " As a browser security researcher, I researched Chromium bugs for a while, and wrote many"
    },
    {
      "Time_Start": 78.04,
      "Time_End": 80.32000000000001,
      "Text": " end-to-end exploits."
    },
    {
      "Time_Start": 80.32000000000001,
      "Time_End": 85.84,
      "Text": " And I can do a little reversing, but I know little about web security."
    },
    {
      "Time_Start": 85.84,
      "Time_End": 91.16000000000001,
      "Text": " Given those skills, can I find zero DRC bugs in popular software?"
    },
    {
      "Time_Start": 91.16000000000001,
      "Time_End": 95.16000000000001,
      "Text": " And if so, what can I do to make this work easier?"
    },
    {
      "Time_Start": 95.16000000000001,
      "Time_End": 102.84,
      "Text": " Now let's take a look at how Chromium has been integrated into popular software."
    },
    {
      "Time_Start": 102.84,
      "Time_End": 110.52000000000001,
      "Text": " Firstly, there is Chromium-based development, which includes default mobile browsers."
    },
    {
      "Time_Start": 110.52000000000001,
      "Time_End": 116.92,
      "Text": " Second, there are browser components for various programming languages."
    },
    {
      "Time_Start": 116.92,
      "Time_End": 125.04,
      "Text": " For example, the Electron framework is primarily used for software development in Node.js,"
    },
    {
      "Time_Start": 125.04,
      "Time_End": 128.12,
      "Text": " for C++, Java, and Dolphin languages."
    },
    {
      "Time_Start": 128.12,
      "Time_End": 131.12,
      "Text": " CEF is also a commonly used library."
    },
    {
      "Time_Start": 131.12,
      "Time_End": 138.36,
      "Text": " Additionally, the Qt Web Engine plugin is commonly used in Qt, and Chromium may also"
    },
    {
      "Time_Start": 138.36,
      "Time_End": 142.72,
      "Text": " be present in other popular sublime chains."
    },
    {
      "Time_Start": 142.72,
      "Time_End": 146.0,
      "Text": " So Chromium is everywhere in software."
    },
    {
      "Time_Start": 146.0,
      "Time_End": 154.4,
      "Text": " Based on data from CVE and Google Project Zero, Chrome may be found around 3,300 vulnerabilities"
    },
    {
      "Time_Start": 154.4,
      "Time_End": 156.84,
      "Text": " with CVE-ID each year."
    },
    {
      "Time_Start": 156.84,
      "Time_End": 162.6,
      "Text": " Of those, around 10 vulnerabilities each year are from in-the-wild attacks, and also"
    },
    {
      "Time_Start": 162.6,
      "Time_End": 168.88,
      "Text": " many of those vulnerabilities can be transferred into RenderRC through detailed analysis."
    },
    {
      "Time_Start": 168.88,
      "Time_End": 173.92000000000002,
      "Text": " Those vulnerabilities can also be introduced into popular software through the sublime"
    },
    {
      "Time_Start": 173.92000000000002,
      "Time_End": 176.48000000000002,
      "Text": " chain mentioned above."
    },
    {
      "Time_Start": 176.48000000000002,
      "Time_End": 183.76,
      "Text": " Google has an open attitude towards vulnerability disclosure, and the bug detail will be made"
    },
    {
      "Time_Start": 183.76,
      "Time_End": 191.44,
      "Text": " public after being fixed for 40 weeks."
    },
    {
      "Time_Start": 191.44,
      "Time_End": 198.04,
      "Text": " With the bug detail and unit tests in patch, attackers can quickly make exploitable code."
    },
    {
      "Time_Start": 198.04,
      "Time_End": 202.56,
      "Text": " Sometimes it's even a zero-day bug for the stable version of Chrome itself."
    },
    {
      "Time_Start": 202.56,
      "Time_End": 208.68,
      "Text": " We strongly oppose the disclosure of vulnerability details before they are fixed."
    },
    {
      "Time_Start": 208.68,
      "Time_End": 214.84,
      "Text": " But as you can see, hackers have a lot of prior knowledge for Chromium-based software"
    },
    {
      "Time_Start": 214.84,
      "Time_End": 215.84,
      "Text": " attacks."
    },
    {
      "Time_Start": 215.84,
      "Time_End": 223.72,
      "Text": " Therefore, we conducted an experiment on some popular software to see how long the introduction"
    },
    {
      "Time_Start": 223.72,
      "Time_End": 228.92000000000002,
      "Text": " of those vulnerabilities can have an impact."
    },
    {
      "Time_Start": 228.92000000000002,
      "Time_End": 233.48000000000002,
      "Text": " Let's start with the definition of RCE window period."
    },
    {
      "Time_Start": 233.48000000000002,
      "Time_End": 239.92000000000002,
      "Text": " RCE window period equals the time the vulnerability was fixed in the software, meaning the time"
    },
    {
      "Time_Start": 239.92000000000002,
      "Time_End": 242.84000000000003,
      "Text": " the vulnerability was exploitable."
    },
    {
      "Time_Start": 242.84000000000003,
      "Time_End": 247.96,
      "Text": " This is hard to precisely determine the T exploitable."
    },
    {
      "Time_Start": 247.96,
      "Time_End": 255.76000000000002,
      "Text": " We used a new calculation method to roughly describe software's RCE window period."
    },
    {
      "Time_Start": 255.76000000000002,
      "Time_End": 261.64000000000004,
      "Text": " The method is called updateGap, which is the time difference between the software's update"
    },
    {
      "Time_Start": 261.64,
      "Time_End": 265.76,
      "Text": " type and its Chromium component update type."
    },
    {
      "Time_Start": 265.76,
      "Time_End": 272.0,
      "Text": " The larger the difference, the higher the likelihood of the software being exploitable"
    },
    {
      "Time_Start": 272.0,
      "Time_End": 273.0,
      "Text": " during the period."
    },
    {
      "Time_Start": 273.0,
      "Time_End": 282.52,
      "Text": " In our experiment, we selected some popular software on the market, including Slack, Skype,"
    },
    {
      "Time_Start": 282.52,
      "Time_End": 284.91999999999996,
      "Text": " Discord, and others."
    },
    {
      "Time_Start": 284.91999999999996,
      "Time_End": 288.4,
      "Text": " The experiment was divided into three steps."
    },
    {
      "Time_Start": 288.40000000000003,
      "Time_End": 293.92,
      "Text": " In the first step, we downloaded the software's old version through Mirror State."
    },
    {
      "Time_Start": 293.92,
      "Time_End": 299.8,
      "Text": " The second step was to identify the browser component in the software, their version,"
    },
    {
      "Time_Start": 299.8,
      "Time_End": 302.36,
      "Text": " and the release dates."
    },
    {
      "Time_Start": 302.36,
      "Time_End": 308.42,
      "Text": " In the sixth step, we calculated the updateGap to describe the software's RCE window period."
    },
    {
      "Time_Start": 308.42,
      "Time_End": 316.76000000000005,
      "Text": " We used our database, which concludes over 200 POCs to assess in testing."
    },
    {
      "Time_Start": 316.76,
      "Time_End": 324.8,
      "Text": " Those POCs were used to search for high-risk exploitable vulnerabilities during the period."
    },
    {
      "Time_Start": 324.8,
      "Time_End": 333.92,
      "Text": " The final results varied greatly, with different software having an updateGap ranging from"
    },
    {
      "Time_Start": 333.92,
      "Time_End": 336.76,
      "Text": " 9 to 800 days."
    },
    {
      "Time_Start": 336.76,
      "Time_End": 345.32,
      "Text": " Wavebox's Chromium component was relatively independent and updated more frequently."
    },
    {
      "Time_Start": 345.32,
      "Time_End": 350.32,
      "Text": " On the other hand, Dropbox hardly updated its Chromium component."
    },
    {
      "Time_Start": 350.32,
      "Time_End": 358.15999999999997,
      "Text": " The rest of the software mainly used the Electron or Libcf component, which most update periods"
    },
    {
      "Time_Start": 358.15999999999997,
      "Time_End": 362.15999999999997,
      "Text": " over 90 days."
    },
    {
      "Time_Start": 362.15999999999997,
      "Time_End": 365.48,
      "Text": " Some software has a longer update period."
    },
    {
      "Time_Start": 365.48,
      "Time_End": 372.36,
      "Text": " Discord has an average update time of 305 days."
    },
    {
      "Time_Start": 372.36,
      "Time_End": 377.28000000000003,
      "Text": " The shortest update period is over 70 days."
    },
    {
      "Time_Start": 377.28000000000003,
      "Time_End": 384.2,
      "Text": " As a result, many versions have a long RCE period, which was demonstrated at Black Hat"
    },
    {
      "Time_Start": 384.2,
      "Time_End": 388.40000000000003,
      "Text": " USA in 2022."
    },
    {
      "Time_Start": 388.40000000000003,
      "Time_End": 395.72,
      "Text": " Other software, such as Slack, has more frequent updates, with a packed period of 30 days."
    },
    {
      "Time_Start": 396.08000000000004,
      "Time_End": 402.8,
      "Text": " However, when it hit a zero-day disclosure, they didn't deal with it in time."
    },
    {
      "Time_Start": 402.8,
      "Time_End": 412.16,
      "Text": " For example, the Chrome zero-day bug was publicly disclosed on GitHub in April 2021, and Slack"
    },
    {
      "Time_Start": 412.16,
      "Time_End": 415.92,
      "Text": " just released its new version the day before that day."
    },
    {
      "Time_Start": 415.92,
      "Time_End": 421.24,
      "Text": " However, it wasn't until June that the bug was patched."
    },
    {
      "Time_Start": 421.24,
      "Time_End": 426.48,
      "Text": " It has a RCE window period of almost two months."
    },
    {
      "Time_Start": 426.48,
      "Time_End": 430.68,
      "Text": " After analyzing updates, we have come to several conclusions."
    },
    {
      "Time_Start": 430.68,
      "Time_End": 437.08,
      "Text": " Firstly, RCE window periods exist in most software, leaving attackers' periods to find"
    },
    {
      "Time_Start": 437.08,
      "Time_End": 440.48,
      "Text": " ending bugs for exploiting."
    },
    {
      "Time_Start": 440.48,
      "Time_End": 448.2,
      "Text": " Second, software built on the Electron framework tend to have a shorter RCE window period due"
    },
    {
      "Time_Start": 448.2,
      "Time_End": 454.76,
      "Text": " to the lower code complexity, which makes updates easier to implement."
    },
    {
      "Time_Start": 454.76,
      "Time_End": 462.92,
      "Text": " Finally, we have observed that many companies have increased their update frequency at specific"
    },
    {
      "Time_Start": 462.92,
      "Time_End": 463.92,
      "Text": " times."
    },
    {
      "Time_Start": 463.92,
      "Time_End": 471.56,
      "Text": " However, even with those effects, RCE window periods still exist."
    },
    {
      "Time_Start": 471.56,
      "Time_End": 476.52,
      "Text": " Let's come to attack surface and vulnerability discovery."
    },
    {
      "Time_Start": 476.56,
      "Time_End": 483.32,
      "Text": " In most software, developers use browser components to display specific pages and trigger certain"
    },
    {
      "Time_Start": 483.32,
      "Time_End": 492.32,
      "Text": " client-side behavior in specific scenarios, making client-side development more convenient"
    },
    {
      "Time_Start": 492.32,
      "Time_End": 493.32,
      "Text": " and universal."
    },
    {
      "Time_Start": 493.32,
      "Time_End": 500.03999999999996,
      "Text": " However, for hackers, during the RCE window period, it's easy to launch zero-day RCE attacks"
    },
    {
      "Time_Start": 500.03999999999996,
      "Time_End": 502.91999999999996,
      "Text": " when they can control the loaded page."
    },
    {
      "Time_Start": 502.92,
      "Time_End": 510.44,
      "Text": " This kind of attack has many advantages for hackers, such as having many exploits with"
    },
    {
      "Time_Start": 510.44,
      "Time_End": 516.04,
      "Text": " end-day vulnerabilities and no domain-specific requirements."
    },
    {
      "Time_Start": 516.04,
      "Time_End": 523.12,
      "Text": " Therefore, all hackers need to find is a situation where they can control the loaded page."
    },
    {
      "Time_Start": 523.12,
      "Time_End": 529.72,
      "Text": " So what are the scenarios that developers tend to overlook?"
    },
    {
      "Time_Start": 529.72,
      "Time_End": 536.0,
      "Text": " The questions arise, what is the function of browser components?"
    },
    {
      "Time_Start": 536.0,
      "Time_End": 539.84,
      "Text": " What code runs in the browser component?"
    },
    {
      "Time_Start": 539.84,
      "Time_End": 543.88,
      "Text": " Let's start with how they are developed."
    },
    {
      "Time_Start": 543.88,
      "Time_End": 548.72,
      "Text": " For Electron, all codes are developed by Node.js."
    },
    {
      "Time_Start": 548.72,
      "Time_End": 557.4,
      "Text": " It's divided into main process and render process, or communicated through IPC."
    },
    {
      "Time_Start": 557.4,
      "Time_End": 563.6,
      "Text": " All code is stored in a resource folder, and there are less modifications to Electron"
    },
    {
      "Time_Start": 563.6,
      "Time_End": 565.68,
      "Text": " framework code."
    },
    {
      "Time_Start": 565.68,
      "Time_End": 570.0799999999999,
      "Text": " So it's easy to locate the source code."
    },
    {
      "Time_Start": 570.0799999999999,
      "Time_End": 578.04,
      "Text": " If compromised, we can also recover them from the ASAR format."
    },
    {
      "Time_Start": 578.04,
      "Time_End": 584.76,
      "Text": " As for debugging, since there are less modifications to Electron framework code, most of the time"
    },
    {
      "Time_Start": 584.76,
      "Time_End": 593.08,
      "Text": " we can just use the command flag to open its internal development tools, like inspect"
    },
    {
      "Time_Start": 593.08,
      "Time_End": 598.64,
      "Text": " or remote debugging port, just like this flag."
    },
    {
      "Time_Start": 598.64,
      "Time_End": 602.64,
      "Text": " DebugTron is a universal Electron framework debugging tool."
    },
    {
      "Time_Start": 602.64,
      "Time_End": 610.56,
      "Text": " We can see here, it is also compiled in this method."
    },
    {
      "Time_Start": 610.56,
      "Time_End": 613.28,
      "Text": " CEF is another popular component."
    },
    {
      "Time_Start": 613.28,
      "Time_End": 618.16,
      "Text": " Here we use libcf C++ library as an example."
    },
    {
      "Time_Start": 618.16,
      "Time_End": 626.1999999999999,
      "Text": " From the perspective of development, the code implemented by developers is divided into"
    },
    {
      "Time_Start": 626.1999999999999,
      "Time_End": 628.12,
      "Text": " two parts."
    },
    {
      "Time_Start": 628.12,
      "Time_End": 638.36,
      "Text": " The primary API function implemented in C or C++ is used to impact client behaviors"
    },
    {
      "Time_Start": 638.36,
      "Time_End": 642.52,
      "Text": " that can't be impacted by browser components."
    },
    {
      "Time_Start": 642.52,
      "Time_End": 649.36,
      "Text": " The other part is the local resource code implemented by the HTML, which is the code"
    },
    {
      "Time_Start": 649.36,
      "Time_End": 655.72,
      "Text": " running in the browser component and used to display the interface."
    },
    {
      "Time_Start": 655.72,
      "Time_End": 665.84,
      "Text": " In the development logic, it initializes first and then registers the parsing and the processing"
    },
    {
      "Time_Start": 665.84,
      "Time_End": 676.0,
      "Text": " logic of the privileged domain and then registers the privileged API function to form a JS object"
    },
    {
      "Time_Start": 676.0,
      "Time_End": 678.64,
      "Text": " for the local resource code to call."
    },
    {
      "Time_Start": 678.64,
      "Time_End": 686.9200000000001,
      "Text": " And finally, the local resource from the perspective of the CEF library is actually a series of"
    },
    {
      "Time_Start": 686.9200000000001,
      "Time_End": 691.64,
      "Text": " calls to exploited functions."
    },
    {
      "Time_Start": 691.64,
      "Time_End": 702.68,
      "Text": " For CEF, its features exist in the form of a dynamic linked library."
    },
    {
      "Time_Start": 702.68,
      "Time_End": 709.92,
      "Text": " The use of CEF is more flexible and more checked before use."
    },
    {
      "Time_Start": 709.92,
      "Time_End": 719.56,
      "Text": " A privileged API is implied by C or C++ and the local resource code is implied by HTML."
    },
    {
      "Time_Start": 719.5600000000001,
      "Time_End": 727.6800000000001,
      "Text": " The location of the local resource file is uncertain and the file may be encrypted."
    },
    {
      "Time_Start": 727.6800000000001,
      "Time_End": 730.6,
      "Text": " Are there any common debugging methods?"
    },
    {
      "Time_Start": 730.6,
      "Time_End": 731.84,
      "Text": " Yes."
    },
    {
      "Time_Start": 731.84,
      "Time_End": 737.6800000000001,
      "Text": " You can hook the API in libcf and then get and modify what we want."
    },
    {
      "Time_Start": 737.6800000000001,
      "Time_End": 748.9200000000001,
      "Text": " For example, the developer will use cf.string.reader.create for file, cf.zip.reader.create for other"
    },
    {
      "Time_Start": 748.9599999999999,
      "Time_End": 750.5999999999999,
      "Text": " functions to load the resource."
    },
    {
      "Time_Start": 750.5999999999999,
      "Time_End": 765.5999999999999,
      "Text": " We can get a field location and decrypt the password via hooking the info transfer between API functions as shown here."
    },
    {
      "Time_Start": 765.5999999999999,
      "Time_End": 774.36,
      "Text": " As for debugging, although developers call CEF initialize with static conf parameters,"
    },
    {
      "Time_Start": 774.52,
      "Time_End": 784.4,
      "Text": " we can still dynamically modify the remote debugging port parameter to generate developer capabilities by hook."
    },
    {
      "Time_Start": 784.4,
      "Time_End": 791.5600000000001,
      "Text": " And we can also build more powerful debug tools based on development mode."
    },
    {
      "Time_Start": 791.5600000000001,
      "Time_End": 797.04,
      "Text": " Let's take a look at some cases that developers tend to overlook."
    },
    {
      "Time_Start": 797.04,
      "Time_End": 801.72,
      "Text": " First is a vast list of loaded loads."
    },
    {
      "Time_Start": 801.72,
      "Time_End": 812.32,
      "Text": " Developers are only allowed to use the browser components to open specific pages such as the official homepage."
    },
    {
      "Time_Start": 812.32,
      "Time_End": 821.32,
      "Text": " Other pages will be opened by default system browser, maybe completed by calling shell.execute.open."
    },
    {
      "Time_Start": 821.32,
      "Time_End": 827.0,
      "Text": " For example, SCEP has the same logic here."
    },
    {
      "Time_Start": 827.04,
      "Time_End": 832.52,
      "Text": " The first way to bypass check is page redirection."
    },
    {
      "Time_Start": 832.52,
      "Time_End": 834.4,
      "Text": " Here are three main ways."
    },
    {
      "Time_Start": 834.4,
      "Time_End": 841.28,
      "Text": " Hyperlink navigation, 3.0x reduction, JavaScript navigation."
    },
    {
      "Time_Start": 841.28,
      "Time_End": 852.4,
      "Text": " Its principle is that this kind of check is with handling click and then the page was loaded in Chromium component."
    },
    {
      "Time_Start": 852.4,
      "Time_End": 858.6,
      "Text": " And the subsequent jump in Chromium will no longer trigger the check logic again."
    },
    {
      "Time_Start": 858.6,
      "Time_End": 865.4399999999999,
      "Text": " So SSO is a good path tools as shown in the figure on the right."
    },
    {
      "Time_Start": 869.8,
      "Time_End": 878.3199999999999,
      "Text": " The following is a demo that uses page redirection to imply RCE attack and software."
    },
    {
      "Time_Start": 878.36,
      "Time_End": 888.36,
      "Text": " For security reason, all the software mentioned in this topic will not disclose the product information."
    },
    {
      "Time_Start": 888.36,
      "Time_End": 895.8000000000001,
      "Text": " Okay, after click, calculator is here."
    },
    {
      "Time_Start": 895.8000000000001,
      "Time_End": 898.5200000000001,
      "Text": " Another point is check itself."
    },
    {
      "Time_Start": 898.5200000000001,
      "Time_End": 905.8000000000001,
      "Text": " Like incorrect regular expression or incorrect triple check."
    },
    {
      "Time_Start": 905.8000000000001,
      "Time_End": 907.84,
      "Text": " This is another real-world case."
    },
    {
      "Time_Start": 907.84,
      "Time_End": 911.52,
      "Text": " The checker uses a long regular expression."
    },
    {
      "Time_Start": 911.52,
      "Time_End": 915.24,
      "Text": " We ask check GPT and run here."
    },
    {
      "Time_Start": 915.24,
      "Time_End": 922.0,
      "Text": " It told me that there are many domains easily registered by hackers can pass the check."
    },
    {
      "Time_Start": 922.0,
      "Time_End": 928.8000000000001,
      "Text": " For example, abcdjd.hk."
    },
    {
      "Time_Start": 928.8000000000001,
      "Time_End": 931.32,
      "Text": " This is the demo mentioned before."
    },
    {
      "Time_Start": 931.32,
      "Time_End": 933.64,
      "Text": " It's also an AM software."
    },
    {
      "Time_Start": 933.64,
      "Time_End": 941.3199999999999,
      "Text": " After passing the URL check, we can easily load our HTML code."
    },
    {
      "Time_Start": 941.3199999999999,
      "Time_End": 946.76,
      "Text": " We can easily pop up the calculator."
    },
    {
      "Time_Start": 946.76,
      "Time_End": 952.16,
      "Text": " In addition, another point is the special URL handler."
    },
    {
      "Time_Start": 952.16,
      "Time_End": 954.6,
      "Text": " There are two main aspects."
    },
    {
      "Time_Start": 954.64,
      "Time_End": 958.52,
      "Text": " One is the scheme registered in the system registry,"
    },
    {
      "Time_Start": 958.52,
      "Time_End": 964.52,
      "Text": " and the other is the custom domain registered in the browser component."
    },
    {
      "Time_Start": 964.52,
      "Time_End": 975.84,
      "Text": " Since they are a provided domain, it's easy to miss some checks while operating in them."
    },
    {
      "Time_Start": 975.84,
      "Time_End": 979.08,
      "Text": " The following is the demo using this method."
    },
    {
      "Time_Start": 979.08,
      "Time_End": 988.64,
      "Text": " We can see that AM software is a vulnerable area in this development case."
    },
    {
      "Time_Start": 988.64,
      "Time_End": 994.1600000000001,
      "Text": " Okay."
    },
    {
      "Time_Start": 994.1600000000001,
      "Time_End": 997.96,
      "Text": " The next is paid code injection."
    },
    {
      "Time_Start": 997.96,
      "Time_End": 1007.5600000000001,
      "Text": " It's a classic top, but let's focus on the unique aspects of XSS in Chromium-based software."
    },
    {
      "Time_Start": 1007.5600000000001,
      "Time_End": 1010.8000000000001,
      "Text": " Here are three key differences."
    },
    {
      "Time_Start": 1010.8000000000001,
      "Time_End": 1013.6800000000001,
      "Text": " Firstly, XSS type."
    },
    {
      "Time_Start": 1013.6800000000001,
      "Time_End": 1022.6,
      "Text": " In web security, XSS typically includes reflective stored and DOM-based XSS."
    },
    {
      "Time_Start": 1022.6,
      "Time_End": 1027.8,
      "Text": " In Chromium-based software, resources are often stored locally,"
    },
    {
      "Time_Start": 1027.8,
      "Time_End": 1035.04,
      "Text": " so XSS in this context is typically DOM-based."
    },
    {
      "Time_Start": 1035.04,
      "Time_End": 1039.68,
      "Text": " Secondly, this vulnerability-discovered method."
    },
    {
      "Time_Start": 1039.68,
      "Time_End": 1048.3999999999999,
      "Text": " In web security, the code that handles user input is typically located on the server-side."
    },
    {
      "Time_Start": 1048.3999999999999,
      "Time_End": 1055.8799999999999,
      "Text": " So the bug is discovered mainly through black-box testing."
    },
    {
      "Time_Start": 1055.8799999999999,
      "Time_End": 1061.96,
      "Text": " However, with the code location tools we previously developed,"
    },
    {
      "Time_Start": 1061.96,
      "Time_End": 1067.24,
      "Text": " we can white-box code review in Chromium-based software."
    },
    {
      "Time_Start": 1067.24,
      "Time_End": 1069.4,
      "Text": " Thirdly, input source."
    },
    {
      "Time_Start": 1069.4,
      "Time_End": 1076.24,
      "Text": " In web security, input usually comes from URL parameters or the database."
    },
    {
      "Time_Start": 1076.24,
      "Time_End": 1081.3600000000001,
      "Text": " In Chromium-based software, there may be fewer URL parameters,"
    },
    {
      "Time_Start": 1081.3600000000001,
      "Time_End": 1088.92,
      "Text": " but more unique input sources, which we will discuss in the next section."
    },
    {
      "Time_Start": 1088.92,
      "Time_End": 1095.72,
      "Text": " Based on those features, as a researcher, I know little about web security."
    },
    {
      "Time_Start": 1095.72,
      "Time_End": 1100.8000000000002,
      "Text": " I mainly use the following method to discover XSS in local resources."
    },
    {
      "Time_Start": 1100.8000000000002,
      "Time_End": 1106.8400000000001,
      "Text": " Firstly, I use the tools we developed to decrypt local resources,"
    },
    {
      "Time_Start": 1106.8400000000001,
      "Time_End": 1114.2,
      "Text": " then identify the unprotected resources that result in CSP,"
    },
    {
      "Time_Start": 1114.2,
      "Time_End": 1119.16,
      "Text": " and filter out the input points that can be controlled."
    },
    {
      "Time_Start": 1119.16,
      "Time_End": 1124.4,
      "Text": " Finally, I trace whether this input can trigger code injection."
    },
    {
      "Time_Start": 1124.4,
      "Time_End": 1128.96,
      "Text": " This image is a real-world case I found."
    },
    {
      "Time_Start": 1128.96,
      "Time_End": 1132.28,
      "Text": " I have abstracted the key code,"
    },
    {
      "Time_Start": 1132.28,
      "Time_End": 1136.4,
      "Text": " and you can see that the getUrlParam function"
    },
    {
      "Time_Start": 1136.4,
      "Time_End": 1146.76,
      "Text": " precise the parameters in the URL and put them into the page using innerHTML in two,"
    },
    {
      "Time_Start": 1146.76,
      "Time_End": 1150.96,
      "Text": " finally leading to XSS."
    },
    {
      "Time_Start": 1150.96,
      "Time_End": 1159.2800000000002,
      "Text": " Another thing to note is that XSS vulnerability can also be"
    },
    {
      "Time_Start": 1159.2800000000002,
      "Time_End": 1161.72,
      "Text": " directed through the subline chain."
    },
    {
      "Time_Start": 1161.72,
      "Time_End": 1165.8000000000002,
      "Text": " For example, in EC2-959 of Typro,"
    },
    {
      "Time_Start": 1165.8,
      "Time_End": 1175.6399999999999,
      "Text": " attackers can execute JS code in Typro by exploring XSS vulnerability in the MerMED library,"
    },
    {
      "Time_Start": 1175.6399999999999,
      "Time_End": 1179.32,
      "Text": " and then use a provided API to achieve RCE."
    },
    {
      "Time_Start": 1179.32,
      "Time_End": 1185.08,
      "Text": " You can also use Chrome-ended vulnerabilities from two years ago,"
    },
    {
      "Time_Start": 1185.08,
      "Time_End": 1195.6,
      "Text": " such as CVE-2017-5070 to achieve RCE2."
    },
    {
      "Time_Start": 1195.6000000000001,
      "Time_End": 1199.2400000000002,
      "Text": " Here is a demo of the inspired for this case,"
    },
    {
      "Time_Start": 1199.2400000000002,
      "Time_End": 1218.16,
      "Text": " which shows that a Chrome-ended bug can also do the same things as a provided API bug."
    },
    {
      "Time_Start": 1218.16,
      "Time_End": 1224.0800000000002,
      "Text": " The addFrame feature is often used in not taking all document applications"
    },
    {
      "Time_Start": 1224.08,
      "Time_End": 1226.8799999999999,
      "Text": " to make a page display more convenient."
    },
    {
      "Time_Start": 1226.8799999999999,
      "Time_End": 1233.56,
      "Text": " However, when the scope of the addFrame excludes the limit,"
    },
    {
      "Time_Start": 1233.56,
      "Time_End": 1237.72,
      "Text": " it can also cause security questions."
    },
    {
      "Time_Start": 1237.72,
      "Time_End": 1241.36,
      "Text": " This is more dangerous than in web security because"
    },
    {
      "Time_Start": 1241.36,
      "Time_End": 1247.6,
      "Text": " it can be exploited with a solved provided API for a specific domain need."
    },
    {
      "Time_Start": 1247.64,
      "Time_End": 1254.5600000000002,
      "Text": " We also found a RCE bug in a popular not-taking software using this trick."
    },
    {
      "Time_Start": 1254.5600000000002,
      "Time_End": 1259.96,
      "Text": " We would have liked to release it here as an example,"
    },
    {
      "Time_Start": 1259.96,
      "Time_End": 1266.2800000000002,
      "Text": " but it is being fixed, so we can't disclose it here."
    },
    {
      "Time_Start": 1266.2800000000002,
      "Time_End": 1274.96,
      "Text": " For desktop software, it may face much more complex situations than a website,"
    },
    {
      "Time_Start": 1274.96,
      "Time_End": 1279.8,
      "Text": " such as no network or speed requirements."
    },
    {
      "Time_Start": 1279.8,
      "Time_End": 1285.1200000000001,
      "Text": " This requires some local cache to solve this problem."
    },
    {
      "Time_Start": 1285.1200000000001,
      "Time_End": 1290.48,
      "Text": " When reading or writing data, the cache is modified first"
    },
    {
      "Time_Start": 1290.48,
      "Time_End": 1295.8,
      "Text": " and then updated with the server through communications."
    },
    {
      "Time_Start": 1295.8,
      "Time_End": 1303.8400000000001,
      "Text": " In this logic, the developers usually trust the cache and don't check it again."
    },
    {
      "Time_Start": 1303.84,
      "Time_End": 1308.1599999999999,
      "Text": " when updating or loading it."
    },
    {
      "Time_Start": 1308.1599999999999,
      "Time_End": 1313.28,
      "Text": " Cache data can exist locally in various formats,"
    },
    {
      "Time_Start": 1313.28,
      "Time_End": 1319.1599999999999,
      "Text": " such as database, JSON, or a custom format."
    },
    {
      "Time_Start": 1319.1599999999999,
      "Time_End": 1321.1599999999999,
      "Text": " So, how do we find them?"
    },
    {
      "Time_Start": 1321.1599999999999,
      "Time_End": 1329.12,
      "Text": " The easiest way is to monitor the program's fail-read and write operations."
    },
    {
      "Time_Start": 1329.1200000000001,
      "Time_End": 1337.7600000000002,
      "Text": " The image on the right shows the applications that use SQLite to store cache data."
    },
    {
      "Time_Start": 1337.7600000000002,
      "Time_End": 1343.3200000000002,
      "Text": " You can see that when the database content is modified,"
    },
    {
      "Time_Start": 1343.3200000000002,
      "Time_End": 1348.64,
      "Text": " there are no valid checks on the data when it's loaded,"
    },
    {
      "Time_Start": 1348.64,
      "Time_End": 1354.6000000000001,
      "Text": " allowing any iframe to be inserted."
    },
    {
      "Time_Start": 1354.6000000000001,
      "Time_End": 1357.0800000000002,
      "Text": " Here is another interesting example."
    },
    {
      "Time_Start": 1357.08,
      "Time_End": 1363.96,
      "Text": " In a certain application, I found that when three-party components were added,"
    },
    {
      "Time_Start": 1363.96,
      "Time_End": 1369.76,
      "Text": " the app inserted an iframe here into the page."
    },
    {
      "Time_Start": 1369.76,
      "Time_End": 1377.76,
      "Text": " But the src attribute is strictly displayed here."
    },
    {
      "Time_Start": 1377.8,
      "Time_End": 1387.28,
      "Text": " But in the local cache, I found a custom property called hf."
    },
    {
      "Time_Start": 1387.28,
      "Time_End": 1393.56,
      "Text": " I modified it to access code and reopened the program."
    },
    {
      "Time_Start": 1393.56,
      "Time_End": 1398.04,
      "Text": " The page was modified to any HTML code here,"
    },
    {
      "Time_Start": 1398.04,
      "Time_End": 1404.16,
      "Text": " which means that we bypassed the check by modifying the local cache."
    },
    {
      "Time_Start": 1404.16,
      "Time_End": 1409.92,
      "Text": " When I assessed the web version of this app,"
    },
    {
      "Time_Start": 1409.92,
      "Time_End": 1416.0400000000002,
      "Text": " I found that the web page also changed to any HTML code here."
    },
    {
      "Time_Start": 1416.0400000000002,
      "Time_End": 1421.3600000000001,
      "Text": " This means that the server didn't check the update of the local cache,"
    },
    {
      "Time_Start": 1421.3600000000001,
      "Time_End": 1426.48,
      "Text": " and the vulnerabilities became stored in XSS."
    },
    {
      "Time_Start": 1426.48,
      "Time_End": 1435.0,
      "Text": " Therefore, by using the code injection,"
    },
    {
      "Time_Start": 1435.0,
      "Time_End": 1439.8,
      "Text": " we bypassed the validation and achieved RCE."
    },
    {
      "Time_Start": 1439.8,
      "Time_End": 1446.72,
      "Text": " And further, we polluted the server, which can lead to more remote attacks."
    },
    {
      "Time_Start": 1446.72,
      "Time_End": 1454.88,
      "Text": " Some applications also allow developers to develop plugins"
    },
    {
      "Time_Start": 1454.92,
      "Time_End": 1457.6000000000001,
      "Text": " and update them to the store,"
    },
    {
      "Time_Start": 1457.6000000000001,
      "Time_End": 1462.3200000000002,
      "Text": " thus providing more convenient extension functions."
    },
    {
      "Time_Start": 1462.3200000000002,
      "Time_End": 1467.2,
      "Text": " Software gives developers more functionality,"
    },
    {
      "Time_Start": 1467.2,
      "Time_End": 1474.0,
      "Text": " but plugins usually need to be officially reviewed before being put on the store."
    },
    {
      "Time_Start": 1474.0,
      "Time_End": 1482.0800000000002,
      "Text": " With the browser components, hackers may use it to bypass plugin reviews, for example."
    },
    {
      "Time_Start": 1482.08,
      "Time_End": 1488.6,
      "Text": " When a plugin is reviewed, the page in the plugin is a normal page."
    },
    {
      "Time_Start": 1488.6,
      "Time_End": 1491.28,
      "Text": " But when it is put on the market,"
    },
    {
      "Time_Start": 1491.28,
      "Time_End": 1496.4399999999998,
      "Text": " the website is redirected to a page with expired code,"
    },
    {
      "Time_Start": 1496.4399999999998,
      "Time_End": 1502.48,
      "Text": " thereby realizing a waterhole attack."
    },
    {
      "Time_Start": 1502.48,
      "Time_End": 1509.1999999999998,
      "Text": " The following is an example of IntelliJ IDEA software."
    },
    {
      "Time_Start": 1509.2,
      "Time_End": 1512.1200000000001,
      "Text": " When a meticulous plugin is loaded,"
    },
    {
      "Time_Start": 1512.1200000000001,
      "Time_End": 1518.44,
      "Text": " an attacker can use the browser component to achieve RCE."
    },
    {
      "Time_Start": 1518.44,
      "Time_End": 1527.3600000000001,
      "Text": " So, when a plugin is reviewed, it is necessary to pay attention to the URL in it."
    },
    {
      "Time_Start": 1527.3600000000001,
      "Time_End": 1532.3600000000001,
      "Text": " Now, in the video, we load the plugin."
    },
    {
      "Time_Start": 1539.2,
      "Time_End": 1556.4,
      "Text": " Some functions may have an arbitrary page loading process,"
    },
    {
      "Time_Start": 1556.4,
      "Time_End": 1560.8,
      "Text": " such as the pre-rendering of crawlers or nodes."
    },
    {
      "Time_Start": 1561.3999999999999,
      "Time_End": 1572.0,
      "Text": " For example, the pursuit was found an RCE bug in a passive scanning function in 2021."
    },
    {
      "Time_Start": 1572.0,
      "Time_End": 1578.6,
      "Text": " Now, our co-speaker, Wang Zheng, will give the other part of this talk."
    },
    {
      "Time_Start": 1578.6,
      "Time_End": 1581.84,
      "Text": " Thank you."
    },
    {
      "Time_Start": 1581.84,
      "Time_End": 1586.0,
      "Text": " Hello, everyone. I'm Wang Zheng, the co-speaker of this topic."
    },
    {
      "Time_Start": 1586.0,
      "Time_End": 1590.08,
      "Text": " I will finish the last part."
    },
    {
      "Time_Start": 1590.12,
      "Time_End": 1593.6,
      "Text": " Given the short duration of RCE window period,"
    },
    {
      "Time_Start": 1593.6,
      "Time_End": 1597.1999999999998,
      "Text": " it is crucial to develop exploits quickly."
    },
    {
      "Time_Start": 1597.1999999999998,
      "Time_End": 1600.72,
      "Text": " When it comes to type vulnerabilities,"
    },
    {
      "Time_Start": 1600.72,
      "Time_End": 1607.08,
      "Text": " a common technique is to use optimized functions to create inconsistencies"
    },
    {
      "Time_Start": 1607.08,
      "Time_End": 1610.08,
      "Text": " that ultimately lead to type confusion."
    },
    {
      "Time_Start": 1610.08,
      "Time_End": 1612.8,
      "Text": " However, for use of free bugs,"
    },
    {
      "Time_Start": 1612.8,
      "Time_End": 1617.8,
      "Text": " there doesn't seem to be a publicly universal exploit method."
    },
    {
      "Time_Start": 1617.8,
      "Time_End": 1626.36,
      "Text": " Here, we propose a universal exploit method for V8 32-bit use of free bugs,"
    },
    {
      "Time_Start": 1626.36,
      "Time_End": 1633.04,
      "Text": " which will be demonstrated in Chromium version 91."
    },
    {
      "Time_Start": 1633.04,
      "Time_End": 1638.04,
      "Text": " Let's start by discussing some relevant background knowledge."
    },
    {
      "Time_Start": 1638.04,
      "Time_End": 1645.12,
      "Text": " V8's Mino garbage collection recycles objects from the young generation,"
    },
    {
      "Time_Start": 1645.16,
      "Time_End": 1649.24,
      "Text": " which divides memory into two spaces."
    },
    {
      "Time_Start": 1649.24,
      "Time_End": 1654.88,
      "Text": " Newly allocated objects are put into the from space,"
    },
    {
      "Time_Start": 1654.88,
      "Time_End": 1658.6000000000001,
      "Text": " and when the first garbage collection is called,"
    },
    {
      "Time_Start": 1658.6000000000001,
      "Time_End": 1665.8400000000001,
      "Text": " it identifies surviving objects and copies them from the from space to the to space,"
    },
    {
      "Time_Start": 1665.8400000000001,
      "Time_End": 1668.5200000000002,
      "Text": " updating object pointers."
    },
    {
      "Time_Start": 1668.5200000000002,
      "Time_End": 1673.72,
      "Text": " Then, the from space and to space are swapped,"
    },
    {
      "Time_Start": 1673.72,
      "Time_End": 1677.84,
      "Text": " and the next round of garbage collection is performed."
    },
    {
      "Time_Start": 1677.84,
      "Time_End": 1684.96,
      "Text": " During scavenging, there is also an additional set of root objects,"
    },
    {
      "Time_Start": 1684.96,
      "Time_End": 1689.88,
      "Text": " which are pointers from old space to new space objects."
    },
    {
      "Time_Start": 1689.88,
      "Time_End": 1696.24,
      "Text": " V8 uses red barriers to track these references."
    },
    {
      "Time_Start": 1696.24,
      "Time_End": 1702.16,
      "Text": " When the garbage collection identifies relevant references in the old space,"
    },
    {
      "Time_Start": 1702.16,
      "Time_End": 1707.4,
      "Text": " it does not reclaim the objects in the new space."
    },
    {
      "Time_Start": 1707.4,
      "Time_End": 1715.2,
      "Text": " Here is a Chrome issue 101307610."
    },
    {
      "Time_Start": 1715.2,
      "Time_End": 1718.3600000000001,
      "Text": " This was caused by a missing red barrier"
    },
    {
      "Time_Start": 1718.3600000000001,
      "Time_End": 1723.8000000000002,
      "Text": " when generating the lastIndex object for a red expression object."
    },
    {
      "Time_Start": 1723.8000000000002,
      "Time_End": 1730.92,
      "Text": " When lastIndex accesses the SMI range and the red expression is in the old space,"
    },
    {
      "Time_Start": 1730.92,
      "Time_End": 1734.8000000000002,
      "Text": " while the lastIndex object is in the new space,"
    },
    {
      "Time_Start": 1734.8000000000002,
      "Time_End": 1740.3600000000001,
      "Text": " the garbage collection mistakenly identifies the object as reclaimable"
    },
    {
      "Time_Start": 1740.3600000000001,
      "Time_End": 1743.44,
      "Text": " due to the lack of reference information,"
    },
    {
      "Time_Start": 1743.44,
      "Time_End": 1749.5600000000002,
      "Text": " resulting in a user-affirmative vulnerability."
    },
    {
      "Time_Start": 1749.5600000000002,
      "Time_End": 1756.3200000000002,
      "Text": " In V8, there is a type of string called 1-byte internalized string."
    },
    {
      "Time_Start": 1756.3200000000002,
      "Time_End": 1759.52,
      "Text": " Its memory layout is as follows."
    },
    {
      "Time_Start": 1759.52,
      "Time_End": 1764.6399999999999,
      "Text": " From front to back, they are the object's map, hash,"
    },
    {
      "Time_Start": 1764.6399999999999,
      "Time_End": 1768.48,
      "Text": " string length, and the string's content."
    },
    {
      "Time_Start": 1768.48,
      "Time_End": 1774.36,
      "Text": " The core idea we used was to forge a string with an extremely large length"
    },
    {
      "Time_Start": 1774.36,
      "Time_End": 1779.0,
      "Text": " and place the target object after the string in memory."
    },
    {
      "Time_Start": 1779.0,
      "Time_End": 1782.28,
      "Text": " Then, we can use the search method of the string"
    },
    {
      "Time_Start": 1782.28,
      "Time_End": 1787.56,
      "Text": " to find the address of the target object after the mark."
    },
    {
      "Time_Start": 1787.56,
      "Time_End": 1794.04,
      "Text": " Thus, we can construct the address of primitive."
    },
    {
      "Time_Start": 1794.04,
      "Time_End": 1800.04,
      "Text": " Using the same technique, we can place a JS array after the fake string."
    },
    {
      "Time_Start": 1800.04,
      "Time_End": 1803.0,
      "Text": " By using the string's auto-bounce write,"
    },
    {
      "Time_Start": 1803.0,
      "Time_End": 1807.24,
      "Text": " we can modify the elements member of the JS array"
    },
    {
      "Time_Start": 1807.24,
      "Time_End": 1815.28,
      "Text": " to point to arbitrary address and achieve arbitrary memory read and write."
    },
    {
      "Time_Start": 1815.28,
      "Time_End": 1819.84,
      "Text": " To fix such a string, we need to create a fake string map."
    },
    {
      "Time_Start": 1819.84,
      "Time_End": 1824.12,
      "Text": " V8 uses map to identify object types,"
    },
    {
      "Time_Start": 1824.12,
      "Time_End": 1827.56,
      "Text": " so our core technique is heap-spreading."
    },
    {
      "Time_Start": 1827.56,
      "Time_End": 1831.68,
      "Text": " We can heap-spread a large number of array-buffer objects"
    },
    {
      "Time_Start": 1831.68,
      "Time_End": 1834.16,
      "Text": " to obtain a stable address"
    },
    {
      "Time_Start": 1834.16,
      "Time_End": 1839.56,
      "Text": " and then forge the necessary members of the string map at this address."
    },
    {
      "Time_Start": 1839.56,
      "Time_End": 1843.36,
      "Text": " Finally, we place the fake string in a JS array"
    },
    {
      "Time_Start": 1843.3600000000001,
      "Time_End": 1847.88,
      "Text": " and allocate a large number of JS array objects"
    },
    {
      "Time_Start": 1847.88,
      "Time_End": 1852.2,
      "Text": " to occupy the last-indexed placeholder."
    },
    {
      "Time_Start": 1852.2,
      "Time_End": 1857.3200000000002,
      "Text": " The fake string is placed on the left of the JS array,"
    },
    {
      "Time_Start": 1857.3200000000002,
      "Time_End": 1862.5600000000002,
      "Text": " and a forged string object is on the right."
    },
    {
      "Time_Start": 1862.5600000000002,
      "Time_End": 1869.5600000000002,
      "Text": " Here is a demonstration video of our successful exploration in Chrome version 91."
    },
    {
      "Time_Start": 1873.3600000000001,
      "Time_End": 1886.3600000000001,
      "Text": " So, as for Chromium-based malware,"
    },
    {
      "Time_Start": 1886.3600000000001,
      "Time_End": 1892.3600000000001,
      "Text": " we found firstly, a little bug or feature can lead to RCE attack."
    },
    {
      "Time_Start": 1892.3600000000001,
      "Time_End": 1899.96,
      "Text": " Secondly, there is lack of attention to the attack path of browser vulnerabilities now,"
    },
    {
      "Time_Start": 1900.08,
      "Time_End": 1904.76,
      "Text": " so the attack surface is relatively rudimentary"
    },
    {
      "Time_Start": 1904.76,
      "Time_End": 1913.44,
      "Text": " and hackers also can bypass mitigation directly using powerful Chromium bugs."
    },
    {
      "Time_Start": 1913.44,
      "Time_End": 1921.1200000000001,
      "Text": " This section is about how to achieve RCE attack without sandbox escape bug."
    },
    {
      "Time_Start": 1921.1200000000001,
      "Time_End": 1927.6000000000001,
      "Text": " The sandbox is a security protection mechanism of Chromium."
    },
    {
      "Time_Start": 1927.6000000000001,
      "Time_End": 1930.68,
      "Text": " Even if a hacker gets the render RCE,"
    },
    {
      "Time_Start": 1930.68,
      "Time_End": 1934.92,
      "Text": " he still cannot get the full execution permission."
    },
    {
      "Time_Start": 1934.92,
      "Time_End": 1940.44,
      "Text": " This includes mandatory RSS-controlled environment,"
    },
    {
      "Time_Start": 1940.44,
      "Time_End": 1947.64,
      "Text": " isolated process with HTML rendering and JavaScript execution,"
    },
    {
      "Time_Start": 1947.64,
      "Time_End": 1956.68,
      "Text": " and finally, the limited resource access and limited IPC or kernel interaction access."
    },
    {
      "Time_Start": 1956.68,
      "Time_End": 1963.3200000000002,
      "Text": " The end-day of sandbox escape is much less than the end-day of render RCE."
    },
    {
      "Time_Start": 1963.3200000000002,
      "Time_End": 1973.4,
      "Text": " So, how can we achieve RCE in sandbox-enabled software without a Chromium sandbox escape bug?"
    },
    {
      "Time_Start": 1973.4,
      "Time_End": 1982.92,
      "Text": " First, let's see what's the difference between Chromium-based software and Chrome browser."
    },
    {
      "Time_Start": 1982.92,
      "Time_End": 1987.8000000000002,
      "Text": " The one is Privileged API."
    },
    {
      "Time_Start": 1987.8000000000002,
      "Time_End": 1994.3600000000001,
      "Text": " It is used to implement some client-side behavior in specific cases,"
    },
    {
      "Time_Start": 1994.3600000000001,
      "Time_End": 1999.88,
      "Text": " such as uploading files and downloading files."
    },
    {
      "Time_Start": 1999.88,
      "Time_End": 2005.3200000000002,
      "Text": " For renderer, it is a series of JavaScript objects."
    },
    {
      "Time_Start": 2005.3200000000002,
      "Time_End": 2010.68,
      "Text": " For browser, it is a series of handler code."
    },
    {
      "Time_Start": 2010.68,
      "Time_End": 2016.1200000000001,
      "Text": " Different frameworks have different implementations."
    },
    {
      "Time_Start": 2016.1200000000001,
      "Time_End": 2023.8,
      "Text": " The principle is to register some JavaScript objects in the context of the render process,"
    },
    {
      "Time_Start": 2023.8,
      "Time_End": 2027.16,
      "Text": " and when the objects are called,"
    },
    {
      "Time_Start": 2027.16,
      "Time_End": 2035.16,
      "Text": " we can execute the implemented handler in the browser process through IPC call."
    },
    {
      "Time_Start": 2035.16,
      "Time_End": 2042.68,
      "Text": " Based on this idea, there are usually two implementation logic for the Privileged API."
    },
    {
      "Time_Start": 2042.68,
      "Time_End": 2049.64,
      "Text": " The first one checks the URL loaded by the browser component when it is initialized."
    },
    {
      "Time_Start": 2049.64,
      "Time_End": 2056.36,
      "Text": " If it is a specific domain, register the Privileged API in the loaded context."
    },
    {
      "Time_Start": 2056.36,
      "Time_End": 2062.28,
      "Text": " At runtime, only the Privileged domain can obtain the JavaScript object."
    },
    {
      "Time_Start": 2062.28,
      "Time_End": 2065.8,
      "Text": " So, when we call some function from this API,"
    },
    {
      "Time_Start": 2065.8,
      "Time_End": 2072.0400000000004,
      "Text": " the browser processes calls it without checking the source domain."
    },
    {
      "Time_Start": 2072.0400000000004,
      "Time_End": 2081.0800000000004,
      "Text": " The second logic is to register the Privileged API object no matter what domain it is at initialization,"
    },
    {
      "Time_Start": 2081.0800000000004,
      "Time_End": 2089.0800000000004,
      "Text": " and then the developer can check the domain when the Privileged API is called."
    },
    {
      "Time_Start": 2089.08,
      "Time_End": 2091.88,
      "Text": " There are some problems with both methods."
    },
    {
      "Time_Start": 2091.88,
      "Time_End": 2099.08,
      "Text": " For the first one, whatever non-privileged web view gets a privileged context."
    },
    {
      "Time_Start": 2099.08,
      "Time_End": 2108.2799999999997,
      "Text": " For the second one, how to properly check the IPC access is from privileged domain."
    },
    {
      "Time_Start": 2108.2799999999997,
      "Time_End": 2112.52,
      "Text": " The research on Elastoporn has become relatively mature."
    },
    {
      "Time_Start": 2112.52,
      "Time_End": 2119.96,
      "Text": " In August 2018, Maestro shared research on context isolation,"
    },
    {
      "Time_Start": 2119.96,
      "Time_End": 2126.12,
      "Text": " which is used to isolate the context between the renderer process and preload."
    },
    {
      "Time_Start": 2126.12,
      "Time_End": 2132.44,
      "Text": " If this configuration is disabled, even with sandbox protection enabled,"
    },
    {
      "Time_Start": 2132.44,
      "Time_End": 2140.28,
      "Text": " the renderer process can also call privileged functions exported from preload,"
    },
    {
      "Time_Start": 2140.28,
      "Time_End": 2145.7200000000003,
      "Text": " such as shell.openExternalFunction."
    },
    {
      "Time_Start": 2145.7200000000003,
      "Time_End": 2152.44,
      "Text": " At BlackHat Asia in 2019, Luka shared his research on preload."
    },
    {
      "Time_Start": 2152.44,
      "Time_End": 2157.6400000000003,
      "Text": " He discovered that even with sandbox protection enabled,"
    },
    {
      "Time_Start": 2157.6400000000003,
      "Time_End": 2167.4,
      "Text": " preload.js may still access certain native node classes and some electronic modules."
    },
    {
      "Time_Start": 2167.4,
      "Time_End": 2173.64,
      "Text": " Attackers can use prototype solution to execute arbitrary IPC calls."
    },
    {
      "Time_Start": 2175.56,
      "Time_End": 2183.48,
      "Text": " At BlackHat USA in 2022, a sandbox bypass method was demonstrated"
    },
    {
      "Time_Start": 2183.48,
      "Time_End": 2190.92,
      "Text": " when the renderer process could load the preload.js file in a child frame"
    },
    {
      "Time_Start": 2190.92,
      "Time_End": 2200.04,
      "Text": " by overwriting the node integration in subframe members of the web preference of the context."
    },
    {
      "Time_Start": 2201.8,
      "Time_End": 2211.88,
      "Text": " We can also overwrite the context isolation and disable CISO in new renderer process."
    },
    {
      "Time_Start": 2211.88,
      "Time_End": 2218.6800000000003,
      "Text": " Then we can send unauthorized IPC call with prototype solution."
    },
    {
      "Time_Start": 2220.92,
      "Time_End": 2227.0,
      "Text": " We also found some interesting and wide-ranging issues with the second model."
    },
    {
      "Time_Start": 2227.0,
      "Time_End": 2233.08,
      "Text": " But since the renderers are working on a fix, we will share the details when it's fixed."
    },
    {
      "Time_Start": 2234.76,
      "Time_End": 2240.44,
      "Text": " We will make some security recommendations for Chromium-based software in two aspects."
    },
    {
      "Time_Start": 2241.88,
      "Time_End": 2248.12,
      "Text": " Firstly, it is necessary to update the latest version of the Chromium."
    },
    {
      "Time_Start": 2248.7599999999998,
      "Time_End": 2256.6,
      "Text": " Secondly, for software with high coupling, it's better to use a stable development version"
    },
    {
      "Time_Start": 2256.6,
      "Time_End": 2260.92,
      "Text": " and introduce security patches with software updates."
    },
    {
      "Time_Start": 2262.12,
      "Time_End": 2266.68,
      "Text": " Thirdly, we should enable the Chromium sandbox."
    },
    {
      "Time_Start": 2266.68,
      "Time_End": 2275.64,
      "Text": " And last, we need to disable unused software functionalities or enable internal mitigations."
    },
    {
      "Time_Start": 2278.92,
      "Time_End": 2286.52,
      "Text": " For developers, we can add backend validation and frontend rendering validation."
    },
    {
      "Time_Start": 2286.52,
      "Time_End": 2295.48,
      "Text": " Follow the principle of latest privilege, both privileged domain, range, and privileged API function."
    },
    {
      "Time_Start": 2296.52,
      "Time_End": 2305.96,
      "Text": " Enable universal mitigation such as CSP and be vigilant about input from unexpected sources."
    },
    {
      "Time_Start": 2308.92,
      "Time_End": 2313.64,
      "Text": " Here is the conclusion and takeaways of this topic."
    },
    {
      "Time_Start": 2314.6,
      "Time_End": 2321.7999999999997,
      "Text": " In this topic, we verify that a large number of Chromium-based software have RCE window period."
    },
    {
      "Time_Start": 2322.3599999999997,
      "Time_End": 2331.08,
      "Text": " And then we summarize some software attack surfaces that cooperate with the RCE window period,"
    },
    {
      "Time_Start": 2331.08,
      "Time_End": 2339.3199999999997,
      "Text": " which makes the hackers can launch zero-day attack with Chromium NDAs and give real-world examples."
    },
    {
      "Time_Start": 2340.04,
      "Time_End": 2349.24,
      "Text": " And we share a general V8 use-life-free exploit method in 32-bit, which may help make exploit"
    },
    {
      "Time_Start": 2349.24,
      "Time_End": 2356.2,
      "Text": " faster. At last, we provide some security recommendations to help strengthen the"
    },
    {
      "Time_Start": 2356.2000000000003,
      "Time_End": 2363.32,
      "Text": " security of Chromium-based software. At last, thanks to all the partners"
    },
    {
      "Time_Start": 2363.32,
      "Time_End": 2367.5600000000004,
      "Text": " for their contribution to this topic. Here is the list."
    },
    {
      "Time_Start": 2373.4,
      "Time_End": 2379.0000000000005,
      "Text": " Okay, thanks for your listening. Here is the references of this topic."
    },
    {
      "Time_Start": 2379.0000000000005,
      "Time_End": 2385.0000000000005,
      "Text": " If you have any problem, you can contact us with email or on Twitter."
    },
    {
      "Time_Start": 2386.2000000000003,
      "Time_End": 2389.0000000000005,
      "Text": " Thank you."
    }
  ]
}