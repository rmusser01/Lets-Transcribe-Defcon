**Introduction**
- Speaker: Asi Greenholts
- Topic: Exploiting GitHub Actions to create a worm

**GitHub Actions**
- **CI/CD Platform**: Allows automation of build, test, and deployment pipelines
- **Events**: Triggers for pipelines include push, pull request, etc.
- **Workflows**: Pipelines in GitHub Actions, can contain multiple jobs
- **Jobs**: Run on different runners, can contain multiple steps
- **Steps**: Can contain bash commands or **actions**
- **Actions**: Code packages that allow the use of third-party libraries in a pipeline

**Worm Components**
- **Initial Attack Vectors**: Methods to compromise a single repository, e.g., re-projecting, NPM email hijacking, command injection
- **Action Dependencies**: Understanding the relationships between actions, e.g., Docker, JavaScript, and composite actions
- **Action to Infect Actions**: Exploiting secrets and tokens to push malicious code or override existing tags
- **Finding Attack Graphs at Scale**: Using Neo4j to visualize and analyze action dependencies, identifying vulnerable repositories

**Automation and Impact**
- **Target Repositories**: Top 10K repositories by stars and 32K repositories with bug bounty programs
- **Metadata Collection**: Parsing action and workflow YAML files to gather information on dependencies, secrets, and permissions
- **Vulnerable Repositories**: Demonstrating the impact of the attack by compromising a single repository and spreading to 18 intermediate actions, ultimately affecting 72 target repositories
- **Real-World Examples**: Discussing specific vulnerable repositories and the potential for wider propagation, including private repositories and exfiltrating source code

**Demo: Dendro Worm**
- **Environment**: Target repository using a GitHub Actions CICD workflow, random action, composite action, and rev action
- **Attack Process**: Infecting the rev action, triggering the composite action, and then the random action, ultimately exfiltrating secrets from the target repository

**Additional Findings**
- **Vulnerable Repositories**: 175 repositories vulnerable to initial attack vectors, including popular projects like Angular and Astro
- **Email Hijacking**: Hijacking a single email domain to potentially compromise 90 repositories

**Protection Measures**
- **Token and PAT Permissions**: Setting minimal permissions, especially for the content permission, to prevent pushing code
- **Branch Protection Rules**: Preventing pushes to protected branches
- **Protected Tags**: A separate feature from branch protection, used to secure tags
- **Outbound Connections**: Limiting connections from runners to restrict malware downloads
- **Action Pinning**: Using hash to pin actions, making it harder for attackers to modify references
- **GitHub's Permission-Limiter**: A project to help reduce workflow permissions