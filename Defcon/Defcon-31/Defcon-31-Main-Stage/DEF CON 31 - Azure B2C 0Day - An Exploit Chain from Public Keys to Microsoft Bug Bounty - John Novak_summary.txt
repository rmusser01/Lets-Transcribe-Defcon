**Introduction**
- Speaker: John Novak, Technical Director at Praetorian
- Topic: Vulnerability in Azure B2C, allowing impersonation of users and tenants
- **Demonstration**: Proving the vulnerability without revealing the exploit method

**Background**
- **Cryptography**: Symmetric (e.g., AES) and asymmetric (e.g., RSA) encryption
- **JSON Web Tokens (JWTs)**: Signed blobs with integrity but no confidentiality
- **JSON Web Encryption (JWE)**: Encrypted JWTs, may lack integrity with asymmetric encryption
- **Azure B2C**: Microsoft's identity and access management service for customer-facing apps

**Part 1: Vulnerability in Azure B2C**
- **Setup**: Microsoft's documentation recommends using RSA keys for signing and encryption
- **Authentication Flow**: Login, password reset, etc., resulting in ID and refresh tokens
- **Token Structure**: ID token is a signed JWS, refresh token is an encrypted JWE without nested JWT
- **Key Generation**: Auto-generated keys may lead to errors; manually uploading keys provides control and vuln research benefits
- **Token Manipulation**: Modifying fields in the refresh token affects the ID token, indicating a lack of integrity

**Part 2: Side-Channel Attack**
- **Objective**: Recover the public RSA key to generate and encrypt refresh tokens
- **RSA Components**: Public components are modulus (N) and exponent (E), with E often fixed
- **Ciphertext**: Always less than the modulus N, providing a lower bound for N
- **Timing Attack**: Submitting refresh tokens with ciphertexts smaller/larger than N results in different response times
- **Binary Search**: Using timing differential to recover one bit of the public key per round
- **Practicality**: Attack recovers 50-55 bits per hour, feasible considering key validity periods
- **Graphical Representation**: Demonstrating the attack in action, with backtracking and rate-limiting considerations

**Exploitation**
- **Target**: Microsoft Security Response Center (MSRC) uses B2C for authentication
- **Steps**: Recover public key, generate refresh token for a victim, obtain ID token, and list vulnerability reports
- **Proof of Concept**: ID token with a fake email address and additional parameter, still valid at the time of the talk
- **Impact**: Ability to compromise any B2C tenant and access sensitive information, e.g., zero-day vulnerability submissions

**Disclosure and Remediation**
- **Timeline**: Initial disclosure in 2022, two-part fix planned, first implemented in Dec 2022, second delayed
- **Risk Rating**: Categorized as "Important" and "Info Disclosure," not "Critical" or "Elevation of Privilege"
- **Bug Bounty**: Ineligible for Microsoft's Azure and Identity bounty programs due to scope limitations
- **Lingering Remediations**: Encouraging users to switch to secret key generation and nested JWT implementation

**Other OAuth Implementations**
- **AWS Cognito**: Similar to Azure B2C, uses RSA encryption but likely not vulnerable due to nested JWTs

**Q&A**
- No specific mention of testing against other targets besides B2C
- Discussion of the MSRC team and the importance of generally applicable crypto vulnerabilities
- Backtracking in the timing attack: detecting lack of progress and adjusting the search space
- Confidence mathematics in timing attacks can be challenging