{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 16.2,
      "Text": "This text was transcribed using whisper model: large-v2\n\n So, this is Apple's Predicament, predicate exploitation on macOS and iOS."
    },
    {
      "Time_Start": 16.2,
      "Time_End": 21.84,
      "Text": " My name is Austin Emmett, and I also go by Alkali, get into it."
    },
    {
      "Time_Start": 21.84,
      "Time_End": 25.560000000000002,
      "Text": " So a little bit more information about me, I'm currently a vulnerability researcher at"
    },
    {
      "Time_Start": 25.560000000000002,
      "Time_End": 29.76,
      "Text": " Vigilant Labs, though the research that I'm going to be presenting today was done while"
    },
    {
      "Time_Start": 29.76,
      "Time_End": 33.68,
      "Text": " I worked at the Trellis Advanced Research Center."
    },
    {
      "Time_Start": 33.68,
      "Time_End": 38.88,
      "Text": " I'm also the author of the Radius 2 Symbolic Execution Framework, which uses Radare 2 to"
    },
    {
      "Time_Start": 38.88,
      "Time_End": 43.88,
      "Text": " easily, quickly and easily perform symbolic execution and taint analysis on binaries for"
    },
    {
      "Time_Start": 43.88,
      "Time_End": 46.16,
      "Text": " many different architectures."
    },
    {
      "Time_Start": 46.16,
      "Time_End": 49.160000000000004,
      "Text": " Check that out if it's something you're interested in."
    },
    {
      "Time_Start": 49.160000000000004,
      "Time_End": 56.6,
      "Text": " I'm Alkali and Sec on Twitter, I mean X, and I'm Alkali at InfoSec Exchange on Mastodon."
    },
    {
      "Time_Start": 57.440000000000005,
      "Time_End": 63.96,
      "Text": " Alright, let's talk about where this all sort of began, with the forced entry exploit."
    },
    {
      "Time_Start": 63.96,
      "Time_End": 67.84,
      "Text": " I've been obsessed with NSPredicates since I read the second part of the Project Zero's"
    },
    {
      "Time_Start": 67.84,
      "Time_End": 77.64,
      "Text": " blog post about the forced entry attack, which was an exploit chain targeting iOS in 2001."
    },
    {
      "Time_Start": 77.64,
      "Time_End": 83.08,
      "Text": " The first post covered an iMessage exploit that sent a fake GIF that was actually a PDF,"
    },
    {
      "Time_Start": 83.08,
      "Time_End": 88.56,
      "Text": " which exploited an integer overflow in the JBig2 image compression codec."
    },
    {
      "Time_Start": 88.56,
      "Time_End": 95.08,
      "Text": " It was this absolutely incredible exploit that used the operations on groups of pixels"
    },
    {
      "Time_Start": 95.08,
      "Time_End": 102.0,
      "Text": " to create an entire virtual machine."
    },
    {
      "Time_Start": 102.0,
      "Time_End": 106.96,
      "Text": " The ultimate purpose of this virtual machine was to create and evaluate an NSPredicate,"
    },
    {
      "Time_Start": 106.96,
      "Time_End": 111.4,
      "Text": " which sent another NSPredicate to an unsandboxed process."
    },
    {
      "Time_Start": 111.4,
      "Time_End": 115.28,
      "Text": " While the iMessage exploit received most of the attention, I was fascinated by the"
    },
    {
      "Time_Start": 115.28,
      "Time_End": 120.60000000000001,
      "Text": " sandbox escape and these NSPredicates, these tiny little strings that were capable of defeating"
    },
    {
      "Time_Start": 120.60000000000001,
      "Time_End": 126.92,
      "Text": " all of iOS security."
    },
    {
      "Time_Start": 126.92,
      "Time_End": 127.92,
      "Text": " So why was I so fascinated?"
    },
    {
      "Time_Start": 127.92,
      "Time_End": 131.12,
      "Text": " The answer is because iOS hacking is hard."
    },
    {
      "Time_Start": 131.12,
      "Time_End": 132.36,
      "Text": " It's very hard."
    },
    {
      "Time_Start": 132.36,
      "Time_End": 139.36,
      "Text": " iOS is a hard target because it has common mitigations like ASLR, address space layout"
    },
    {
      "Time_Start": 139.36,
      "Time_End": 143.72000000000003,
      "Text": " randomization, though on iOS it's a little bit limited, which we'll get to later."
    },
    {
      "Time_Start": 143.72000000000003,
      "Time_End": 147.72000000000003,
      "Text": " But more importantly, iOS also has other less common mitigations like strict code signing"
    },
    {
      "Time_Start": 147.72000000000003,
      "Time_End": 152.12,
      "Text": " which prevent any dynamically generated code from being executed."
    },
    {
      "Time_Start": 152.12,
      "Time_End": 157.08,
      "Text": " Only code signed with an Apple approved certificate can be run on the device in its normal form"
    },
    {
      "Time_Start": 157.08,
      "Time_End": 159.52,
      "Text": " of operation."
    },
    {
      "Time_Start": 159.52,
      "Time_End": 166.60000000000002,
      "Text": " Also every form of scripting has either been removed like AppleScript or heavily sandboxed"
    },
    {
      "Time_Start": 166.6,
      "Time_End": 169.28,
      "Text": " like the JavaScript engine."
    },
    {
      "Time_Start": 169.28,
      "Time_End": 174.6,
      "Text": " Additionally, modern iPhones and Macs have PAC or pointer authentication codes and these"
    },
    {
      "Time_Start": 174.6,
      "Time_End": 181.04,
      "Text": " are codes made up of some of the previously unused top bits of pointers and special instructions"
    },
    {
      "Time_Start": 181.04,
      "Time_End": 186.64,
      "Text": " set and check them in order to prevent code reuse methods like ROP or return oriented"
    },
    {
      "Time_Start": 186.64,
      "Time_End": 187.76,
      "Text": " programming."
    },
    {
      "Time_Start": 187.76,
      "Time_End": 192.32,
      "Text": " So if a function pointer on like the stack or the heap is overwritten, these bits will"
    },
    {
      "Time_Start": 192.32,
      "Time_End": 196.2,
      "Text": " no longer match their expected values and an exception will be raised when it's called"
    },
    {
      "Time_Start": 196.20000000000002,
      "Time_End": 200.04000000000002,
      "Text": " via one of those special branch instructions."
    },
    {
      "Time_Start": 200.04000000000002,
      "Time_End": 205.08,
      "Text": " Finally apps run in a sandbox with permissions restricted to only what the app needs to function."
    },
    {
      "Time_Start": 205.08,
      "Time_End": 211.24,
      "Text": " Access to sensitive content is often done through IPC with more privileged service processes."
    },
    {
      "Time_Start": 211.24,
      "Time_End": 215.12,
      "Text": " So all this makes life very difficult for hackers who really want a way to reliably"
    },
    {
      "Time_Start": 215.12,
      "Time_End": 220.24,
      "Text": " perform arbitrary operations dynamically, ideally outside of any sandbox."
    },
    {
      "Time_Start": 220.24,
      "Time_End": 227.32000000000002,
      "Text": " It turns out that this is exactly what NS product gets to get us."
    },
    {
      "Time_Start": 227.32000000000002,
      "Time_End": 230.0,
      "Text": " So in order to understand a little bit more about the security of iOS we have to understand"
    },
    {
      "Time_Start": 230.0,
      "Time_End": 234.68,
      "Text": " Objective-C. It's the language that most of the user space code is written in, although"
    },
    {
      "Time_Start": 234.68,
      "Time_End": 239.24,
      "Text": " a lot of new code is written in Swift, there's still all of these old frameworks that are"
    },
    {
      "Time_Start": 239.24,
      "Time_End": 246.76000000000002,
      "Text": " written basically all in Objective-C. And it's a superset of C with object oriented"
    },
    {
      "Time_Start": 246.76000000000002,
      "Time_End": 252.52,
      "Text": " programming concepts added in a way similar to Smalltalk, which is based on message passing"
    },
    {
      "Time_Start": 252.52,
      "Time_End": 256.20000000000005,
      "Text": " where methods are invoked dynamically at runtime by name."
    },
    {
      "Time_Start": 256.20000000000005,
      "Time_End": 261.88,
      "Text": " These names are called selectors in the parlance of Objective-C and methods can be added and"
    },
    {
      "Time_Start": 261.88,
      "Time_End": 264.72,
      "Text": " removed at runtime as well as have their types changed."
    },
    {
      "Time_Start": 264.72,
      "Time_End": 269.04,
      "Text": " It's a very dynamic language, at least the object oriented part of it."
    },
    {
      "Time_Start": 269.04,
      "Time_End": 273.52000000000004,
      "Text": " It's also possible to access properties and call methods without arguments using strings"
    },
    {
      "Time_Start": 273.52000000000004,
      "Time_End": 275.44,
      "Text": " concatenated with periods."
    },
    {
      "Time_Start": 275.44,
      "Time_End": 280.6,
      "Text": " These strings are called key paths and they're going to be important in the context of NS"
    },
    {
      "Time_Start": 280.6,
      "Time_End": 284.0,
      "Text": " predicates."
    },
    {
      "Time_Start": 284.0,
      "Time_End": 287.0,
      "Text": " This is just like a basic hello world Objective-C program."
    },
    {
      "Time_Start": 287.0,
      "Time_End": 289.96,
      "Text": " It's got nearly all the elements that we're going to care about, though."
    },
    {
      "Time_Start": 289.96,
      "Time_End": 294.76,
      "Text": " So we have this NS string, which is the basic immutable string class in Objective-C and"
    },
    {
      "Time_Start": 294.76,
      "Time_End": 300.0,
      "Text": " we call string by appending string a method on the string hello with the argument world"
    },
    {
      "Time_Start": 300.0,
      "Time_End": 302.0,
      "Text": " to get the NS string hello world."
    },
    {
      "Time_Start": 302.0,
      "Time_End": 303.72,
      "Text": " It's pretty simple stuff."
    },
    {
      "Time_Start": 304.0,
      "Time_End": 310.04,
      "Text": " Then we can use the key path string.uppercasestring.utf8string to get a C string pointer, which we can print"
    },
    {
      "Time_Start": 310.04,
      "Time_End": 311.04,
      "Text": " with printf."
    },
    {
      "Time_Start": 311.04,
      "Time_End": 318.44000000000005,
      "Text": " And the apps in front of the quotes are just like an easy way to create constant NS strings."
    },
    {
      "Time_Start": 318.44000000000005,
      "Time_End": 323.20000000000005,
      "Text": " So we're nine slides in and I haven't talked about what the hell an NS predicate is yet,"
    },
    {
      "Time_Start": 323.20000000000005,
      "Time_End": 327.32000000000005,
      "Text": " so we should probably get into that."
    },
    {
      "Time_Start": 327.32000000000005,
      "Time_End": 332.12,
      "Text": " The Apple documentation says they are a definition of logical conditions for constraining a search"
    },
    {
      "Time_Start": 332.24,
      "Time_End": 334.64,
      "Text": " for a fetch or for in-memory filtering."
    },
    {
      "Time_Start": 334.64,
      "Time_End": 336.64,
      "Text": " This definition kind of sucks."
    },
    {
      "Time_Start": 336.64,
      "Time_End": 339.52,
      "Text": " They're simply strings that are used to filter objects and arrays."
    },
    {
      "Time_Start": 339.52,
      "Time_End": 342.28000000000003,
      "Text": " It's the majority of their use."
    },
    {
      "Time_Start": 342.28000000000003,
      "Time_End": 346.8,
      "Text": " So if you have like a student object, you might select students in array with predicates"
    },
    {
      "Time_Start": 346.8,
      "Time_End": 352.8,
      "Text": " like grade equals seven or first name like Juan and age less than 16."
    },
    {
      "Time_Start": 352.8,
      "Time_End": 358.96,
      "Text": " These strings are actually format strings, so you can use percent escaped strings like"
    },
    {
      "Time_Start": 358.96,
      "Time_End": 365.08,
      "Text": " percent signed D to include a number that is passed to a predicate with format in order"
    },
    {
      "Time_Start": 365.08,
      "Time_End": 367.32,
      "Text": " to initialize the NS predicate."
    },
    {
      "Time_Start": 367.32,
      "Time_End": 372.47999999999996,
      "Text": " It's kind of like printf, you know."
    },
    {
      "Time_Start": 372.47999999999996,
      "Time_End": 377.67999999999995,
      "Text": " The NS predicates also implement NS coding, and that just means they can be serialized."
    },
    {
      "Time_Start": 377.67999999999995,
      "Time_End": 382.12,
      "Text": " And that allows them to be sent via IPC to other processes or even remotely to other"
    },
    {
      "Time_Start": 382.12,
      "Time_End": 385.08,
      "Text": " devices."
    },
    {
      "Time_Start": 385.08,
      "Time_End": 390.2,
      "Text": " And the important thing about NS predicates is that they're ubiquitous in iOS and MacOS"
    },
    {
      "Time_Start": 390.2,
      "Time_End": 391.96,
      "Text": " first party and third party code."
    },
    {
      "Time_Start": 391.96,
      "Time_End": 393.64,
      "Text": " They're used absolutely everywhere."
    },
    {
      "Time_Start": 393.64,
      "Time_End": 400.96,
      "Text": " They're intertwined with all of the software on these devices."
    },
    {
      "Time_Start": 400.96,
      "Time_End": 403.52,
      "Text": " So we need a quick explainer of XPC."
    },
    {
      "Time_Start": 403.52,
      "Time_End": 407.32,
      "Text": " So to expand on that last point, let's discuss XPC."
    },
    {
      "Time_Start": 407.32,
      "Time_End": 412.12,
      "Text": " It's a common form of interprocess communication where one process can call methods on a remote"
    },
    {
      "Time_Start": 412.12,
      "Time_End": 413.76,
      "Text": " object in another process."
    },
    {
      "Time_Start": 414.15999999999997,
      "Time_End": 418.56,
      "Text": " When XPC is used to call a remote method, these arguments are passed by the sender,"
    },
    {
      "Time_Start": 418.56,
      "Time_End": 424.12,
      "Text": " they're serialized or archived is what the serialization process is called on iOS and"
    },
    {
      "Time_Start": 424.12,
      "Time_End": 427.64,
      "Text": " MacOS, and sent to the target where they are deserialized."
    },
    {
      "Time_Start": 427.64,
      "Time_End": 433.12,
      "Text": " And it's common to see NS predicate arguments used to filter the results of these remote"
    },
    {
      "Time_Start": 433.12,
      "Time_End": 438.59999999999997,
      "Text": " calls, and that's in order to minimize the number of objects that need to be serialized"
    },
    {
      "Time_Start": 438.6,
      "Time_End": 445.56,
      "Text": " on the sender end and deserialized on the receiver end."
    },
    {
      "Time_Start": 445.56,
      "Time_End": 446.56,
      "Text": " This is foreshadowing."
    },
    {
      "Time_Start": 446.56,
      "Time_End": 450.64000000000004,
      "Text": " Just in case it wasn't already abundantly clear, it's going to become very important"
    },
    {
      "Time_Start": 450.64000000000004,
      "Time_End": 457.48,
      "Text": " that NS predicates are being sent all around via XPC."
    },
    {
      "Time_Start": 457.48,
      "Time_End": 461.96000000000004,
      "Text": " So here's an example of an NS predicate in action, just a short little program here,"
    },
    {
      "Time_Start": 461.96000000000004,
      "Time_End": 466.16,
      "Text": " where we have an array containing some file names and we use the predicate path extension"
    },
    {
      "Time_Start": 466.16,
      "Time_End": 474.8,
      "Text": " equals pi to filter it, and the resulting array just contains that single entry script.pi."
    },
    {
      "Time_Start": 474.8,
      "Time_End": 480.36,
      "Text": " To get a little bit deeper into the actual structure of an NS predicate, that string"
    },
    {
      "Time_Start": 480.36,
      "Time_End": 486.24,
      "Text": " is parsed by code generated with Flex in the foundation framework into pieces called NS"
    },
    {
      "Time_Start": 486.24,
      "Time_End": 488.40000000000003,
      "Text": " expressions and NS predicate operators."
    },
    {
      "Time_Start": 488.40000000000003,
      "Time_End": 494.84000000000003,
      "Text": " So in this example from CodeColorist, a predicate name equals apple is parsed into three pieces,"
    },
    {
      "Time_Start": 494.84000000000003,
      "Time_End": 499.88000000000005,
      "Text": " the NS key path expression name, the equals equals NS equality predicate operator, and"
    },
    {
      "Time_Start": 499.88000000000005,
      "Time_End": 507.8,
      "Text": " the NS constant value containing the single constant string apple."
    },
    {
      "Time_Start": 507.8,
      "Time_End": 511.12,
      "Text": " And the key path expression is also a function expression, which means it can be further"
    },
    {
      "Time_Start": 511.12,
      "Time_End": 515.4,
      "Text": " broken down into an operand, which is self, showing that it acts on the objects being"
    },
    {
      "Time_Start": 515.4,
      "Time_End": 520.24,
      "Text": " filtered, the selector, which is value for key, and that key path specifier, which is"
    },
    {
      "Time_Start": 520.24,
      "Time_End": 521.24,
      "Text": " just name."
    },
    {
      "Time_Start": 522.12,
      "Time_End": 526.84,
      "Text": " This is all a bit complicated, but it's not really necessary to understand this AST structure."
    },
    {
      "Time_Start": 526.84,
      "Time_End": 531.0,
      "Text": " More important for us is the question of what can an NS predicate do?"
    },
    {
      "Time_Start": 531.0,
      "Time_End": 534.88,
      "Text": " And the answer to that question is anything."
    },
    {
      "Time_Start": 534.88,
      "Time_End": 538.08,
      "Text": " Sort of."
    },
    {
      "Time_Start": 538.08,
      "Time_End": 542.24,
      "Text": " It used to be anything, but now there's a big asterisk, since Apple has taken many steps"
    },
    {
      "Time_Start": 542.24,
      "Time_End": 547.8,
      "Text": " to make NS predicates much less powerful, less useful for exploitation."
    },
    {
      "Time_Start": 547.8,
      "Time_End": 551.12,
      "Text": " In fact, nearly all the techniques I'm going to talk about today no longer work as they're"
    },
    {
      "Time_Start": 551.12,
      "Time_End": 556.44,
      "Text": " going to be presented, but we'll take a look at NS predicates as they were at this time"
    },
    {
      "Time_Start": 556.44,
      "Time_End": 561.24,
      "Text": " and at the limits of what could be done with them."
    },
    {
      "Time_Start": 561.24,
      "Time_End": 565.04,
      "Text": " So while at first glance NS predicates don't look very interesting, they're actually a"
    },
    {
      "Time_Start": 565.04,
      "Time_End": 567.12,
      "Text": " powerful scripting language."
    },
    {
      "Time_Start": 567.12,
      "Time_End": 571.88,
      "Text": " As CodeColor said in his blog post, see no eval, NS predicates are essentially the eval"
    },
    {
      "Time_Start": 571.88,
      "Time_End": 576.8,
      "Text": " function for Objective-C. And this scripting capability comes largely from the function"
    },
    {
      "Time_Start": 576.8000000000001,
      "Time_End": 582.2,
      "Text": " keyword which allows any method to be called on any object with any number of arbitrary"
    },
    {
      "Time_Start": 582.2,
      "Time_End": 583.2,
      "Text": " arguments."
    },
    {
      "Time_Start": 583.2,
      "Time_End": 588.4000000000001,
      "Text": " CodeColor has also discovered that the cast keyword could be used with the class as the"
    },
    {
      "Time_Start": 588.4000000000001,
      "Time_End": 593.5200000000001,
      "Text": " second argument in order to get a reference to any class, essentially functioning like"
    },
    {
      "Time_Start": 593.5200000000001,
      "Time_End": 595.32,
      "Text": " NS class from string."
    },
    {
      "Time_Start": 595.32,
      "Time_End": 601.0400000000001,
      "Text": " It's just a function, you know, if you've programmed much Objective-C."
    },
    {
      "Time_Start": 601.0400000000001,
      "Time_End": 606.32,
      "Text": " An interesting thing to note is that this functionality is both intended and very old."
    },
    {
      "Time_Start": 606.84,
      "Time_End": 610.6,
      "Text": " Function expressions were added in Mac OS 10.5 around the year 2007, and that means"
    },
    {
      "Time_Start": 610.6,
      "Time_End": 613.7600000000001,
      "Text": " that they've been in iOS since the very beginning."
    },
    {
      "Time_Start": 613.7600000000001,
      "Time_End": 617.88,
      "Text": " This is official Apple documentation showing how to use function expressions, so they were"
    },
    {
      "Time_Start": 617.88,
      "Time_End": 623.5200000000001,
      "Text": " never a secret."
    },
    {
      "Time_Start": 623.5200000000001,
      "Time_End": 628.6400000000001,
      "Text": " With the cast class trick it was also possible to use these helpful classes like CN file"
    },
    {
      "Time_Start": 628.6400000000001,
      "Time_End": 634.5200000000001,
      "Text": " services which had the DLSIM method to get a PAC signed address to any exported function."
    },
    {
      "Time_Start": 634.52,
      "Time_End": 639.36,
      "Text": " This address could be called with NS invocation which has a method invoke using imp and that"
    },
    {
      "Time_Start": 639.36,
      "Time_End": 642.96,
      "Text": " could be used to call the function with any number of arbitrary arguments as well."
    },
    {
      "Time_Start": 642.96,
      "Time_End": 649.36,
      "Text": " So effectively both the object oriented methods of Objective-C could be used and also any"
    },
    {
      "Time_Start": 649.36,
      "Time_End": 653.48,
      "Text": " exported simple C function could be called without restriction."
    },
    {
      "Time_Start": 653.48,
      "Time_End": 657.0799999999999,
      "Text": " That means that anything that could be done in a normal Objective-C program could be done"
    },
    {
      "Time_Start": 657.0799999999999,
      "Time_End": 661.1999999999999,
      "Text": " completely dynamically within this NS predicate string."
    },
    {
      "Time_Start": 661.2,
      "Time_End": 667.08,
      "Text": " And this allows us to completely sidestep ASLR, code signing, and PAC, all those mitigations"
    },
    {
      "Time_Start": 667.08,
      "Time_End": 671.2,
      "Text": " that I talked about in the beginning that makes iOS so secure."
    },
    {
      "Time_Start": 671.2,
      "Time_End": 674.6400000000001,
      "Text": " So this was beautiful."
    },
    {
      "Time_Start": 674.6400000000001,
      "Time_End": 678.84,
      "Text": " For hackers, not for people that wanted their devices secure."
    },
    {
      "Time_Start": 678.84,
      "Time_End": 685.5200000000001,
      "Text": " So the syntax of NS predicate, so until now the only NS predicates we've seen have been"
    },
    {
      "Time_Start": 685.5200000000001,
      "Time_End": 689.6800000000001,
      "Text": " like first name equals one, so it's understandable if you're confused about how NS predicates"
    },
    {
      "Time_Start": 689.6800000000001,
      "Time_End": 691.6800000000001,
      "Text": " could be used as a scripting language."
    },
    {
      "Time_Start": 691.6800000000001,
      "Time_End": 696.2800000000001,
      "Text": " But they actually have a surprisingly rich syntax that's capable of representing all"
    },
    {
      "Time_Start": 696.2800000000001,
      "Time_End": 699.2,
      "Text": " the concepts that we would want in a scripting language."
    },
    {
      "Time_Start": 699.2,
      "Time_End": 709.36,
      "Text": " And that includes variables and variable setting using these dollar sign strings."
    },
    {
      "Time_Start": 709.36,
      "Time_End": 714.8800000000001,
      "Text": " There's also function and key path expressions that we've talked about a little bit."
    },
    {
      "Time_Start": 714.8800000000001,
      "Time_End": 719.1200000000001,
      "Text": " But there's also this important type of function expression which is those that don't need"
    },
    {
      "Time_Start": 719.12,
      "Time_End": 722.64,
      "Text": " to use the function keyword, like now and some."
    },
    {
      "Time_Start": 722.64,
      "Time_End": 726.64,
      "Text": " And these are selectors on the NS predicate utilities class."
    },
    {
      "Time_Start": 726.64,
      "Time_End": 732.76,
      "Text": " And they provide these kind of useful auxiliary methods for within a predicate."
    },
    {
      "Time_Start": 732.76,
      "Time_End": 738.4,
      "Text": " But we'll see that it's possible to use any valid selector within this syntax."
    },
    {
      "Time_Start": 738.4,
      "Time_End": 742.88,
      "Text": " And that's going to be useful for both getting a reference to the NS predicate utilities"
    },
    {
      "Time_Start": 742.88,
      "Time_End": 748.36,
      "Text": " class and we'll see some other uses of it later too."
    },
    {
      "Time_Start": 748.36,
      "Time_End": 751.76,
      "Text": " Then there are NS aggregate expressions which are meant to be used for arrays but which"
    },
    {
      "Time_Start": 751.76,
      "Time_End": 756.4,
      "Text": " we can also use to create series of expressions that will be evaluated sequentially which"
    },
    {
      "Time_Start": 756.4,
      "Time_End": 760.16,
      "Text": " will effectively act as the lines of our script."
    },
    {
      "Time_Start": 760.16,
      "Time_End": 765.16,
      "Text": " Finally subquery and ternary expressions can be used to create loops and conditionals respectively"
    },
    {
      "Time_Start": 765.16,
      "Time_End": 767.08,
      "Text": " for control flow."
    },
    {
      "Time_Start": 767.08,
      "Time_End": 771.28,
      "Text": " And additionally all the normal arithmetic and bitwise math operators can be used in"
    },
    {
      "Time_Start": 771.28,
      "Time_End": 778.64,
      "Text": " NS predicates and we'll see that become super useful for calculating addresses."
    },
    {
      "Time_Start": 778.64,
      "Time_End": 784.56,
      "Text": " This is a PyObjective-C script so it's just Objective-C bindings for Python or Python"
    },
    {
      "Time_Start": 784.56,
      "Time_End": 790.4399999999999,
      "Text": " bindings for Objective-C. And it evaluates an NS predicate script."
    },
    {
      "Time_Start": 790.4399999999999,
      "Time_End": 797.48,
      "Text": " So this script makes two variables, standard in, no, standard out and proc info which is"
    },
    {
      "Time_Start": 797.48,
      "Time_End": 801.76,
      "Text": " a file handle and the process information respectively."
    },
    {
      "Time_Start": 801.76,
      "Time_End": 805.16,
      "Text": " And these objects are instantiated using the cast class trick."
    },
    {
      "Time_Start": 805.16,
      "Time_End": 810.8000000000001,
      "Text": " It then uses a ternary expression as an if statement so that if the process name is Python"
    },
    {
      "Time_Start": 810.8000000000001,
      "Time_End": 816.0,
      "Text": " it prints out it's Python to standard out."
    },
    {
      "Time_Start": 816.0,
      "Time_End": 821.9200000000001,
      "Text": " All these expressions are wrapped in brackets so that they form a single NS aggregate expression"
    },
    {
      "Time_Start": 822.1600000000001,
      "Time_End": 827.7600000000001,
      "Text": " and each line here is evaluated sequentially."
    },
    {
      "Time_Start": 827.7600000000001,
      "Time_End": 833.3600000000001,
      "Text": " So for a more complicated example, it's probably a little hard to see, but this is a brain"
    },
    {
      "Time_Start": 833.3600000000001,
      "Time_End": 837.6400000000001,
      "Text": " fuck interpreter made entirely within the evaluation of a single NS expression."
    },
    {
      "Time_Start": 837.6400000000001,
      "Time_End": 844.3600000000001,
      "Text": " And it uses all the things that we've seen so far, it's just a little larger."
    },
    {
      "Time_Start": 844.3600000000001,
      "Time_End": 850.3600000000001,
      "Text": " It uses the cast class trick again to get those file handle references to standard in"
    },
    {
      "Time_Start": 850.3600000000001,
      "Time_End": 851.3600000000001,
      "Text": " and out."
    },
    {
      "Time_Start": 851.8000000000001,
      "Time_End": 856.24,
      "Text": " It uses ternary expressions for control flow so it checks whether the program has ended"
    },
    {
      "Time_Start": 856.24,
      "Time_End": 859.64,
      "Text": " or what the current operation is."
    },
    {
      "Time_Start": 859.64,
      "Time_End": 863.36,
      "Text": " And it evaluates itself recursively in order to perform unbounded loops."
    },
    {
      "Time_Start": 863.36,
      "Time_End": 867.6800000000001,
      "Text": " So instead of doing this recursive evaluation I could have used a subquery expression but"
    },
    {
      "Time_Start": 867.6800000000001,
      "Time_End": 872.6800000000001,
      "Text": " then it would have been bounded so it was easier to use recursive evaluation in this"
    },
    {
      "Time_Start": 872.6800000000001,
      "Time_End": 879.76,
      "Text": " case to do the looping."
    },
    {
      "Time_Start": 879.76,
      "Time_End": 884.52,
      "Text": " So before forced entry these NS predicate scripts were essentially unrestricted with"
    },
    {
      "Time_Start": 884.52,
      "Time_End": 888.36,
      "Text": " the exception of predicates that were sent over XPC."
    },
    {
      "Time_Start": 888.36,
      "Time_End": 893.26,
      "Text": " And these predicates were often limited using something called NS predicate visitors, implementations"
    },
    {
      "Time_Start": 893.26,
      "Time_End": 900.08,
      "Text": " of a protocol that has methods to check what the components of an untrusted NS predicate"
    },
    {
      "Time_Start": 900.08,
      "Time_End": 902.6,
      "Text": " were and if they were safe to evaluate."
    },
    {
      "Time_Start": 902.6,
      "Time_End": 908.0,
      "Text": " These implementations use the expression type property to check what those expressions were"
    },
    {
      "Time_Start": 908.24,
      "Time_End": 912.64,
      "Text": " and if they were a function or a key path then it would potentially only allow certain"
    },
    {
      "Time_Start": 912.64,
      "Time_End": 914.6,
      "Text": " specific instances of those expressions."
    },
    {
      "Time_Start": 914.6,
      "Time_End": 919.28,
      "Text": " So a limited set of selectors or a limited set of key paths."
    },
    {
      "Time_Start": 919.28,
      "Time_End": 924.44,
      "Text": " However without these restrictions NS predicates were basically arbitrary code execution and"
    },
    {
      "Time_Start": 924.44,
      "Time_End": 930.12,
      "Text": " they were used as such in that forced entry sandbox escape."
    },
    {
      "Time_Start": 930.12,
      "Time_End": 933.48,
      "Text": " Now that we understand a little bit more about NS predicates and their capabilities we can"
    },
    {
      "Time_Start": 933.48,
      "Time_End": 936.68,
      "Text": " understand that forced entry sandbox escape."
    },
    {
      "Time_Start": 936.6800000000001,
      "Time_End": 943.48,
      "Text": " That crazy JBIG2 VM made a fake object in memory that when deallocated evaluated a series"
    },
    {
      "Time_Start": 943.48,
      "Time_End": 949.2800000000001,
      "Text": " of NS function expressions and these expressions cleaned up after the initial exploit by deleting"
    },
    {
      "Time_Start": 949.2800000000001,
      "Time_End": 955.32,
      "Text": " that fake GIF file and they crafted another payload, another array of objects that was"
    },
    {
      "Time_Start": 955.32,
      "Time_End": 959.2800000000001,
      "Text": " sent to the unsandboxed comm center process."
    },
    {
      "Time_Start": 959.2800000000001,
      "Time_End": 964.5200000000001,
      "Text": " These objects were chosen such that when the target desialized them they would immediately"
    },
    {
      "Time_Start": 964.64,
      "Time_End": 969.28,
      "Text": " evaluate a new NS predicate which collected a bunch of device information before downloading"
    },
    {
      "Time_Start": 969.28,
      "Time_End": 976.28,
      "Text": " and evaluating another NS predicate payload."
    },
    {
      "Time_Start": 980.56,
      "Time_End": 985.0799999999999,
      "Text": " After forced entry and the increased visibility of code colors earlier blog posts a few new"
    },
    {
      "Time_Start": 985.0799999999999,
      "Time_End": 987.92,
      "Text": " restrictions were placed on NS predicate objects."
    },
    {
      "Time_Start": 987.92,
      "Time_End": 991.72,
      "Text": " Two denialists were added which prevented the use of a number of inherently dangerous"
    },
    {
      "Time_Start": 992.1600000000001,
      "Time_End": 997.12,
      "Text": " classes and methods with particular focus on methods, classes and methods that allowed"
    },
    {
      "Time_Start": 997.12,
      "Time_End": 1001.72,
      "Text": " performing arbitrary method invocations and initializing arbitrary objects."
    },
    {
      "Time_Start": 1001.72,
      "Time_End": 1007.58,
      "Text": " The cast class trick was forbidden and calling class methods as opposed to instance methods"
    },
    {
      "Time_Start": 1007.58,
      "Time_End": 1012.96,
      "Text": " of objects was prevented."
    },
    {
      "Time_Start": 1012.96,
      "Time_End": 1017.36,
      "Text": " However it's important to note that most of these changes only affected first party Apple"
    },
    {
      "Time_Start": 1017.48,
      "Time_End": 1018.64,
      "Text": " apps and processes."
    },
    {
      "Time_Start": 1018.64,
      "Time_End": 1022.8000000000001,
      "Text": " NS predicates evaluated in third party apps had a much smaller denialist of classes and"
    },
    {
      "Time_Start": 1022.8000000000001,
      "Time_End": 1029.0,
      "Text": " methods and were for the most part just as powerful as before."
    },
    {
      "Time_Start": 1029.0,
      "Time_End": 1034.48,
      "Text": " This difference was implemented through a single flag value called predicate security"
    },
    {
      "Time_Start": 1034.48,
      "Time_End": 1041.48,
      "Text": " flags that was set for Apple processes when the class NS predicate utilities was initialized."
    },
    {
      "Time_Start": 1043.72,
      "Time_End": 1046.2,
      "Text": " So here we can see some of that denialist."
    },
    {
      "Time_Start": 1046.2,
      "Time_End": 1049.4,
      "Text": " This is the denialist of classes."
    },
    {
      "Time_Start": 1049.4,
      "Time_End": 1053.8,
      "Text": " So all these classes were prevented from being used and it includes things like NS bundle"
    },
    {
      "Time_Start": 1053.8,
      "Time_End": 1060.8,
      "Text": " which is used to load other shared libraries and NS coder which prevents serializing new"
    },
    {
      "Time_Start": 1061.48,
      "Time_End": 1062.8,
      "Text": " arbitrary objects."
    },
    {
      "Time_Start": 1062.8,
      "Time_End": 1069.8,
      "Text": " Again trying to limit the number of different objects that you could use within an NS predicate."
    },
    {
      "Time_Start": 1070.8400000000001,
      "Time_End": 1075.8400000000001,
      "Text": " Additionally Apple removed the CN file services DLSim method that was used both in NS predicate"
    },
    {
      "Time_Start": 1075.84,
      "Time_End": 1079.1999999999998,
      "Text": " and slop exploits so that's selector oriented programming."
    },
    {
      "Time_Start": 1079.1999999999998,
      "Time_End": 1086.1999999999998,
      "Text": " It was just another type of exploitation technique on iOS and this method proved to be very helpful"
    },
    {
      "Time_Start": 1087.4399999999998,
      "Time_End": 1092.72,
      "Text": " for attackers so it was unfortunate for us when it was removed."
    },
    {
      "Time_Start": 1092.72,
      "Time_End": 1097.52,
      "Text": " Relatedly NS invocation was hardened and it was also included in that list of forbidden"
    },
    {
      "Time_Start": 1097.52,
      "Time_End": 1103.32,
      "Text": " classes and made generally more difficult to use for exploits."
    },
    {
      "Time_Start": 1103.32,
      "Time_End": 1109.1599999999999,
      "Text": " However as we shall see the denialists were way, way, way too small and the fact that"
    },
    {
      "Time_Start": 1109.1599999999999,
      "Time_End": 1113.6399999999999,
      "Text": " security was enforced based on this single writeable flag value made it incredibly vulnerable."
    },
    {
      "Time_Start": 1113.6399999999999,
      "Time_End": 1115.96,
      "Text": " It was incredibly fragile."
    },
    {
      "Time_Start": 1115.96,
      "Time_End": 1121.24,
      "Text": " The get value method of NS value wasn't on the forbidden list and could be used to perform"
    },
    {
      "Time_Start": 1121.24,
      "Time_End": 1126.6399999999999,
      "Text": " arbitrary writes overwriting any address with any desired value and this meant that the"
    },
    {
      "Time_Start": 1126.6399999999999,
      "Time_End": 1131.2,
      "Text": " security flag could just be unset by simply calling get value on the number zero with"
    },
    {
      "Time_Start": 1131.2,
      "Time_End": 1137.0800000000002,
      "Text": " the address of the security flag as the argument."
    },
    {
      "Time_Start": 1137.0800000000002,
      "Time_End": 1142.32,
      "Text": " Importantly even though iOS has ASLR libraries are all slid by the same amount in every process"
    },
    {
      "Time_Start": 1142.32,
      "Time_End": 1146.88,
      "Text": " with the slide being chosen at startup and so if you already had code execution in one"
    },
    {
      "Time_Start": 1146.88,
      "Time_End": 1150.8,
      "Text": " process you would know all the addresses of everything."
    },
    {
      "Time_Start": 1150.8,
      "Time_End": 1153.8400000000001,
      "Text": " Additionally there are many different ways to leak the address from within a predicate"
    },
    {
      "Time_Start": 1153.8400000000001,
      "Time_End": 1160.8400000000001,
      "Text": " itself so it's trivial to use an offset from a known address to find that flag 100% reliably."
    },
    {
      "Time_Start": 1161.44,
      "Time_End": 1165.04,
      "Text": " Similarly the lengths of the denialists could just be set to zero and that would remove"
    },
    {
      "Time_Start": 1165.04,
      "Time_End": 1170.0,
      "Text": " any remaining forbidden elements because they would check the list of forbidden classes"
    },
    {
      "Time_Start": 1170.0,
      "Time_End": 1175.92,
      "Text": " and methods and the list would be zero length and say oh it's not on there."
    },
    {
      "Time_Start": 1175.92,
      "Time_End": 1179.88,
      "Text": " So all these techniques described in the previous slides can be seen in this predicate which"
    },
    {
      "Time_Start": 1179.88,
      "Time_End": 1186.44,
      "Text": " disables all the security mitigations that had been introduced to predicates."
    },
    {
      "Time_Start": 1186.44,
      "Time_End": 1193.0800000000002,
      "Text": " First we use the self.hash to get the address of the NSPredicateUtilities class so that"
    },
    {
      "Time_Start": 1193.0800000000002,
      "Time_End": 1198.64,
      "Text": " hashtag self parenthesis that gets referenced to NSPredicateUtilities and then the dot hash"
    },
    {
      "Time_Start": 1198.64,
      "Time_End": 1201.8,
      "Text": " just converts it into an NSNumber for us."
    },
    {
      "Time_Start": 1201.8,
      "Time_End": 1205.72,
      "Text": " With this we can use offsets from this address to get the addresses of the security flags"
    },
    {
      "Time_Start": 1205.72,
      "Time_End": 1210.04,
      "Text": " and the lengths of the denialists and then once we have those addresses we can simply"
    },
    {
      "Time_Start": 1210.04,
      "Time_End": 1215.64,
      "Text": " use get value to overwrite them reverting NSPredicates to their previous fully unrestricted"
    },
    {
      "Time_Start": 1215.64,
      "Time_End": 1217.2,
      "Text": " state."
    },
    {
      "Time_Start": 1217.2,
      "Time_End": 1221.8000000000002,
      "Text": " And here we can also see what I call the MVP of NSPredicate scripts which is non-retained"
    },
    {
      "Time_Start": 1221.8000000000002,
      "Time_End": 1226.2800000000002,
      "Text": " object value so this is just a method that takes an NSNumber and treats it as a pointer"
    },
    {
      "Time_Start": 1226.2800000000002,
      "Time_End": 1228.24,
      "Text": " to an object instead."
    },
    {
      "Time_Start": 1228.24,
      "Time_End": 1232.76,
      "Text": " It's kind of like dereferencing in the context of NSPredicate and can be used to access any"
    },
    {
      "Time_Start": 1232.76,
      "Time_End": 1237.24,
      "Text": " class by reference when the cast class trick is forbidden."
    },
    {
      "Time_Start": 1237.24,
      "Time_End": 1241.72,
      "Text": " Just super useful."
    },
    {
      "Time_Start": 1242.32,
      "Time_End": 1247.0,
      "Text": " After a tweet of mine that might or might not have influenced Apple about how easily"
    },
    {
      "Time_Start": 1247.0,
      "Time_End": 1252.0,
      "Text": " the previous mitigations were bypassed, Apple struck back and they added restrictions to"
    },
    {
      "Time_Start": 1252.0,
      "Time_End": 1256.5,
      "Text": " the argument types in function expressions to exclude pointer types."
    },
    {
      "Time_Start": 1256.5,
      "Time_End": 1261.0,
      "Text": " Every Objective-C method has a signature which is a string of characters denoting the types"
    },
    {
      "Time_Start": 1261.0,
      "Time_End": 1268.28,
      "Text": " of arguments and the return value of the method and in that signature the caret and the question"
    },
    {
      "Time_Start": 1268.32,
      "Time_End": 1273.16,
      "Text": " mark characters represent data and function pointers respectively and these were the types"
    },
    {
      "Time_Start": 1273.16,
      "Time_End": 1277.76,
      "Text": " that were forbidden within function expressions."
    },
    {
      "Time_Start": 1277.76,
      "Time_End": 1281.6,
      "Text": " Additionally the predicate security flags and denialist code were moved into the core"
    },
    {
      "Time_Start": 1281.6,
      "Time_End": 1287.44,
      "Text": " foundation framework and the predicate security flags were now placed on the heap where they"
    },
    {
      "Time_Start": 1287.44,
      "Time_End": 1292.6399999999999,
      "Text": " could be harder to locate so that it wasn't quite as easy to overwrite them."
    },
    {
      "Time_Start": 1292.6399999999999,
      "Time_End": 1296.96,
      "Text": " And many new entries were added to the denialists."
    },
    {
      "Time_Start": 1296.96,
      "Time_End": 1306.3600000000001,
      "Text": " Unfortunately for me, Apple overlooked the asterisk type which refers to C string pointers."
    },
    {
      "Time_Start": 1306.3600000000001,
      "Time_End": 1311.4,
      "Text": " This type really shouldn't exist and should just be denoted as caret C but it worked out"
    },
    {
      "Time_Start": 1311.4,
      "Time_End": 1316.68,
      "Text": " for me here that it does exist and this means that we could simply achieve the same kind"
    },
    {
      "Time_Start": 1316.68,
      "Time_End": 1323.44,
      "Text": " of arbitrary write using get C string instead of the get value method and once again NSPredicates"
    },
    {
      "Time_Start": 1323.52,
      "Time_End": 1327.0,
      "Text": " could perform arbitrary operations."
    },
    {
      "Time_Start": 1327.0,
      "Time_End": 1330.8,
      "Text": " So this is the predicate that accomplishes the same things as the previously one shown."
    },
    {
      "Time_Start": 1330.8,
      "Time_End": 1335.72,
      "Text": " However, it uses the function set debug predicate security scoping to unset the high security"
    },
    {
      "Time_Start": 1335.72,
      "Time_End": 1340.74,
      "Text": " flag after setting the internal release type to three and this is a trick that's necessary"
    },
    {
      "Time_Start": 1340.74,
      "Time_End": 1346.28,
      "Text": " because as I said before the predicate security flag was moved to the heap."
    },
    {
      "Time_Start": 1346.28,
      "Time_End": 1350.8400000000001,
      "Text": " But luckily NSPredicate utilities just gave us this nice convenient method to unset it."
    },
    {
      "Time_Start": 1350.84,
      "Time_End": 1362.84,
      "Text": " So here is that set debug predicate security scoping method and this is the one that unsets"
    },
    {
      "Time_Start": 1362.84,
      "Time_End": 1367.8999999999999,
      "Text": " the high security flag that's on the heap and so that flag is now stored in the third"
    },
    {
      "Time_Start": 1367.8999999999999,
      "Time_End": 1374.9199999999998,
      "Text": " bit of the CF predicate policy data plus 0x30 offset."
    },
    {
      "Time_Start": 1374.9199999999998,
      "Time_End": 1380.0,
      "Text": " But this method can only unset it if OS variant has internal content returns true and this"
    },
    {
      "Time_Start": 1380.0,
      "Time_End": 1385.04,
      "Text": " is what we accomplished before by setting that internal release type to three in the"
    },
    {
      "Time_Start": 1385.04,
      "Time_End": 1386.04,
      "Text": " previous predicate."
    },
    {
      "Time_Start": 1386.04,
      "Time_End": 1393.52,
      "Text": " So that's what that internal value is there that's being set to three."
    },
    {
      "Time_Start": 1393.52,
      "Time_End": 1396.92,
      "Text": " So while I've demonstrated how to get around the limits that Apple placed on NSPredicate"
    },
    {
      "Time_Start": 1396.92,
      "Time_End": 1401.88,
      "Text": " I still haven't shown how arbitrary functions, arbitrary native C functions could be called"
    },
    {
      "Time_Start": 1401.88,
      "Time_End": 1405.12,
      "Text": " now that the previous DLSim gadget has been removed."
    },
    {
      "Time_Start": 1405.12,
      "Time_End": 1409.2,
      "Text": " Luckily there is still at least one signed reference to DLSim that we could get using"
    },
    {
      "Time_Start": 1409.2,
      "Time_End": 1415.0,
      "Text": " the DLSim func method of a class in the DVT instruments foundation framework."
    },
    {
      "Time_Start": 1415.0,
      "Time_End": 1419.64,
      "Text": " This address could be used with the apply function info method of rbstroke accumulator"
    },
    {
      "Time_Start": 1419.64,
      "Time_End": 1426.76,
      "Text": " from the render box framework to call DLSim and also to call all of the returned function"
    },
    {
      "Time_Start": 1426.76,
      "Time_End": 1434.16,
      "Text": " pointers that are all signed with that zero context value, four pack."
    },
    {
      "Time_Start": 1434.16,
      "Time_End": 1438.92,
      "Text": " So those function pointers, those signed function pointers could be called with apply"
    },
    {
      "Time_Start": 1438.92,
      "Time_End": 1444.64,
      "Text": " function info with up to four arbitrary arguments or more if it was okay that that fifth argument"
    },
    {
      "Time_Start": 1444.64,
      "Time_End": 1447.5400000000002,
      "Text": " was not controlled."
    },
    {
      "Time_Start": 1447.5400000000002,
      "Time_End": 1449.3200000000002,
      "Text": " You could control all the rest."
    },
    {
      "Time_Start": 1449.3200000000002,
      "Time_End": 1452.88,
      "Text": " So this effectively bypasses pack as even though it's not possible to sign arbitrary"
    },
    {
      "Time_Start": 1452.88,
      "Time_End": 1457.5800000000002,
      "Text": " pointers as you would want for like a true bypass, the combination of the scripting capabilities"
    },
    {
      "Time_Start": 1457.5800000000002,
      "Time_End": 1461.9,
      "Text": " within the NSPredicate and the ability to use any exported function was basically more"
    },
    {
      "Time_Start": 1461.9,
      "Time_End": 1466.7800000000002,
      "Text": " than enough to accomplish any desired goal."
    },
    {
      "Time_Start": 1466.7800000000002,
      "Time_End": 1470.5,
      "Text": " Unfortunately Apple has been cracking down on all remaining references to DLSim that"
    },
    {
      "Time_Start": 1470.5,
      "Time_End": 1476.7,
      "Text": " you could get in this manner and this DLSim func method is no longer available in iOS"
    },
    {
      "Time_Start": 1476.7,
      "Time_End": 1480.7800000000002,
      "Text": " 16.5 or later."
    },
    {
      "Time_Start": 1480.7800000000002,
      "Time_End": 1483.7,
      "Text": " So this is that apply function method."
    },
    {
      "Time_Start": 1483.7,
      "Time_End": 1488.7,
      "Text": " As we can see it uses the BRAAZ instruction to call the function pointer passed as that"
    },
    {
      "Time_Start": 1488.7,
      "Time_End": 1493.7,
      "Text": " first argument and this instruction authenticates and calls pointers signed with a zero context"
    },
    {
      "Time_Start": 1493.7,
      "Time_End": 1498.94,
      "Text": " value which is exactly what we need in order to use that reference to DLSim and use all"
    },
    {
      "Time_Start": 1498.94,
      "Time_End": 1505.18,
      "Text": " the function pointers that that method returns."
    },
    {
      "Time_Start": 1505.18,
      "Time_End": 1511.5,
      "Text": " Putting all the pieces together, this is an NSPredicate that calls NS log hmm on iOS 16.3"
    },
    {
      "Time_Start": 1511.5,
      "Time_End": 1514.7,
      "Text": " after removing all the mitigations protecting Apple processes."
    },
    {
      "Time_Start": 1514.7,
      "Time_End": 1519.02,
      "Text": " It's probably too small to see but the point is that it's very complicated but it's still"
    },
    {
      "Time_Start": 1519.02,
      "Time_End": 1523.66,
      "Text": " possible to do anything within an NSPredicate in this version."
    },
    {
      "Time_Start": 1523.66,
      "Time_End": 1528.22,
      "Text": " All it takes is some creativity, some knowledge of Objective-C and some useful classes that"
    },
    {
      "Time_Start": 1528.22,
      "Time_End": 1538.5,
      "Text": " are already defined in the shared libraries of iOS and macOS."
    },
    {
      "Time_Start": 1538.5,
      "Time_End": 1543.06,
      "Text": " Now that we can do anything within an NSPredicate similar to what was possible before forced"
    },
    {
      "Time_Start": 1543.06,
      "Time_End": 1549.22,
      "Text": " entry there is only one potential impediment to exploiting processes that evaluate untrusted"
    },
    {
      "Time_Start": 1549.22,
      "Time_End": 1554.5,
      "Text": " NSPredicates and that's the NSPredicate visitors that I covered before."
    },
    {
      "Time_Start": 1554.5,
      "Time_End": 1559.1399999999999,
      "Text": " And this is the most surprising thing about this research is that I found that you could"
    },
    {
      "Time_Start": 1559.1399999999999,
      "Time_End": 1562.3799999999999,
      "Text": " just say no to NSPredicate visitors."
    },
    {
      "Time_Start": 1562.3799999999999,
      "Time_End": 1567.26,
      "Text": " Each daemon implements their own version of this protocol in order to only allow those"
    },
    {
      "Time_Start": 1567.26,
      "Time_End": 1574.42,
      "Text": " expressions that it expects to be in the NSPredicates that daemon receives."
    },
    {
      "Time_Start": 1574.42,
      "Time_End": 1579.58,
      "Text": " And it uses the expression type property to check what kind of expression each component"
    },
    {
      "Time_Start": 1579.58,
      "Time_End": 1585.02,
      "Text": " of a predicate is so that simple expressions like constant values can be allowed and more"
    },
    {
      "Time_Start": 1585.02,
      "Time_End": 1589.26,
      "Text": " dangerous ones like function and key path expressions could be forbidden or limited"
    },
    {
      "Time_Start": 1589.26,
      "Time_End": 1592.62,
      "Text": " to a certain safe subset."
    },
    {
      "Time_Start": 1592.74,
      "Time_End": 1599.3400000000001,
      "Text": " However, the expression type was just an integer that was read directly from the serialized"
    },
    {
      "Time_Start": 1599.3400000000001,
      "Time_End": 1604.0200000000002,
      "Text": " data sent by an untrusted process and this meant that setting every expression type to"
    },
    {
      "Time_Start": 1604.0200000000002,
      "Time_End": 1608.5400000000002,
      "Text": " zero in a malicious NSPredicate led the receiver to interpret it as only containing constant"
    },
    {
      "Time_Start": 1608.5400000000002,
      "Time_End": 1612.94,
      "Text": " values and that bypassed all additional validation."
    },
    {
      "Time_Start": 1612.94,
      "Time_End": 1619.7800000000002,
      "Text": " So here's an example of an NSPredicate visitor implementation for the photo library queries."
    },
    {
      "Time_Start": 1619.78,
      "Time_End": 1623.3799999999999,
      "Text": " We can see that it uses the expression type to decide whether additional checks need to"
    },
    {
      "Time_Start": 1623.3799999999999,
      "Time_End": 1625.42,
      "Text": " be made on the expression that it visits."
    },
    {
      "Time_Start": 1625.42,
      "Time_End": 1629.94,
      "Text": " So here it checks to see if it's a key path expression and it gets the key path and later"
    },
    {
      "Time_Start": 1629.94,
      "Time_End": 1636.26,
      "Text": " checks it against a list of known good key paths."
    },
    {
      "Time_Start": 1636.26,
      "Time_End": 1642.18,
      "Text": " And on the XML on the right here, this shows the serialized representation of the NS expression"
    },
    {
      "Time_Start": 1642.18,
      "Time_End": 1643.18,
      "Text": " on the left."
    },
    {
      "Time_Start": 1643.18,
      "Time_End": 1646.5,
      "Text": " And we can see that the expression type is just an integer within this XML."
    },
    {
      "Time_Start": 1646.5,
      "Time_End": 1650.62,
      "Text": " And this XML is controlled entirely by the sender, so they can just set it to whatever"
    },
    {
      "Time_Start": 1650.62,
      "Time_End": 1654.62,
      "Text": " they want."
    },
    {
      "Time_Start": 1654.62,
      "Time_End": 1658.5,
      "Text": " And this is the actual code of InitWithCoder, it's probably like impossible to read, yeah."
    },
    {
      "Time_Start": 1658.5,
      "Time_End": 1665.5,
      "Text": " But it's just reading out that NSExpressionType field and passing it to NSExpression, InitWithExpressionType."
    },
    {
      "Time_Start": 1665.5,
      "Time_End": 1673.78,
      "Text": " You're just going to have to trust me if you can't read it that that's how it works."
    },
    {
      "Time_Start": 1673.78,
      "Time_End": 1677.86,
      "Text": " So many different daemons could be exploited using this bypass."
    },
    {
      "Time_Start": 1677.86,
      "Time_End": 1683.26,
      "Text": " So it includes Core2EditD, ContextStoreD, and they just aggregate information about"
    },
    {
      "Time_Start": 1683.26,
      "Time_End": 1688.94,
      "Text": " user behavior on the device, as well as AppStoreD, which can be used to install arbitrary apps."
    },
    {
      "Time_Start": 1688.94,
      "Time_End": 1691.22,
      "Text": " They still have to be signed, though."
    },
    {
      "Time_Start": 1691.22,
      "Time_End": 1697.42,
      "Text": " OSLogService, which is accessible by any app and can access any logs potentially containing"
    },
    {
      "Time_Start": 1697.42,
      "Time_End": 1704.54,
      "Text": " sensitive information, and on iPadOS Springboard, which is the home app that, it's kind of like"
    },
    {
      "Time_Start": 1704.54,
      "Time_End": 1707.94,
      "Text": " Explorer.exe on Windows, it's kind of like that background app."
    },
    {
      "Time_Start": 1707.94,
      "Time_End": 1712.14,
      "Text": " So using these vulnerabilities, a malicious app could gain access to app location and"
    },
    {
      "Time_Start": 1712.14,
      "Time_End": 1719.9,
      "Text": " notification data, including message contents, and potentially even install arbitrary apps"
    },
    {
      "Time_Start": 1719.9,
      "Time_End": 1726.1000000000001,
      "Text": " on the target device and on paired devices."
    },
    {
      "Time_Start": 1726.1000000000001,
      "Time_End": 1730.5000000000002,
      "Text": " It's pretty simple to find these XPC service clients that send predicates like this one,"
    },
    {
      "Time_Start": 1730.5000000000002,
      "Time_End": 1735.2600000000002,
      "Text": " which is CDInteractionRecorder, by grepping the Objective-C headers, and that's the great"
    },
    {
      "Time_Start": 1735.2600000000002,
      "Time_End": 1739.5400000000002,
      "Text": " thing about reversing Objective-C libraries and apps, is that they have to contain this"
    },
    {
      "Time_Start": 1739.5400000000002,
      "Time_End": 1745.5000000000002,
      "Text": " header information, because that's how the dynamic dispatching of methods works."
    },
    {
      "Time_Start": 1745.5000000000002,
      "Time_End": 1749.3000000000002,
      "Text": " So here we can see many methods that take NSPredicate arguments, and these arguments"
    },
    {
      "Time_Start": 1749.3000000000002,
      "Time_End": 1754.5800000000002,
      "Text": " are sent to the Core2EditD service."
    },
    {
      "Time_Start": 1754.58,
      "Time_End": 1759.3,
      "Text": " And this is a free descript, which when attached to a process that has the entitlement to communicate"
    },
    {
      "Time_Start": 1759.3,
      "Time_End": 1768.26,
      "Text": " with Core2EditD, sends an NSPredicate that will cause a crash on access to OX4141As."
    },
    {
      "Time_Start": 1768.26,
      "Time_End": 1773.58,
      "Text": " It uses the method countContacts using predicate error, which takes a predicate argument and"
    },
    {
      "Time_Start": 1773.58,
      "Time_End": 1775.74,
      "Text": " sends it to Core2EditD."
    },
    {
      "Time_Start": 1775.74,
      "Time_End": 1780.54,
      "Text": " And by calling this method, this function expression, and having its expression type"
    },
    {
      "Time_Start": 1780.54,
      "Time_End": 1788.94,
      "Text": " set to zero, we can bypass the NSPredicate visitor that Core2EditD uses."
    },
    {
      "Time_Start": 1788.94,
      "Time_End": 1794.1,
      "Text": " On the iPad, any app can communicate with a Springboard XPC service that determines"
    },
    {
      "Time_Start": 1794.1,
      "Time_End": 1798.96,
      "Text": " which app scene should be used for handling different types of events, and this is done"
    },
    {
      "Time_Start": 1798.96,
      "Time_End": 1802.22,
      "Text": " using an NSPredicate provided by the app."
    },
    {
      "Time_Start": 1802.22,
      "Time_End": 1810.52,
      "Text": " This predicate is validated with UITargetContentIdentifierPredicateValidator, but like the others, this visitor"
    },
    {
      "Time_Start": 1810.52,
      "Time_End": 1815.36,
      "Text": " relies on the expression type value to determine whether expressions are safe, and therefore"
    },
    {
      "Time_Start": 1815.36,
      "Time_End": 1818.84,
      "Text": " can be bypassed."
    },
    {
      "Time_Start": 1818.84,
      "Time_End": 1822.56,
      "Text": " By using a malicious predicate visitor, we can construct any NSPredicate and use the"
    },
    {
      "Time_Start": 1822.56,
      "Time_End": 1828.12,
      "Text": " visitor to set all of its expression types to be zero, denoting constant values, so we"
    },
    {
      "Time_Start": 1828.12,
      "Time_End": 1834.4,
      "Text": " can actually use our predicate visitor to defeat other predicate visitors."
    },
    {
      "Time_Start": 1834.4,
      "Time_End": 1838.56,
      "Text": " This is the actual predicate that we're going to use to exploit Springboard."
    },
    {
      "Time_Start": 1838.56,
      "Time_End": 1842.6399999999999,
      "Text": " So first it uses getCString to perform the arbitrary writes needed to clear the denialists"
    },
    {
      "Time_Start": 1842.6399999999999,
      "Time_End": 1847.6,
      "Text": " and set the internal release type to three, then it calls the setDebugPredicateSecurityScoping,"
    },
    {
      "Time_Start": 1847.6,
      "Time_End": 1850.0,
      "Text": " which unsets that high security flag."
    },
    {
      "Time_Start": 1850.0,
      "Time_End": 1856.32,
      "Text": " Finally it uses NSFileManager, which was previously on that forbidden class list, and it uses"
    },
    {
      "Time_Start": 1856.32,
      "Time_End": 1860.72,
      "Text": " it to copy the contents of the user notifications directory to the crash report directory so"
    },
    {
      "Time_Start": 1860.72,
      "Time_End": 1862.76,
      "Text": " that we can copy them off the device."
    },
    {
      "Time_Start": 1862.76,
      "Time_End": 1868.04,
      "Text": " In a real scenario, they would be zipped up and sent over HTTP to an attacker-controlled"
    },
    {
      "Time_Start": 1868.04,
      "Time_End": 1869.04,
      "Text": " server."
    },
    {
      "Time_Start": 1869.04,
      "Time_End": 1872.0,
      "Text": " There's lots of classes that will help you do that."
    },
    {
      "Time_Start": 1872.0,
      "Time_End": 1877.0,
      "Text": " But just for our purposes here, it's simpler to just do this."
    },
    {
      "Time_Start": 1877.0,
      "Time_End": 1882.56,
      "Text": " The predicate then accepts our evil NSPredicateVisitor, which sets all the expression types to zero,"
    },
    {
      "Time_Start": 1882.56,
      "Time_End": 1886.6,
      "Text": " and finally the predicate is assigned to the scene activation conditions, which is what"
    },
    {
      "Time_Start": 1886.6000000000001,
      "Time_End": 1893.64,
      "Text": " sends it to Springboard to be evaluated when an event like opening the app is generated."
    },
    {
      "Time_Start": 1917.6000000000001,
      "Time_End": 1924.6000000000001,
      "Text": " All right, so here is a demo of exploiting this Springboard vulnerability."
    },
    {
      "Time_Start": 1934.0400000000002,
      "Time_End": 1938.72,
      "Text": " On the left we have our script that's just waiting to receive the notifications from"
    },
    {
      "Time_Start": 1938.72,
      "Time_End": 1940.0800000000002,
      "Text": " the malicious process."
    },
    {
      "Time_Start": 1940.0800000000002,
      "Time_End": 1945.2800000000002,
      "Text": " On our right we saw that we're running iOS 16.1, and we can see that we have a notification"
    },
    {
      "Time_Start": 1945.28,
      "Time_End": 1950.48,
      "Text": " that says, shh, this is a secret, and we're going to open our malicious app, which has"
    },
    {
      "Time_Start": 1950.48,
      "Time_End": 1955.6399999999999,
      "Text": " the helpful link steal notifications, and then we will see that our notifications are"
    },
    {
      "Time_Start": 1955.6399999999999,
      "Time_End": 1956.6399999999999,
      "Text": " stolen there on the left."
    },
    {
      "Time_Start": 1956.6399999999999,
      "Time_End": 1957.6399999999999,
      "Text": " It's kind of small."
    },
    {
      "Time_Start": 1957.6399999999999,
      "Time_End": 1962.6399999999999,
      "Text": " I should have made it bigger, but it stole the notifications."
    },
    {
      "Time_Start": 1962.6399999999999,
      "Time_End": 1963.6399999999999,
      "Text": " Cool."
    },
    {
      "Time_Start": 1963.6399999999999,
      "Time_End": 1964.6399999999999,
      "Text": " All right."
    },
    {
      "Time_Start": 1964.6399999999999,
      "Time_End": 1965.6399999999999,
      "Text": " All right."
    },
    {
      "Time_Start": 1965.6399999999999,
      "Time_End": 1966.6399999999999,
      "Text": " All right."
    },
    {
      "Time_Start": 1966.6399999999999,
      "Time_End": 1967.6399999999999,
      "Text": " All right."
    },
    {
      "Time_Start": 1967.6399999999999,
      "Time_End": 1968.6399999999999,
      "Text": " All right."
    },
    {
      "Time_Start": 1968.6399999999999,
      "Time_End": 1969.6399999999999,
      "Text": " All right."
    },
    {
      "Time_Start": 1970.0,
      "Time_End": 1975.0,
      "Text": " All right."
    },
    {
      "Time_Start": 1975.0,
      "Time_End": 1976.0,
      "Text": " Come back."
    },
    {
      "Time_Start": 1976.0,
      "Time_End": 1977.0,
      "Text": " Hey, yeah."
    },
    {
      "Time_Start": 1977.0,
      "Time_End": 1978.0,
      "Text": " All right."
    },
    {
      "Time_Start": 1978.0,
      "Time_End": 1980.0,
      "Text": " So the conclusion."
    },
    {
      "Time_Start": 1980.0,
      "Time_End": 1987.0,
      "Text": " Luckily for the security of iOS and macOS devices, Apple has finally begun to limit"
    },
    {
      "Time_Start": 1988.44,
      "Time_End": 1991.5,
      "Text": " NS predicates in ways that are less easily bypassed."
    },
    {
      "Time_Start": 1991.5,
      "Time_End": 1996.2,
      "Text": " So now the return and argument types of function expressions must be objects, even in third"
    },
    {
      "Time_Start": 1996.2,
      "Time_End": 2001.56,
      "Text": " party apps, and there's no flag that can be overwritten to change this."
    },
    {
      "Time_Start": 2001.56,
      "Time_End": 2006.16,
      "Text": " Predicates could still be used by malicious apps to bypass any kind of meaningful app"
    },
    {
      "Time_Start": 2006.16,
      "Time_End": 2007.28,
      "Text": " store review."
    },
    {
      "Time_Start": 2007.28,
      "Time_End": 2014.28,
      "Text": " So they're still very useful in a context where the attacker can control that environment."
    },
    {
      "Time_Start": 2016.28,
      "Time_End": 2023.28,
      "Text": " And I don't think that they are looking out for this type of evaluation of dynamic NS"
    },
    {
      "Time_Start": 2023.6,
      "Time_End": 2027.56,
      "Text": " predicates in app store review, because it's actually something that Apple does within"
    },
    {
      "Time_Start": 2027.56,
      "Time_End": 2033.0,
      "Text": " their own processes."
    },
    {
      "Time_Start": 2033.0,
      "Time_End": 2039.52,
      "Text": " So until Apple makes fundamental changes to both the behavior of function and key path"
    },
    {
      "Time_Start": 2039.52,
      "Time_End": 2044.0,
      "Text": " expressions, they're still going to be very useful to exploitation."
    },
    {
      "Time_Start": 2044.0,
      "Time_End": 2048.88,
      "Text": " So for the foreseeable future, they will still be dangerous."
    },
    {
      "Time_Start": 2048.88,
      "Time_End": 2054.04,
      "Text": " They'll still be landmines scattered everywhere within the code of iOS and macOS, waiting"
    },
    {
      "Time_Start": 2054.04,
      "Time_End": 2059.0,
      "Text": " to explode, destroying the effectiveness of all the amazing security mitigations on these"
    },
    {
      "Time_Start": 2059.0,
      "Time_End": 2064.48,
      "Text": " devices, and they remain Apple's predicament."
    },
    {
      "Time_Start": 2064.48,
      "Time_End": 2064.6400000000003,
      "Text": " Thank you."
    }
  ]
}