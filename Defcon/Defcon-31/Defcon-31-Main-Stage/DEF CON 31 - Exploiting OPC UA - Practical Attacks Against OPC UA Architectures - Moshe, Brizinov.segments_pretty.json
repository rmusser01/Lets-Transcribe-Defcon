{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 5.0,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Hello DEF CON. Uh we're very excited to have you here. Uh today we're going to talk about a"
    },
    {
      "Time_Start": 8.2,
      "Time_End": 13.34,
      "Text": " very long research we've conducted in the past few years exploiting OPC UA in every"
    },
    {
      "Time_Start": 13.34,
      "Time_End": 19.580000000000002,
      "Text": " possible way. So let's start. My name is Yaron Brezinov I'm a vulnerability researcher at"
    },
    {
      "Time_Start": 19.580000000000002,
      "Time_End": 26.28,
      "Text": " Clarity Media 2. I also have a DEF CON black badge. Woo! Uh with me is Noah Moshe uh is"
    },
    {
      "Time_Start": 26.28,
      "Time_End": 31.78,
      "Text": " also our senior researcher and uh we would like to say thank you very much for the other"
    },
    {
      "Time_Start": 31.78,
      "Time_End": 36.78,
      "Text": " researchers who worked on this project, Uri Katz and Vera Mance. So thank you very much."
    },
    {
      "Time_Start": 38.52,
      "Time_End": 44.22,
      "Text": " Today we're going to talk about a very long research we've conducted on OPC UA security. So"
    },
    {
      "Time_Start": 44.22,
      "Time_End": 50.2,
      "Text": " basically we researched a lot of uh actually dozens of OPC UA protocol stacks and different"
    },
    {
      "Time_Start": 50.2,
      "Time_End": 56.46,
      "Text": " products and we found some core issues in their implementations. So it's not like we found"
    },
    {
      "Time_Start": 56.46,
      "Time_End": 61.940000000000005,
      "Text": " a one off vulnerability in one product. Rather we found and were able to develop multiple"
    },
    {
      "Time_Start": 61.940000000000005,
      "Time_End": 66.94,
      "Text": " attack vectors that exploited multiple products that support OPC UA. So all in all we found"
    },
    {
      "Time_Start": 69.42,
      "Time_End": 74.42,
      "Text": " around 50 CVs and uh we developed 12 unique generic attacks that we gathered into one huge"
    },
    {
      "Time_Start": 74.54,
      "Time_End": 79.54,
      "Text": " framework. And uh we're going to release it open source. Uh we also released uh a FASR OPC UA"
    },
    {
      "Time_Start": 83.64,
      "Time_End": 88.52,
      "Text": " FASR uh that uh actually many vendors are currently using as part of their secure"
    },
    {
      "Time_Start": 88.52,
      "Time_End": 93.26,
      "Text": " security development and they also found a couple of bugs with it so uh I think it was very"
    },
    {
      "Time_Start": 93.26,
      "Time_End": 98.26,
      "Text": " helpful. Um and finally big thanks to ZDI um some of this research at least uh was very"
    },
    {
      "Time_Start": 98.30000000000001,
      "Time_End": 103.30000000000001,
      "Text": " incentivized because of Pwn2Own. So ZDI has their Pwn2Own competitions uh and also they"
    },
    {
      "Time_Start": 107.24000000000001,
      "Time_End": 113.82000000000001,
      "Text": " have the specific ICS category which they emphasized on OPC UA. So it gave us uh the cash"
    },
    {
      "Time_Start": 113.82000000000001,
      "Time_End": 118.82000000000001,
      "Text": " prize obviously. Uh gave us a good incentive to research OPC UA, find bugs and get 200K. So"
    },
    {
      "Time_Start": 121.62,
      "Time_End": 127.2,
      "Text": " today we're going to talk about uh what is OPC UA, um cover some protocol stack"
    },
    {
      "Time_Start": 127.2,
      "Time_End": 133.74,
      "Text": " implementations, go over bits and bytes uh which is a bit boring. Uh we're going to cover"
    },
    {
      "Time_Start": 133.74,
      "Time_End": 138.92000000000002,
      "Text": " the research methodology so how we approach this project, how we research different"
    },
    {
      "Time_Start": 138.92000000000002,
      "Time_End": 145.06,
      "Text": " protocol stacks uh etcetera. Uh and afterwards we're going to show you uh some cool"
    },
    {
      "Time_Start": 145.06,
      "Time_End": 151.16,
      "Text": " vulnerabilities and exploits uh we're able to find and finally release our OPC UA exploit"
    },
    {
      "Time_Start": 151.16,
      "Time_End": 157.14000000000001,
      "Text": " uh framework. So let's start with what is the problem? So why OPC UA was created from"
    },
    {
      "Time_Start": 157.14000000000001,
      "Time_End": 162.14000000000001,
      "Text": " the first place? So in the past uh let's say we had a physical process, in this case uh water"
    },
    {
      "Time_Start": 164.92000000000002,
      "Time_End": 171.58,
      "Text": " tank uh that we want to keep track of the water level. So we have a PLC uh with some kind of a"
    },
    {
      "Time_Start": 171.58,
      "Time_End": 178.4,
      "Text": " logic that keeps track uh using sensors on the water level and these are configured as"
    },
    {
      "Time_Start": 178.4,
      "Time_End": 184.16000000000003,
      "Text": " variables. So the sensor is reading where the water level uh is and we have a variable that"
    },
    {
      "Time_Start": 184.16,
      "Time_End": 190.1,
      "Text": " is changing in the process. Now if we want to monitor this uh procedure uh for example"
    },
    {
      "Time_Start": 190.1,
      "Time_End": 195.1,
      "Text": " from an HMI or a SCADA server uh we had to use the specific proprietary ICS protocol um"
    },
    {
      "Time_Start": 198.34,
      "Time_End": 204.34,
      "Text": " in order to communicate with the PLC to read and write uh these tags values or variables. Um"
    },
    {
      "Time_Start": 204.34,
      "Time_End": 208.18,
      "Text": " and obviously it's not very convenient because if you want different products to communicate"
    },
    {
      "Time_Start": 208.18,
      "Time_End": 214.28,
      "Text": " with it uh we're very limited. So OPC UA was introduced uh in order to have kind of a"
    },
    {
      "Time_Start": 214.28,
      "Time_End": 221.36,
      "Text": " unified way to communicate between different devices and products in within a SCADA network."
    },
    {
      "Time_Start": 221.36,
      "Time_End": 227.5,
      "Text": " So now we could all communicate OPC UA and we do not do not have to be uh limited by the"
    },
    {
      "Time_Start": 227.5,
      "Time_End": 232.5,
      "Text": " specific ICS protocol. Uh and this is why many vendors joined in and today most of the vendors"
    },
    {
      "Time_Start": 233.16,
      "Time_End": 238.16,
      "Text": " are supporting OPC UA uh in various ways uh from servers to clients to support in PLCs, SCADA"
    },
    {
      "Time_Start": 242.14,
      "Time_End": 247.14,
      "Text": " servers. So it became kind of a the new standard uh and it's very popular today. Um and if in"
    },
    {
      "Time_Start": 250.58,
      "Time_End": 257.08,
      "Text": " essence the the protocol was created for kind of a unified way for data exchange between"
    },
    {
      "Time_Start": 257.09999999999997,
      "Time_End": 263.97999999999996,
      "Text": " industrial devices. So we have the server which stores the variables for example the water"
    },
    {
      "Time_Start": 263.97999999999996,
      "Time_End": 270.02,
      "Text": " level variable and we have clients that read or write to these variables to uh monitor the"
    },
    {
      "Time_Start": 270.02,
      "Time_End": 275.02,
      "Text": " process or also alter and modify the process. Now it's very used uh it's very widely used uh"
    },
    {
      "Time_Start": 277.52,
      "Time_End": 282.52,
      "Text": " by almost any vendor. So let's go over a bit of the history of OPC UA. Now OPC UA was"
    },
    {
      "Time_Start": 282.88,
      "Time_End": 287.88,
      "Text": " created by OPC Foundation uh and the first specs goes back to 2006. And it was created based"
    },
    {
      "Time_Start": 293.82,
      "Time_End": 299.56,
      "Text": " on lesson learned from the OPC classic OPCDA. So in the past there was a different"
    },
    {
      "Time_Start": 299.56,
      "Time_End": 306.7,
      "Text": " protocol with similar purpose uh but it wasn't good enough. Uh it lacked uh independent"
    },
    {
      "Time_Start": 306.7,
      "Time_End": 312.0,
      "Text": " platform dependence so it was very tied to Windows um and it was not scalable, it was not"
    },
    {
      "Time_Start": 312.02,
      "Time_End": 317.02,
      "Text": " secure. So OPC Foundation created OPC UA and also created a very thorough and uh deep"
    },
    {
      "Time_Start": 321.06,
      "Time_End": 326.7,
      "Text": " specifications to make sure everybody are using it correctly and also to cover all the"
    },
    {
      "Time_Start": 326.7,
      "Time_End": 333.0,
      "Text": " topics that anyone needs to know about OPC UA. So for example uh how uh objects are"
    },
    {
      "Time_Start": 333.0,
      "Time_End": 338.38,
      "Text": " created in OPC UA is found in the specification. How security works is also found in"
    },
    {
      "Time_Start": 338.42,
      "Time_End": 344.3,
      "Text": " specification. So if everyone, anyone wants to implement OPC UA uh obviously they need to"
    },
    {
      "Time_Start": 344.3,
      "Time_End": 349.34,
      "Text": " read the specification and they're pretty good so it's uh very kind of uh uh easy to read and"
    },
    {
      "Time_Start": 349.34,
      "Time_End": 354.34,
      "Text": " follow. Now to accelerate the use of OPC UA, OPC Foundation created uh three main"
    },
    {
      "Time_Start": 357.44,
      "Time_End": 363.52,
      "Text": " protocol stacks. They created the Java protocol stack, .NET protocol stack and NCC"
    },
    {
      "Time_Start": 363.52,
      "Time_End": 368.94,
      "Text": " protocol stack. Basically what they tried to do is they tried to create some kind of"
    },
    {
      "Time_Start": 368.94,
      "Time_End": 373.94,
      "Text": " SDKs or core libraries that other products could easily implement in their software to add"
    },
    {
      "Time_Start": 376.4,
      "Time_End": 381.41999999999996,
      "Text": " support to OPC UA. So in essence to expedite popularity OPC Foundation created the first OPC UA"
    },
    {
      "Time_Start": 384.12,
      "Time_End": 391.06,
      "Text": " protocol stacks. And today there are hundreds uh maybe thousands of products using OPC UA"
    },
    {
      "Time_Start": 391.06,
      "Time_End": 397.8,
      "Text": " from servers to clients to protocol gateways and they can all be found in the OPC UA uh"
    },
    {
      "Time_Start": 397.8,
      "Time_End": 404.68,
      "Text": " OPC Foundation website. And when we started this research we also went over this website and"
    },
    {
      "Time_Start": 404.68,
      "Time_End": 409.76,
      "Text": " we looked at the different products and it's very convenient uh to see what products are"
    },
    {
      "Time_Start": 409.76,
      "Time_End": 414.76,
      "Text": " supporting OPC UA. Now the problem is that most products are actually heavily relying on"
    },
    {
      "Time_Start": 415.5,
      "Time_End": 420.5,
      "Text": " the base protocol stacks that OPC Foundation created. So if we look at uh some of the top"
    },
    {
      "Time_Start": 425.38,
      "Time_End": 432.38,
      "Text": " products today that implement OPC UA we can see that most of them are using OPC Foundation"
    },
    {
      "Time_Start": 432.38,
      "Time_End": 437.38,
      "Text": " core libraries. So for example the OPC Foundation uh .NET is actually the the actual first"
    },
    {
      "Time_Start": 438.38,
      "Time_End": 443.38,
      "Text": " OPC UA .NET uh protocol stack. So the the vendors created products that use the the core"
    },
    {
      "Time_Start": 450.12,
      "Time_End": 455.12,
      "Text": " libraries and added a little bit uh of their own touch or their own code to modify it but in"
    },
    {
      "Time_Start": 457.56,
      "Time_End": 464.56,
      "Text": " essence they're still using the same protocol stack as the core library. So we wanted to"
    },
    {
      "Time_Start": 464.58,
      "Time_End": 471.68,
      "Text": " find vulnerabilities in the base protocol stacks so we will not exploit or find"
    },
    {
      "Time_Start": 471.68,
      "Time_End": 476.82,
      "Text": " vulnerabilities in just one product rather we will exploit all of them or at least a big"
    },
    {
      "Time_Start": 476.82,
      "Time_End": 481.84000000000003,
      "Text": " portion of them. And to do this we created a very long list of different OPC UA protocol stacks"
    },
    {
      "Time_Start": 484.6,
      "Time_End": 490.94,
      "Text": " and products and we tried to divide them into different categories. So we picked different"
    },
    {
      "Time_Start": 490.96,
      "Time_End": 495.96,
      "Text": " protocol stacks written in uh from C to C++, Python, Java um basically any modern uh"
    },
    {
      "Time_Start": 500.1,
      "Time_End": 505.58,
      "Text": " programming language and we divided all of these products to different categories which in"
    },
    {
      "Time_Start": 505.58,
      "Time_End": 512.44,
      "Text": " each category is based on a very similar protocol stack. In this in this way if we found a"
    },
    {
      "Time_Start": 512.44,
      "Time_End": 518.76,
      "Text": " bug or a vulnerability in one of the core libraries of a specific category we could exploit"
    },
    {
      "Time_Start": 518.78,
      "Time_End": 524.48,
      "Text": " all of the uh products that use the same core. So before we dive in into the"
    },
    {
      "Time_Start": 524.48,
      "Time_End": 529.48,
      "Text": " vulnerabilities themselves uh let's go over quickly how OPC UA is implemented. So in OPC UA we"
    },
    {
      "Time_Start": 533.86,
      "Time_End": 538.86,
      "Text": " have this concept that is called nodes uh so in OPC UA everything is a node uh for example"
    },
    {
      "Time_Start": 540.96,
      "Time_End": 545.96,
      "Text": " our water level variable is uh a node of type variable and it has its own uh subtype uh"
    },
    {
      "Time_Start": 549.14,
      "Time_End": 554.14,
      "Text": " float. So basically it's a variable that has uh a value of type float. Um and in OPC UA also"
    },
    {
      "Time_Start": 558.28,
      "Time_End": 564.18,
      "Text": " we have the concept of namespaces. So namespaces are kind of containers for nodes and we can"
    },
    {
      "Time_Start": 564.18,
      "Time_End": 569.36,
      "Text": " have different namespaces uh for different purposes. So for example we can have a"
    },
    {
      "Time_Start": 569.36,
      "Time_End": 575.2,
      "Text": " namespace with all the base nodes and we can create our own namespace that extends uh"
    },
    {
      "Time_Start": 575.2800000000001,
      "Time_End": 580.2800000000001,
      "Text": " different objects for our purposes. Um in names in namespaces we have the nodes so therefore"
    },
    {
      "Time_Start": 582.98,
      "Time_End": 587.98,
      "Text": " nodes are identified by namespace ID and also node ID. So if we want to refer to a specific"
    },
    {
      "Time_Start": 590.72,
      "Time_End": 595.72,
      "Text": " node in the entire address space we'll need to specify the namespace and identifier. Now"
    },
    {
      "Time_Start": 598.5600000000001,
      "Time_End": 603.5600000000001,
      "Text": " since the specifications are very very thorough and uh detailed uh they also tell us how to"
    },
    {
      "Time_Start": 605.34,
      "Time_End": 611.44,
      "Text": " encode these nodes. So for example in the specification they tell us that uh we can encode"
    },
    {
      "Time_Start": 611.44,
      "Time_End": 617.1800000000001,
      "Text": " uh namespace with a single byte and identifier with two bytes and we actually looked at the"
    },
    {
      "Time_Start": 617.1800000000001,
      "Time_End": 622.62,
      "Text": " specification in order to understand how to implement it ourselves so it was very uh"
    },
    {
      "Time_Start": 622.62,
      "Time_End": 627.7,
      "Text": " beneficial for us to read the specification and understand this. In OPC UA we also have this"
    },
    {
      "Time_Start": 627.7,
      "Time_End": 632.7,
      "Text": " concept of services so uh services is our interaction with the server and by activating"
    },
    {
      "Time_Start": 632.94,
      "Time_End": 639.38,
      "Text": " some kind of a services and we can activate different services on different nodes. So for"
    },
    {
      "Time_Start": 639.38,
      "Time_End": 646.2800000000001,
      "Text": " example if we want to read a variable or a tag we can use the read service to read its value."
    },
    {
      "Time_Start": 646.2800000000001,
      "Time_End": 652.72,
      "Text": " If we want to write to it we will use the OPC UA write service. So services are very uh is"
    },
    {
      "Time_Start": 652.72,
      "Time_End": 657.7,
      "Text": " our way to interact with the server and actually to implement OPC UA you need to implement a"
    },
    {
      "Time_Start": 657.7,
      "Time_End": 662.7,
      "Text": " lot of these services. So if we sum up uh this uh crash course uh so we have uh for in our"
    },
    {
      "Time_Start": 665.7,
      "Time_End": 670.72,
      "Text": " example for example um water tank in our water tank we want to monitor this process um so the"
    },
    {
      "Time_Start": 673.08,
      "Time_End": 678.08,
      "Text": " water level in our OPC UA model will be a variable of type float and if we want to read it we"
    },
    {
      "Time_Start": 680.6600000000001,
      "Time_End": 687.0,
      "Text": " will use the read service from our HMI and our HMI will continuously read this variable using"
    },
    {
      "Time_Start": 687.0,
      "Time_End": 692.0,
      "Text": " OPC UA the read service. Sorry for the boring stuff let's go uh to some more exciting stuff."
    },
    {
      "Time_Start": 694.8,
      "Time_End": 699.8,
      "Text": " Uh so we have uh uh our research we researched OPC UA for a very long time and uh when we came"
    },
    {
      "Time_Start": 702.22,
      "Time_End": 707.22,
      "Text": " up to start this research we needed to come up with a plan. So we started with buying two Intel"
    },
    {
      "Time_Start": 710.02,
      "Time_End": 715.82,
      "Text": " NUCs uh which are very powerful computers somewhat powerful uh and we installed uh"
    },
    {
      "Time_Start": 715.84,
      "Time_End": 722.38,
      "Text": " VMware ES6i on those uh NUCs. Uh we did this because we wanted to install many many"
    },
    {
      "Time_Start": 722.38,
      "Time_End": 729.0600000000001,
      "Text": " products from uh different categories so for example to install OPC UA servers, OPC UA"
    },
    {
      "Time_Start": 729.0600000000001,
      "Time_End": 736.2,
      "Text": " clients, OPC UA uh protocol gateways uh and also different protocol stacks and SDKs. So we"
    },
    {
      "Time_Start": 736.2,
      "Time_End": 740.94,
      "Text": " needed a lot of different virtual machines in order to install all of these products so we"
    },
    {
      "Time_Start": 740.96,
      "Time_End": 745.96,
      "Text": " could research their binaries or review the code. And to do this we started to build our own"
    },
    {
      "Time_Start": 749.1600000000001,
      "Time_End": 756.3800000000001,
      "Text": " client. So we wanted a way to interact with these products and we wanted a way for us to uh"
    },
    {
      "Time_Start": 756.3800000000001,
      "Time_End": 763.48,
      "Text": " kind of poke these servers to reach some uh code path and we decided from very early on the"
    },
    {
      "Time_Start": 763.48,
      "Time_End": 770.22,
      "Text": " research to build our own uh protocol stack. So we wanted to build our client that we could"
    },
    {
      "Time_Start": 770.24,
      "Time_End": 776.0,
      "Text": " easily modify or change and play with the different packets. We also wanted hands on"
    },
    {
      "Time_Start": 776.0,
      "Time_End": 781.94,
      "Text": " experience with OPC UA so we wanted to understand better how objects are created, we wanted to"
    },
    {
      "Time_Start": 781.94,
      "Time_End": 786.96,
      "Text": " understand better how uh services are being used and so we used we created our own client to"
    },
    {
      "Time_Start": 791.28,
      "Time_End": 798.4,
      "Text": " make sure we really understand how OPC UA is being used. After building our client uh the"
    },
    {
      "Time_Start": 798.4399999999999,
      "Time_End": 804.38,
      "Text": " next step for us was to have some kind of fuzzers running passively in the background. Uh so"
    },
    {
      "Time_Start": 804.38,
      "Time_End": 810.72,
      "Text": " we wanted uh something to fuzz all of the products that we installed and we had dozens of"
    },
    {
      "Time_Start": 810.72,
      "Time_End": 816.3,
      "Text": " products installed in our in our uh environment and we created our network fuzzer. Uh so the"
    },
    {
      "Time_Start": 816.3,
      "Time_End": 822.06,
      "Text": " network fuzzer uh was based on Bufuzz framework. Uh it's uh very convenient to easily"
    },
    {
      "Time_Start": 822.0600000000001,
      "Time_End": 828.3000000000001,
      "Text": " write uh network fuzzers based on this framework. Uh and we implemented six different"
    },
    {
      "Time_Start": 828.3000000000001,
      "Time_End": 835.34,
      "Text": " services uh including read, browse, write, etcetera. Uh and we fuzzed them all on all the"
    },
    {
      "Time_Start": 835.34,
      "Time_End": 842.1800000000001,
      "Text": " product. So we had dozens uh or even more than dozens of uh uh protocol fuzzers trying to"
    },
    {
      "Time_Start": 842.1800000000001,
      "Time_End": 847.22,
      "Text": " exploit or at least find crushes uh in all the products that we installed. And it was"
    },
    {
      "Time_Start": 847.22,
      "Time_End": 853.22,
      "Text": " actually very beneficial because it helped us to to find a couple of bugs and we also"
    },
    {
      "Time_Start": 853.22,
      "Time_End": 859.0600000000001,
      "Text": " released it as open source so now vendors are using this as part of their uh security"
    },
    {
      "Time_Start": 859.0600000000001,
      "Time_End": 864.0600000000001,
      "Text": " development cycle. We also created coverage based fuzzers. So at one point we found uh NCC"
    },
    {
      "Time_Start": 868.74,
      "Time_End": 876.24,
      "Text": " OPC UA stock so it was uh source code of uh the implementation of uh a protocol stock and we"
    },
    {
      "Time_Start": 876.26,
      "Time_End": 883.3,
      "Text": " took it, we created some harnesses with lib fuzzer and AFL uh and we also ran this for a"
    },
    {
      "Time_Start": 883.3,
      "Time_End": 888.84,
      "Text": " couple of weeks. Uh unfortunately did not find any bugs uh mostly because Kaspersky did the"
    },
    {
      "Time_Start": 888.84,
      "Time_End": 895.28,
      "Text": " same thing a few a few years ago. But it was still very helpful for us uh because we"
    },
    {
      "Time_Start": 895.28,
      "Time_End": 901.22,
      "Text": " created a lot of corpuses so we created a way uh to reach a certain code path within these"
    },
    {
      "Time_Start": 901.24,
      "Time_End": 907.78,
      "Text": " products. Finally we needed a way to control all the fuzzers, all the running fuzzers so we"
    },
    {
      "Time_Start": 907.78,
      "Time_End": 913.82,
      "Text": " built um a slack bot that monitors all the different fuzzers and whenever we reached a"
    },
    {
      "Time_Start": 913.82,
      "Time_End": 919.6,
      "Text": " crash we received a notification and also a screenshot so it was very helpful for us uh to"
    },
    {
      "Time_Start": 919.6,
      "Time_End": 926.6,
      "Text": " monitor these hundreds of fuzzers running in our infrastructure and it's also it also"
    },
    {
      "Time_Start": 926.66,
      "Time_End": 932.7,
      "Text": " helped us to understand what's going on and keep uh on monitoring and getting the status"
    },
    {
      "Time_Start": 932.7,
      "Time_End": 937.7,
      "Text": " every every single time. Next while we have all of our fuzzers running in the background uh"
    },
    {
      "Time_Start": 940.26,
      "Time_End": 945.84,
      "Text": " we wanted to move on and uh do some manual research. So we turned out to the"
    },
    {
      "Time_Start": 945.84,
      "Time_End": 952.24,
      "Text": " specification and started to understand and look for esoteric and complex features and"
    },
    {
      "Time_Start": 952.26,
      "Time_End": 958.4,
      "Text": " mechanisms. So basically we asked ourselves what will developers overlook when"
    },
    {
      "Time_Start": 958.4,
      "Time_End": 963.4,
      "Text": " implementing the specification? And just to give you an idea uh what it means uh let's go"
    },
    {
      "Time_Start": 965.6800000000001,
      "Time_End": 970.6800000000001,
      "Text": " over uh this example so um when we read the message header specification so in OPC UA we have a"
    },
    {
      "Time_Start": 974.1800000000001,
      "Time_End": 980.32,
      "Text": " very strict way to send OPC UA messages and part of these messages we have the header and"
    },
    {
      "Time_Start": 980.34,
      "Time_End": 986.88,
      "Text": " inside the header we have a flag saying whether the message we're sending is complete or"
    },
    {
      "Time_Start": 986.88,
      "Time_End": 993.88,
      "Text": " whether it's chunked. So we can send a very very very big uh long message and we can send and"
    },
    {
      "Time_Start": 993.88,
      "Time_End": 999.46,
      "Text": " we can divide it into different chunks and send each chunk every time. So in the header we"
    },
    {
      "Time_Start": 999.46,
      "Time_End": 1004.46,
      "Text": " have a way of saying uh of notifying the server whether this specific packet is a chunk or"
    },
    {
      "Time_Start": 1004.74,
      "Time_End": 1009.74,
      "Text": " it's the final message and now it needs to process all the different chunks we sent. So we"
    },
    {
      "Time_Start": 1013.2800000000001,
      "Time_End": 1018.88,
      "Text": " asked ourselves what happens if we're sending the server a chunk and another chunk and"
    },
    {
      "Time_Start": 1018.88,
      "Time_End": 1025.42,
      "Text": " another chunk without ever sending the final chunk? What will happen? The server will"
    },
    {
      "Time_Start": 1025.42,
      "Time_End": 1031.7,
      "Text": " terminate the session, the server will crash. So these type these types of features uh we"
    },
    {
      "Time_Start": 1031.7,
      "Time_End": 1038.24,
      "Text": " tried to research and explore. So let's move on uh to the cool stuff. Um the"
    },
    {
      "Time_Start": 1038.24,
      "Time_End": 1044.02,
      "Text": " vulnerabilities and exploits. And we'll start with the denial of service scenarios."
    },
    {
      "Time_Start": 1044.02,
      "Time_End": 1050.3600000000001,
      "Text": " Obviously denial of service is a big deal when we're talking about ICS or SCADAM because um"
    },
    {
      "Time_Start": 1050.3600000000001,
      "Time_End": 1056.96,
      "Text": " shutting down a server might uh might mean shutting down an entire factory. Um so"
    },
    {
      "Time_Start": 1056.96,
      "Time_End": 1061.8600000000001,
      "Text": " obviously we wanted to research and explore denial of service scenarios. For example"
    },
    {
      "Time_Start": 1061.8600000000001,
      "Time_End": 1066.88,
      "Text": " what happens if we're able to crash the OPC UA server? And to do this we did not just want to"
    },
    {
      "Time_Start": 1069.68,
      "Time_End": 1074.58,
      "Text": " think about okay a single crash or something that uh our father found. We actually"
    },
    {
      "Time_Start": 1074.58,
      "Time_End": 1081.48,
      "Text": " approached it uh from a very um thorough way I would say. Because we created ourselves"
    },
    {
      "Time_Start": 1081.54,
      "Time_End": 1087.22,
      "Text": " categories. For example uncontrolled memory management. And we followed these"
    },
    {
      "Time_Start": 1087.22,
      "Time_End": 1094.02,
      "Text": " categories to find specific attacks against these categories. So we actually when we"
    },
    {
      "Time_Start": 1094.02,
      "Time_End": 1099.9,
      "Text": " reversed reverse engineered the code or when we did the code uh review. We tried to"
    },
    {
      "Time_Start": 1099.9,
      "Time_End": 1105.54,
      "Text": " think uh what will cause uncontrolled memory management? Or what will cause a thread"
    },
    {
      "Time_Start": 1105.54,
      "Time_End": 1110.8,
      "Text": " deadlock? And we followed different code paths that we believed will get us to this point."
    },
    {
      "Time_Start": 1110.82,
      "Time_End": 1117.8999999999999,
      "Text": " So if we take uh example uh the chunk floating as I started to describe earlier. Then as I"
    },
    {
      "Time_Start": 1117.8999999999999,
      "Time_End": 1124.04,
      "Text": " mentioned we have in the OPC UA header we have the chunk type. This is the flag I was"
    },
    {
      "Time_Start": 1124.04,
      "Time_End": 1129.04,
      "Text": " referring to. And it has two main values. C or F. C means this specific packet is a chunk"
    },
    {
      "Time_Start": 1132.48,
      "Time_End": 1139.1599999999999,
      "Text": " and it's part of a longer chain of chunks. And F means this is the final chunk and now you"
    },
    {
      "Time_Start": 1139.18,
      "Time_End": 1145.66,
      "Text": " need to process all the previous chunks. If we look at different servers uh for example"
    },
    {
      "Time_Start": 1145.66,
      "Time_End": 1150.66,
      "Text": " this is the OPC UA dot net stack. We will see an if statement uh checking for is final"
    },
    {
      "Time_Start": 1153.0,
      "Time_End": 1158.0,
      "Text": " meaning is the flag F? And if so stop processing uh the message. Stop to receive more"
    },
    {
      "Time_Start": 1160.94,
      "Time_End": 1167.24,
      "Text": " chunks and start to process the entire message. So what we did was simple. We sent a lot"
    },
    {
      "Time_Start": 1167.26,
      "Time_End": 1172.26,
      "Text": " of chunks and we just never sent the final chunk. And finally the server crashed. So we used"
    },
    {
      "Time_Start": 1176.86,
      "Time_End": 1183.28,
      "Text": " this vulnerability not once so it was not an off one vulnerability. We actually used this"
    },
    {
      "Time_Start": 1183.28,
      "Time_End": 1188.82,
      "Text": " vulnerability against different protocol stacks because apparently many developers did"
    },
    {
      "Time_Start": 1188.82,
      "Time_End": 1194.02,
      "Text": " not think what will happen if they will save a lot of different chunks. And we're able to"
    },
    {
      "Time_Start": 1194.04,
      "Time_End": 1199.04,
      "Text": " exploit uh and actually crash a lot of different OPC UA servers. Another example uh from"
    },
    {
      "Time_Start": 1202.44,
      "Time_End": 1209.54,
      "Text": " our use after free category is method calling from a dead session. Now it turns out that in"
    },
    {
      "Time_Start": 1209.54,
      "Time_End": 1214.56,
      "Text": " OPC UA we have a way to activate methods remotely. So we can configure in the OPC UA server a"
    },
    {
      "Time_Start": 1216.96,
      "Time_End": 1223.46,
      "Text": " method. For example here uh we have a method to multiply two nodes and these nodes are"
    },
    {
      "Time_Start": 1223.5,
      "Time_End": 1230.0,
      "Text": " obviously from type uh integer or float. And we have a way to activate these message"
    },
    {
      "Time_Start": 1230.0,
      "Time_End": 1235.02,
      "Text": " remotely by sending a method activation or invoke. Now we looked at the specification and we"
    },
    {
      "Time_Start": 1237.48,
      "Time_End": 1242.48,
      "Text": " noticed something very interesting. It actually says in the specification what if the if the"
    },
    {
      "Time_Start": 1244.66,
      "Time_End": 1249.66,
      "Text": " method calling uh is created from a session and we actually send a lot of different methods"
    },
    {
      "Time_Start": 1250.44,
      "Time_End": 1255.44,
      "Text": " and then terminate the session. The specification say that the server should not return answer"
    },
    {
      "Time_Start": 1259.5,
      "Time_End": 1265.72,
      "Text": " to the client because the session is terminated. Obviously we thought ourselves okay uh what"
    },
    {
      "Time_Start": 1265.72,
      "Time_End": 1271.42,
      "Text": " happens if the developers did not uh implement this correctly so what will happen if we will"
    },
    {
      "Time_Start": 1271.42,
      "Time_End": 1276.42,
      "Text": " send a very long list of methods for example 255 methods in an array for the the OPC UA"
    },
    {
      "Time_Start": 1279.8600000000001,
      "Time_End": 1286.8000000000002,
      "Text": " server to start processing and we terminate our session in between. So how it looks like?"
    },
    {
      "Time_Start": 1286.8000000000002,
      "Time_End": 1292.38,
      "Text": " We're preparing a lot of methods to send to the server. We're sending all these methods to"
    },
    {
      "Time_Start": 1292.38,
      "Time_End": 1298.68,
      "Text": " the server. The server starts analyzing all the methods and in between we're terminating"
    },
    {
      "Time_Start": 1298.68,
      "Time_End": 1305.3200000000002,
      "Text": " our session. Now the server continues to process all the methods and finally it needs to"
    },
    {
      "Time_Start": 1305.32,
      "Time_End": 1312.1599999999999,
      "Text": " send back the result to the client. However the session is gone and if developers are not"
    },
    {
      "Time_Start": 1312.1599999999999,
      "Time_End": 1317.8,
      "Text": " implementing this correctly they will try to dereference non-existing session which will"
    },
    {
      "Time_Start": 1317.8,
      "Time_End": 1322.8,
      "Text": " result with an access violation. So again this was this scenario was based on something we"
    },
    {
      "Time_Start": 1325.48,
      "Time_End": 1330.6399999999999,
      "Text": " read in the specification and we thought to ourselves will be interesting to implement. And"
    },
    {
      "Time_Start": 1330.64,
      "Time_End": 1335.98,
      "Text": " by the way all these attack vectors are implemented in our uh framework exploit"
    },
    {
      "Time_Start": 1335.98,
      "Time_End": 1340.5800000000002,
      "Text": " framework uh which you can access uh through github and we'll show you later how to access"
    },
    {
      "Time_Start": 1340.5800000000002,
      "Time_End": 1345.5800000000002,
      "Text": " it. Okay so the NullOp service is okay uh I mean we can cross servers in a scan networks but"
    },
    {
      "Time_Start": 1348.92,
      "Time_End": 1354.3600000000001,
      "Text": " that's not uh a big deal enough. We wanted to have a way to do remote code execution. We"
    },
    {
      "Time_Start": 1354.3600000000001,
      "Time_End": 1360.6000000000001,
      "Text": " wanted a way to control the OPC UA server and maybe modify these tags. So for example"
    },
    {
      "Time_Start": 1361.0000000000002,
      "Time_End": 1365.6000000000001,
      "Text": " not just uh crashing the OPC UA server but actually change the water level from zero to"
    },
    {
      "Time_Start": 1365.6000000000001,
      "Time_End": 1372.1000000000001,
      "Text": " one hundred and change how factories and change how the physical process looks like. This is"
    },
    {
      "Time_Start": 1372.1000000000001,
      "Time_End": 1379.2800000000002,
      "Text": " much more interesting. So uh we decided to research uh the PTC caper. Um this is a very"
    },
    {
      "Time_Start": 1379.2800000000002,
      "Time_End": 1385.8600000000001,
      "Text": " popular software. Uh it's one of the industry leading uh OPC UA servers used in the biggest"
    },
    {
      "Time_Start": 1385.8600000000001,
      "Time_End": 1392.0600000000002,
      "Text": " manufacturing lines including oil rigs, wind farms uh et cetera. Uh it's windows based uh"
    },
    {
      "Time_Start": 1392.0600000000002,
      "Time_End": 1398.4,
      "Text": " thirty two bits implemented as a server as a service and we with researched this uh product"
    },
    {
      "Time_Start": 1398.4,
      "Time_End": 1403.4,
      "Text": " for uh quite some time. By the way uh we all we also let our fuzzer to fuzz this uh process"
    },
    {
      "Time_Start": 1407.5800000000002,
      "Time_End": 1413.7800000000002,
      "Text": " uh and this uh product for quite some time. And um one day uh at night uh we received a"
    },
    {
      "Time_Start": 1413.8,
      "Time_End": 1419.24,
      "Text": " notification from our slack bot uh that there is a crash. Uh and at the beginning we were"
    },
    {
      "Time_Start": 1419.24,
      "Time_End": 1424.24,
      "Text": " very spectac- spectacle that uh it's not a real crash. Um but our researchers uh Ori and Vera"
    },
    {
      "Time_Start": 1427.22,
      "Time_End": 1432.76,
      "Text": " started to look at it and they discovered it has something to do with uh string"
    },
    {
      "Time_Start": 1432.76,
      "Time_End": 1437.76,
      "Text": " manipulation. So they tried to get even deeper into this what happened exactly in the process"
    },
    {
      "Time_Start": 1437.98,
      "Time_End": 1442.98,
      "Text": " of converting strings and they discovered something very interesting that we'll cover now. In"
    },
    {
      "Time_Start": 1448.22,
      "Time_End": 1454.76,
      "Text": " OPC UA uh we needed to encode our strings in some way and transfer it over the network line."
    },
    {
      "Time_Start": 1454.76,
      "Time_End": 1459.76,
      "Text": " So uh if we for example have uh a tonic ID in our example. We have a tonic ID uh or a tonic"
    },
    {
      "Time_Start": 1460.74,
      "Time_End": 1465.74,
      "Text": " location name. Uh then we need to encode the string as you can see here in some way uh and"
    },
    {
      "Time_Start": 1469.82,
      "Time_End": 1474.82,
      "Text": " send it over the line to the OPC UA server. Now in OPC UA all the strings are UTF-8 encoded."
    },
    {
      "Time_Start": 1478.16,
      "Time_End": 1483.16,
      "Text": " But some of the servers are using UTF-16. For example Capra is using UTF-16 uh as a way to"
    },
    {
      "Time_Start": 1483.94,
      "Time_End": 1488.94,
      "Text": " encode the strings. So whenever Capra read the strings from the packet it actually tried to"
    },
    {
      "Time_Start": 1493.0800000000002,
      "Time_End": 1500.0800000000002,
      "Text": " convert from UTF-8 to UTF-16 and there we noticed the crash. So there was something in the"
    },
    {
      "Time_Start": 1500.0800000000002,
      "Time_End": 1505.0800000000002,
      "Text": " conversion between UTF-8 to UTF-16. So before I explain what happened let's go over what is"
    },
    {
      "Time_Start": 1505.08,
      "Time_End": 1510.08,
      "Text": " UTF-8 and UTF-16 encoding. UTF-8 uh is a type of encoding that we can uh represent symbols"
    },
    {
      "Time_Start": 1519.72,
      "Time_End": 1524.74,
      "Text": " for example uh the letter A with some bits uh for example A is uh 41 hexa. But if we have other"
    },
    {
      "Time_Start": 1524.74,
      "Time_End": 1529.74,
      "Text": " symbols that are bigger than uh 7F hex we need uh we need another byte to represent this"
    },
    {
      "Time_Start": 1537.42,
      "Time_End": 1542.42,
      "Text": " symbol. So for example uh this funny looking A is represented as a C380. So some bytes or"
    },
    {
      "Time_Start": 1548.46,
      "Time_End": 1554.26,
      "Text": " sorry some symbols are represented as a single byte and some symbols are represented as two"
    },
    {
      "Time_Start": 1554.26,
      "Time_End": 1561.0,
      "Text": " bytes or three bytes or even four bytes. And Capra whenever it received a message OPCA"
    },
    {
      "Time_Start": 1561.0,
      "Time_End": 1566.86,
      "Text": " message with a string it tried to understand how many symbols are within this string. Why?"
    },
    {
      "Time_Start": 1566.86,
      "Time_End": 1571.8799999999999,
      "Text": " Because it needed to understand how to allocate memory for the UTF-8 UTF-16 conversion. So for"
    },
    {
      "Time_Start": 1575.54,
      "Time_End": 1581.32,
      "Text": " example if we're sending uh this string Capra will try to understand how many symbols are"
    },
    {
      "Time_Start": 1581.34,
      "Time_End": 1586.34,
      "Text": " inside. So it knows that 41 means one symbol and C3 probably means two symbols because this"
    },
    {
      "Time_Start": 1589.52,
      "Time_End": 1594.52,
      "Text": " is above 7F. And so it tries to calculate how many symbols we have. For example here we have"
    },
    {
      "Time_Start": 1597.76,
      "Time_End": 1604.2,
      "Text": " one symbol represented with one byte. Another symbol represented with one byte. Another one"
    },
    {
      "Time_Start": 1604.2,
      "Time_End": 1609.2,
      "Text": " with another byte. And we have a symbol this funny looking A with two bytes until it reaches"
    },
    {
      "Time_Start": 1611.58,
      "Time_End": 1617.8799999999999,
      "Text": " a null terminator. And whenever it reaches a null terminator it stops and calculating exactly"
    },
    {
      "Time_Start": 1617.8799999999999,
      "Time_End": 1622.8799999999999,
      "Text": " how many symbols it has so it could convert it to UTF-16. But what happens if we're sending"
    },
    {
      "Time_Start": 1626.32,
      "Time_End": 1631.32,
      "Text": " just the C3 at the end? Capra will probably think it's a symbol, one symbol represented with"
    },
    {
      "Time_Start": 1634.7,
      "Time_End": 1640.8,
      "Text": " two bytes and will jump two bytes. So let's see how it happens. So we have the 41 which is"
    },
    {
      "Time_Start": 1640.82,
      "Time_End": 1646.82,
      "Text": " one symbol one byte. 41 one symbol one byte. Another one. And then we have C3. C3 in Capra"
    },
    {
      "Time_Start": 1648.96,
      "Time_End": 1655.56,
      "Text": " logic means to jump two bytes so it will jump above the null terminator and we're starting to"
    },
    {
      "Time_Start": 1655.56,
      "Time_End": 1661.8999999999999,
      "Text": " jump on the heap. And this means we will jump on the heap until we're reaching another null"
    },
    {
      "Time_Start": 1661.8999999999999,
      "Time_End": 1666.8999999999999,
      "Text": " terminator and we could leak data. So we actually used uh this vulnerability in order to"
    },
    {
      "Time_Start": 1667.88,
      "Time_End": 1672.88,
      "Text": " leak a lot of data from the heap uh but we also were able to leverage this further. So first"
    },
    {
      "Time_Start": 1676.3200000000002,
      "Time_End": 1683.3200000000002,
      "Text": " of all leaking data from the heap uh we used the read read tag so for example if uh if we"
    },
    {
      "Time_Start": 1683.3200000000002,
      "Time_End": 1690.1000000000001,
      "Text": " want to read variables of or tags from the OPCA server we'll use the read service and we could"
    },
    {
      "Time_Start": 1690.1000000000001,
      "Time_End": 1695.1000000000001,
      "Text": " just specify the node ID uh so node ID and namespace ID and we could read the tag. So"
    },
    {
      "Time_Start": 1697.3400000000001,
      "Time_End": 1702.3400000000001,
      "Text": " tag information. But if we're sending uh if the the node is encoded with C3 at the end"
    },
    {
      "Time_Start": 1705.0800000000002,
      "Time_End": 1712.22,
      "Text": " whenever Capra will try to convert we'll start to read data from the heap. So we used it to"
    },
    {
      "Time_Start": 1712.22,
      "Time_End": 1717.46,
      "Text": " leak a lot of data from the heap and this way we were able to leak pointers and defeat the"
    },
    {
      "Time_Start": 1717.46,
      "Time_End": 1722.46,
      "Text": " SLR. We also did kind of the opposite so we used the write service in order to write memory"
    },
    {
      "Time_Start": 1723.46,
      "Time_End": 1728.46,
      "Text": " into the heap and we used the write functionality so for example we wrote a tag that ends"
    },
    {
      "Time_Start": 1731.74,
      "Time_End": 1738.44,
      "Text": " with C3 and whenever Capra tried to convert it from UTF-8 to UTF-16 we started to write"
    },
    {
      "Time_Start": 1738.44,
      "Time_End": 1743.44,
      "Text": " overwrite the the heap. So now we had uh a out of bound read to leak pointers and defeat SLR"
    },
    {
      "Time_Start": 1746.58,
      "Time_End": 1751.92,
      "Text": " and we also had out of bound write to construct our rope chain and eventually get remote"
    },
    {
      "Time_Start": 1751.92,
      "Time_End": 1758.6200000000001,
      "Text": " code execution. So uh our researcher Uri uh were able to really convert it into a full"
    },
    {
      "Time_Start": 1758.6200000000001,
      "Time_End": 1763.6200000000001,
      "Text": " chain and first of all he used um the leak uh primitive to leak a lot of data from the heap."
    },
    {
      "Time_Start": 1766.0,
      "Time_End": 1773.0,
      "Text": " Then he overwrote uh he calculated some addresses uh that are needed in order to create our"
    },
    {
      "Time_Start": 1773.0,
      "Time_End": 1779.14,
      "Text": " rope chain, overwrote some uh information on the heap and finally triggered the bug and got"
    },
    {
      "Time_Start": 1779.16,
      "Time_End": 1784.16,
      "Text": " full remote code execution. Great. So we covered the denial of service scenarios also remote code"
    },
    {
      "Time_Start": 1792.74,
      "Time_End": 1798.1200000000001,
      "Text": " execution scenarios in OPCA servers. Let's see how to do this with remote code execution in"
    },
    {
      "Time_Start": 1798.1200000000001,
      "Time_End": 1803.1200000000001,
      "Text": " clients. Okay thank you very much Ron. Uh like Ron said at this point we exploited many"
    },
    {
      "Time_Start": 1804.1200000000001,
      "Time_End": 1809.1200000000001,
      "Text": " different products. It started with OPCA uh uh servers also some OPCA gateway protocols but"
    },
    {
      "Time_Start": 1815.46,
      "Time_End": 1821.46,
      "Text": " that's when we thought to ourselves let's try and look at clients as well. Now what is the"
    },
    {
      "Time_Start": 1821.46,
      "Time_End": 1825.46,
      "Text": " usual suspect and like the immediate thing that you think about whenever you're talking"
    },
    {
      "Time_Start": 1825.46,
      "Time_End": 1832.1000000000001,
      "Text": " about exploiting OPCA clients? Well it might look like this. We have an OPCA client"
    },
    {
      "Time_Start": 1832.1200000000001,
      "Time_End": 1838.0600000000002,
      "Text": " connecting to a rogue or malicious OPCA server. And whenever it does it, it tries to read,"
    },
    {
      "Time_Start": 1838.0600000000002,
      "Time_End": 1843.0600000000002,
      "Text": " write or interact with different tags and somehow by returning malicious data uh the server is"
    },
    {
      "Time_Start": 1846.16,
      "Time_End": 1852.64,
      "Text": " able to exploit and run code and execute code on the OPCA clients. Now when we realized this"
    },
    {
      "Time_Start": 1852.64,
      "Time_End": 1858.14,
      "Text": " is the attack scenario we thought to ourselves yeah we looked at pretty much logical bugs"
    },
    {
      "Time_Start": 1858.16,
      "Time_End": 1863.0200000000002,
      "Text": " and memory corruptions and these are very very tough meaning they take a lot of time to"
    },
    {
      "Time_Start": 1863.0200000000002,
      "Time_End": 1867.92,
      "Text": " research and fully exploit and it's not that easy. I mean just on the memory corruption"
    },
    {
      "Time_Start": 1867.92,
      "Time_End": 1873.1000000000001,
      "Text": " Sharon showed you just now to actually fully exploit it on Windows 10 machine it takes"
    },
    {
      "Time_Start": 1873.1000000000001,
      "Time_End": 1878.8400000000001,
      "Text": " months and months and many of our researchers like Uri worked on it for a very long time."
    },
    {
      "Time_Start": 1878.8400000000001,
      "Time_End": 1883.5400000000002,
      "Text": " However we thought to ourselves maybe there's an easier way to exploit OPCA clients that are"
    },
    {
      "Time_Start": 1883.54,
      "Time_End": 1889.94,
      "Text": " less relevant to OPCA servers. And that's when we looked at two very very popular OPCA"
    },
    {
      "Time_Start": 1889.94,
      "Time_End": 1896.1599999999999,
      "Text": " clients being inductive automation ignition and softing data feed edge aggregators. Now this"
    },
    {
      "Time_Start": 1896.1599999999999,
      "Time_End": 1903.12,
      "Text": " is kind of the big names in OPCA clients. These are SCADA and data servers that also have the"
    },
    {
      "Time_Start": 1903.12,
      "Time_End": 1909.24,
      "Text": " functionality to connect to an OPCA server and read and write tags to it. However one more"
    },
    {
      "Time_Start": 1909.24,
      "Time_End": 1914.32,
      "Text": " thing they have in common is that they are both web based. Meaning they are used from a"
    },
    {
      "Time_Start": 1914.32,
      "Time_End": 1920.66,
      "Text": " browser by a client and connect to the ignition in the active automation ignition server using"
    },
    {
      "Time_Start": 1920.66,
      "Time_End": 1925.7,
      "Text": " web browser. And that's when we thought to ourselves yeah web browser are a little bit"
    },
    {
      "Time_Start": 1925.7,
      "Time_End": 1931.6200000000001,
      "Text": " easier. What can we do in them? Well of course the main functionality in OPCA clients is"
    },
    {
      "Time_Start": 1931.6200000000001,
      "Time_End": 1937.54,
      "Text": " reading writing or subscribing to tags. Meaning I want to read a variable so I'll read or"
    },
    {
      "Time_Start": 1937.54,
      "Time_End": 1943.78,
      "Text": " write to it. That's when we thought to ourselves yeah let's say this scenario will happen. We"
    },
    {
      "Time_Start": 1943.78,
      "Time_End": 1949.32,
      "Text": " have our OPCA client connecting to our malicious server and trying to read a tag like in"
    },
    {
      "Time_Start": 1949.32,
      "Time_End": 1955.32,
      "Text": " Sharon's example trying to read the water level. Well whenever it tries to read a tag our"
    },
    {
      "Time_Start": 1955.32,
      "Time_End": 1960.42,
      "Text": " server simply says yeah sure here you go read a tag. However instead of returning actual"
    },
    {
      "Time_Start": 1960.42,
      "Time_End": 1966.92,
      "Text": " value like a float number or a string we return a simple XSS script tag which then the"
    },
    {
      "Time_Start": 1966.92,
      "Time_End": 1973.2,
      "Text": " client takes and inserts it into its DOM. Now whenever it inserts into its DOM it simply"
    },
    {
      "Time_Start": 1973.2,
      "Time_End": 1979.74,
      "Text": " executes it and we have the ability to execute code in the context of the client's browser."
    },
    {
      "Time_Start": 1979.74,
      "Time_End": 1985.1200000000001,
      "Text": " And as it turns out both of these servers are actually have an XSS vulnerability in the"
    },
    {
      "Time_Start": 1985.1200000000001,
      "Time_End": 1990.8400000000001,
      "Text": " reading and writing tag functionality. Meaning we were able to as you can see here achieve"
    },
    {
      "Time_Start": 1990.8400000000001,
      "Time_End": 1997.2600000000002,
      "Text": " alert in softing and of course in ignition as well. Now XSS is pretty cool but I guess all"
    },
    {
      "Time_Start": 1997.2600000000002,
      "Time_End": 2001.6200000000001,
      "Text": " you can do with it is maybe re-crawl the user. I mean it's not remote code execution per"
    },
    {
      "Time_Start": 2001.6200000000001,
      "Time_End": 2007.96,
      "Text": " se. That's when we thought to ourselves how can we take it further and actually leverage"
    },
    {
      "Time_Start": 2007.96,
      "Time_End": 2014.0000000000002,
      "Text": " our XSS vulnerability into achieving a full on remote code execution on the ignition"
    },
    {
      "Time_Start": 2014.0000000000002,
      "Time_End": 2019.8000000000002,
      "Text": " to the inductive automation ignition and softing edge aggregator servers. Well as it turns"
    },
    {
      "Time_Start": 2019.8,
      "Time_End": 2025.04,
      "Text": " out we actually chained multiple vulnerabilities in both servers in order to achieve the"
    },
    {
      "Time_Start": 2025.04,
      "Time_End": 2029.84,
      "Text": " remote code execution vulnerability. So let's take a look at both of these exploitation"
    },
    {
      "Time_Start": 2029.84,
      "Time_End": 2036.08,
      "Text": " chains and see how easy it was in comparison to the full on pledged uh memory corruption"
    },
    {
      "Time_Start": 2036.08,
      "Time_End": 2040.6599999999999,
      "Text": " vulnerability we showcased here before. So in the case of ignition one of the main"
    },
    {
      "Time_Start": 2040.6599999999999,
      "Time_End": 2046.22,
      "Text": " functionality the server offers is the ability to import and uh basically upload a new"
    },
    {
      "Time_Start": 2046.26,
      "Time_End": 2051.64,
      "Text": " project. Now in this project we can set up something called gateway events. What's"
    },
    {
      "Time_Start": 2051.64,
      "Time_End": 2057.26,
      "Text": " gateway events you might ask? Well basically it's a callback script that we can uh add that"
    },
    {
      "Time_Start": 2057.26,
      "Time_End": 2062.14,
      "Text": " will be executed whenever a certain thing happens. Like in this case we're talking about a"
    },
    {
      "Time_Start": 2062.14,
      "Time_End": 2068.0,
      "Text": " script being executed every few seconds on a scheduled event. Now inductive automation"
    },
    {
      "Time_Start": 2068.0,
      "Time_End": 2074.04,
      "Text": " ignition chose to allow users to add Python code to their gateway scripts meaning by"
    },
    {
      "Time_Start": 2074.04,
      "Time_End": 2081.54,
      "Text": " simply having our uh uh by simply uploading our callback script we are able to execute"
    },
    {
      "Time_Start": 2081.54,
      "Time_End": 2085.92,
      "Text": " arbitrary Python code and achieve remote code execution on the inductive automation"
    },
    {
      "Time_Start": 2085.92,
      "Time_End": 2092.96,
      "Text": " ignition server. Now this was a whole chain starting from the XSS in the OPC UA client read."
    },
    {
      "Time_Start": 2092.96,
      "Time_End": 2097.34,
      "Text": " However and however we also wanted to look at softing and try and exploit a few"
    },
    {
      "Time_Start": 2097.34,
      "Time_End": 2102.8,
      "Text": " functionality there. Well in softing we don't have a project upload however we have"
    },
    {
      "Time_Start": 2102.8,
      "Time_End": 2108.0,
      "Text": " something that could be similar. Procedure restore meaning we want to restore our old"
    },
    {
      "Time_Start": 2108.0,
      "Time_End": 2114.46,
      "Text": " configuration of the server and go back in time and basically have the old settings. Well"
    },
    {
      "Time_Start": 2114.46,
      "Time_End": 2120.3,
      "Text": " whenever we do it we perform a procedure restore procedure we actually upload a zip file to"
    },
    {
      "Time_Start": 2120.3,
      "Time_End": 2126.2200000000003,
      "Text": " the server and the server basically unpacks it and loads an XML and configuration files from"
    },
    {
      "Time_Start": 2126.2200000000003,
      "Time_End": 2131.92,
      "Text": " this zip. Well we looked at the the softing server and found a few vulnerabilities"
    },
    {
      "Time_Start": 2131.92,
      "Time_End": 2137.88,
      "Text": " involving zip slip and prat traversal meaning we had the ability to basically write files"
    },
    {
      "Time_Start": 2137.88,
      "Time_End": 2143.8,
      "Text": " anywhere in the system whenever we invoke the procedure restore. And by uploading a shared"
    },
    {
      "Time_Start": 2143.8,
      "Time_End": 2149.6800000000003,
      "Text": " object uh that will execute code whenever it is loaded we are able to execute code on the"
    },
    {
      "Time_Start": 2149.6800000000003,
      "Time_End": 2154.46,
      "Text": " server allowing us to basically control it and having remote code execution on both"
    },
    {
      "Time_Start": 2154.46,
      "Time_End": 2161.08,
      "Text": " servers. Now these explotations started from the OPC UA vector meaning we had the ability"
    },
    {
      "Time_Start": 2161.08,
      "Time_End": 2165.92,
      "Text": " to execute code in the context of the browser however by chaining it with a few different"
    },
    {
      "Time_Start": 2165.92,
      "Time_End": 2171.2599999999998,
      "Text": " vulnerabilities we are able to achieve full on remote code execution on the client uh"
    },
    {
      "Time_Start": 2171.2599999999998,
      "Time_End": 2176.7599999999998,
      "Text": " allowing us basically to exploit it as well uh and achieve fully on pledged remote code"
    },
    {
      "Time_Start": 2176.7599999999998,
      "Time_End": 2181.7599999999998,
      "Text": " execution. Now everything we showed you is pretty cool and pretty extensive uh however"
    },
    {
      "Time_Start": 2184.5,
      "Time_End": 2190.08,
      "Text": " during the uh development of this entire process and research we developed our own"
    },
    {
      "Time_Start": 2190.08,
      "Time_End": 2194.72,
      "Text": " exploitation framework that we're going to share with you today. And like Sharon showed"
    },
    {
      "Time_Start": 2194.72,
      "Time_End": 2199.22,
      "Text": " you we researched dozens and dozens of different protocols and we actually discovered over"
    },
    {
      "Time_Start": 2199.22,
      "Time_End": 2205.7599999999998,
      "Text": " 50 unique CVs I think we are getting closer to 60 at the moment and developed a lot of the"
    },
    {
      "Time_Start": 2205.7599999999998,
      "Time_End": 2211.66,
      "Text": " what we call attack concept meaning one vulnerability, one kind of logic flaw that could"
    },
    {
      "Time_Start": 2211.66,
      "Time_End": 2216.7999999999997,
      "Text": " affect multiple different servers and multiple different products. That's why we created"
    },
    {
      "Time_Start": 2216.8,
      "Time_End": 2222.86,
      "Text": " our own OPC UA client and our own actually OPC UA exploitation framework that you can feel"
    },
    {
      "Time_Start": 2222.86,
      "Time_End": 2229.1000000000004,
      "Text": " free to clone it and scan it and do it for your own. Uh this framework is pretty extensive"
    },
    {
      "Time_Start": 2229.1000000000004,
      "Time_End": 2233.98,
      "Text": " and contains the entire knowledge base that we researched in the last few years and we hope"
    },
    {
      "Time_Start": 2233.98,
      "Time_End": 2239.78,
      "Text": " it will be useful and basically it is released as an open source project. Uh so feel free to"
    },
    {
      "Time_Start": 2239.78,
      "Time_End": 2244.78,
      "Text": " download it from our github account. Um in this framework you'll find the full on uh"
    },
    {
      "Time_Start": 2247.32,
      "Time_End": 2253.5600000000004,
      "Text": " POC script uh and uh exploitation techniques of all the different attacking scenarios we"
    },
    {
      "Time_Start": 2253.5600000000004,
      "Time_End": 2259.44,
      "Text": " developed like the chunk flooding that Sharon showed you, like uh the capware vulnerability"
    },
    {
      "Time_Start": 2259.44,
      "Time_End": 2266.44,
      "Text": " in the UTF-8 uh uh beta location and bed string concatenation and of course dozens and"
    },
    {
      "Time_Start": 2266.44,
      "Time_End": 2272.1800000000003,
      "Text": " dozens of other vulnerabilities we uncovered over the last 3 years. Uh so feel free to use"
    },
    {
      "Time_Start": 2272.2,
      "Time_End": 2279.14,
      "Text": " it and feel free to share it and uh use it in your own uh servers, environments, etc. So"
    },
    {
      "Time_Start": 2279.14,
      "Time_End": 2284.64,
      "Text": " let's summarize everything up and see the entire uh process we've done. So like Sharon told"
    },
    {
      "Time_Start": 2284.64,
      "Time_End": 2289.98,
      "Text": " you, during the last 3 years we researched Pwn2Own heavily uh we researched OPC UA heavily"
    },
    {
      "Time_Start": 2289.98,
      "Time_End": 2294.8199999999997,
      "Text": " mainly as the Pwn2Own contest however also on our own looking at different products,"
    },
    {
      "Time_Start": 2294.8199999999997,
      "Time_End": 2300.66,
      "Text": " different OPC UA implementation, protocol stacks, code bases, etc. We found and discovered"
    },
    {
      "Time_Start": 2300.68,
      "Time_End": 2306.58,
      "Text": " over 50 vulnerabilities, exosphism protocol stacks that affects dozens and dozens and"
    },
    {
      "Time_Start": 2306.58,
      "Time_End": 2311.08,
      "Text": " actually probably thousands of different OT environments and we work closely with the"
    },
    {
      "Time_Start": 2311.08,
      "Time_End": 2316.3599999999997,
      "Text": " vendors to fix every vulnerability and they disclose it to them and make sure that the"
    },
    {
      "Time_Start": 2316.3599999999997,
      "Time_End": 2321.46,
      "Text": " environments are more safe and more secure. We actually gave them early access to our"
    },
    {
      "Time_Start": 2321.46,
      "Time_End": 2327.3999999999996,
      "Text": " OPC UA exploitation framework and we can uh basically giving the OPC UA vendors and"
    },
    {
      "Time_Start": 2327.44,
      "Time_End": 2331.44,
      "Text": " developers the ability to test their products against the different attack techniques we"
    },
    {
      "Time_Start": 2331.44,
      "Time_End": 2337.32,
      "Text": " developed and look for bugs in their own code base and we are happy to say that a lot of them"
    },
    {
      "Time_Start": 2337.32,
      "Time_End": 2342.76,
      "Text": " used it and actually found new vulnerabilities using our own OPC UA exploitation framework."
    },
    {
      "Time_Start": 2342.76,
      "Time_End": 2348.8,
      "Text": " So please do use it as well in your OT environments, in your products, etc. Use it, add to"
    },
    {
      "Time_Start": 2348.8,
      "Time_End": 2354.2000000000003,
      "Text": " it, it is open source uh so of course you can contribute to it as well. And thank you very"
    },
    {
      "Time_Start": 2354.2000000000003,
      "Time_End": 2358.2000000000003,
      "Text": " much for our talk, for attending our talk on OPC UA. Thank you very much."
    }
  ]
}