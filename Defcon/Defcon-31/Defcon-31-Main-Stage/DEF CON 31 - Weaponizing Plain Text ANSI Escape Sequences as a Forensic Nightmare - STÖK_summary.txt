**Introduction**
- Speaker: Fredrik Alexander, aka St√∂ck
- Topic: Weaponizing plain text ANSI escape sequences as a forensic nightmare
- **Table of Contents**: Not provided, 281 slides to be covered

**ANSI Escape Sequences**
- A **vulnerability class** (CB150) that allows **arbitrary code injection**
- Can be used to **inject, vandalize, and weaponize log files** of modern applications
- **Commonly used** by developers, security teams, and incident responders for **maintaining application reliability, performance, and security**
- **CVE** (Common Vulnerabilities and Exposures) reference: arbitrary code injection in Rack, Lint, and Common Logger components

**Log Files**
- **Important** for creating a **good timeline** during incident response
- Can be **compromised** by injecting **malicious content**
- **Trustworthiness** of log files is crucial for effective incident response

**Example Scenario**
- Incident response lead of a global logistics corporation receives a call about a breach
- Needs to collect and analyze log files to create a timeline of the incident
- Uses a **big data application** to export and save log data locally
- Upon reviewing the log file, encounters an **advertisement** for a data recovery service
- **ANSI escape sequences** are the cause of this unexpected content

**Terminals**
- Variety of terminals used today, including built-in, third-party, and older versions
- e.g., VS Code, Docker, iTerm, Kitty, Windows Terminal, Terminal.app, GNOME, VTE, Xterm
- Each terminal has its own set of features and functionalities

**Control Sequences Standard**
- Standard for Xterm, covers **cursor movement, key remapping, printing, UI building, etc.**
- **CSI** (Control Sequence Introducer) tells the terminal to execute a command
- **Parameters** specify the action to be taken, e.g., changing text color
- **ST** (String Terminator) or **bell character** ends the sequence to reset the terminal

**Demonstration**
- Using **Vim** or **Nano** to view log files will display **escape sequences** without rendering them
- **Browsers** interpret escape sequences and display them as **Unicode**
- Tools like **cat**, **grep**, **tail**, and **curl** will **render** the escape sequences

**Log Injection**
- Injecting **ANSI escape sequences** into log files can have various impacts
- **Docker** is a good test bench due to its extensive use of logging and terminal rendering
- URL-encoded escape sequences can be injected into Docker logs to change text color
- **Newline** characters are important for creating false log entries

**Impact of Log Injection**
- Can **change terminal titles**, potentially tricking users into executing commands
- **OSC 2** sequence allows changing the terminal title and reading it back to the command line
- **OSC 8** sequence can create clickable links in the terminal, potentially leading to command execution
- **OSC 52** sequence enables clipboard functionality, allowing command injection via paste

**Polyglot Injection**
- Combining multiple injection techniques to target different terminals and shells
- Using **base64 encoding** to inject commands that run in different environments
- Exfiltrating data by including JavaScript code in the injected content

**Hiding Tracks**
- Techniques to hide or obscure injected content:
  - **Cursor movement**
  - **Clearing the screen** or **scroll buffer**
  - **Resetting the screen** to empty the log file
  - **Printer prompt** to continuously send output to a non-existent printer buffer

**DoS and Bricking**
- Techniques to cause Denial of Service (DoS) or brick terminals:
  - **Mouse tracking** functionality to execute commands when the user clicks
  - **Repeating graphic characters** to fill the terminal screen with output
  - **Device Control Request String** to escape out of running processes and execute commands

**Responsibility and Prevention**
- Ongoing debate about responsibility: developers, terminal creators, or users
- **Sanitizing input** and **escaping output** are crucial to prevent issues
- Black box testing for log injection vulnerabilities: look for **400** and **500 errors**
- **Nuclei template** can be used to scan for potential vulnerabilities

**Conclusion**
- The old is the new new: exploring old vulnerabilities with new techniques
- Encouraging the creation of a community to further explore and secure ANSI escape sequences
- **Log files**: Do you still trust them?