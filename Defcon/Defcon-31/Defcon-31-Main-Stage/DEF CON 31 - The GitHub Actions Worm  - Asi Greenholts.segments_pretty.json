{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 12.92,
      "Text": "This text was transcribed using whisper model: large-v2\n\n OK, let's start. Hi, everybody. Today we're going to talk about, OK, maybe I won't use"
    },
    {
      "Time_Start": 12.92,
      "Time_End": 20.48,
      "Text": " it. OK. Today we're going to talk about some GitHub Action worms. So this talk is going"
    },
    {
      "Time_Start": 20.48,
      "Time_End": 27.96,
      "Text": " to be very technical. Can you hear me good in the back? Yeah? Woo! Let's go. I try to"
    },
    {
      "Time_Start": 27.96,
      "Time_End": 32.4,
      "Text": " not lose you. If you get lost, you'll have something that will show you the progress"
    },
    {
      "Time_Start": 32.4,
      "Time_End": 38.84,
      "Text": " bar on the bottom of the slides. And this is basically a result of research I did. It"
    },
    {
      "Time_Start": 38.84,
      "Time_End": 45.16,
      "Text": " took about three months. My basic goal was to find a new way to attack CCD pipelines."
    },
    {
      "Time_Start": 45.16,
      "Time_End": 49.760000000000005,
      "Text": " And this is what I came up with. This is a new way which will understand slowly the real"
    },
    {
      "Time_Start": 49.760000000000005,
      "Time_End": 56.16,
      "Text": " impact and the scale of it. So a bit about myself. My name is Asif Reynolds. I'm a security"
    },
    {
      "Time_Start": 56.160000000000004,
      "Time_End": 61.28,
      "Text": " researcher currently at Palo Alto Networks. I have around eight years of experience in"
    },
    {
      "Time_Start": 61.28,
      "Time_End": 67.52000000000001,
      "Text": " cybersecurity. I've done incident response, SOC, security architecture, and, of course,"
    },
    {
      "Time_Start": 67.52000000000001,
      "Time_End": 71.36,
      "Text": " application security. For the last two years, I've been working for CIDR security, which"
    },
    {
      "Time_Start": 71.36,
      "Time_End": 78.64,
      "Text": " was acquired not too long ago by Palo Alto Networks. And I research CICD security and"
    },
    {
      "Time_Start": 78.64,
      "Time_End": 85.04,
      "Text": " all the things that revolve around it. So let's talk about some notable projects I've"
    },
    {
      "Time_Start": 85.04,
      "Time_End": 89.96000000000001,
      "Text": " been a part of. So the first one is the Top 10 CICD Risks. This is a project we released"
    },
    {
      "Time_Start": 89.96000000000001,
      "Time_End": 95.92,
      "Text": " about a year ago, and it was embraced by OWASP. You can find it on GitHub, also on OWASP's"
    },
    {
      "Time_Start": 95.92,
      "Time_End": 102.80000000000001,
      "Text": " website. The second one is the CICD Go. This is a deliberately vulnerable CICD environment,"
    },
    {
      "Time_Start": 102.80000000000001,
      "Time_End": 108.12,
      "Text": " basically a CTF, in which you can hack a real CICD environment that's being installed on"
    },
    {
      "Time_Start": 108.12,
      "Time_End": 112.76,
      "Text": " your local computer. You can find it on GitHub, download it, play with it, and learn how to"
    },
    {
      "Time_Start": 113.36,
      "Time_End": 120.04,
      "Text": " hack CICD pipelines. Now, before we begin, let's do a quick overview of what GitHub Actions"
    },
    {
      "Time_Start": 120.04,
      "Time_End": 124.80000000000001,
      "Text": " is. So how many of you are using GitHub Actions, by a raise of hand? Okay, that's a lot."
    },
    {
      "Time_Start": 124.80000000000001,
      "Time_End": 130.68,
      "Text": " Nice. So I'll do this quick, and we'll just get everybody to the same page. So GitHub"
    },
    {
      "Time_Start": 130.68,
      "Time_End": 135.84,
      "Text": " Actions is a continuous integration and continuous delivery platform, CICD, that allows you"
    },
    {
      "Time_Start": 135.84,
      "Time_End": 141.20000000000002,
      "Text": " to automate your build, test, and deployment pipelines. You can see on the left side, there"
    },
    {
      "Time_Start": 141.20000000000002,
      "Time_End": 146.36,
      "Text": " are events that can trigger pipelines, such as push, pull request events, and so on. And"
    },
    {
      "Time_Start": 146.36,
      "Time_End": 151.00000000000003,
      "Text": " pipelines in GitHub Actions are called workflows. Workflows can contain multiple number of"
    },
    {
      "Time_Start": 151.00000000000003,
      "Time_End": 157.28000000000003,
      "Text": " jobs, as you see. Each job is running on a different runner, and on each job can contain"
    },
    {
      "Time_Start": 157.28000000000003,
      "Time_End": 163.20000000000002,
      "Text": " multiple number of steps. Each step can contain a bash command or an action. What is an"
    },
    {
      "Time_Start": 163.20000000000002,
      "Time_End": 169.48000000000002,
      "Text": " action? An action is basically a code package that allows you to use someone else's, let's"
    },
    {
      "Time_Start": 169.48,
      "Time_End": 175.0,
      "Text": " say, library to execute some stuff in your pipeline. For example, you want to do something"
    },
    {
      "Time_Start": 175.0,
      "Time_End": 179.12,
      "Text": " that probably everyone does, like checking out the code from the repository to the runner"
    },
    {
      "Time_Start": 179.12,
      "Time_End": 183.76,
      "Text": " itself. You don't want to develop it yourself. Someone else probably already developed it."
    },
    {
      "Time_Start": 183.76,
      "Time_End": 188.72,
      "Text": " So you can use an action that checks out your code from the repository to the runner"
    },
    {
      "Time_Start": 188.72,
      "Time_End": 196.28,
      "Text": " itself. Now, let's see an example of a workflow, a simple one. So let's start with the first"
    },
    {
      "Time_Start": 196.28,
      "Time_End": 200.84,
      "Text": " part. So we have the on keyword, which is the triggers of the workflow. Here it's triggered"
    },
    {
      "Time_Start": 200.84,
      "Time_End": 206.88,
      "Text": " by a workflow dispatch, which is a manual trigger, push to the main branch, and pull"
    },
    {
      "Time_Start": 206.88,
      "Time_End": 211.88,
      "Text": " requests. Pretty easy. Next, we have the jobs. We have only one job here. It's called"
    },
    {
      "Time_Start": 211.88,
      "Time_End": 218.08,
      "Text": " check links, and it's running on an Ubuntu virtual machine. Next, we have the steps. So"
    },
    {
      "Time_Start": 218.08,
      "Time_End": 222.48,
      "Text": " here we have the first step that checks out the code, and it uses an action. The name of"
    },
    {
      "Time_Start": 222.48000000000002,
      "Time_End": 228.96,
      "Text": " the action is actions slash checkout at v3. Now, what v3 means, it's the version of the"
    },
    {
      "Time_Start": 228.96,
      "Time_End": 234.12,
      "Text": " action, and the actions slash checkout is the organization slash repository. So actions"
    },
    {
      "Time_Start": 234.12,
      "Time_End": 238.76000000000002,
      "Text": " are contained in a GitHub repository, and this is how you reference them and how you"
    },
    {
      "Time_Start": 238.76000000000002,
      "Time_End": 243.8,
      "Text": " call them. This specific action was written by GitHub themselves. The actions organization"
    },
    {
      "Time_Start": 243.8,
      "Time_End": 251.52,
      "Text": " is an organization that's maintained by GitHub. Next, we have the setup node step, which uses"
    },
    {
      "Time_Start": 251.52,
      "Time_End": 257.24,
      "Text": " a setup node action, which also receives two inputs, as you can see here. Actions can"
    },
    {
      "Time_Start": 257.24,
      "Time_End": 264.96000000000004,
      "Text": " also return outputs, which is nice. Simple stuff. And next, we have a bash command that's"
    },
    {
      "Time_Start": 264.96000000000004,
      "Time_End": 271.64,
      "Text": " using to do NPMCI, install the dependencies of the package here. And after that, we see a"
    },
    {
      "Time_Start": 271.64,
      "Time_End": 276.28000000000003,
      "Text": " third-party package. This is a package that was written by someone on the internet and"
    },
    {
      "Time_Start": 276.28000000000003,
      "Time_End": 281.32,
      "Text": " published as a public repository, and we're using it here. You can see at the end, there's"
    },
    {
      "Time_Start": 281.32,
      "Time_End": 286.44,
      "Text": " a different reference type. This reference is a hash commit of the repository. We'll"
    },
    {
      "Time_Start": 286.44,
      "Time_End": 291.48,
      "Text": " go later exactly into what it means and how we can use it, but this is the basic idea"
    },
    {
      "Time_Start": 291.48,
      "Time_End": 297.92,
      "Text": " of workflows. And here you have a screenshot of the GitHub marketplace and specifically"
    },
    {
      "Time_Start": 297.92,
      "Time_End": 302.96,
      "Text": " the actions. When I took this picture not too long ago, there was around 19,000 actions"
    },
    {
      "Time_Start": 302.96,
      "Time_End": 308.03999999999996,
      "Text": " on the marketplace. The vast majority of them is actions written by the community. Some"
    },
    {
      "Time_Start": 308.08000000000004,
      "Time_End": 312.6,
      "Text": " of them are written by GitHub, some of them are written by vendors, but the majority is"
    },
    {
      "Time_Start": 312.6,
      "Time_End": 319.32,
      "Text": " written by kind people on the internet. So let's talk about the worm itself now, finally."
    },
    {
      "Time_Start": 319.32,
      "Time_End": 324.12,
      "Text": " So in order to understand how to build the GitHub Actions worm, we need to understand a few"
    },
    {
      "Time_Start": 324.12,
      "Time_End": 330.08000000000004,
      "Text": " parts of the puzzle, which we will build during this presentation. And the different parts"
    },
    {
      "Time_Start": 330.08000000000004,
      "Time_End": 337.08000000000004,
      "Text": " are initial attack vector, action dependencies, action to infect actions, and finding attack"
    },
    {
      "Time_Start": 337.52,
      "Time_End": 341.71999999999997,
      "Text": " graphs at scale. Now, if this doesn't mean anything to you right now, you'll understand it"
    },
    {
      "Time_Start": 341.71999999999997,
      "Time_End": 346.47999999999996,
      "Text": " in a few minutes, but we'll go through each one of them, basically completing the puzzle,"
    },
    {
      "Time_Start": 346.47999999999996,
      "Time_End": 350.47999999999996,
      "Text": " and when the puzzle will be finished, we'll be able to show a demo of the worm itself"
    },
    {
      "Time_Start": 350.47999999999996,
      "Time_End": 357.2,
      "Text": " attacking repositories. So let's start with initial attack vectors. So most of the CICD"
    },
    {
      "Time_Start": 357.2,
      "Time_End": 362.4,
      "Text": " attacks that happened up until now were done kind of in a similar fashion. Basically, attackers"
    },
    {
      "Time_Start": 362.40000000000003,
      "Time_End": 367.08000000000004,
      "Text": " compromised a repository or a package or some kind of a project, and they infected it"
    },
    {
      "Time_Start": 367.08000000000004,
      "Time_End": 374.76000000000005,
      "Text": " with code that is used to directly infect the direct dependence of the package. Let's show"
    },
    {
      "Time_Start": 374.76000000000005,
      "Time_End": 379.92,
      "Text": " some examples. So one of them will be to exfiltrate environment variables when the package"
    },
    {
      "Time_Start": 379.92,
      "Time_End": 384.48,
      "Text": " is being run, to steal maybe secrets from the pipeline execution or from production"
    },
    {
      "Time_Start": 384.48,
      "Time_End": 390.16,
      "Text": " environments. Second thing may be to run a reverse shell. When this package is being run"
    },
    {
      "Time_Start": 390.16,
      "Time_End": 393.72,
      "Text": " in production, it will start a reverse shell, allowing attackers access to production"
    },
    {
      "Time_Start": 393.72,
      "Time_End": 398.6,
      "Text": " environments, but when they compromise a package, they basically only affect the direct"
    },
    {
      "Time_Start": 398.6,
      "Time_End": 405.84000000000003,
      "Text": " dependence. And let's see a few examples of how to compromise GitHub repositories"
    },
    {
      "Time_Start": 405.84000000000003,
      "Time_End": 411.40000000000003,
      "Text": " specifically with some known attack vectors. So we're going to talk about three attack"
    },
    {
      "Time_Start": 411.40000000000003,
      "Time_End": 417.96000000000004,
      "Text": " vectors. I've implemented scanning automatically for those attacks to look for vulnerable"
    },
    {
      "Time_Start": 418.00000000000006,
      "Time_End": 422.16,
      "Text": " repositories that are vulnerable to those attacks in my research. So this is the reason they're"
    },
    {
      "Time_Start": 422.16,
      "Time_End": 426.48,
      "Text": " only relevant. They're the only ones relevant for this presentation, but of course there are"
    },
    {
      "Time_Start": 426.48,
      "Time_End": 431.20000000000005,
      "Text": " more. So let's go through them. The first one is reprojecting. What is reprojecting? On the"
    },
    {
      "Time_Start": 431.20000000000005,
      "Time_End": 435.56000000000006,
      "Text": " left, we have a repository that's using the action in the middle. The action is part of an"
    },
    {
      "Time_Start": 435.56000000000006,
      "Time_End": 441.12000000000006,
      "Text": " organization, and let's say one day the maintainer wakes up and decides to move the action to a"
    },
    {
      "Time_Start": 441.12,
      "Time_End": 446.12,
      "Text": " new organization. Nice animations. So what happens next? The repository makes a request to the"
    },
    {
      "Time_Start": 448.96,
      "Time_End": 454.56,
      "Text": " action, and GitHub automatically redirects it to the new repository. That's great, right? But"
    },
    {
      "Time_Start": 454.56,
      "Time_End": 460.4,
      "Text": " what happens when the maintainer decides to delete the old organization? Well, when it doesn't"
    },
    {
      "Time_Start": 460.4,
      "Time_End": 465.44,
      "Text": " exist anymore, an attacker can come and basically register the same organization name and"
    },
    {
      "Time_Start": 465.44,
      "Time_End": 470.88,
      "Text": " same old repository name. When another request is being made by the repository, it will cancel"
    },
    {
      "Time_Start": 470.88,
      "Time_End": 476.4,
      "Text": " the redirection, which will actually compromise the repository that is using the now"
    },
    {
      "Time_Start": 476.4,
      "Time_End": 481.48,
      "Text": " malicious action instead of the original one which was moved or maybe deleted. Now, GitHub"
    },
    {
      "Time_Start": 481.48,
      "Time_End": 486.15999999999997,
      "Text": " knows of this issue, and they've made a mitigation. They retired the namespaces of projects"
    },
    {
      "Time_Start": 486.15999999999997,
      "Time_End": 492.76,
      "Text": " that had more than 100 clones in the week leading up to the account's deletion or renaming,"
    },
    {
      "Time_Start": 492.76,
      "Time_End": 497.44,
      "Text": " but still, it's not foolproof. It's not still tight. There are still cases which repositories"
    },
    {
      "Time_Start": 497.44,
      "Time_End": 501.52,
      "Text": " are re-projectable. We won't talk about why, but I'll show you some real examples of"
    },
    {
      "Time_Start": 501.52,
      "Time_End": 506.92,
      "Text": " repositories that are re-project, but it's still possible. So just know this for now, and you"
    },
    {
      "Time_Start": 506.92,
      "Time_End": 512.0,
      "Text": " can look it up later. The next one is NPM email hijacking. So here we want to basically"
    },
    {
      "Time_Start": 512.0,
      "Time_End": 517.68,
      "Text": " hijack an NPM package. How can we do it? So we pass the package log JSON over a repository,"
    },
    {
      "Time_Start": 517.68,
      "Time_End": 523.48,
      "Text": " getting all the packages that the target repository that we want to compromise is using. For"
    },
    {
      "Time_Start": 523.48,
      "Time_End": 529.32,
      "Text": " each package, we'll send a request to the NPM registry to get the manifest of the package."
    },
    {
      "Time_Start": 529.32,
      "Time_End": 534.84,
      "Text": " Inside the manifest, we find a few interesting things, the maintainers and their emails. For"
    },
    {
      "Time_Start": 534.84,
      "Time_End": 540.24,
      "Text": " each email, we can send a request to check if the domain of the email is available for"
    },
    {
      "Time_Start": 540.24,
      "Time_End": 546.0,
      "Text": " purchasing. Basically, the maintainer created an email for themselves, and they forgot to"
    },
    {
      "Time_Start": 546.0,
      "Time_End": 551.24,
      "Text": " renew the domain, or the domain got expired or deleted or something like that. And if it's"
    },
    {
      "Time_Start": 551.24,
      "Time_End": 556.6,
      "Text": " possible to buy the domain, we buy the domain. We can then set up a mail server, redirect"
    },
    {
      "Time_Start": 556.6,
      "Time_End": 561.28,
      "Text": " the emails to our inbox, and reset the maintainer's password. Now, this is only possible on"
    },
    {
      "Time_Start": 561.28,
      "Time_End": 565.48,
      "Text": " accounts that don't have two-factor authentication, but still, a lot of accounts don't have"
    },
    {
      "Time_Start": 565.48,
      "Time_End": 571.6,
      "Text": " two-factor authentication, and of course, I'll also show you a real example later. Now, NPM"
    },
    {
      "Time_Start": 571.6,
      "Time_End": 578.88,
      "Text": " also knows of this issue, and this is a snapshot from their documentation, and they're"
    },
    {
      "Time_Start": 578.88,
      "Time_End": 585.48,
      "Text": " saying that they periodically check if packages have expired domains, and if so, they"
    },
    {
      "Time_Start": 585.48,
      "Time_End": 590.8,
      "Text": " disable the account from doing password resets. The issue is that today, there are on NPM"
    },
    {
      "Time_Start": 590.8,
      "Time_End": 595.84,
      "Text": " around 2.5 million packages, probably huge numbers of different domains, and it's pretty"
    },
    {
      "Time_Start": 595.84,
      "Time_End": 600.08,
      "Text": " hard to scan them daily or even weekly. I don't know how long they're doing it for, but"
    },
    {
      "Time_Start": 600.08,
      "Time_End": 603.96,
      "Text": " let's say you're an attacker, and you want to target specific packages, and you scan them"
    },
    {
      "Time_Start": 604.12,
      "Time_End": 609.8000000000001,
      "Text": " even hourly, if you have a few packages, and you check if the domain is expired or"
    },
    {
      "Time_Start": 609.8000000000001,
      "Time_End": 614.5600000000001,
      "Text": " something like that, and you can buy them before NPM makes their checks, you can still"
    },
    {
      "Time_Start": 614.5600000000001,
      "Time_End": 619.9200000000001,
      "Text": " take over the package and do this attack, of course, if they don't have two-factor"
    },
    {
      "Time_Start": 619.9200000000001,
      "Time_End": 624.8000000000001,
      "Text": " authentication. And the last one is command injection. So here we have a code snippet"
    },
    {
      "Time_Start": 624.8000000000001,
      "Time_End": 630.84,
      "Text": " from GitHub Action. You can see here a simple configuration of the Git client, and then"
    },
    {
      "Time_Start": 630.88,
      "Time_End": 635.64,
      "Text": " pushing some code to the repository. Now, in the line with the red box, you can see that"
    },
    {
      "Time_Start": 635.64,
      "Time_End": 640.44,
      "Text": " it's using something that's called context. So as I told you, GitHub Actions, GitHub"
    },
    {
      "Time_Start": 640.44,
      "Time_End": 645.12,
      "Text": " workflows, when they're triggered, they're triggered by an event. The workflow itself"
    },
    {
      "Time_Start": 645.12,
      "Time_End": 650.2800000000001,
      "Text": " receives the event in the type of a context, and it can access some fields on the events"
    },
    {
      "Time_Start": 650.2800000000001,
      "Time_End": 654.6,
      "Text": " and get data about what triggered the event itself. So for example, one of the events"
    },
    {
      "Time_Start": 654.6,
      "Time_End": 659.96,
      "Text": " that are available is the author email of the head commit. Now, who controls the author"
    },
    {
      "Time_Start": 659.96,
      "Time_End": 665.1600000000001,
      "Text": " email of the head commit? Whoever did the commit, and not the maintainers of the repository."
    },
    {
      "Time_Start": 665.1600000000001,
      "Time_End": 669.08,
      "Text": " So they can write anything they want there. One of the funny things they can write in"
    },
    {
      "Time_Start": 669.08,
      "Time_End": 674.12,
      "Text": " the author email of the Git commit is this string. What is this nice string? This is"
    },
    {
      "Time_Start": 674.12,
      "Time_End": 679.48,
      "Text": " basically command injection. We write an email. We do like a small back tick before and"
    },
    {
      "Time_Start": 679.48,
      "Time_End": 686.4000000000001,
      "Text": " after the code command. We download a malicious bash script and execute it inside the pipeline."
    },
    {
      "Time_Start": 686.4399999999999,
      "Time_End": 691.4,
      "Text": " So you simply do that on your computer, push the code with this nice email, and it will"
    },
    {
      "Time_Start": 691.4,
      "Time_End": 696.16,
      "Text": " cause this code snippet here to execute your code, download the bash script, and execute"
    },
    {
      "Time_Start": 696.16,
      "Time_End": 701.28,
      "Text": " malicious stuff, which is nice. Now, of course, there are more attacks. As I've told you,"
    },
    {
      "Time_Start": 701.28,
      "Time_End": 707.72,
      "Text": " some of them are dependency confusion, public PPE, and just creating a malicious pull request,"
    },
    {
      "Time_Start": 707.72,
      "Time_End": 712.8,
      "Text": " hoping the maintainers will merge it. Now, you think maybe this is crazy, but actually"
    },
    {
      "Time_Start": 712.8000000000001,
      "Time_End": 717.36,
      "Text": " someone did it to the Linux project about a year or two ago. They didn't like it so much,"
    },
    {
      "Time_Start": 717.36,
      "Time_End": 722.44,
      "Text": " but they actually successfully committed malicious code with a vulnerability to the"
    },
    {
      "Time_Start": 722.44,
      "Time_End": 727.5600000000001,
      "Text": " Linux project. And, of course, there are more. I won't get into what each of those attacks"
    },
    {
      "Time_Start": 727.5600000000001,
      "Time_End": 732.8800000000001,
      "Text": " are. You can look it up on Google, but just know there are more possible ways. Now, how can"
    },
    {
      "Time_Start": 732.8800000000001,
      "Time_End": 737.72,
      "Text": " we further our attack? We just understood how to compromise a single repository. Of course,"
    },
    {
      "Time_Start": 737.72,
      "Time_End": 741.8800000000001,
      "Text": " here we're going to talk about worms. We want to compromise infinite repositories. How can"
    },
    {
      "Time_Start": 741.88,
      "Time_End": 747.96,
      "Text": " we do that? So next thing we'll talk about is action dependencies. Now, there are a few"
    },
    {
      "Time_Start": 747.96,
      "Time_End": 752.2,
      "Text": " types of actions, three types to be exact. The first one is a Docker action. You can"
    },
    {
      "Time_Start": 752.2,
      "Time_End": 757.08,
      "Text": " see here it's using a Docker file. You can also use a Docker image to define what the"
    },
    {
      "Time_Start": 757.08,
      "Time_End": 761.12,
      "Text": " action does. Now, what you're seeing here is the action YAML file. This is a file that"
    },
    {
      "Time_Start": 761.12,
      "Time_End": 766.44,
      "Text": " sits at the root of the repository that defines what the action actually does. So this is"
    },
    {
      "Time_Start": 766.44,
      "Time_End": 772.2800000000001,
      "Text": " like the main function of the action. So this is simple. Next, we have a JavaScript"
    },
    {
      "Time_Start": 772.2800000000001,
      "Time_End": 776.9200000000001,
      "Text": " action. You can write plain JavaScript, and this is also relevant for the NPM email hijacking"
    },
    {
      "Time_Start": 776.9200000000001,
      "Time_End": 781.72,
      "Text": " attack because if an action uses JavaScript, it has a dependency that we can hijack. We"
    },
    {
      "Time_Start": 781.72,
      "Time_End": 788.08,
      "Text": " can hijack the action. And the third one, which is important for the dependency part,"
    },
    {
      "Time_Start": 788.08,
      "Time_End": 793.5200000000001,
      "Text": " is a composite action. Now, composite actions can use other actions as part of their logic,"
    },
    {
      "Time_Start": 793.64,
      "Time_End": 799.4,
      "Text": " and they can also execute bash. So this is the first type of dependencies between action."
    },
    {
      "Time_Start": 799.4,
      "Time_End": 803.6,
      "Text": " A composite action can actually depend on other action and just execute it when it's"
    },
    {
      "Time_Start": 803.6,
      "Time_End": 808.76,
      "Text": " been executed. Now, what is the second way actions are depending on each other? Actions"
    },
    {
      "Time_Start": 808.76,
      "Time_End": 813.88,
      "Text": " are stored on GitHub. They obviously need their own CACD. And most of the times, what"
    },
    {
      "Time_Start": 813.88,
      "Time_End": 819.48,
      "Text": " CACD platforms do they use? GitHub Actions, of course. So here's an example of a GitHub"
    },
    {
      "Time_Start": 819.5600000000001,
      "Time_End": 826.5600000000001,
      "Text": " workflow of an action. You can see that it uses other actions. Well, this is a dependency"
    },
    {
      "Time_Start": 826.5600000000001,
      "Time_End": 830.8000000000001,
      "Text": " not in a similar fashion that we know like code libraries. This is kind of an implicit"
    },
    {
      "Time_Start": 830.8000000000001,
      "Time_End": 837.8000000000001,
      "Text": " dependency. Now, the action that this workflow belongs to is depending on the actions that"
    },
    {
      "Time_Start": 837.8000000000001,
      "Time_End": 843.6800000000001,
      "Text": " are being run inside its workflow, but it's not part of the code itself. Now, as you saw"
    },
    {
      "Time_Start": 843.6800000000001,
      "Time_End": 849.24,
      "Text": " in the snippet that I've showed you of the command injection, maybe it has some permissions."
    },
    {
      "Time_Start": 849.44,
      "Time_End": 854.6800000000001,
      "Text": " Maybe we can, by compromising an action in the workflow, push malicious code to the repository."
    },
    {
      "Time_Start": 854.6800000000001,
      "Time_End": 859.48,
      "Text": " Maybe we'll see it. Maybe not. Maybe nothing will work. So this is the other way actions"
    },
    {
      "Time_Start": 859.48,
      "Time_End": 866.48,
      "Text": " are dependent on each other, using other actions in their CACD. Now, what we can do is basically"
    },
    {
      "Time_Start": 866.52,
      "Time_End": 872.5600000000001,
      "Text": " take those two files, pass them, and build a huge tree on Neo4j of action dependencies."
    },
    {
      "Time_Start": 872.5600000000001,
      "Time_End": 877.64,
      "Text": " And this is exactly what I did, and this is how I do art. I don't know how to paint, so"
    },
    {
      "Time_Start": 877.72,
      "Time_End": 883.84,
      "Text": " this is my art. I create flowers of dependencies using GitHub Actions. I promise you this is"
    },
    {
      "Time_Start": 883.84,
      "Time_End": 890.64,
      "Text": " a random query of the database. I didn't make it by myself. So what we're seeing here are"
    },
    {
      "Time_Start": 890.64,
      "Time_End": 896.1999999999999,
      "Text": " action dependencies. We can see a repository with a purple node. Now, we pass the files"
    },
    {
      "Time_Start": 896.1999999999999,
      "Time_End": 902.08,
      "Text": " and we can see all the action usages. Each orange node of an action usage is an action"
    },
    {
      "Time_Start": 902.08,
      "Time_End": 906.28,
      "Text": " which comes from a repository. So we have a purple node that's connected to an action"
    },
    {
      "Time_Start": 906.48,
      "Time_End": 911.4,
      "Text": " usage node, which is connected to the repository of the action being used, and so on. It goes"
    },
    {
      "Time_Start": 911.4,
      "Time_End": 918.04,
      "Text": " recursively, and you can see in this beautiful flower that we have all the actions on the"
    },
    {
      "Time_Start": 918.04,
      "Time_End": 924.24,
      "Text": " outer side of the flower that are dependent on the one in the middle, which is nice."
    },
    {
      "Time_Start": 924.24,
      "Time_End": 928.8,
      "Text": " Let's see the same graph in a different way. This is the same graph. Now, here we want"
    },
    {
      "Time_Start": 928.8,
      "Time_End": 934.12,
      "Text": " to target the repository on the left. How can we do that? Let's say we have some weak"
    },
    {
      "Time_Start": 934.12,
      "Time_End": 939.68,
      "Text": " link in the chain. Some action is using another action, which uses another action, and the"
    },
    {
      "Time_Start": 939.68,
      "Time_End": 945.5600000000001,
      "Text": " other action was created by someone random on the Internet. They probably made it. They"
    },
    {
      "Time_Start": 945.5600000000001,
      "Time_End": 951.4,
      "Text": " didn't make so much effort to secure it, so on. So we can maybe compromise it. And by"
    },
    {
      "Time_Start": 951.4,
      "Time_End": 956.2,
      "Text": " compromising that action, potentially we may be able to climb up the tree, infect all the"
    },
    {
      "Time_Start": 956.2,
      "Time_End": 962.6,
      "Text": " actions that are dependent on it, and reach our target. Now, how can we do the initial"
    },
    {
      "Time_Start": 962.64,
      "Time_End": 967.64,
      "Text": " infection of the weakest link? This is by the, you can see the line that is missing"
    },
    {
      "Time_Start": 967.64,
      "Time_End": 971.64,
      "Text": " there, but we can do it using one of the initial attack vectors that we talked about earlier."
    },
    {
      "Time_Start": 971.64,
      "Time_End": 976.52,
      "Text": " So we have a few parts of the puzzle. We know that we have the initial attack vector, and"
    },
    {
      "Time_Start": 976.52,
      "Time_End": 982.24,
      "Text": " now we need some kind of a way to infect actions and to jump from one action to another action."
    },
    {
      "Time_Start": 982.24,
      "Time_End": 989.0400000000001,
      "Text": " So let's see actually how to do it. So action to infect actions. We'll start with talking"
    },
    {
      "Time_Start": 989.08,
      "Time_End": 993.6800000000001,
      "Text": " about secrets in GitHub Actions. So here we have an example workflow that I'll use to"
    },
    {
      "Time_Start": 993.6800000000001,
      "Time_End": 999.6,
      "Text": " explain how secrets work. So we have the first job on the top that's using the first secret,"
    },
    {
      "Time_Start": 999.6,
      "Time_End": 1005.3600000000001,
      "Text": " as you can see, and the second job that uses the second secret on its second step. Now,"
    },
    {
      "Time_Start": 1005.3600000000001,
      "Time_End": 1010.2400000000001,
      "Text": " you can see some interesting bash code here in the red box. What this bash code does is"
    },
    {
      "Time_Start": 1010.2400000000001,
      "Time_End": 1017.2800000000001,
      "Text": " basically dump the memory of the runner and grab for secrets in its memory. Now, secrets"
    },
    {
      "Time_Start": 1017.28,
      "Time_End": 1022.8399999999999,
      "Text": " are stored in clear text in the memory of the runner. I know this thanks to research by a guy"
    },
    {
      "Time_Start": 1022.8399999999999,
      "Time_End": 1030.0,
      "Text": " that's mentioned here below, Karim Rahal. And what he described in his research is that the"
    },
    {
      "Time_Start": 1030.0,
      "Time_End": 1035.52,
      "Text": " job receives all the secrets that are being used inside the job even before it starts. So it"
    },
    {
      "Time_Start": 1035.52,
      "Time_End": 1039.8,
      "Text": " doesn't matter where we dump the secrets inside the job. We'll get all the secrets that are"
    },
    {
      "Time_Start": 1039.8,
      "Time_End": 1044.16,
      "Text": " available. So here we see an example that we're dumping the secrets even before it's being"
    },
    {
      "Time_Start": 1044.2,
      "Time_End": 1050.1200000000001,
      "Text": " used. And let's see how the secret dump will look like. So this is the decoded base 64 of the"
    },
    {
      "Time_Start": 1050.1200000000001,
      "Time_End": 1055.5800000000002,
      "Text": " dump. We see the second secret and its value. I'm a secret. And we also see a GitHub token."
    },
    {
      "Time_Start": 1055.5800000000002,
      "Time_End": 1060.5800000000002,
      "Text": " We'll get in a second into what GitHub token is. But so far we know that all secrets are"
    },
    {
      "Time_Start": 1060.5800000000002,
      "Time_End": 1066.0800000000002,
      "Text": " accessible to all steps in a job. We didn't see the first secret because it's on a different"
    },
    {
      "Time_Start": 1066.0800000000002,
      "Time_End": 1072.46,
      "Text": " job which runs on a different runner. We only saw the second secret. Another point worth"
    },
    {
      "Time_Start": 1072.46,
      "Time_End": 1076.54,
      "Text": " mentioning is that on self-hosted runners, if they're not configured correctly and they're"
    },
    {
      "Time_Start": 1076.54,
      "Time_End": 1081.6200000000001,
      "Text": " not destroyed after each execution of a workflow, we may be able to get secrets of past jobs"
    },
    {
      "Time_Start": 1081.6200000000001,
      "Time_End": 1088.08,
      "Text": " that were run on the same runner which is much cooler. And the GitHub token is accessible"
    },
    {
      "Time_Start": 1088.08,
      "Time_End": 1092.7,
      "Text": " although it wasn't even referenced in the workflow at all. So these are the two important"
    },
    {
      "Time_Start": 1092.7,
      "Time_End": 1099.2,
      "Text": " things we know. And what is the GitHub token? So in the start of each workflow, GitHub"
    },
    {
      "Time_Start": 1099.24,
      "Time_End": 1103.7,
      "Text": " generates a token for the workflow so the workflow can use it to authenticate to GitHub's"
    },
    {
      "Time_Start": 1103.7,
      "Time_End": 1108.28,
      "Text": " API and perform actions like pushing code to the repository, publishing comments on pull"
    },
    {
      "Time_Start": 1108.28,
      "Time_End": 1113.66,
      "Text": " requests, querying some data about the repository, basically identifying as the workflow"
    },
    {
      "Time_Start": 1113.66,
      "Time_End": 1118.66,
      "Text": " itself. Now to understand the next part, we'll get into how actions are being called. Everything"
    },
    {
      "Time_Start": 1121.98,
      "Time_End": 1128.66,
      "Text": " will just get to complete the picture in a few seconds. So there are three main ways to"
    },
    {
      "Time_Start": 1128.66,
      "Time_End": 1132.0800000000002,
      "Text": " reference actions. There are more ways but those are the ones that are relevant for this"
    },
    {
      "Time_Start": 1132.0800000000002,
      "Time_End": 1137.16,
      "Text": " presentation. We can reference an action using a hash commit. We can reference it using a"
    },
    {
      "Time_Start": 1137.16,
      "Time_End": 1142.8600000000001,
      "Text": " branch or a tag. So the GitHub actions runner will know which action it needs to fetch. Now"
    },
    {
      "Time_Start": 1142.8600000000001,
      "Time_End": 1148.78,
      "Text": " if we want to infect actions, we need to modify one of those references. Now modifying an"
    },
    {
      "Time_Start": 1148.78,
      "Time_End": 1154.16,
      "Text": " existing commit hash might be a bit difficult but we can create a new commit to an existing"
    },
    {
      "Time_Start": 1154.16,
      "Time_End": 1160.48,
      "Text": " branch and something else we can do is we can delete an existing tag, creating a new malicious"
    },
    {
      "Time_Start": 1160.48,
      "Time_End": 1166.28,
      "Text": " commit and creating the same tag name with a new malicious commit. Now let's see how it's"
    },
    {
      "Time_Start": 1166.28,
      "Time_End": 1172.8200000000002,
      "Text": " actually being done. Just a diagram. So here we have an action repository on the left which"
    },
    {
      "Time_Start": 1172.8200000000002,
      "Time_End": 1178.9,
      "Text": " uses GitHub actions as its CICD and it uses the compromised action on the right using the"
    },
    {
      "Time_Start": 1178.94,
      "Time_End": 1184.64,
      "Text": " main branch reference. Now we want to infect the main branch of the left action. How can we"
    },
    {
      "Time_Start": 1184.64,
      "Time_End": 1190.02,
      "Text": " do that? So when the job begins, of course as we said, the runner generates a GitHub token for"
    },
    {
      "Time_Start": 1190.02,
      "Time_End": 1196.3200000000002,
      "Text": " the job and also because we can dump secrets as I showed earlier, we may be able to use some"
    },
    {
      "Time_Start": 1196.3200000000002,
      "Time_End": 1200.8200000000002,
      "Text": " personal access tokens that are being used during the workflow. Maybe they also have some"
    },
    {
      "Time_Start": 1200.8200000000002,
      "Time_End": 1206.5600000000002,
      "Text": " nice permissions that we can exploit. So when the compromised action is being run, it can"
    },
    {
      "Time_Start": 1206.56,
      "Time_End": 1212.44,
      "Text": " use this token to push code back to the main branch. Now this is only possible if the main"
    },
    {
      "Time_Start": 1212.44,
      "Time_End": 1217.44,
      "Text": " branch doesn't have branch protection rules. But what can we do if it does have branch"
    },
    {
      "Time_Start": 1217.44,
      "Time_End": 1223.1799999999998,
      "Text": " protection rules? We can do the same thing. Let's see here like a different scenario. We want"
    },
    {
      "Time_Start": 1223.1799999999998,
      "Time_End": 1228.98,
      "Text": " to infect the temporary branch. So same thing, the token is being generated. We push code to"
    },
    {
      "Time_Start": 1228.98,
      "Time_End": 1233.36,
      "Text": " the unprotected branch because the main one has branch protection rules and then we push a"
    },
    {
      "Time_Start": 1233.3600000000001,
      "Time_End": 1240.7,
      "Text": " new tag to the repository and by that overriding an existing tag which will now cause any"
    },
    {
      "Time_Start": 1240.7,
      "Time_End": 1246.4,
      "Text": " new request for using the action to use the new malicious tag. We'll see an actual example of"
    },
    {
      "Time_Start": 1246.4,
      "Time_End": 1254.0600000000002,
      "Text": " this in a few minutes. And to do that, of course, all those pushes and stuff like that and"
    },
    {
      "Time_Start": 1254.0600000000002,
      "Time_End": 1260.9,
      "Text": " deleting tags, we need permissions. So how does the GitHub token permissions work? So up"
    },
    {
      "Time_Start": 1260.94,
      "Time_End": 1267.5600000000002,
      "Text": " until not too long ago, all the repositories had default write permissions for the tokens."
    },
    {
      "Time_Start": 1267.5600000000002,
      "Time_End": 1273.48,
      "Text": " GitHub changed it about half a year ago. But this still means that most of the repositories on"
    },
    {
      "Time_Start": 1273.48,
      "Time_End": 1278.4,
      "Text": " GitHub nowadays have write permission to the token by default which is great for hackers, not"
    },
    {
      "Time_Start": 1278.4,
      "Time_End": 1284.4,
      "Text": " so great for the maintainers of the repositories. And what maintainers can do if they still need"
    },
    {
      "Time_Start": 1284.4,
      "Time_End": 1288.98,
      "Text": " the write permissions, they can override the permissions of the tokens specifically for"
    },
    {
      "Time_Start": 1289.02,
      "Time_End": 1294.4,
      "Text": " specific workflows like this snippet here which says that the content permission which is used"
    },
    {
      "Time_Start": 1294.4,
      "Time_End": 1299.48,
      "Text": " for pushing code to the repository will be set to read even though the repository is defined"
    },
    {
      "Time_Start": 1299.48,
      "Time_End": 1305.28,
      "Text": " to have write access for the token. Now, in my research, I wanted to find which repositories"
    },
    {
      "Time_Start": 1305.28,
      "Time_End": 1310.82,
      "Text": " are actually vulnerable to this kind of attack and which repositories will allow the worm to"
    },
    {
      "Time_Start": 1310.82,
      "Time_End": 1315.32,
      "Text": " spread between them. So I needed to calculate what is the actual permissions of the GitHub"
    },
    {
      "Time_Start": 1315.32,
      "Time_End": 1320.02,
      "Text": " token. Now, if I see this, I know the exact permissions. But if it doesn't exist, I need to"
    },
    {
      "Time_Start": 1320.02,
      "Time_End": 1325.52,
      "Text": " find out the default permissions of the repository. How can I see that? We can look at the"
    },
    {
      "Time_Start": 1325.52,
      "Time_End": 1331.36,
      "Text": " logs. It says there, right in clear text, the GitHub token permissions are right and we can just"
    },
    {
      "Time_Start": 1331.36,
      "Time_End": 1337.52,
      "Text": " pass the logs. It sounds simple, but to actually implement it and get all the logs from the"
    },
    {
      "Time_Start": 1337.52,
      "Time_End": 1342.28,
      "Text": " repositories and get the ones that are relevant is a bit more complicated than I expected at"
    },
    {
      "Time_Start": 1342.28,
      "Time_End": 1348.32,
      "Text": " first, but it worked eventually. So let's do a quick recap of what we got until now. So the"
    },
    {
      "Time_Start": 1348.32,
      "Time_End": 1354.16,
      "Text": " first step to execute the worm is to compromise a repository using one of the three initial"
    },
    {
      "Time_Start": 1354.16,
      "Time_End": 1361.52,
      "Text": " attack vectors I showed earlier. The next step is to infect actions by using the GitHub token"
    },
    {
      "Time_Start": 1361.52,
      "Time_End": 1366.6,
      "Text": " or a personal access token inside the repository to push code to the main branch, one or"
    },
    {
      "Time_Start": 1366.6000000000001,
      "Time_End": 1372.5200000000002,
      "Text": " another branch that is being used, or override an existing tag. By that, we'll climb up the"
    },
    {
      "Time_Start": 1372.5200000000002,
      "Time_End": 1378.72,
      "Text": " tree of action dependencies and we'll reach the target repository in which we'll be able to"
    },
    {
      "Time_Start": 1378.72,
      "Time_End": 1385.8400000000001,
      "Text": " execute code, steal secrets, maybe modify its code, and a lot of fun like this. Now, let's"
    },
    {
      "Time_Start": 1385.8400000000001,
      "Time_End": 1391.96,
      "Text": " start with automation. How can we find vulnerable repositories like this one at scale? So"
    },
    {
      "Time_Start": 1391.96,
      "Time_End": 1396.38,
      "Text": " what I did was this process. So the first thing I did was to collect targets. I collected two"
    },
    {
      "Time_Start": 1396.38,
      "Time_End": 1403.5,
      "Text": " types of targets. The first one is the top 10K repositories in GitHub by stars, and the second"
    },
    {
      "Time_Start": 1403.5,
      "Time_End": 1410.6200000000001,
      "Text": " one was 32K repositories of companies with bug bounty programs. I collected this data using a"
    },
    {
      "Time_Start": 1410.6200000000001,
      "Time_End": 1416.0,
      "Text": " database that's here in the picture. It contains a lot of bug bounty programs. And what I did"
    },
    {
      "Time_Start": 1416.0,
      "Time_End": 1420.24,
      "Text": " next is to filter out all the repositories that are not using GitHub actions because it's not"
    },
    {
      "Time_Start": 1420.24,
      "Time_End": 1425.74,
      "Text": " relevant. Then I cloned each repository to my computer, checked for the three initial attack"
    },
    {
      "Time_Start": 1425.78,
      "Time_End": 1431.7,
      "Text": " vectors. If I found one that's possible, I added a red node inside the Neo4j graph. And then I"
    },
    {
      "Time_Start": 1431.7,
      "Time_End": 1436.66,
      "Text": " collected metadata about the actions. So I collected, I parsed the action YAML files and the"
    },
    {
      "Time_Start": 1436.66,
      "Time_End": 1441.94,
      "Text": " workflow YAML files that we've seen earlier to find which actions this repository is"
    },
    {
      "Time_Start": 1441.94,
      "Time_End": 1447.2,
      "Text": " depending on. And I collected this metadata about each action. You can see if the content"
    },
    {
      "Time_Start": 1447.2,
      "Time_End": 1452.48,
      "Text": " right permissions is true or false according to the calculation of the different permissions"
    },
    {
      "Time_Start": 1452.48,
      "Time_End": 1457.72,
      "Text": " and override of the permissions inside the workflow file. We can see here the name of the"
    },
    {
      "Time_Start": 1457.72,
      "Time_End": 1462.26,
      "Text": " action, which line it was used in, what secrets are accessible to it inside of the job. Here it's"
    },
    {
      "Time_Start": 1462.26,
      "Time_End": 1467.18,
      "Text": " empty, but of course there are a lot of secrets that are accessible to a lot of actions. And next"
    },
    {
      "Time_Start": 1467.18,
      "Time_End": 1472.9,
      "Text": " thing I did was to go through this step for each action. So for each action dependency I find, I"
    },
    {
      "Time_Start": 1472.9,
      "Time_End": 1478.64,
      "Text": " clone its repository, search for its dependencies, check for initial attack vectors, and for each"
    },
    {
      "Time_Start": 1478.64,
      "Time_End": 1484.5200000000002,
      "Text": " dependency this process goes on and on and on. And by using this process we can create this"
    },
    {
      "Time_Start": 1484.5200000000002,
      "Time_End": 1491.38,
      "Text": " beautiful graph. Now this is a real case of a project that's vulnerable to this attack. Now let's"
    },
    {
      "Time_Start": 1491.38,
      "Time_End": 1496.98,
      "Text": " explain what we're seeing here. So at the bottom we see two red arrows that are pointing to two"
    },
    {
      "Time_Start": 1496.98,
      "Time_End": 1502.42,
      "Text": " initial attack vectors. Now those two repositories that it points to are actually the same"
    },
    {
      "Time_Start": 1502.42,
      "Time_End": 1506.68,
      "Text": " repository which was moved from one name to another. So it has two references, but it's"
    },
    {
      "Time_Start": 1506.68,
      "Time_End": 1513.26,
      "Text": " actually the same repository. Now what this repository is, is a dependency of some other"
    },
    {
      "Time_Start": 1513.26,
      "Time_End": 1518.5600000000002,
      "Text": " actions that are using it. And those other actions are a dependency of the target repositories"
    },
    {
      "Time_Start": 1518.5600000000002,
      "Time_End": 1523.88,
      "Text": " that have started scanning. So in this picture we can see that by attacking one repository and"
    },
    {
      "Time_Start": 1523.88,
      "Time_End": 1530.3,
      "Text": " compromising it, we can compromise 18 intermediate actions and by compromising them we can"
    },
    {
      "Time_Start": 1530.3,
      "Time_End": 1536.18,
      "Text": " compromise 72 of the target repositories I initially started scanning. Which is super crazy,"
    },
    {
      "Time_Start": 1536.18,
      "Time_End": 1542.3400000000001,
      "Text": " but still this is not the whole picture and impact and scale of this attack. Sadly I cannot"
    },
    {
      "Time_Start": 1542.3400000000001,
      "Time_End": 1547.96,
      "Text": " disclose the exact names of those repositories. I can tell you that the target repositories that"
    },
    {
      "Time_Start": 1547.96,
      "Time_End": 1554.6000000000001,
      "Text": " you see here are target repositories of huge companies, names that all of you know, and I'll show"
    },
    {
      "Time_Start": 1554.6000000000001,
      "Time_End": 1561.72,
      "Text": " you some real examples which I can disclose to describe the real impact and scale of this"
    },
    {
      "Time_Start": 1561.72,
      "Time_End": 1567.0,
      "Text": " attack. So here's a real example that I can show all the participants in this attack graph. So"
    },
    {
      "Time_Start": 1567.0,
      "Time_End": 1571.5,
      "Text": " what we're seeing here on the bottom left side, you can see the Hankfire repository which is a"
    },
    {
      "Time_Start": 1571.5,
      "Time_End": 1579.5,
      "Text": " popular open source, about 8K stars on GitHub. And it uses two actions which you can see in the"
    },
    {
      "Time_Start": 1579.5,
      "Time_End": 1585.8,
      "Text": " orange nodes. Those two actions come from two repositories, the Veracode repository at the top"
    },
    {
      "Time_Start": 1585.8,
      "Time_End": 1590.96,
      "Text": " and the Payploto repository at the bottom. Now the Payploto repository has a red node connected"
    },
    {
      "Time_Start": 1591.0,
      "Time_End": 1597.0,
      "Text": " to it which says re-projecting, meaning this repository is re-projectable. Now next thing I did"
    },
    {
      "Time_Start": 1597.0,
      "Time_End": 1603.04,
      "Text": " was to register the organization. I am the owner of the Payploto organization and as you can see"
    },
    {
      "Time_Start": 1603.04,
      "Time_End": 1608.1200000000001,
      "Text": " here in my screenshot, I can register the ActionZip repository. Now I didn't do that in order to"
    },
    {
      "Time_Start": 1608.1200000000001,
      "Time_End": 1614.2,
      "Text": " not break anyone's pipeline or execute malicious code on innocent people, but it's possible. I"
    },
    {
      "Time_Start": 1614.2,
      "Time_End": 1621.02,
      "Text": " still own this organization. And I of course reported this issue to the other repositories"
    },
    {
      "Time_Start": 1621.02,
      "Time_End": 1625.82,
      "Text": " that are depending on it and they fixed it. But let's see how their workflows look like. So this"
    },
    {
      "Time_Start": 1625.82,
      "Time_End": 1630.56,
      "Text": " is the Veracode repository, the Veracode workflow. You can see it's using the Payploto, the"
    },
    {
      "Time_Start": 1630.56,
      "Time_End": 1637.24,
      "Text": " action that I'm able to re-project. And you can see here the Hankfire repository which uses the"
    },
    {
      "Time_Start": 1637.24,
      "Time_End": 1642.52,
      "Text": " Payploto and the Veracode repository. And also in the middle you can see some secrets that it"
    },
    {
      "Time_Start": 1642.52,
      "Time_End": 1647.96,
      "Text": " uses that of course this worm can potentially access. So this means that in order to attack"
    },
    {
      "Time_Start": 1647.96,
      "Time_End": 1652.92,
      "Text": " these Hankfire repositories, we have two paths. We can directly attack it using the ActionZip"
    },
    {
      "Time_Start": 1652.92,
      "Time_End": 1658.56,
      "Text": " re-projectable repository. We can also re-project the ActionZip repository, infect the Veracode"
    },
    {
      "Time_Start": 1658.56,
      "Time_End": 1664.84,
      "Text": " repository, and through that infect the Hankfire repository. Now this looks simple, right? This"
    },
    {
      "Time_Start": 1664.84,
      "Time_End": 1669.68,
      "Text": " is the same diagram. We see the same repositories. So okay, we re-project this one repository. We"
    },
    {
      "Time_Start": 1669.68,
      "Time_End": 1674.28,
      "Text": " get to two other repositories. Sounds boring, right? But you can see because there's a lot of"
    },
    {
      "Time_Start": 1674.28,
      "Time_End": 1681.04,
      "Text": " empty space on the slide that there's actually much more to that. So let's say we do this attack."
    },
    {
      "Time_Start": 1681.04,
      "Time_End": 1686.76,
      "Text": " We re-project the ActionZip repository and we by that infect the Veracode and target repository."
    },
    {
      "Time_Start": 1686.76,
      "Time_End": 1692.92,
      "Text": " But this is not the whole story. The Veracode repository is an action by itself which has 1.6k"
    },
    {
      "Time_Start": 1692.92,
      "Time_End": 1697.92,
      "Text": " dependents which we can also infect them. And these dependents probably have more dependents"
    },
    {
      "Time_Start": 1698.64,
      "Time_End": 1704.92,
      "Text": " and so on. So that's it. And the ActionZip repository also have about 600 dependents which"
    },
    {
      "Time_Start": 1704.92,
      "Time_End": 1710.96,
      "Text": " probably have maybe their own dependents. So we can see this looks like okay, that's a lot of"
    },
    {
      "Time_Start": 1710.96,
      "Time_End": 1715.76,
      "Text": " repositories. Instead of attacking like three, I can now attack like 2,000 repositories. It's"
    },
    {
      "Time_Start": 1715.76,
      "Time_End": 1720.3200000000002,
      "Text": " nice, but still there's a lot of empty space on the slide. The Hankfire repository actually"
    },
    {
      "Time_Start": 1720.3200000000002,
      "Time_End": 1726.64,
      "Text": " creates a NuGet package which has 9.4k daily downloads which is nice. So we can also"
    },
    {
      "Time_Start": 1726.64,
      "Time_End": 1732.5200000000002,
      "Text": " compromise all the 9.4k daily downloads of the NuGet package. But this is still not the full"
    },
    {
      "Time_Start": 1732.5200000000002,
      "Time_End": 1737.2,
      "Text": " picture. Now this is only public information. Those are only public repositories that we've"
    },
    {
      "Time_Start": 1737.2,
      "Time_End": 1741.92,
      "Text": " seen. What about all the private repositories? There are probably a lot more private"
    },
    {
      "Time_Start": 1741.92,
      "Time_End": 1748.0400000000002,
      "Text": " repositories that are dependent on this action. And by infecting them we can also propagate"
    },
    {
      "Time_Start": 1748.0400000000002,
      "Time_End": 1752.88,
      "Text": " inside private organizations. Now let's say even if we don't have write permissions for the"
    },
    {
      "Time_Start": 1752.88,
      "Time_End": 1758.96,
      "Text": " GitHub token, actually running the worm inside those private repositories, they give us read"
    },
    {
      "Time_Start": 1758.96,
      "Time_End": 1763.72,
      "Text": " permission which you can use to exfiltrate source code of a lot of companies potentially or"
    },
    {
      "Time_Start": 1763.72,
      "Time_End": 1769.8000000000002,
      "Text": " organizations. So you can say now okay, so this is really cool, real crazy. Huge impact of"
    },
    {
      "Time_Start": 1769.8000000000002,
      "Time_End": 1775.6000000000001,
      "Text": " the attack, right? But that's not it. That's just one scenario, one attack path. I found a lot of"
    },
    {
      "Time_Start": 1775.64,
      "Time_End": 1781.64,
      "Text": " those. And this is actually the real impact of the attack. Nice, yeah. Let's see some energies."
    },
    {
      "Time_Start": 1787.2800000000002,
      "Time_End": 1793.0800000000002,
      "Text": " Now we finally have all the different puzzle pieces combined and the next thing we can do is"
    },
    {
      "Time_Start": 1793.0800000000002,
      "Time_End": 1800.4,
      "Text": " some PowerPoint magic. And let me introduce you to the dendro worm. The word dendro comes out"
    },
    {
      "Time_Start": 1800.4,
      "Time_End": 1805.2800000000002,
      "Text": " of the world dendrology which is the science and study of woody plants. This is how I"
    },
    {
      "Time_Start": 1805.28,
      "Time_End": 1812.08,
      "Text": " called my pet worm. And let's see how the demo actually looks like. So in the demo we'll see"
    },
    {
      "Time_Start": 1812.08,
      "Time_End": 1817.48,
      "Text": " this environment. In this environment we have the target repository on the left which uses a"
    },
    {
      "Time_Start": 1817.48,
      "Time_End": 1823.48,
      "Text": " GitHub actions CACD workflow that uses the random action using a V1 tag annotation. The"
    },
    {
      "Time_Start": 1825.76,
      "Time_End": 1831.28,
      "Text": " random action also uses GitHub actions and it uses the main branch annotation of the"
    },
    {
      "Time_Start": 1831.28,
      "Time_End": 1836.36,
      "Text": " rev date action in its workflow. The rev date action is a composite action which uses"
    },
    {
      "Time_Start": 1836.36,
      "Time_End": 1843.44,
      "Text": " directly the rev action. Now as an attacker what we'll do is we'll start with right access to"
    },
    {
      "Time_Start": 1843.44,
      "Time_End": 1849.28,
      "Text": " the repository on the right. We'll infect it with malicious code of the worm and then it will"
    },
    {
      "Time_Start": 1849.28,
      "Time_End": 1855.82,
      "Text": " automatically of course infect the composite action because it uses it as part of its logic."
    },
    {
      "Time_Start": 1855.82,
      "Time_End": 1862.4399999999998,
      "Text": " And then we'll see what happens when a maintainer of the random action creates a push to the"
    },
    {
      "Time_Start": 1862.4399999999998,
      "Time_End": 1867.2,
      "Text": " main branch of its repository which will trigger the workflow. When the workflow is being"
    },
    {
      "Time_Start": 1867.2,
      "Time_End": 1872.98,
      "Text": " triggered by running the compromised action the worm will infect the repository by overriding"
    },
    {
      "Time_Start": 1872.98,
      "Time_End": 1877.56,
      "Text": " an existing tag which this tag is being used by the target repository. So when the target"
    },
    {
      "Time_Start": 1877.56,
      "Time_End": 1883.8999999999999,
      "Text": " repository workflow is being run it will actually execute the model itself and then we'll be"
    },
    {
      "Time_Start": 1883.94,
      "Time_End": 1888.94,
      "Text": " able to steal secrets. Now let's see the demo itself. Let's do duplicate. Okay nice. Okay you"
    },
    {
      "Time_Start": 1901.6000000000001,
      "Time_End": 1906.44,
      "Text": " can see here in the bottom there's the same graph that I've shown you. It's a dynamic so it"
    },
    {
      "Time_Start": 1906.44,
      "Time_End": 1912.1000000000001,
      "Text": " will evolve during the demo. On the right side you can see the terminal of the server and on"
    },
    {
      "Time_Start": 1912.1000000000001,
      "Time_End": 1919.2600000000002,
      "Text": " the left side the repositories. Now we'll start with the first repository. Here it's an"
    },
    {
      "Time_Start": 1919.2600000000002,
      "Time_End": 1925.64,
      "Text": " action file and we're infecting it with malicious code, some zoom magic. And we see that we're"
    },
    {
      "Time_Start": 1925.64,
      "Time_End": 1930.64,
      "Text": " downloading a malware from the server and installing it as a Python package and executing"
    },
    {
      "Time_Start": 1930.64,
      "Time_End": 1936.7600000000002,
      "Text": " it. Now I did it using Python just as a POC but this of course can be done much more stealthy."
    },
    {
      "Time_Start": 1936.76,
      "Time_End": 1942.14,
      "Text": " And now we commit the changes to the repository and we go to the second repository. Now the"
    },
    {
      "Time_Start": 1942.14,
      "Time_End": 1947.84,
      "Text": " second repository we can see it uses the first repository as part of its composite action"
    },
    {
      "Time_Start": 1947.84,
      "Time_End": 1952.64,
      "Text": " YAML file which means this repository is automatically compromised because next time it will"
    },
    {
      "Time_Start": 1952.64,
      "Time_End": 1960.0,
      "Text": " run it will run the malicious action we've just infected. Next thing we see is the third"
    },
    {
      "Time_Start": 1960.0,
      "Time_End": 1966.08,
      "Text": " action. Here you can see it just generates a random number which does nothing and it has a"
    },
    {
      "Time_Start": 1966.08,
      "Time_End": 1972.1999999999998,
      "Text": " CICD workflow. Now this workflow uses the second action as part of its logic. You can see"
    },
    {
      "Time_Start": 1972.1999999999998,
      "Time_End": 1980.74,
      "Text": " here. So it's using the main branch which is infected because of the composite action. And"
    },
    {
      "Time_Start": 1980.74,
      "Time_End": 1985.12,
      "Text": " another thing we can see this repository has a V1 tag that was created yesterday which"
    },
    {
      "Time_Start": 1985.12,
      "Time_End": 1990.6999999999998,
      "Text": " will override soon. Now here we can see the maintainer pushes new code to the main branch"
    },
    {
      "Time_Start": 1990.74,
      "Time_End": 1996.4,
      "Text": " which you'll see here it's protected using branch protection rules. This is why the override"
    },
    {
      "Time_Start": 1996.4,
      "Time_End": 2003.8600000000001,
      "Text": " is needed. And this push triggers the workflow we've just seen. And you'll be able to see in a"
    },
    {
      "Time_Start": 2003.8600000000001,
      "Time_End": 2009.1200000000001,
      "Text": " few seconds on the right the worm being executed. Here you can see it's being downloaded,"
    },
    {
      "Time_Start": 2009.1200000000001,
      "Time_End": 2015.98,
      "Text": " executed on the left. And in a few seconds we'll see the actual infection. And you can see"
    },
    {
      "Time_Start": 2015.98,
      "Time_End": 2021.48,
      "Text": " that it didn't successfully infect it using a push but it successfully infected it using"
    },
    {
      "Time_Start": 2021.48,
      "Time_End": 2026.76,
      "Text": " override of the tag itself and also it printed out all the secrets that are available which is"
    },
    {
      "Time_Start": 2026.76,
      "Time_End": 2034.76,
      "Text": " only the GitHub action token. And we can see now the tag that was overwritten just now. Here's"
    },
    {
      "Time_Start": 2034.76,
      "Time_End": 2040.84,
      "Text": " the new malicious code. Same code like the infection we did at the start. And now we see in"
    },
    {
      "Time_Start": 2040.8400000000001,
      "Time_End": 2047.5400000000002,
      "Text": " the target repository which also has HCI which uses the action that just got infected using"
    },
    {
      "Time_Start": 2047.5400000000002,
      "Time_End": 2056.2000000000003,
      "Text": " the V1 tag that was just got also infected. And it's also using the very secret secret, very"
    },
    {
      "Time_Start": 2056.2000000000003,
      "Time_End": 2062.92,
      "Text": " cool name. And what we see here next is the maintainer of the repository pushing code to the"
    },
    {
      "Time_Start": 2062.92,
      "Time_End": 2071.38,
      "Text": " main branch like everything as usual, business as usual. And it will trigger the workflow that"
    },
    {
      "Time_Start": 2071.38,
      "Time_End": 2080.5,
      "Text": " we've just seen. And same thing happens. We'll see the malware being downloaded. And executed"
    },
    {
      "Time_Start": 2080.5,
      "Time_End": 2090.42,
      "Text": " and installed. And you can see here that it successfully exfiltrated the secrets from inside."
    },
    {
      "Time_Start": 2090.42,
      "Time_End": 2096.2400000000002,
      "Text": " You can see it failed to infect the repository because it's not an actual repository but it did"
    },
    {
      "Time_Start": 2096.2400000000002,
      "Time_End": 2117.04,
      "Text": " actually infect the secret. Still a secret. Thank you. Okay. Let's continue. Okay. So we've"
    },
    {
      "Time_Start": 2117.04,
      "Time_End": 2122.2799999999997,
      "Text": " just seen the demo of the actual malware. And we have a bit of time so I'll show you more"
    },
    {
      "Time_Start": 2122.2799999999997,
      "Time_End": 2126.46,
      "Text": " interesting stuff I found out during this research. So it turns out there are a lot of"
    },
    {
      "Time_Start": 2126.46,
      "Time_End": 2130.74,
      "Text": " repositories that are directly vulnerable to the three initial attack vectors. I'll show you at"
    },
    {
      "Time_Start": 2130.74,
      "Time_End": 2139.12,
      "Text": " the beginning. I found 175 repositories directly vulnerable to those three attacks using 192"
    },
    {
      "Time_Start": 2139.12,
      "Time_End": 2145.0,
      "Text": " different ways. So some of the repositories had multiple command injections available on them."
    },
    {
      "Time_Start": 2145.0,
      "Time_End": 2150.2,
      "Text": " Multiple NPM email hijacking of packages they're using. And those projects are actually"
    },
    {
      "Time_Start": 2150.2,
      "Time_End": 2156.46,
      "Text": " projects of really known organizations. You can see the coolest one is I found a command"
    },
    {
      "Time_Start": 2156.46,
      "Time_End": 2161.46,
      "Text": " injection in Angular which is crazy. Probably everyone here is using Angular in some sort of a"
    },
    {
      "Time_Start": 2161.46,
      "Time_End": 2168.12,
      "Text": " way. Maybe as a user. Maybe as a developer. Also I found some command injection in a popular"
    },
    {
      "Time_Start": 2168.12,
      "Time_End": 2175.12,
      "Text": " open source you can see here. The Astro open source. And in the last bullet you can see I"
    },
    {
      "Time_Start": 2175.12,
      "Time_End": 2180.8199999999997,
      "Text": " hijacked one email domain of a company that's called Plotly. And of course I reported it to"
    },
    {
      "Time_Start": 2180.8199999999997,
      "Time_End": 2188.4,
      "Text": " them. But by possibly hijacking that one domain I could compromise 67 repositories that were"
    },
    {
      "Time_Start": 2188.4,
      "Time_End": 2194.16,
      "Text": " maintained by this one user that belonged to this company. Now this user actually had like 90"
    },
    {
      "Time_Start": 2194.16,
      "Time_End": 2199.62,
      "Text": " repositories but only 60 of them belonged to the company. So technically I was able to"
    },
    {
      "Time_Start": 2199.62,
      "Time_End": 2205.74,
      "Text": " compromise 90 repositories by actually buying a single domain of a single user that forgot to"
    },
    {
      "Time_Start": 2205.74,
      "Time_End": 2214.48,
      "Text": " renew its email domain. And now that we're nearing the end let's talk about how actually you can"
    },
    {
      "Time_Start": 2214.48,
      "Time_End": 2219.08,
      "Text": " protect yourself from this attack. So the first and most important thing you can do it's"
    },
    {
      "Time_Start": 2219.08,
      "Time_End": 2224.62,
      "Text": " ordered by most effective stuff to the less effective stuff. So you can set the GitHub token"
    },
    {
      "Time_Start": 2224.62,
      "Time_End": 2231.7,
      "Text": " and any personal access token being used inside the workflow to minimal permissions. Basically"
    },
    {
      "Time_Start": 2231.7,
      "Time_End": 2236.04,
      "Text": " the content permission is the permission that's used to push code. So if you don't need to push"
    },
    {
      "Time_Start": 2236.04,
      "Time_End": 2241.24,
      "Text": " code to the repository set it to read. You can also configure branch protection rules to"
    },
    {
      "Time_Start": 2241.24,
      "Time_End": 2248.7,
      "Text": " prevent pushes to used branches. And use protected tags which is a less known feature of"
    },
    {
      "Time_Start": 2248.7400000000002,
      "Time_End": 2255.1600000000003,
      "Text": " GitHub. Also you can limit outbound connections from runners to prevent downloading of malware"
    },
    {
      "Time_Start": 2255.1600000000003,
      "Time_End": 2260.86,
      "Text": " like in this example. Now of course the worm itself can contain its own code inside its own"
    },
    {
      "Time_Start": 2260.86,
      "Time_End": 2266.94,
      "Text": " code without accessing the internet and still infect stuff but it makes life of attackers much"
    },
    {
      "Time_Start": 2266.94,
      "Time_End": 2273.36,
      "Text": " harder. You can also pin actions by using a hash which also makes it a bit difficult for"
    },
    {
      "Time_Start": 2273.36,
      "Time_End": 2281.48,
      "Text": " attackers to perform this attack. It's still not sealed tight and you can also use this project"
    },
    {
      "Time_Start": 2281.48,
      "Time_End": 2287.06,
      "Text": " that was released by GitHub not too long ago which helps you to reduce permissions for your"
    },
    {
      "Time_Start": 2287.06,
      "Time_End": 2292.48,
      "Text": " workflows. That was the GitHub Actions Worm and thank you everybody for coming."
    },
    {
      "Time_Start": 2292.64,
      "Time_End": 2293.64,
      "Text": " Thank you."
    },
    {
      "Time_Start": 2298.64,
      "Time_End": 2305.64,
      "Text": " I think if we have some time for questions. Do we have a mic? Yes."
    },
    {
      "Time_Start": 2315.64,
      "Time_End": 2321.94,
      "Text": " So we asked how can I pass branch protection rules to override a tag. So branch protection"
    },
    {
      "Time_Start": 2322.1,
      "Time_End": 2327.1,
      "Text": " rules don't affect tags. So even if you have, you need to use the protected tags. It's a"
    },
    {
      "Time_Start": 2327.1,
      "Time_End": 2330.1,
      "Text": " different feature. More questions? Yes."
    },
    {
      "Time_Start": 2336.1,
      "Time_End": 2339.1,
      "Text": " Can you say again a bit louder? I can barely hear you."
    },
    {
      "Time_Start": 2339.2599999999998,
      "Time_End": 2344.2599999999998,
      "Text": " What is the response of the companies that reported this issue?"
    },
    {
      "Time_Start": 2345.2599999999998,
      "Time_End": 2350.2599999999998,
      "Text": " So the companies I've showed that have reported this issue to, they fixed their workflows, they"
    },
    {
      "Time_Start": 2350.2599999999998,
      "Time_End": 2360.2599999999998,
      "Text": " removed the vulnerable actions which makes them, which basically mitigates this issue."
    },
    {
      "Time_Start": 2360.2599999999998,
      "Time_End": 2367.7599999999998,
      "Text": " Most of the companies that had more complicated graphs, like you had to compromise a"
    },
    {
      "Time_Start": 2368.42,
      "Time_End": 2373.42,
      "Text": " dependency, they didn't consider it as an issue because it's dependencies and like in bug"
    },
    {
      "Time_Start": 2373.42,
      "Time_End": 2378.42,
      "Text": " bounties or generally in vulnerability disclosure programs, they consider it out of"
    },
    {
      "Time_Start": 2378.42,
      "Time_End": 2383.42,
      "Text": " scope or not relevant but yeah, it's still possible to attack them this way."
    },
    {
      "Time_Start": 2385.42,
      "Time_End": 2389.42,
      "Text": " More questions? Yes."
    },
    {
      "Time_Start": 2390.08,
      "Time_End": 2395.08,
      "Text": " Okay, so if I come around any malicious action being used in the wild, I actually didn't see"
    },
    {
      "Time_Start": 2395.08,
      "Time_End": 2400.08,
      "Text": " anything. I didn't look for them so that's maybe the reason. But there are malicious actions"
    },
    {
      "Time_Start": 2400.08,
      "Time_End": 2405.08,
      "Text": " probably around there. Not doing this stuff probably but maybe other stuff, yeah."
    },
    {
      "Time_Start": 2406.08,
      "Time_End": 2409.08,
      "Text": " More questions? More questions?"
    },
    {
      "Time_Start": 2411.08,
      "Time_End": 2414.08,
      "Text": " Okay, thank you."
    },
    {
      "Time_Start": 2414.08,
      "Time_End": 2417.74,
      "Text": " Thank you."
    }
  ]
}