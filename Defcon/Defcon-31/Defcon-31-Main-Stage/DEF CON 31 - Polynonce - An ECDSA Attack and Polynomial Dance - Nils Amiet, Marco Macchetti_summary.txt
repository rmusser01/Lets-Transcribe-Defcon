**Introduction:**
- **Niels** and **Marco Macchetti** from **Kudelsky Security** present a novel attack on the **ECDSA** algorithm.
- **ECDSA** (Elliptic Curve Digital Signature Algorithm) is widely used, including in **Bitcoin** and **Ethereum**.
- The attack, called **Polynonce**, exploits vulnerabilities in the way random numbers (**nonces**) are generated during signature creation.

**Digital Signatures:**
- **Digital signatures** are a **proof of knowledge of a private key**.
- Anyone can **verify** a signature with the corresponding public key, but only the owner of the private key can **generate** a valid signature.
- In the context of **blockchains**, the private key represents **ownership of coins**.
- **Signature generation** involves three algorithms: **key generation**, **signature generation**, and **verification**.

**ECDSA Details:**
- **Key generation** in **ECDSA** involves choosing an integer (**D**) within a specific range as the private key.
- The public key is derived from the private key through **scalar point multiplication** on an **elliptic curve**.
- **Signature generation** involves hashing a message and then performing additional mathematical operations, including the use of a randomly generated nonce.
- The signature consists of two numbers, **R** and **S**, where **R** is derived from the nonce, and **S** is calculated using the private key and the nonce.

**Attacking ECDSA:**
- If the nonces are **predictable** or have **known bits**, lattice attacks and side-channel attacks can be used to recover the private key.
- The choice of random number generator (**RNG**) and the quality of entropy used to seed it are critical to the security of the signature generation process.
- Some RNGs, like **linear congruential generators** (LCGs), can be vulnerable to lattice attacks, especially if they are not full-state or if the degree of the polynomial is higher.
- The presenters introduce a new attack that targets full-state LCGs and higher-degree polynomials, demonstrating that it is possible to recover the private key in a fraction of a second.

**Polynomial Attack:**
- The polynomial attack focuses on the **S** part of the signature, rewriting it as a linear relationship between known values and the private key.
- By exploiting the structure of the LCG and the relationship between consecutive known values, the presenters derive a polynomial equation where the only unknown is the private key.
- They extend this approach to higher-degree polynomial relationships (quadratic, cubic, etc.), developing a recursive algorithm that does not rely on lattice techniques.

**Putting the Attack into Practice:**
- The polynomial attack requires at least four signatures sorted by their generation time, along with the corresponding messages and public keys.
- **Bitcoin** and **Ethereum** blockchains provide a large source of ECDSA signatures, but extracting the necessary data involves implementing the specific protocols and computing the correct messages.
- The presenters downloaded and processed the Bitcoin and Ethereum blockchains, extracting millions of signatures.
- They also examined TLS servers and datasets from the **Minerva** attack, which contained ECDSA signatures generated by various devices and software libraries.

**Results and Takeaways:**
- The presenters implemented the attack in **Sage** with a multi-threaded approach and shared the code on **GitHub**.
- They successfully recovered private keys for some Bitcoin and Ethereum wallets, but these wallets had no balance, indicating they had been drained previously.
- The vulnerable wallets used repeated nonces, which could have been exploited by simpler attacks as well.
- The presenters emphasize the importance of using deterministic nonce generation methods, such as **deterministic ECDSA** or **EDDSA**, to prevent signature vulnerabilities.
- They encourage further research and hope that their work will lead to more secure practices in software and product development.