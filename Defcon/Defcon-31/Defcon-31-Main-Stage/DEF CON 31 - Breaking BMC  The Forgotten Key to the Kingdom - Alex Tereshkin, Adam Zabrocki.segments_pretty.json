{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 8.28,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Hello everyone. I see more people than I expected. That's kind of surprising for the BMC talk"
    },
    {
      "Time_Start": 8.28,
      "Time_End": 14.96,
      "Text": " because it means people know what the BMC is. So, well, first of all, thank you. My"
    },
    {
      "Time_Start": 14.96,
      "Time_End": 20.72,
      "Text": " name is Adam and together with Alex, we have the pleasure to be here. So thanks DEF CON"
    },
    {
      "Time_Start": 20.72,
      "Time_End": 27.04,
      "Text": " organizer for allowing us to be here today. First time in the row as a speaker. And thanks"
    },
    {
      "Time_Start": 27.04,
      "Time_End": 34.64,
      "Text": " for you, great audience, that you know what the BMC is. So really, thank you, guys. So"
    },
    {
      "Time_Start": 34.64,
      "Time_End": 41.84,
      "Text": " what is our talk about? Our talk is about breaking BMC, the forgotten kingdom. So it's"
    },
    {
      "Time_Start": 41.84,
      "Time_End": 49.16,
      "Text": " a niche topic. But apparently it's not as niche as I want it to be. So to tell you about"
    },
    {
      "Time_Start": 49.16,
      "Time_End": 53.68,
      "Text": " ourselves, we don't want to spend too much time here because it's boring stuff. Both"
    },
    {
      "Time_Start": 53.68,
      "Time_End": 59.4,
      "Text": " of us, me and Alex, we're working in NVIDIA doing this research and everything we've done"
    },
    {
      "Time_Start": 59.4,
      "Time_End": 65.0,
      "Text": " it was apparently as part of our work at NVIDIA. We don't want to spend too long here."
    },
    {
      "Time_Start": 65.0,
      "Time_End": 69.0,
      "Text": " There's some private contact information to us. You can always poke us through the email or"
    },
    {
      "Time_Start": 69.0,
      "Time_End": 74.08,
      "Text": " through the Twitter. If you have any questions, just feel free to shoot us a message. And"
    },
    {
      "Time_Start": 74.08,
      "Time_End": 79.32,
      "Text": " there's some short bio. But it doesn't really matter. What matters, this is not only the"
    },
    {
      "Time_Start": 79.32000000000001,
      "Time_End": 84.32000000000001,
      "Text": " research for two of us, but for an entire NVIDIA offensive security research team, which I'm"
    },
    {
      "Time_Start": 84.32000000000001,
      "Time_End": 89.68,
      "Text": " currently leading. So big kudos also to Jared, Max, and Nicola, who also did this research"
    },
    {
      "Time_Start": 89.68,
      "Time_End": 94.96000000000001,
      "Text": " together with us. So first things first, what is BMC? What I expect you know, it's a"
    },
    {
      "Time_Start": 94.96000000000001,
      "Time_End": 100.72000000000001,
      "Text": " baseboard management controller. It's a very special service processor, which you can"
    },
    {
      "Time_Start": 100.72000000000001,
      "Time_End": 106.88000000000001,
      "Text": " see. So that is an old picture from 2006. We didn't have time to take a new one, so we"
    },
    {
      "Time_Start": 106.88,
      "Time_End": 113.67999999999999,
      "Text": " just make a small adjustment to look at more modern. So there is 2022 here. But physically"
    },
    {
      "Time_Start": 113.67999999999999,
      "Time_End": 118.67999999999999,
      "Text": " it doesn't change too much. And so we did this research in 2022 for one of the BMC from"
    },
    {
      "Time_Start": 121.67999999999999,
      "Time_End": 127.8,
      "Text": " one of the vendors, which we are not going to mention, but it's visible in the picture. And so"
    },
    {
      "Time_Start": 127.8,
      "Time_End": 133.56,
      "Text": " what physically BMC does, it's apparently used to control the data centers, especially the"
    },
    {
      "Time_Start": 133.56,
      "Time_End": 139.2,
      "Text": " hosts. And the reason why, because you can imagine there could be like 100 of the host"
    },
    {
      "Time_Start": 139.2,
      "Time_End": 143.86,
      "Text": " machine on the data center, 1,000 host machine, and sometimes even 100 of the 1,000 of the"
    },
    {
      "Time_Start": 143.86,
      "Time_End": 148.08,
      "Text": " machine. Some of them are not even accessible physically because they might be somewhere in"
    },
    {
      "Time_Start": 148.08,
      "Time_End": 152.74,
      "Text": " the water. So it's very difficult to go there and do anything physically. Sometimes they"
    },
    {
      "Time_Start": 152.74,
      "Time_End": 157.64000000000001,
      "Text": " still do. So you can still go physically to this machine and do whatever you need to do. But"
    },
    {
      "Time_Start": 157.64000000000001,
      "Time_End": 163.44,
      "Text": " of course, as you can imagine, it's not a scalable solution. So that's why we do have BMCs."
    },
    {
      "Time_Start": 163.44,
      "Time_End": 168.85999999999999,
      "Text": " That can do it for us remotely. They can do it, everything what you can physically do by"
    },
    {
      "Time_Start": 168.85999999999999,
      "Time_End": 175.35999999999999,
      "Text": " yourself. So it's essentially a specialized service processor that can monitor the physical"
    },
    {
      "Time_Start": 175.35999999999999,
      "Time_End": 181.98,
      "Text": " state of the computer, not only computer, but any network server, hardware, and they're using"
    },
    {
      "Time_Start": 181.98,
      "Time_End": 186.7,
      "Text": " sensor essentially to be able to communicate to the administrator of this device. What is"
    },
    {
      "Time_Start": 186.7,
      "Time_End": 191.9,
      "Text": " also interesting, they allow you to do a full control of the machine which they monitor. So"
    },
    {
      "Time_Start": 191.9,
      "Time_End": 197.9,
      "Text": " you could have something like a KVM capability. So you can go remotely to the BMC and you"
    },
    {
      "Time_Start": 197.9,
      "Time_End": 202.52,
      "Text": " can then reconfigure the host. You can go to the BIOS. You can change the BIOS settings if"
    },
    {
      "Time_Start": 202.52,
      "Time_End": 207.28,
      "Text": " you want to remotely. You can do whatever you want essentially. Even more, you can flash the"
    },
    {
      "Time_Start": 207.28,
      "Time_End": 212.98000000000002,
      "Text": " entire firmware of the controlled device. And what is even more funny, you can do it even"
    },
    {
      "Time_Start": 212.98000000000002,
      "Time_End": 218.48000000000002,
      "Text": " when the device is power off. So BMCs, as you can see, it's a very powerful service"
    },
    {
      "Time_Start": 218.52,
      "Time_End": 225.26000000000002,
      "Text": " processor. So that's why it's a very interesting target for the attacker because it gives at"
    },
    {
      "Time_Start": 225.26000000000002,
      "Time_End": 231.18,
      "Text": " first tons of the benefits and also it falls into the category like hack one rule them all."
    },
    {
      "Time_Start": 231.18,
      "Time_End": 236.8,
      "Text": " You just hack one BMC and you have control over entire data center which BMC physically"
    },
    {
      "Time_Start": 236.8,
      "Time_End": 242.84000000000003,
      "Text": " control. So it's like a great and juicy target. And Alex now will talk about the first issue"
    },
    {
      "Time_Start": 242.84,
      "Time_End": 250.3,
      "Text": " which we want to cover here. BMC speaks IPMI protocol. And uh when you encounter a system"
    },
    {
      "Time_Start": 250.3,
      "Time_End": 254.62,
      "Text": " that speaks IPMI, what would you check for? Of course for a hash leak that has been known"
    },
    {
      "Time_Start": 254.62,
      "Time_End": 260.62,
      "Text": " since 2013. So what is this? This is a um screenshot from a manual that describes the IPMI"
    },
    {
      "Time_Start": 263.08,
      "Time_End": 268.5,
      "Text": " standard. And this is an explanation how the authentication works in IPMI. So you see"
    },
    {
      "Time_Start": 268.5,
      "Time_End": 273.04,
      "Text": " here um there are two messages. One of the messages is sent from the administrator"
    },
    {
      "Time_Start": 273.04,
      "Time_End": 279.92,
      "Text": " console to the BMC. Uh and the administrator is only supposed to send the username to the"
    },
    {
      "Time_Start": 279.92,
      "Time_End": 286.8,
      "Text": " BMCs. While the BMC looks up the username and calculates the HMAC over some data which"
    },
    {
      "Time_Start": 286.8,
      "Time_End": 292.62,
      "Text": " includes the username. So the password for the user that is about to be authenticated is"
    },
    {
      "Time_Start": 292.62,
      "Time_End": 297.62,
      "Text": " used as a key to the HMAC encryption. Uh HMAC calculation. So this uh HMAC calculation"
    },
    {
      "Time_Start": 300.96,
      "Time_End": 305.96,
      "Text": " result is sent back to the administrator. So if uh an attacker knows the correct username"
    },
    {
      "Time_Start": 308.7,
      "Time_End": 313.7,
      "Text": " that exists in a database for BMC users, uh he can receive the hash calculated um and the"
    },
    {
      "Time_Start": 314.58,
      "Time_End": 319.58,
      "Text": " password will be used as a key to this HMAC. And this has been known since 2003 where this"
    },
    {
      "Time_Start": 324.32,
      "Time_End": 329.32,
      "Text": " standard has been published. So you might think is it fixed by now in 2023? No. Actually it's"
    },
    {
      "Time_Start": 333.62,
      "Time_End": 339.82,
      "Text": " not because it's in the standard. So if you speak IPMI you have to do the same way. Uh the"
    },
    {
      "Time_Start": 339.82,
      "Time_End": 345.65999999999997,
      "Text": " authentication process looks exactly the same. And uh we implemented the uh script just to"
    },
    {
      "Time_Start": 345.65999999999997,
      "Time_End": 350.65999999999997,
      "Text": " test this and we found out that uh actually the system that we were looking at um conforms"
    },
    {
      "Time_Start": 353.58,
      "Time_End": 359.5,
      "Text": " to the same standard. But we had a problem while uh figuring out the correct username that"
    },
    {
      "Time_Start": 359.5,
      "Time_End": 366.0,
      "Text": " we can use. Because you know uh if we don't know the username that uh any username that"
    },
    {
      "Time_Start": 366.02,
      "Time_End": 373.2,
      "Text": " exists in the user database uh we will not get this uh hash back. So we had a problem here. We"
    },
    {
      "Time_Start": 373.2,
      "Time_End": 380.14,
      "Text": " don't have a valid username. How can we guess it? Or how can we uh find out this correct"
    },
    {
      "Time_Start": 380.14,
      "Time_End": 385.14,
      "Text": " username? At least one. So uh you see uh the server always um responds with unauthorized name"
    },
    {
      "Time_Start": 387.62,
      "Time_End": 392.62,
      "Text": " for whatever name we try. So uh we had this idea of uh looking for the correct username."
    },
    {
      "Time_Start": 396.02,
      "Time_End": 401.02,
      "Text": " Looking for uh some issues with uh incorrect processing of this user sensitive data. For"
    },
    {
      "Time_Start": 403.96,
      "Time_End": 410.34,
      "Text": " example the username. And uh we found out a bug that is actually present on this system. And"
    },
    {
      "Time_Start": 410.34,
      "Time_End": 415.34,
      "Text": " uh the CVs for this bug are issued by AMI and NVIDIA. You see it here. So what is what exactly"
    },
    {
      "Time_Start": 419.08,
      "Time_End": 425.98,
      "Text": " is happening? So when a user sends a username to the BMC in order to authenticate uh it"
    },
    {
      "Time_Start": 426.0,
      "Time_End": 431.84000000000003,
      "Text": " uh the the length of the username is also sent in the same message. And we had an idea that"
    },
    {
      "Time_Start": 431.84000000000003,
      "Time_End": 436.84000000000003,
      "Text": " maybe, maybe the server uh processes this username in uh not in non-constant time. For"
    },
    {
      "Time_Start": 439.94,
      "Time_End": 444.88,
      "Text": " example if it compares the username with some database entries it uses, maybe it uses mem"
    },
    {
      "Time_Start": 444.88,
      "Time_End": 450.92,
      "Text": " compare. Who knows? Uh and uh we implemented a script that uh measures the time that it"
    },
    {
      "Time_Start": 450.98,
      "Time_End": 455.98,
      "Text": " takes for uh certain user uh certain message to be processed by the server, by the BMC. And uh"
    },
    {
      "Time_Start": 460.52000000000004,
      "Time_End": 465.52000000000004,
      "Text": " eventually we got this result. Let me show you the demo. So we're sending a bunch of uh"
    },
    {
      "Time_Start": 474.96000000000004,
      "Time_End": 480.6,
      "Text": " message ones which are defined in the standard and we uh we are basically doing a brute"
    },
    {
      "Time_Start": 480.62,
      "Time_End": 487.42,
      "Text": " force for the uh printable characters as uh usernames available for usernames. But uh we use"
    },
    {
      "Time_Start": 487.42,
      "Time_End": 494.16,
      "Text": " this time in Oracle uh to greatly speed up the brute force. You see we uh we begin with"
    },
    {
      "Time_Start": 494.16,
      "Time_End": 499.66,
      "Text": " measuring the time that it takes for you the server to process uh the usernames which are"
    },
    {
      "Time_Start": 499.66,
      "Time_End": 506.3,
      "Text": " only one character long. And for all like uh two hundred possible um values for this"
    },
    {
      "Time_Start": 506.3,
      "Time_End": 512.1800000000001,
      "Text": " character we measure the time that it takes for the server to process it. And we find the"
    },
    {
      "Time_Start": 512.1800000000001,
      "Time_End": 517.78,
      "Text": " time, the longest time. So we find the symbol that takes the longest time to process. And uh"
    },
    {
      "Time_Start": 517.78,
      "Time_End": 522.48,
      "Text": " it is very likely that this is the uh correct symbol, the first symbol of the username"
    },
    {
      "Time_Start": 522.48,
      "Time_End": 526.76,
      "Text": " because when the mem compare advances to the next symbol it takes a little bit more time to"
    },
    {
      "Time_Start": 526.76,
      "Time_End": 531.76,
      "Text": " process. So this is, this is why we um uh we can uh use the first guest symbol and advance to"
    },
    {
      "Time_Start": 532.76,
      "Time_End": 539.76,
      "Text": " the next one. So essentially we do this uh in a sequence and we don't brute force the whole"
    },
    {
      "Time_Start": 539.76,
      "Time_End": 546.28,
      "Text": " key space. We just uh move from one symbol to another and uh and uh do it a few times in a row"
    },
    {
      "Time_Start": 546.28,
      "Time_End": 551.28,
      "Text": " just to get better data to measure the response time. But uh essentially this works really"
    },
    {
      "Time_Start": 553.52,
      "Time_End": 558.52,
      "Text": " well on local networks. And uh you see here um we were able to guess the right username and uh"
    },
    {
      "Time_Start": 559.52,
      "Time_End": 566.36,
      "Text": " eventually uh when we send this username uh to authentication server we get back the uh"
    },
    {
      "Time_Start": 566.36,
      "Time_End": 572.4,
      "Text": " hash, the HMAC calculation result. And we just brute force it uh using normal methods on"
    },
    {
      "Time_Start": 572.4,
      "Time_End": 578.1999999999999,
      "Text": " offline. So this attack can be happening completely offline. So we here we use a word list"
    },
    {
      "Time_Start": 578.1999999999999,
      "Time_End": 584.64,
      "Text": " and we are able to guess the right password. Uh this is the explanation why this works. So"
    },
    {
      "Time_Start": 584.64,
      "Time_End": 590.0,
      "Text": " uh by this moment we didn't have access to any binaries for the BMC. We didn't have any"
    },
    {
      "Time_Start": 590.0,
      "Time_End": 595.84,
      "Text": " access to source code. So uh this is just an uh a picture that uh explains to you why this"
    },
    {
      "Time_Start": 595.84,
      "Time_End": 601.26,
      "Text": " attack works. You see this mem compare. This is usual mem compare from libc. Uh it does not"
    },
    {
      "Time_Start": 601.26,
      "Time_End": 605.8199999999999,
      "Text": " execute in a constant time. This is why it can be used as a timing oracle here. So if you"
    },
    {
      "Time_Start": 605.8199999999999,
      "Time_End": 610.92,
      "Text": " look up the man page for mem compare it says that don't use it for sensitive data. And this"
    },
    {
      "Time_Start": 610.9399999999999,
      "Time_End": 616.52,
      "Text": " is a sensitive data. So now now we have access to the BMC. We guessed the username and the"
    },
    {
      "Time_Start": 616.52,
      "Time_End": 623.42,
      "Text": " password. So uh we only got one uh user uh information from the BMC. So but we can talk to it."
    },
    {
      "Time_Start": 623.42,
      "Time_End": 628.42,
      "Text": " We can issue um requests that require authentication. So sure as you can see to put a bit more"
    },
    {
      "Time_Start": 633.0999999999999,
      "Time_End": 637.4599999999999,
      "Text": " to this story. We just saw a BMC. We know it's there. We know there is a known bug from"
    },
    {
      "Time_Start": 637.48,
      "Time_End": 644.12,
      "Text": " 2006 with the CV from 2013 which we didn't expect to work but it works. So interesting. We"
    },
    {
      "Time_Start": 644.12,
      "Time_End": 648.5600000000001,
      "Text": " wanted to log in. It was just pure guess. Like okay let's try timing attack. Like why not?"
    },
    {
      "Time_Start": 648.5600000000001,
      "Time_End": 654.8000000000001,
      "Text": " Like many like devices are vulnerable and turns out we have CVE. So okay we log in. One of"
    },
    {
      "Time_Start": 654.8000000000001,
      "Time_End": 659.2,
      "Text": " the device which BMC managed looks like this is a screenshot of the web interface. So looks"
    },
    {
      "Time_Start": 659.2,
      "Time_End": 665.0,
      "Text": " cool. So why we even speaking more about that? Like okay we have access to BMC so what? So"
    },
    {
      "Time_Start": 665.0,
      "Time_End": 670.16,
      "Text": " that's exactly the question. What to do next? And we have a couple of ideas. We could stop"
    },
    {
      "Time_Start": 670.16,
      "Time_End": 675.46,
      "Text": " presentation here but we did not and we did a bit more um research. And the reason why"
    },
    {
      "Time_Start": 675.46,
      "Time_End": 680.8,
      "Text": " because at first we wanted to understand a lot of stuff about BMC which we did not at first."
    },
    {
      "Time_Start": 680.8,
      "Time_End": 685.08,
      "Text": " Why this timing protocol at first worked? Because we did not know why this timing even works."
    },
    {
      "Time_Start": 685.08,
      "Time_End": 689.02,
      "Text": " We wanted to find the BMC image. We wanted to reverse this BMC image and to be able to"
    },
    {
      "Time_Start": 689.02,
      "Time_End": 693.92,
      "Text": " understand why this timing attack works at first place. And to be able to do that we need to"
    },
    {
      "Time_Start": 693.9399999999999,
      "Time_End": 699.54,
      "Text": " have somehow access to the BMC image yes? And we also thought okay if the timing protocol"
    },
    {
      "Time_Start": 699.54,
      "Time_End": 705.14,
      "Text": " works maybe there is more bugs yes? Why not? So we need to have image to be able to find more"
    },
    {
      "Time_Start": 705.14,
      "Time_End": 710.8199999999999,
      "Text": " bugs there. And also again we did not know too much at that time about internal"
    },
    {
      "Time_Start": 710.8199999999999,
      "Time_End": 716.28,
      "Text": " architecture of the BMC so we wanted to learn more. Like what is apparently there inside of"
    },
    {
      "Time_Start": 716.28,
      "Time_End": 721.66,
      "Text": " this BMC excluding this timing attacks which we found. And also wanted to analyze okay if"
    },
    {
      "Time_Start": 721.66,
      "Time_End": 726.5,
      "Text": " maybe there is some other bugs which are uh good to exploit what are the difficulties of"
    },
    {
      "Time_Start": 726.5,
      "Time_End": 731.18,
      "Text": " doing that? Like are there any kind of defense or hardening or mitigation techniques? What"
    },
    {
      "Time_Start": 731.18,
      "Time_End": 735.18,
      "Text": " the state of art of the security of the BMC image? And to be able to do that we need to"
    },
    {
      "Time_Start": 735.18,
      "Time_End": 742.18,
      "Text": " somehow get this BMC image yes? So how do you get the BMC image? Yes that's the question."
    },
    {
      "Time_Start": 742.18,
      "Time_End": 747.56,
      "Text": " So we had an idea like BMC still has a firmware yes? So this firmware must be somehow"
    },
    {
      "Time_Start": 747.5600000000001,
      "Time_End": 753.96,
      "Text": " updated. So if people update the firmware how many of people like delete the updates after"
    },
    {
      "Time_Start": 753.96,
      "Time_End": 759.0600000000001,
      "Text": " they update the firmware? So we had this idea maybe some of the host machine will have the"
    },
    {
      "Time_Start": 759.0600000000001,
      "Time_End": 764.94,
      "Text": " you know not deleted updates for the firmware. So let's get now because we have in the BMC"
    },
    {
      "Time_Start": 764.94,
      "Time_End": 770.98,
      "Text": " access to the BMC and we know that the BMC has like capabilities of KVM let's go from the BMC"
    },
    {
      "Time_Start": 770.98,
      "Time_End": 775.96,
      "Text": " to the host and grab the updates for the BMC image and then we can have ability to analyze"
    },
    {
      "Time_Start": 775.96,
      "Time_End": 781.96,
      "Text": " that. So the question how do we go from the BMC to the host and get the shell? So of course"
    },
    {
      "Time_Start": 781.96,
      "Time_End": 786.5600000000001,
      "Text": " it's not as difficult because we have KVM capabilities so let's go very old school"
    },
    {
      "Time_Start": 786.5600000000001,
      "Time_End": 792.5,
      "Text": " techniques change the bootloader commands and put in it binbash. Of course sometimes"
    },
    {
      "Time_Start": 792.5,
      "Time_End": 797.34,
      "Text": " might not that feature works because you might have secure boot and maybe the commands are"
    },
    {
      "Time_Start": 797.34,
      "Time_End": 802.38,
      "Text": " assigned et cetera but again we are in the KVM so why not to go to the BIOS if there is no"
    },
    {
      "Time_Start": 802.38,
      "Time_End": 808.24,
      "Text": " password and disable secure boot. We are in BMC. So there is a lot of opportunities to do so"
    },
    {
      "Time_Start": 808.24,
      "Time_End": 813.42,
      "Text": " so we went to the least difficult path just change the command line binbash and we end up"
    },
    {
      "Time_Start": 813.42,
      "Time_End": 818.92,
      "Text": " there. So yeah we have shell and the disk somehow is not encrypted surprise so we are able"
    },
    {
      "Time_Start": 818.92,
      "Time_End": 824.12,
      "Text": " now to go and see what is in the host machine. But then we also realize we are also able to"
    },
    {
      "Time_Start": 824.12,
      "Time_End": 829.16,
      "Text": " mount whatever image we want. So even if the init binbash won't work we can do a booting"
    },
    {
      "Time_Start": 829.18,
      "Time_End": 835.18,
      "Text": " attack disable secure boot and just load our own image if you want to. But we combine two of"
    },
    {
      "Time_Start": 835.18,
      "Time_End": 840.78,
      "Text": " this feature apparently we just put in it binbash half a shell and we just mount our tool"
    },
    {
      "Time_Start": 840.78,
      "Time_End": 845.3199999999999,
      "Text": " set to be able to run the commands on the host machine which are not installed on that"
    },
    {
      "Time_Start": 845.3199999999999,
      "Time_End": 850.16,
      "Text": " specific host so what commands we wanted to run. So we found the BMC image but we don't"
    },
    {
      "Time_Start": 850.16,
      "Time_End": 855.76,
      "Text": " know how this firmware image looks like what is inside so we wrote a custom tool to be"
    },
    {
      "Time_Start": 855.76,
      "Time_End": 861.54,
      "Text": " able to parse this image as you can see here we found interesting stuff like there is"
    },
    {
      "Time_Start": 861.54,
      "Time_End": 867.54,
      "Text": " essentially model bootloader, model JFFS2, there is model cramfs and one of them it's a"
    },
    {
      "Time_Start": 868.78,
      "Time_End": 873.48,
      "Text": " root partition as you can see here. And this root partition starts from the address"
    },
    {
      "Time_Start": 873.48,
      "Time_End": 878.86,
      "Text": " twenty five hundred thousand. So what we did we just very simple stuff dump we know"
    },
    {
      "Time_Start": 878.86,
      "Time_End": 882.62,
      "Text": " exactly how the header looks like we know what is inside of this firmware because we just"
    },
    {
      "Time_Start": 882.62,
      "Time_End": 888.92,
      "Text": " parse that so we just do DD dump all of this byte data and we mount into the loop back and"
    },
    {
      "Time_Start": 888.92,
      "Time_End": 895.4,
      "Text": " now we can able to browse the BMC and analyze that. So what did we find there? Booting"
    },
    {
      "Time_Start": 895.4,
      "Time_End": 902.0,
      "Text": " analysis we found at first that BMC includes the IPMI server binary and libraries and so"
    },
    {
      "Time_Start": 902.0,
      "Time_End": 906.84,
      "Text": " what we saw in this interface on the screen shot which I showed you before is just a very"
    },
    {
      "Time_Start": 906.84,
      "Time_End": 912.34,
      "Text": " small subset of all of the APIs which are capabilities and functionalities which BMC"
    },
    {
      "Time_Start": 912.36,
      "Time_End": 916.9,
      "Text": " physically can provide you. So it's a very small subset of the feature and then we're"
    },
    {
      "Time_Start": 916.9,
      "Time_End": 921.6,
      "Text": " starting to analyze on the BMC there's like a tons of other protocols which are apparently"
    },
    {
      "Time_Start": 921.6,
      "Time_End": 926.38,
      "Text": " communicating with the BMC and you can poke. So then we found out that you can just directly"
    },
    {
      "Time_Start": 926.38,
      "Time_End": 931.2800000000001,
      "Text": " send the IPMI messages to the BMC and bypass all of these web interfaces which they have"
    },
    {
      "Time_Start": 931.2800000000001,
      "Time_End": 934.9200000000001,
      "Text": " which they expose and you have like a tons of the functionality. There's tons of the"
    },
    {
      "Time_Start": 934.9200000000001,
      "Time_End": 938.96,
      "Text": " hidden API which is accessible especially if you have a username and password but you can"
    },
    {
      "Time_Start": 938.98,
      "Time_End": 944.98,
      "Text": " just poke. So as you can imagine the attack surface is pretty huge. So we pull a trigger to"
    },
    {
      "Time_Start": 944.98,
      "Time_End": 949.48,
      "Text": " find out, let's find out more bugs and this one of the bugs which now Alex will cover as"
    },
    {
      "Time_Start": 949.48,
      "Time_End": 954.5,
      "Text": " well. Yeah we started to poke to this firmware image and found another issue that is"
    },
    {
      "Time_Start": 956.86,
      "Time_End": 962.64,
      "Text": " identified by this series by MI and NVIDIA. Essentially we found out that the user"
    },
    {
      "Time_Start": 962.64,
      "Time_End": 967.64,
      "Text": " database that is stored and that is implemented in this BMC is managed by Redis database"
    },
    {
      "Time_Start": 969.84,
      "Time_End": 976.84,
      "Text": " and what is more interesting, the passwords are encrypted in this database. So it's stored"
    },
    {
      "Time_Start": 976.84,
      "Time_End": 981.34,
      "Text": " in an encrypted state but the keys which are used to encrypt this password are stored right"
    },
    {
      "Time_Start": 981.34,
      "Time_End": 986.86,
      "Text": " next to the passwords. So it doesn't make much sense but the question is why do they even have"
    },
    {
      "Time_Start": 989.1600000000001,
      "Time_End": 995.6,
      "Text": " this obfuscated passwords in the database? Why do not hash the passwords instead? So the"
    },
    {
      "Time_Start": 995.6,
      "Time_End": 1002.28,
      "Text": " answer to that is the same issue with IP and my protocol. They need this plain text"
    },
    {
      "Time_Start": 1002.28,
      "Time_End": 1008.28,
      "Text": " passwords to be able to authenticate users. That's why. So we found a really nice API that can"
    },
    {
      "Time_Start": 1010.16,
      "Time_End": 1017.0600000000001,
      "Text": " be accessed from the host which is a local access, considered local. It's not accessible"
    },
    {
      "Time_Start": 1017.0600000000001,
      "Time_End": 1023.0600000000001,
      "Text": " remotely. So this API allows you to do specific requests to this Redis database. So we"
    },
    {
      "Time_Start": 1026.6,
      "Time_End": 1032.4399999999998,
      "Text": " analyzed the image and found the correct keys, the names of the keys that has to be accessed"
    },
    {
      "Time_Start": 1032.4399999999998,
      "Time_End": 1036.48,
      "Text": " in order to read this passwords and the user names in the keys and we implemented the"
    },
    {
      "Time_Start": 1036.48,
      "Time_End": 1040.7199999999998,
      "Text": " proof of concept that just accesses this user database through this API and reads the"
    },
    {
      "Time_Start": 1040.7199999999998,
      "Time_End": 1046.7199999999998,
      "Text": " encrypted passwords and then the keys from the same database and decrypts the passwords. So at"
    },
    {
      "Time_Start": 1048.3999999999999,
      "Time_End": 1055.1999999999998,
      "Text": " this point we got a full user database for the BMC. So user names and the passwords in a"
    },
    {
      "Time_Start": 1055.2,
      "Time_End": 1061.2,
      "Text": " decrypted form. So we proceeded to analyze the firmware. We found another issue which is"
    },
    {
      "Time_Start": 1066.3,
      "Time_End": 1071.54,
      "Text": " also interesting which I will talk about. This is also identified by the CVEs from IMI and"
    },
    {
      "Time_Start": 1071.54,
      "Time_End": 1077.54,
      "Text": " NVIDIA. So there is a server that is actually an IPMI server that listens on a socket on the BMC"
    },
    {
      "Time_Start": 1078.3,
      "Time_End": 1084.3,
      "Text": " site and services all the requests that comes remotely. And this particular API allows you to"
    },
    {
      "Time_Start": 1090.58,
      "Time_End": 1096.58,
      "Text": " read any virtual memory within the context of this process, of the server process. So there"
    },
    {
      "Time_Start": 1099.46,
      "Time_End": 1106.46,
      "Text": " is special command that prepares some data before, so it has to be issued before you access"
    },
    {
      "Time_Start": 1106.52,
      "Time_End": 1113.72,
      "Text": " this API but also you only need to have the user name and password, the usual user name and"
    },
    {
      "Time_Start": 1113.72,
      "Time_End": 1117.96,
      "Text": " password for the BMC in order to issue this command. You cannot do it without any"
    },
    {
      "Time_Start": 1117.96,
      "Time_End": 1121.6200000000001,
      "Text": " authentication. But at this point we already have the user name and password so we can just"
    },
    {
      "Time_Start": 1121.6200000000001,
      "Time_End": 1128.54,
      "Text": " proceed. As you see here there are no checks whatsoever about the region or the size of the"
    },
    {
      "Time_Start": 1128.54,
      "Time_End": 1135.22,
      "Text": " data that we want to read. You can just read anything from this context of this IPMI server."
    },
    {
      "Time_Start": 1135.26,
      "Time_End": 1142.26,
      "Text": " And this is how we found out that for example the server always uses the same base, I mean"
    },
    {
      "Time_Start": 1142.26,
      "Time_End": 1148.26,
      "Text": " it's executed at the same base every time you boot the BMC so there is no SLR. And you see here"
    },
    {
      "Time_Start": 1150.18,
      "Time_End": 1157.38,
      "Text": " there are no checks for the sizes. And this is the counterpart of this read API. This one"
    },
    {
      "Time_Start": 1157.38,
      "Time_End": 1163.34,
      "Text": " writes arbitrary data to this context of this IPMI server process. So we can use it to write"
    },
    {
      "Time_Start": 1163.34,
      "Time_End": 1170.76,
      "Text": " any data or code that we want to this server process. So that is very useful if you want to"
    },
    {
      "Time_Start": 1170.76,
      "Time_End": 1177.22,
      "Text": " build a shellcode inside the process. So at this point we could use this API to execute any"
    },
    {
      "Time_Start": 1177.22,
      "Time_End": 1184.34,
      "Text": " code we want inside, in the context of this IPMI server process. This is how the actual"
    },
    {
      "Time_Start": 1184.34,
      "Time_End": 1189.72,
      "Text": " override happens. You see there is a usual mem copy operation also without any checks for"
    },
    {
      "Time_Start": 1189.76,
      "Time_End": 1197.48,
      "Text": " the address and the size. And this is the proof of concept for this particular issue. First we"
    },
    {
      "Time_Start": 1197.48,
      "Time_End": 1203.48,
      "Text": " identify that the server process is actually is located at 10,000 hex so there is no SLR but"
    },
    {
      "Time_Start": 1206.76,
      "Time_End": 1211.8,
      "Text": " we know the base of this module so we can just read arbitrary data from it. And we are"
    },
    {
      "Time_Start": 1211.8,
      "Time_End": 1217.56,
      "Text": " interested in reading a special array of the configuration array for this features available"
    },
    {
      "Time_Start": 1217.56,
      "Time_End": 1224.1799999999998,
      "Text": " in this server which are controlled by this Gcore features array. And in particular we are"
    },
    {
      "Time_Start": 1224.1799999999998,
      "Time_End": 1230.1799999999998,
      "Text": " interested in this offset 310, 310 hex. And if we enable, if we set a bit at this location,"
    },
    {
      "Time_Start": 1234.56,
      "Time_End": 1240.8999999999999,
      "Text": " the server now thinks that certain functionality has been enabled. And this functionality"
    },
    {
      "Time_Start": 1240.8999999999999,
      "Time_End": 1245.94,
      "Text": " allows you to download arbitrary files from BMC. By default this is disabled but since we"
    },
    {
      "Time_Start": 1245.94,
      "Time_End": 1250.8200000000002,
      "Text": " have a write primitive we can now enable it. And we use this functionality to test and"
    },
    {
      "Time_Start": 1250.8200000000002,
      "Time_End": 1256.8200000000002,
      "Text": " download ETC shadow. Why not? And you see that with dot dot slash dot dot slash string we were"
    },
    {
      "Time_Start": 1258.56,
      "Time_End": 1264.56,
      "Text": " able to do it. So Adam will talk about this download functionality in detail."
    },
    {
      "Time_Start": 1266.02,
      "Time_End": 1270.8600000000001,
      "Text": " So yeah first no SLR to recap and the second thing what we wanted to recap so we found now"
    },
    {
      "Time_Start": 1270.8600000000001,
      "Time_End": 1276.66,
      "Text": " read and write capabilities to entire IP and my process and BMC server so essentially we can"
    },
    {
      "Time_Start": 1276.66,
      "Time_End": 1280.66,
      "Text": " enable and disable whatever feature we want. Of course why want to do it because you can"
    },
    {
      "Time_Start": 1280.66,
      "Time_End": 1285.8200000000002,
      "Text": " still exploit that but yeah we just wanted to find out what other hidden features we have. So"
    },
    {
      "Time_Start": 1285.8200000000002,
      "Time_End": 1292.7800000000002,
      "Text": " we identified this CV which is assigned by Ami and Vidya which as Alex mentioned the feature"
    },
    {
      "Time_Start": 1292.7800000000002,
      "Time_End": 1296.8600000000001,
      "Text": " itself is nothing wrong with the feature yes. You have a feature who allows you to download"
    },
    {
      "Time_Start": 1296.8600000000001,
      "Time_End": 1301.6200000000001,
      "Text": " just a file. Sometimes you may want to do it. Why not? But the way how the program implemented"
    },
    {
      "Time_Start": 1301.6200000000001,
      "Time_End": 1308.2400000000002,
      "Text": " that is again old school 90s way of implementing downloading the file. So as you can see here"
    },
    {
      "Time_Start": 1308.2400000000002,
      "Time_End": 1313.4,
      "Text": " if you at first enable this feature this is the offset. Then this feature is available and if"
    },
    {
      "Time_Start": 1313.4,
      "Time_End": 1317.8200000000002,
      "Text": " it's available they construct the path you can see on the bottom here. So the get file path is"
    },
    {
      "Time_Start": 1317.8200000000002,
      "Time_End": 1323.7400000000002,
      "Text": " static but the file path but file name directly comes from the package from the user. So it's"
    },
    {
      "Time_Start": 1323.74,
      "Time_End": 1329.16,
      "Text": " coming from the user of course we just do very old school dot dot slash dot dot slash and"
    },
    {
      "Time_Start": 1329.16,
      "Time_End": 1334.58,
      "Text": " that's how we achieve ability to be able to download an arbitrary file so that's what is"
    },
    {
      "Time_Start": 1334.58,
      "Time_End": 1341.46,
      "Text": " exploited here on the bottom. So yeah it's interesting way and even more when we wanted to"
    },
    {
      "Time_Start": 1341.46,
      "Time_End": 1345.1200000000001,
      "Text": " put more about this feature like how do they implement that we also find out you can also"
    },
    {
      "Time_Start": 1345.1200000000001,
      "Time_End": 1349.08,
      "Text": " choose the offset from where you want to start reading the file. So if the file is too big you"
    },
    {
      "Time_Start": 1349.12,
      "Time_End": 1354.54,
      "Text": " can just jump to specific offset this is exactly fseek and it's without any validation just"
    },
    {
      "Time_Start": 1354.54,
      "Time_End": 1358.6599999999999,
      "Text": " come from the user. So it's not only reading the file but also you can choose which portion of"
    },
    {
      "Time_Start": 1358.6599999999999,
      "Time_End": 1364.6999999999998,
      "Text": " the file precise you can read. And another bug which we found is identified by these CBN"
    },
    {
      "Time_Start": 1364.6999999999998,
      "Time_End": 1369.6999999999998,
      "Text": " numbers and by AMI and NVIDIA and this bug is exactly in the SNMP protocol. Like a"
    },
    {
      "Time_Start": 1373.1599999999999,
      "Time_End": 1378.1599999999999,
      "Text": " functionality for SNMP. We call it SNMP injection. So what happens SNMP is enabled by"
    },
    {
      "Time_Start": 1379.24,
      "Time_End": 1383.08,
      "Text": " default so we didn't need to use read write primitive to enable this feature. And it"
    },
    {
      "Time_Start": 1383.08,
      "Time_End": 1387.12,
      "Text": " allows you to change the configuration of SNMP server. But whenever you send a new"
    },
    {
      "Time_Start": 1387.12,
      "Time_End": 1392.54,
      "Text": " package that you want to reload or change the SNMP configuration the way how they"
    },
    {
      "Time_Start": 1392.54,
      "Time_End": 1398.34,
      "Text": " implemented this logic it's kind of unique for the developers, C developers. So they"
    },
    {
      "Time_Start": 1398.34,
      "Time_End": 1403.34,
      "Text": " create a file new SNMP configuration file from C using this path of commands like SNMP"
    },
    {
      "Time_Start": 1403.6799999999998,
      "Time_End": 1408.6799999999998,
      "Text": " and system. So every line of the configuration is dynamically created by executing system"
    },
    {
      "Time_Start": 1412.6799999999998,
      "Time_End": 1417.6799999999998,
      "Text": " command. And that's a unique way of creating configuration file. So we were surprised. But"
    },
    {
      "Time_Start": 1421.1,
      "Time_End": 1425.6799999999998,
      "Text": " what is more interesting let's see what's the arguments for these system commands. Yes."
    },
    {
      "Time_Start": 1425.6799999999998,
      "Time_End": 1430.6799999999998,
      "Text": " And we found out that these read only community variables but also add up. So we"
    },
    {
      "Time_Start": 1433.6799999999998,
      "Time_End": 1438.8799999999999,
      "Text": " created these two variables there. Essentially directly read from the user, from the"
    },
    {
      "Time_Start": 1438.8799999999999,
      "Time_End": 1444.22,
      "Text": " package. Yes. So and it's enabled by default. So essentially what we do you can do just"
    },
    {
      "Time_Start": 1444.22,
      "Time_End": 1449.1,
      "Text": " very simple again 90s command injection. So we just implemented this as a proof of"
    },
    {
      "Time_Start": 1449.1,
      "Time_End": 1454.3,
      "Text": " concept and we didn't know if this bug works or not. So we combined with the previous"
    },
    {
      "Time_Start": 1454.3,
      "Time_End": 1459.72,
      "Text": " exploit of downloading arbitrary file. So we just did command injection who's supposed"
    },
    {
      "Time_Start": 1459.72,
      "Time_End": 1464.52,
      "Text": " to create a new file. And then we used previous bug to download if this file is created."
    },
    {
      "Time_Start": 1464.52,
      "Time_End": 1469.52,
      "Text": " And so here we inject the command echo hi TMP A. And then first thing what we wanted to"
    },
    {
      "Time_Start": 1472.14,
      "Time_End": 1477.26,
      "Text": " check how the new configuration for SNMP configuration works. So because if the"
    },
    {
      "Time_Start": 1477.26,
      "Time_End": 1482.14,
      "Text": " command is injected this error O command and LW command supposed to have null attached. So"
    },
    {
      "Time_Start": 1482.14,
      "Time_End": 1485.98,
      "Text": " we download this file and you can see there's no arguments for these two. So likely our"
    },
    {
      "Time_Start": 1485.98,
      "Time_End": 1490.9,
      "Text": " command was injected. And then we download our TMP A file using this previous bug and"
    },
    {
      "Time_Start": 1490.9,
      "Time_End": 1497.02,
      "Text": " yes it exists. So essentially you have command injection now. And the next bug will be"
    },
    {
      "Time_Start": 1497.02,
      "Time_End": 1503.24,
      "Text": " covered by Alex. Oh before we go there. So essentially you don't physically need to write"
    },
    {
      "Time_Start": 1503.24,
      "Time_End": 1507.56,
      "Text": " like very complicated exploit and proof of concept. The reason why because we have from"
    },
    {
      "Time_Start": 1507.56,
      "Time_End": 1513.24,
      "Text": " the GitHub APMI tool. And the APMI tool allows you just to be normally executed as a"
    },
    {
      "Time_Start": 1513.24,
      "Time_End": 1517.58,
      "Text": " feature. That's how you run this command. And then you will be able to exploit that"
    },
    {
      "Time_Start": 1517.58,
      "Time_End": 1521.66,
      "Text": " specific command injection bug. You just run the tool with this command and you have"
    },
    {
      "Time_Start": 1521.66,
      "Time_End": 1528.66,
      "Text": " command injection. So yay. And this bug will be covered by Alex. Yeah this is also"
    },
    {
      "Time_Start": 1528.66,
      "Time_End": 1534.6200000000001,
      "Text": " identified by this series by MI and NVIDIA. This is another shell injection in another"
    },
    {
      "Time_Start": 1534.6200000000001,
      "Time_End": 1539.5,
      "Text": " component of the BMC. So the SNMP was not accessible. The SNMP config was not accessible"
    },
    {
      "Time_Start": 1539.5,
      "Time_End": 1545.34,
      "Text": " from the web UI that is available to administrator when logs in. But this one is"
    },
    {
      "Time_Start": 1545.34,
      "Time_End": 1551.76,
      "Text": " enabled. So you can set NTP servers that will be used by BMC to set the time on the"
    },
    {
      "Time_Start": 1551.76,
      "Time_End": 1556.76,
      "Text": " device. So there is also a IPMI counterpart for this API. So you can call this API to set"
    },
    {
      "Time_Start": 1561.46,
      "Time_End": 1566.76,
      "Text": " primary and secondary NTP servers or enable and disable this functionality. Whatever you"
    },
    {
      "Time_Start": 1566.76,
      "Time_End": 1572.98,
      "Text": " want. So if you enable the functionality, you can set the let's say primary NTP server with"
    },
    {
      "Time_Start": 1572.98,
      "Time_End": 1577.98,
      "Text": " this API. But the way they parse this addresses for the servers is interesting. Yeah this"
    },
    {
      "Time_Start": 1582.3,
      "Time_End": 1587.3,
      "Text": " is where you set this NTP server. Yes. So you see here if this functionality is enabled,"
    },
    {
      "Time_Start": 1588.3,
      "Time_End": 1593.3,
      "Text": " line 42, the code proceeds to just print the full string that you specify as an address for"
    },
    {
      "Time_Start": 1600.26,
      "Time_End": 1606.56,
      "Text": " the primary server to this buffer. And later it is saved in the configuration. And when the"
    },
    {
      "Time_Start": 1606.56,
      "Time_End": 1611.56,
      "Text": " code is about to read this configuration, this is how it is implemented. They read this"
    },
    {
      "Time_Start": 1612.56,
      "Time_End": 1617.56,
      "Text": " string without any checks to the local buffer on stack and then they do print F operation to"
    },
    {
      "Time_Start": 1622.7,
      "Time_End": 1627.7,
      "Text": " build a command line stream which is supposed to be passed to this NTP date tool. So NTP"
    },
    {
      "Time_Start": 1630.48,
      "Time_End": 1635.32,
      "Text": " date will be executed with the arguments that basically are user controlled or attacker"
    },
    {
      "Time_Start": 1635.32,
      "Time_End": 1641.44,
      "Text": " controlled. So here you have another kind of shell injection. There is no validation for"
    },
    {
      "Time_Start": 1641.44,
      "Time_End": 1647.8,
      "Text": " this server address. You can pass any string that will be processed as a server address and"
    },
    {
      "Time_Start": 1647.8,
      "Time_End": 1654.22,
      "Text": " the NTP date will be executed with this string attached to the command line. So this is"
    },
    {
      "Time_Start": 1654.22,
      "Time_End": 1659.22,
      "Text": " very easy case for a shell injection. And it just executes this command with NTP date. So what"
    },
    {
      "Time_Start": 1664.9,
      "Time_End": 1670.3600000000001,
      "Text": " we did, we implemented a proof of concept that calls this API and sets the server primary"
    },
    {
      "Time_Start": 1670.3600000000001,
      "Time_End": 1675.3600000000001,
      "Text": " NTP address of server for this string. So you see 127.0.0.1 and then echo test. So we write"
    },
    {
      "Time_Start": 1680.3200000000002,
      "Time_End": 1685.8200000000002,
      "Text": " some data to the just temporary file. And then we read this file using our download file"
    },
    {
      "Time_Start": 1685.8200000000002,
      "Time_End": 1692.6000000000001,
      "Text": " exploit. And just to see if it was created or not. And actually we see that the file is"
    },
    {
      "Time_Start": 1692.6000000000001,
      "Time_End": 1697.6000000000001,
      "Text": " created. So when this NTP functionality is restarted, the new config file is generated and"
    },
    {
      "Time_Start": 1700.44,
      "Time_End": 1707.1000000000001,
      "Text": " this NTP date tool is executed with our string. And you see that we were able to download"
    },
    {
      "Time_Start": 1707.1000000000001,
      "Time_End": 1714.2800000000002,
      "Text": " TMP test file. This is how we can now execute arbitrary shell commands on the BMC site. Or we"
    },
    {
      "Time_Start": 1714.2800000000002,
      "Time_End": 1719.2800000000002,
      "Text": " can use this to write arbitrary files on the BMC site. So we, now we were thinking what can"
    },
    {
      "Time_Start": 1720.28,
      "Time_End": 1725.28,
      "Text": " be done else, how can we attack the host in an interesting way. So we had full access to BMC. We"
    },
    {
      "Time_Start": 1732.36,
      "Time_End": 1738.5,
      "Text": " can execute arbitrary code. We can inject shell commands. Read and write any files on BMC"
    },
    {
      "Time_Start": 1738.5,
      "Time_End": 1743.54,
      "Text": " site. So we found this interesting bug that is not related to BMC anymore. It is more related"
    },
    {
      "Time_Start": 1743.56,
      "Time_End": 1748.56,
      "Text": " to the host. This is identified by the CVS. So there is a API on the BMC site that can be used"
    },
    {
      "Time_Start": 1751.3999999999999,
      "Time_End": 1758.0,
      "Text": " to perform the update operations on the host flash. The spy flash of the host. So we can talk"
    },
    {
      "Time_Start": 1758.0,
      "Time_End": 1763.0,
      "Text": " to BMC and ask it to please flash this piece of data to this location on the host flash. This"
    },
    {
      "Time_Start": 1766.42,
      "Time_End": 1773.3,
      "Text": " is how they implemented it. So the host spy is just mounted as a block device here and they"
    },
    {
      "Time_Start": 1773.3,
      "Time_End": 1780.06,
      "Text": " open it as a file and just seek to a location that we want and write the data. Or this one, this"
    },
    {
      "Time_Start": 1780.06,
      "Time_End": 1785.3999999999999,
      "Text": " code just reads the data. Okay so first we want to be sure that we are going to override the"
    },
    {
      "Time_Start": 1785.3999999999999,
      "Time_End": 1791.3,
      "Text": " location that we want to override. So we read the data from that location. We see is this the"
    },
    {
      "Time_Start": 1791.3,
      "Time_End": 1797.3,
      "Text": " right place and if it's all good we can write data to it. Or erase it first and then write. And"
    },
    {
      "Time_Start": 1797.3,
      "Time_End": 1802.3,
      "Text": " this is the counterpart that performs the write operation to this flash. Just the usual write"
    },
    {
      "Time_Start": 1805.1,
      "Time_End": 1810.8999999999999,
      "Text": " call, write API. So again there is no validation. We can override any location on the host"
    },
    {
      "Time_Start": 1810.8999999999999,
      "Time_End": 1815.8999999999999,
      "Text": " flash. What can we do with this? We can install persistent implants on the host by using"
    },
    {
      "Time_Start": 1819.1,
      "Time_End": 1824.1,
      "Text": " this functionality. And this is what we did. We just read the location 37000 on the host"
    },
    {
      "Time_Start": 1827.6,
      "Time_End": 1834.1399999999999,
      "Text": " flash and we wanted to see some NVRAM structures on this host flash at that location. And this"
    },
    {
      "Time_Start": 1834.1399999999999,
      "Time_End": 1839.1399999999999,
      "Text": " is what we actually get. We see that there is an NVRAM structures, the NVRAM variable"
    },
    {
      "Time_Start": 1844.94,
      "Time_End": 1851.94,
      "Text": " structures on this data. So this is the correct place. This is where the NVRAM starts on this"
    },
    {
      "Time_Start": 1851.94,
      "Time_End": 1858.24,
      "Text": " host by flash. Then we erase this data. There is another API on this BMC that we can use to"
    },
    {
      "Time_Start": 1858.24,
      "Time_End": 1863.6200000000001,
      "Text": " erase this page of spy flash. And then we write our updated data to this spy flash. And here"
    },
    {
      "Time_Start": 1863.6200000000001,
      "Time_End": 1869.6200000000001,
      "Text": " you see we write hello DEF CON. Hello. We were able to install persistent malware on this"
    },
    {
      "Time_Start": 1872.54,
      "Time_End": 1878.48,
      "Text": " host flash. Now you cannot just reset the machine to a known good state. You have to"
    },
    {
      "Time_Start": 1878.48,
      "Time_End": 1884.48,
      "Text": " refresh the firmware first. So yeah. Now we I think we broke BMC pretty well. We have"
    },
    {
      "Time_Start": 1886.7,
      "Time_End": 1893.6200000000001,
      "Text": " comment injection. We can do spy flash write read. We can download any file. We do see that the"
    },
    {
      "Time_Start": 1893.6200000000001,
      "Time_End": 1900.2,
      "Text": " bugs from 2006 still works. So why even bother more? So we thought okay let's find some holy"
    },
    {
      "Time_Start": 1900.2,
      "Time_End": 1906.82,
      "Text": " grail of the bugs. We do not allow does not require authentication at all. And we found one."
    },
    {
      "Time_Start": 1906.82,
      "Time_End": 1912.2,
      "Text": " And this is identified by the CV number by AMI and NVIDIA. So we found remote stack overflow"
    },
    {
      "Time_Start": 1912.2,
      "Time_End": 1918.78,
      "Text": " in the pre-authentication phase. And knowing the state of the previous bug we expected how"
    },
    {
      "Time_Start": 1918.78,
      "Time_End": 1924.46,
      "Text": " difficult it will be to exploit remote stack overflow in the pre-authentication phase. So at"
    },
    {
      "Time_Start": 1924.46,
      "Time_End": 1930.08,
      "Text": " first the bug is here. There is a telemetry shared library. Essentially if you authenticate"
    },
    {
      "Time_Start": 1930.08,
      "Time_End": 1936.28,
      "Text": " you could have like a telemetry enabled essentially meaning okay let's log in to the BMC"
    },
    {
      "Time_Start": 1936.28,
      "Time_End": 1941.78,
      "Text": " which user name et cetera. So yeah that's a feature. This feature the way how they"
    },
    {
      "Time_Start": 1941.78,
      "Time_End": 1947.82,
      "Text": " implemented when the telemetry calls essentially it's here. You can see there is a string and"
    },
    {
      "Time_Start": 1947.82,
      "Time_End": 1953.08,
      "Text": " copy. And as a parameters to string and copy to the local buffer. Local buffer is a static"
    },
    {
      "Time_Start": 1953.08,
      "Time_End": 1958.54,
      "Text": " buffer on the stack. They get the user name from the package. And the length of the user name"
    },
    {
      "Time_Start": 1958.54,
      "Time_End": 1965.12,
      "Text": " is also coming from the package. Because why not? And essentially directly after the"
    },
    {
      "Time_Start": 1965.1200000000001,
      "Time_End": 1969.42,
      "Text": " string copy there is a function pointer which is coming from the shared library. And it's"
    },
    {
      "Time_Start": 1969.42,
      "Time_End": 1976.5000000000002,
      "Text": " called immediately after the overflow. And yeah so we thought how difficult it is to be"
    },
    {
      "Time_Start": 1976.5000000000002,
      "Time_End": 1983.1200000000001,
      "Text": " able to exploit the stack overflow in 2023. We found out there's no stack canaries to our"
    },
    {
      "Time_Start": 1983.1200000000001,
      "Time_End": 1990.0000000000002,
      "Text": " surprise. So yeah. And then we saw okay what about other mitigation? So there is stack is"
    },
    {
      "Time_Start": 1990.04,
      "Time_End": 1996.04,
      "Text": " also executable. And there is no ASLR. So yeah. But we thought it will be too easy maybe to"
    },
    {
      "Time_Start": 1998.58,
      "Time_End": 2004.5,
      "Text": " exploit just return address. So there is a function pointer. So let's try to see where the"
    },
    {
      "Time_Start": 2004.5,
      "Time_End": 2009.38,
      "Text": " function pointer is declared. So this is the local buffer. It's 16 bytes long for the user"
    },
    {
      "Time_Start": 2009.38,
      "Time_End": 2014.38,
      "Text": " name. So it's not too long. And apparently after the buffer there is no function pointer."
    },
    {
      "Time_Start": 2014.38,
      "Time_End": 2019.12,
      "Text": " Function pointer is above the buffer. So we couldn't use the school techniques to write the"
    },
    {
      "Time_Start": 2019.16,
      "Time_End": 2025.3200000000002,
      "Text": " function pointer. So we need to switch to the standard stack overflow and just overwrite the"
    },
    {
      "Time_Start": 2025.3200000000002,
      "Time_End": 2031.7,
      "Text": " return address on the stack. And because of no ASLR executable stack it gives us a bit of"
    },
    {
      "Time_Start": 2031.7,
      "Time_End": 2036.7,
      "Text": " rest or relaxed time. And yes this is exactly in the pre-authentication phase. So this is a"
    },
    {
      "Time_Start": 2036.7,
      "Time_End": 2040.96,
      "Text": " slide which Alex explained at the beginning when you just send the first package with the"
    },
    {
      "Time_Start": 2040.96,
      "Time_End": 2045.0000000000002,
      "Text": " user name. This user name length just can cause you stack overflow in the pre-authentication"
    },
    {
      "Time_Start": 2045.04,
      "Time_End": 2051.24,
      "Text": " phase. So yeah. We pull the trigger and we wrote the exploit. Why not? So this is exactly the"
    },
    {
      "Time_Start": 2051.24,
      "Time_End": 2056.12,
      "Text": " authentication phase. As you can see we send a message with a very long user name. And"
    },
    {
      "Time_Start": 2056.12,
      "Time_End": 2059.42,
      "Text": " that's a reply. We're supposed to say you're authenticated or not. And that's a reply."
    },
    {
      "Time_Start": 2059.42,
      "Time_End": 2063.88,
      "Text": " Instead we just overwrite the messages and the logic on the server and we just say hello"
    },
    {
      "Time_Start": 2063.88,
      "Time_End": 2069.88,
      "Text": " DEF CON. So yes. That's pre-authentication stack overflow."
    },
    {
      "Time_Start": 2075.0,
      "Time_End": 2082.0,
      "Text": " Thanks. So in fact we found many more bugs. This is just a few of them. To our surprise"
    },
    {
      "Time_Start": 2082.0,
      "Time_End": 2088.46,
      "Text": " yes. Who would expect that? And so that's all of the CVs which we found. There is around 20"
    },
    {
      "Time_Start": 2088.46,
      "Time_End": 2094.16,
      "Text": " of them. But we only covered in this talk these bugs. So there's so much more to tell you"
    },
    {
      "Time_Start": 2094.16,
      "Time_End": 2100.66,
      "Text": " about the site of the security there and the bugs which we found. And just a summary to recap"
    },
    {
      "Time_Start": 2100.66,
      "Time_End": 2104.7799999999997,
      "Text": " what we saw. So at first BMC of course is a very critical part of the security of the"
    },
    {
      "Time_Start": 2104.7799999999997,
      "Time_End": 2111.3599999999997,
      "Text": " entire system. And breaking BMC unfortunately or fortunately depends who you ask falls"
    },
    {
      "Time_Start": 2111.3599999999997,
      "Time_End": 2116.8199999999997,
      "Text": " into the category of break one to rule them all. You just have one component of BMC and you"
    },
    {
      "Time_Start": 2116.8199999999997,
      "Time_End": 2122.8599999999997,
      "Text": " have access to all of the host servers. So it's a nice feature. And unfortunately BMC didn't"
    },
    {
      "Time_Start": 2122.8599999999997,
      "Time_End": 2128.16,
      "Text": " get too much attention from the security research community which is kind of reflected in"
    },
    {
      "Time_Start": 2128.16,
      "Time_End": 2133.3999999999996,
      "Text": " the current state of the security of it. What I mean essentially we're still missing a lot of"
    },
    {
      "Time_Start": 2133.3999999999996,
      "Time_End": 2138.52,
      "Text": " like modern mitigation and hardening which are expected to have in 2023. Like stack"
    },
    {
      "Time_Start": 2138.52,
      "Time_End": 2142.8199999999997,
      "Text": " overflows shouldn't be as easily exploitable. Like stack cookies are kind of standard for"
    },
    {
      "Time_Start": 2142.8199999999997,
      "Time_End": 2149.02,
      "Text": " some decades at least. And yeah. Some of the essential vulnerabilities would still fall"
    },
    {
      "Time_Start": 2149.02,
      "Time_End": 2154.66,
      "Text": " into the category let's exploit something like in the 90s. Yes? So what we can do with this?"
    },
    {
      "Time_Start": 2154.7,
      "Time_End": 2159.3199999999997,
      "Text": " First thing first probably some kind of recommendation of secure coding practice"
    },
    {
      "Time_Start": 2159.3199999999997,
      "Time_End": 2164.48,
      "Text": " supposed to be established when we develop such kind of firmware. Some kind of SDLC process."
    },
    {
      "Time_Start": 2164.48,
      "Time_End": 2169.12,
      "Text": " Also heavy fuzzing could help finding such kind of low hanging fruit. So we also ask"
    },
    {
      "Time_Start": 2169.12,
      "Time_End": 2173.12,
      "Text": " ourselves how is it possible that this pre-authenticated stack overflow was not found"
    },
    {
      "Time_Start": 2173.12,
      "Time_End": 2179.7799999999997,
      "Text": " before? Because 16 bytes long buffer doesn't seem like too difficult to overflow. But"
    },
    {
      "Time_Start": 2179.78,
      "Time_End": 2186.02,
      "Text": " apparently the tool on the user side limits you how long you can get. So the tool just was"
    },
    {
      "Time_Start": 2186.02,
      "Time_End": 2193.02,
      "Text": " limiting up to 16 bytes. Not the server. So probably that's why. Also switching to memory"
    },
    {
      "Time_Start": 2193.02,
      "Time_End": 2198.52,
      "Text": " safe language could help and remove such kind of basic memory safety issue. But there's a"
    },
    {
      "Time_Start": 2198.52,
      "Time_End": 2203.32,
      "Text": " catch which we describe in this talk. Many of these bugs will not be affected by the memory"
    },
    {
      "Time_Start": 2203.32,
      "Time_End": 2209.2000000000003,
      "Text": " safe language. The command injection, the loading of the file, path traversal. It's a state"
    },
    {
      "Time_Start": 2209.2000000000003,
      "Time_End": 2214.2400000000002,
      "Text": " of the security, not the state of the language. Yes? And so not everything could be solved by"
    },
    {
      "Time_Start": 2214.2400000000002,
      "Time_End": 2219.32,
      "Text": " that. And of course investing in the security research could help and is recommended to"
    },
    {
      "Time_Start": 2219.32,
      "Time_End": 2225.5800000000004,
      "Text": " improve overall state of the BMC. And we would like to thank NVIDIA of course, especially"
    },
    {
      "Time_Start": 2225.5800000000004,
      "Time_End": 2230.0800000000004,
      "Text": " offensive security research team like Jared, Max and Nikola because they did this research"
    },
    {
      "Time_Start": 2230.0800000000004,
      "Time_End": 2235.0400000000004,
      "Text": " with us. Server folks that allows us to touch this very expensive hardware and they were not"
    },
    {
      "Time_Start": 2235.04,
      "Time_End": 2240.24,
      "Text": " scared to give it to our hands. We were scared to touch them, but they don't, so thanks. And"
    },
    {
      "Time_Start": 2240.24,
      "Time_End": 2245.54,
      "Text": " for the security team for handling all of this coordination disclosure, thank you very much."
    },
    {
      "Time_Start": 2245.54,
      "Time_End": 2251.0,
      "Text": " And everyone and of course AMI for allowing us to do this amazing research. So if you have"
    },
    {
      "Time_Start": 2251.0,
      "Time_End": 2256.0,
      "Text": " any questions, feel free to shoot us. We'll try to answer."
    },
    {
      "Time_Start": 2266.04,
      "Time_End": 2270.04,
      "Text": " Just repeat the question."
    },
    {
      "Time_Start": 2270.04,
      "Time_End": 2276.04,
      "Text": " I have a question. So basically what we do for the CD is one is dated like 2022 and another"
    },
    {
      "Time_Start": 2276.04,
      "Time_End": 2284.04,
      "Text": " 2023. And I think when American megatrends design a CD, they use 2023 and it's like a reference"
    },
    {
      "Time_Start": 2284.04,
      "Time_End": 2290.04,
      "Text": " point for BMC which is probably a way to do it. So not only by single vendor, why is it"
    },
    {
      "Time_Start": 2290.04,
      "Time_End": 2296.04,
      "Text": " different?"
    },
    {
      "Time_Start": 2296.04,
      "Time_End": 2302.04,
      "Text": " So the answer is because we analyze this BMC first on our product. So we wanted to have"
    },
    {
      "Time_Start": 2302.04,
      "Time_End": 2306.04,
      "Text": " NVIDIA customers secure as fast as possible. So we release the CD faster and do some changes"
    },
    {
      "Time_Start": 2306.04,
      "Time_End": 2312.04,
      "Text": " by ourselves. But in the same time we need to go to vendor and the coordination disclosure and"
    },
    {
      "Time_Start": 2312.04,
      "Time_End": 2317.04,
      "Text": " it was taking a bit more time for them to patch as a reference code which could be moved to"
    },
    {
      "Time_Start": 2317.04,
      "Time_End": 2323.04,
      "Text": " everybody who uses the BMC. So there's a time difference between we did the patches and"
    },
    {
      "Time_Start": 2323.04,
      "Time_End": 2328.04,
      "Text": " before the vendor did the patches in the reference code. So that's the reason it's a different"
    },
    {
      "Time_Start": 2328.04,
      "Time_End": 2334.04,
      "Text": " year."
    },
    {
      "Time_Start": 2348.04,
      "Time_End": 2354.04,
      "Text": " It's a good question. Just to repeat. So the question is because there's time difference"
    },
    {
      "Time_Start": 2355.04,
      "Time_End": 2361.04,
      "Text": " between when we found the bug and when NVIDIA fixed the issues and when the army fixed the"
    },
    {
      "Time_Start": 2362.04,
      "Time_End": 2368.04,
      "Text": " issues and we released the advisor a bit faster to make the protected customers also"
    },
    {
      "Time_Start": 2369.04,
      "Time_End": 2375.04,
      "Text": " earlier, the malicious actor could get our patches and try to reverse engineer to find out if"
    },
    {
      "Time_Start": 2376.04,
      "Time_End": 2382.04,
      "Text": " other vendors are also vulnerable. So I don't think there's a good answer for that. It's a"
    },
    {
      "Time_Start": 2397.04,
      "Time_End": 2403.04,
      "Text": " supply chain issue. So there are startups who can address the supply chain security of the"
    },
    {
      "Time_Start": 2404.04,
      "Time_End": 2410.04,
      "Text": " state and they could help. But, yeah, that's essentially the industry has some problems which"
    },
    {
      "Time_Start": 2411.04,
      "Time_End": 2417.04,
      "Text": " needed reaction which we cannot solve by ourselves and we need the entire community to work"
    },
    {
      "Time_Start": 2417.04,
      "Time_End": 2421.04,
      "Text": " together to make it more secure. And, yes, that's a valid point and I 100% agree with that"
    },
    {
      "Time_Start": 2421.04,
      "Time_End": 2427.04,
      "Text": " statement."
    },
    {
      "Time_Start": 2428.04,
      "Time_End": 2434.04,
      "Text": " Yes?"
    },
    {
      "Time_Start": 2434.04,
      "Time_End": 2440.04,
      "Text": " A lot."
    },
    {
      "Time_Start": 2440.04,
      "Time_End": 2446.04,
      "Text": " No. Let's say no. But, yeah, it's also a valid point. Unfortunately because BMC it's essentially"
    },
    {
      "Time_Start": 2450.04,
      "Time_End": 2456.04,
      "Text": " affecting like a lot of vendors so, yeah, the impact is high, yes."
    },
    {
      "Time_Start": 2458.04,
      "Time_End": 2464.04,
      "Text": " Okay."
    },
    {
      "Time_Start": 2464.04,
      "Time_End": 2470.04,
      "Text": " We try not to touch red fish. But it's a very good question."
    },
    {
      "Time_Start": 2479.04,
      "Time_End": 2485.04,
      "Text": " Correct. Yes."
    },
    {
      "Time_Start": 2486.04,
      "Time_End": 2492.04,
      "Text": " Correct. And also requires them to not only patch but also force clients to flush the"
    },
    {
      "Time_Start": 2503.04,
      "Time_End": 2509.04,
      "Text": " firmware."
    },
    {
      "Time_Start": 2510.04,
      "Time_End": 2516.04,
      "Text": " Yes."
    },
    {
      "Time_Start": 2516.04,
      "Time_End": 2522.04,
      "Text": " In fact, if you look for the demo, it was not like a single shot. We repeated the same multiple"
    },
    {
      "Time_Start": 2522.04,
      "Time_End": 2528.04,
      "Text": " times and get an average time because latency, et cetera. But it's practical. It works."
    },
    {
      "Time_Start": 2528.04,
      "Time_End": 2534.04,
      "Text": " So, the question is why they do not run Linux by RTOS, correct?"
    },
    {
      "Time_Start": 2538.04,
      "Time_End": 2544.04,
      "Text": " Other way around?"
    },
    {
      "Time_Start": 2544.04,
      "Time_End": 2550.04,
      "Text": " I don't know. I have no idea. We apparently do not have much visibility of what the vendor"
    },
    {
      "Time_Start": 2550.04,
      "Time_End": 2556.04,
      "Text": " does. Apparently if you think about the industry of the BMC, there's not as many solutions"
    },
    {
      "Time_Start": 2556.04,
      "Time_End": 2562.04,
      "Text": " as you can choose. You can either use open BMC which requires you to essentially set up a team,"
    },
    {
      "Time_Start": 2562.04,
      "Time_End": 2568.04,
      "Text": " hire people who do manage to be able to create the BMC firmware and then you can have more"
    },
    {
      "Time_Start": 2568.04,
      "Time_End": 2574.04,
      "Text": " influence on the security state. Or you can go to the vendor and the vendor just gives you the"
    },
    {
      "Time_Start": 2574.04,
      "Time_End": 2580.04,
      "Text": " image and mostly it's out of your hands what you can do there. You can ask the vendor to do"
    },
    {
      "Time_Start": 2580.04,
      "Time_End": 2586.04,
      "Text": " some changes or alignments, but you're pretty limited how much you can influence that."
    },
    {
      "Time_Start": 2586.04,
      "Time_End": 2592.04,
      "Text": " And this was one of the reasons why we apparently pulled the trigger and see, okay, let's analyze and"
    },
    {
      "Time_Start": 2592.04,
      "Time_End": 2598.04,
      "Text": " find out what did we get."
    },
    {
      "Time_Start": 2599.04,
      "Time_End": 2605.04,
      "Text": " So, the question is are there any firmware security tools which we recommend? Yes."
    },
    {
      "Time_Start": 2609.04,
      "Time_End": 2615.04,
      "Text": " Fuzzing. I'm not sure. Alex? Yeah, I don't know to be honest. But yes."
    },
    {
      "Time_Start": 2629.04,
      "Time_End": 2635.04,
      "Text": " Yes, so for us it was we did slightly opposite, yes, because we saw there is a BMC. We didn't"
    },
    {
      "Time_Start": 2643.42,
      "Time_End": 2649.54,
      "Text": " have any idea how to, you know, be able to get into this BMC. So, our research was apparently"
    },
    {
      "Time_Start": 2649.54,
      "Time_End": 2655.04,
      "Text": " okay. We know we can poke it. So, let's try to log in. We cannot log in. Let's try timing it back"
    },
    {
      "Time_Start": 2655.04,
      "Time_End": 2660.88,
      "Text": " and then so on and so on and so on. But yes, there is many interfaces, especially to the APMI, but"
    },
    {
      "Time_Start": 2660.88,
      "Time_End": 2667.04,
      "Text": " most of them require authentication. That's why user name finding will be the best entry point."
    },
    {
      "Time_Start": 2667.04,
      "Time_End": 2673.04,
      "Text": " But yes. And there is also a local interface from the host. So, host can talk to BMC through"
    },
    {
      "Time_Start": 2674.42,
      "Time_End": 2680.42,
      "Text": " KCS interfaces. Some API are not secure. So, you can't talk to the host. So, you have to"
    },
    {
      "Time_Start": 2685.04,
      "Time_End": 2691.04,
      "Text": " ask the question is what's the interface that we can use to access BMC. So, some API that BMC"
    },
    {
      "Time_Start": 2693.04,
      "Time_End": 2698.8,
      "Text": " interfaces are not reachable remotely. So, some of them have to be reached from the host"
    },
    {
      "Time_Start": 2698.8,
      "Time_End": 2706.0,
      "Text": " locally. And this is why we need to have host access. We got the shell on the host first."
    },
    {
      "Time_Start": 2706.0,
      "Time_End": 2711.54,
      "Text": " Like this database with the surprise API give me all of your database. It was through the host."
    },
    {
      "Time_Start": 2711.54,
      "Time_End": 2717.54,
      "Text": " It's pretty nice feature for attacker, I guess. Unfortunately, we cannot release the PSCs."
    },
    {
      "Time_Start": 2728.92,
      "Time_End": 2734.92,
      "Text": " At least for now. Okay. Thank you very much again."
    }
  ]
}