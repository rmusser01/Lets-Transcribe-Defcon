**Introduction**
- Talk focuses on **malware** design and abusing **legacy Microsoft transports** and **session architecture**.
- Presenter is a principal red teamer at **Equinix** and a student at **Sam Houston State University**.
- Experience in red teaming, pen testing, consulting, coding, and developing.
- Primarily uses **Python** or **C++**.

**Challenges in Red Teaming**
- Compromising endpoints and networks while remaining undetected is crucial.
- Traditional frameworks may not always work, and a single mistake can lead to losing access.
- Need to implement multiple **TTPs** at different levels and have a means to regain access or act without leaving indicators.

**Abusing Windows Features**
- Windows has different **sessions** for each user login, including **Session Zero** where services run.
- Goal is to create a process inside another user's session from Session Zero.
- Presenter has developed a framework called **Obligato** to achieve this, written in C++.

**Obligato Framework**
- Designed for long-term persistent access and doesn't reach out to a C2 server.
- Abuses other protocols to keep network association away from the process.
- Supports multiple transport layers, including **unidirectional** and **bidirectional** transports.
- Uses a custom **messaging protocol** with tasks, routes, and notifications.
- Tasks are inbound messages for the implant to execute, and responses are optional.
- Routes describe the destination for tasks and notifications.

**Mail Slots**
- **Mail slots** are a simple, unreliable, insecure, and unidirectional protocol.
- Traffic isn't associated with the process, breaking process chain events.
- Supports a wide range of machines, including **Windows 2000**.
- Authentication isn't required or supported.
- **NetBIOS** name must be used instead of the IP address.

**Demo Overview**
- Demonstrates usage of Obligato with mail slots and creating a user on a target machine.
- Shows that mail slots work even with **SMBV1** disabled on **Windows 11**, **10**, and **Server 2016**.
- Wireshark captures show mail slot communication over **NetBIOS** and **SMB**.

**Windows Logon Session Compromise**
- Objective is to gain code execution in a target user's logon session.
- Mainstream techniques include executing code in a process or duplicating a token.
- Presenter's question: Can we create a process on demand without touching other processes or tokens?
- Task Scheduler can be used but has limitations, including obvious event logs and parent process association.

**Spoofing Parent Process**
- Goal is to spoof the parent process, not just create a process in the logon session.
- Requires **SE Debug** and **SCT CB** privileges.
- Opens a handle to the desired parent process and uses **CreateProcess** with specific attributes.
- Uses **WTSQueryUserToken** to get a primary access token for any logon session.
- Caller must be running in Session Zero as **NT Authority System** with SCT CB privilege.

**Detection and Evasion**
- Process Monitor and Process Explorer don't capture the spoofed parent process.
- Pavel Yusovich's research: Detection possible using **ETW** and specific kernel drivers.
- Creating thread with **HideFromDebugger** attribute causes process to crash if debugging is attempted.
- Reading **PEB** offset for **BeingDebugged** can detect if the process is being debugged.
- Checking **user domain** and **computer name** can determine if a machine is domain-joined.

**Conclusion**
- Obligato supports unidirectional and bidirectional transports with optional responses.
- Mail slots work even with SMBV1 disabled, and network traffic is disassociated from processes.
- Process execution can be achieved by spoofing the parent process with specific privileges.
- Detection methods vary, and some tools may miss the spoofed parent process information.
- Anti-debug and runtime awareness techniques can enhance malware resilience.