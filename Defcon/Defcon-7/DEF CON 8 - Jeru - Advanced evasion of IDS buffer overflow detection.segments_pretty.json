{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 18.66,
      "Text": "This text was transcribed using whisper model: large-v2\n\n I kind of put together a number of different panel ideas. This year we wanted to do a little"
    },
    {
      "Time_Start": 18.66,
      "Time_End": 24.92,
      "Text": " more in the technical side so that it wasn't all just script kiddies. So I can take it"
    },
    {
      "Time_Start": 24.92,
      "Time_End": 33.92,
      "Text": " by the attendance here that that was a good idea. I guess we'll keep doing that. Tomorrow"
    },
    {
      "Time_Start": 33.92,
      "Time_End": 38.64,
      "Text": " we've got a pretty full session in all three rooms and we'll try to get things more organized."
    },
    {
      "Time_Start": 38.64,
      "Time_End": 42.44,
      "Text": " I certainly appreciate your patience. I know a lot of you have been waiting outside trying"
    },
    {
      "Time_Start": 42.44,
      "Time_End": 50.480000000000004,
      "Text": " to get in here. I can tell you that typically Saturday was our big busy day. Today I think"
    },
    {
      "Time_Start": 50.480000000000004,
      "Time_End": 55.28,
      "Text": " we broke all the records in one day of what we did last year. So the attendance has been"
    },
    {
      "Time_Start": 55.28,
      "Time_End": 59.480000000000004,
      "Text": " really great and we thank you all for making that possible and we hope we put together"
    },
    {
      "Time_Start": 59.480000000000004,
      "Time_End": 64.48,
      "Text": " a good conference for you and a lot of party, a lot of fun. Hey, it's Vegas. Fucking A man,"
    },
    {
      "Time_Start": 64.48,
      "Time_End": 69.48,
      "Text": " you should have a great time. All right, so not to delay things any longer, we'll try"
    },
    {
      "Time_Start": 69.48,
      "Time_End": 75.08000000000001,
      "Text": " to keep a little bit on schedule if possible. New Hack City, the man himself, Jero the one"
    },
    {
      "Time_Start": 75.08000000000001,
      "Time_End": 78.24000000000001,
      "Text": " you've been waiting for. I'm going to turn the mic over to him and here you go."
    },
    {
      "Time_Start": 78.24,
      "Time_End": 92.44,
      "Text": " My name is Jero. I'm going to talk about advanced evasion of IDS buffer flow detection."
    },
    {
      "Time_Start": 92.44,
      "Time_End": 99.0,
      "Text": " This came about on a discussion on pound CDC. I was talking with T12 and Java man about"
    },
    {
      "Time_Start": 99.0,
      "Time_End": 107.36,
      "Text": " the way that IDSs are looking for strings and buffer overflows. Can you hit the slide?"
    },
    {
      "Time_Start": 107.36,
      "Time_End": 113.96,
      "Text": " This is a little background on me. I worked in embedded systems. I'm working on IDSs right"
    },
    {
      "Time_Start": 113.96,
      "Time_End": 119.96,
      "Text": " now. I'm a part of New Hack City, a collective in San Francisco, working on a couple of different"
    },
    {
      "Time_Start": 119.96,
      "Time_End": 130.84,
      "Text": " projects and of course we have T-shirts available. I'm going to start out with a brief overview"
    },
    {
      "Time_Start": 130.84,
      "Time_End": 135.6,
      "Text": " of buffer overflows. I'm going to cover just as a refresher the stuff that was in the Alpha"
    },
    {
      "Time_Start": 135.6,
      "Time_End": 140.64,
      "Text": " 1 article just to get everyone up to speed in case, I don't know, forgot something. Then"
    },
    {
      "Time_Start": 140.64,
      "Time_End": 146.07999999999998,
      "Text": " I'm also going to go over the kinds of signatures that IDSs are looking for and then the techniques"
    },
    {
      "Time_Start": 146.07999999999998,
      "Time_End": 151.76,
      "Text": " to code around the signatures so that you can bypass the IDS, get your attack through"
    },
    {
      "Time_Start": 151.76,
      "Time_End": 165.28,
      "Text": " and no one will notice. This is the stack on most computers. What you're trying to do"
    },
    {
      "Time_Start": 165.56,
      "Time_End": 171.4,
      "Text": " is these local variables here, you're trying to overwrite up this way and overwrite the"
    },
    {
      "Time_Start": 171.4,
      "Time_End": 177.32,
      "Text": " return address. Once you can get the return address to point back into your buffer, then"
    },
    {
      "Time_Start": 177.32,
      "Time_End": 185.96,
      "Text": " you can execute your own code. This is the shell code that was provided in the Alpha"
    },
    {
      "Time_Start": 185.96,
      "Time_End": 192.64,
      "Text": " 1 article. I'm going to step through it a little bit and cover what's going on. At the"
    },
    {
      "Time_Start": 192.64000000000001,
      "Time_End": 198.32000000000002,
      "Text": " top you're going to have a jump with an offset that's going to this call instruction. The"
    },
    {
      "Time_Start": 198.32000000000002,
      "Time_End": 203.8,
      "Text": " reason you need a jump in a call is that you have no way of knowing the current execution"
    },
    {
      "Time_Start": 203.8,
      "Time_End": 210.92000000000002,
      "Text": " pointer, the EIP. You need to know the EIP because most of the buffer overflows you're"
    },
    {
      "Time_Start": 210.92000000000002,
      "Time_End": 220.04000000000002,
      "Text": " going to try to execute a shell. The exec V call requires a BNSH string in memory, a"
    },
    {
      "Time_Start": 220.04,
      "Time_End": 227.28,
      "Text": " pointer to that string, the address of the string and a null. In order to insert these"
    },
    {
      "Time_Start": 227.28,
      "Time_End": 233.95999999999998,
      "Text": " things in the proper registers, we're going to need to know the actual address. The first"
    },
    {
      "Time_Start": 233.95999999999998,
      "Time_End": 243.35999999999999,
      "Text": " thing that happens is you overwrite the \u2011\u2011 can you go back one? You overwrite this return"
    },
    {
      "Time_Start": 243.35999999999999,
      "Time_End": 249.23999999999998,
      "Text": " address to point somewhere into here. You're usually going to pad this with no ops because"
    },
    {
      "Time_Start": 249.24,
      "Time_End": 253.0,
      "Text": " you don't know the exact address. You're kind of just guessing here. The no ops provides"
    },
    {
      "Time_Start": 253.0,
      "Time_End": 259.12,
      "Text": " some padding so you can guess in here. Usually your code will be like maybe 50 bytes and"
    },
    {
      "Time_Start": 259.12,
      "Time_End": 264.32,
      "Text": " this might be a 1K buffer so you have all kinds of space for no ops. It's pretty easy"
    },
    {
      "Time_Start": 264.32,
      "Time_End": 275.64,
      "Text": " to get in there. Okay. After you get the \u2011\u2011 you do the jump call, the address after the"
    },
    {
      "Time_Start": 275.64,
      "Time_End": 283.0,
      "Text": " call is going to be pushed on to the stack. Then to get the address, you pop it back into"
    },
    {
      "Time_Start": 283.0,
      "Time_End": 289.32,
      "Text": " ESI, which is a stack index. You can really use any register in protected mode. It doesn't"
    },
    {
      "Time_Start": 289.32,
      "Time_End": 297.52,
      "Text": " matter. There's no restrictions on base index. So what was shown in the article, but there's"
    },
    {
      "Time_Start": 297.52,
      "Time_End": 303.91999999999996,
      "Text": " other ways to do it so that it avoids the common signatures that are out there."
    },
    {
      "Time_Start": 303.92,
      "Time_End": 310.64000000000004,
      "Text": " After that, you put the address of this in the location right after the string. That's"
    },
    {
      "Time_Start": 310.64000000000004,
      "Time_End": 321.96000000000004,
      "Text": " going to be your pointer to the string. Then you clear out EAX. You use the low byte AL"
    },
    {
      "Time_Start": 321.96000000000004,
      "Time_End": 326.88,
      "Text": " and put that seven locations after ESI, after here. So that's terminating the string. That's"
    },
    {
      "Time_Start": 326.88,
      "Time_End": 335.36,
      "Text": " how you terminate the string. After that, you take EAX, which still has zeros, and put"
    },
    {
      "Time_Start": 335.36,
      "Time_End": 339.32,
      "Text": " it 12 locations after this, which there's nothing there, and that will be your null"
    },
    {
      "Time_Start": 339.32,
      "Time_End": 348.28,
      "Text": " string. There's four bytes of nulls. After that, you move B into AL, ESI into EBX, load"
    },
    {
      "Time_Start": 348.28,
      "Time_End": 354.08,
      "Text": " the addresses of the pointer into ECX and the address of the nulls into EDX. You do"
    },
    {
      "Time_Start": 354.08,
      "Time_End": 358.28,
      "Text": " an interrupt 80. This is code specifically that Linux, because that's how it handles"
    },
    {
      "Time_Start": 358.28,
      "Time_End": 364.84,
      "Text": " it. That's the kernel interface. So this does exec VE call. This call right here is exit"
    },
    {
      "Time_Start": 364.84,
      "Time_End": 367.64,
      "Text": " in case anything goes wrong here. You can exit out and you won't keep pulling stuff"
    },
    {
      "Time_Start": 367.64,
      "Time_End": 377.91999999999996,
      "Text": " off the stack. But that's just a basic overview. Here's some signatures from snort. This is"
    },
    {
      "Time_Start": 377.92,
      "Time_End": 385.56,
      "Text": " what it's looking for over the wire. This is a common overflow. This is 2.4.2 UFDP written"
    },
    {
      "Time_Start": 385.56,
      "Time_End": 392.88,
      "Text": " by ADM. Right here, these are the instructions it's looking for. This is doing an up to here"
    },
    {
      "Time_Start": 392.88,
      "Time_End": 398.96000000000004,
      "Text": " is an SUID call, and here's another SUID call. So it's looking for the instructions in the"
    },
    {
      "Time_Start": 398.96000000000004,
      "Time_End": 407.52000000000004,
      "Text": " packet. Similar to here, this is, I believe, a jump. Here's one of the most common ones."
    },
    {
      "Time_Start": 407.52,
      "Time_End": 411.08,
      "Text": " It's looking for long strings of no ops. It usually means that someone's trying to"
    },
    {
      "Time_Start": 411.08,
      "Time_End": 414.59999999999997,
      "Text": " overflow a buffer because they're using those for padding. And we'll show how to go around"
    },
    {
      "Time_Start": 414.59999999999997,
      "Time_End": 420.15999999999997,
      "Text": " that. And this right here, lots of people will use the slash bin SH to execute a shell,"
    },
    {
      "Time_Start": 420.15999999999997,
      "Time_End": 429.4,
      "Text": " so people are looking for this too. So in order to avoid detection, you have to code"
    },
    {
      "Time_Start": 429.4,
      "Time_End": 434.4,
      "Text": " a little differently. You can change the location or the order of the instructions you're using"
    },
    {
      "Time_Start": 434.40000000000003,
      "Time_End": 438.64000000000004,
      "Text": " so that the signature is different. You can use different instructions and achieve the"
    },
    {
      "Time_Start": 438.64000000000004,
      "Time_End": 444.64000000000004,
      "Text": " same objective. You can use different registers within the instructions. You can replace no"
    },
    {
      "Time_Start": 444.64000000000004,
      "Time_End": 456.04,
      "Text": " ops with other one byte instructions, or you can encrypt your payload. This code is copied"
    },
    {
      "Time_Start": 456.04,
      "Time_End": 469.64000000000004,
      "Text": " from the code I showed earlier. You see that it's zeroing it out here first. And then all"
    },
    {
      "Time_Start": 469.64000000000004,
      "Time_End": 476.84000000000003,
      "Text": " that's being changed is the order of moving this into AL. So if you move it around, the"
    },
    {
      "Time_Start": 476.84000000000003,
      "Time_End": 484.68,
      "Text": " signature will come out differently. Different instructions for the same objective. Instead"
    },
    {
      "Time_Start": 484.68,
      "Time_End": 492.8,
      "Text": " of doing like this type of call with a static offset, you can zero a register, move that"
    },
    {
      "Time_Start": 492.8,
      "Time_End": 496.36,
      "Text": " into the register, and call the register. And this will produce a different signature"
    },
    {
      "Time_Start": 496.36,
      "Time_End": 503.08,
      "Text": " than the original one. Another thing you can do instead of using, let's say, XOR to zero"
    },
    {
      "Time_Start": 503.08,
      "Time_End": 506.96000000000004,
      "Text": " it out, you can use the subtraction to zero it out. And these are all simple techniques"
    },
    {
      "Time_Start": 506.96000000000004,
      "Time_End": 525.52,
      "Text": " that people have used before, but it will evade signatures. The idea here is at the"
    },
    {
      "Time_Start": 525.52,
      "Time_End": 532.6,
      "Text": " top of the buffer overflow, there was a pop ESI. You could pop, let's say, EBX, and then"
    },
    {
      "Time_Start": 532.6,
      "Time_End": 537.24,
      "Text": " the address of the string is already located in EBX, which you'd use for later. So it's"
    },
    {
      "Time_Start": 537.24,
      "Time_End": 541.36,
      "Text": " actually optimizing the code, and it changes it around a little bit. Protected mode doesn't"
    },
    {
      "Time_Start": 541.36,
      "Time_End": 546.2,
      "Text": " matter what registers you use. With certain limitations, you can't push into EIP and stuff"
    },
    {
      "Time_Start": 546.2,
      "Time_End": 554.48,
      "Text": " like that. But most of the general purpose registers, you can do anything you want with."
    },
    {
      "Time_Start": 554.48,
      "Time_End": 573.44,
      "Text": " A lot of people use, I don't know. So pretend this is not here. The idea behind the no ops"
    },
    {
      "Time_Start": 573.44,
      "Time_End": 576.9200000000001,
      "Text": " is you're trying to provide some kind of padding to be able to jump into your exploit because"
    },
    {
      "Time_Start": 576.9200000000001,
      "Time_End": 581.5600000000001,
      "Text": " you don't know exactly where it's at. So no ops are used because they don't do anything."
    },
    {
      "Time_Start": 581.5600000000001,
      "Time_End": 585.5600000000001,
      "Text": " But you can use other instructions that are also one byte long that will not affect the"
    },
    {
      "Time_Start": 585.5600000000001,
      "Time_End": 590.48,
      "Text": " outcome of your exploit. You could use, like, CLC, clear the carry flag, or set the carry"
    },
    {
      "Time_Start": 590.48,
      "Time_End": 594.6800000000001,
      "Text": " flag, or set the direction flag, clear the direction flag. There's all kinds of one byte"
    },
    {
      "Time_Start": 594.6800000000001,
      "Time_End": 599.9200000000001,
      "Text": " instructions you can use. It will not affect your exploit in any way, but it will avoid"
    },
    {
      "Time_Start": 599.9200000000001,
      "Time_End": 609.96,
      "Text": " the signature that's looking for all no ops. I'm covering that next."
    },
    {
      "Time_Start": 609.96,
      "Time_End": 615.08,
      "Text": " The types of encryption are really simple. All we're trying to do is avoid the known"
    },
    {
      "Time_Start": 615.08,
      "Time_End": 621.48,
      "Text": " signature. We're not, we don't have a lot of space, so the first tile would be like"
    },
    {
      "Time_Start": 621.48,
      "Time_End": 626.0,
      "Text": " some kind of ROT13-ish, just add a constant offset or subtract a constant offset. The"
    },
    {
      "Time_Start": 626.0,
      "Time_End": 630.88,
      "Text": " second one would be an XOR with a constant. And the last one would be an XOR with a variable"
    },
    {
      "Time_Start": 630.88,
      "Time_End": 636.6,
      "Text": " where you, your XOR is based on the outcome of your previous instruction. It will provide"
    },
    {
      "Time_Start": 636.6,
      "Time_End": 645.6,
      "Text": " a little bit more protection. Self-modifying code, there's been a, like,"
    },
    {
      "Time_Start": 645.6,
      "Time_End": 652.64,
      "Text": " IMAP exploit, you had to add a 50 byte offset to the bin SH to get it through. There's filters,"
    },
    {
      "Time_Start": 652.64,
      "Time_End": 658.16,
      "Text": " sometimes HTTP filters won't allow certain characters through, so people have used self-modifying"
    },
    {
      "Time_Start": 658.16,
      "Time_End": 664.8000000000001,
      "Text": " code. And someone pointed out this week, someone on this side right here wrote some encrypted"
    },
    {
      "Time_Start": 664.8000000000001,
      "Time_End": 670.9200000000001,
      "Text": " shell code that would encrypt just the bin SH string at the end, but the rest of the"
    },
    {
      "Time_Start": 670.9200000000001,
      "Time_End": 680.32,
      "Text": " payload is still detectable by signatures. This is the architecture that I chose. This"
    },
    {
      "Time_Start": 680.32,
      "Time_End": 688.2400000000001,
      "Text": " is a decryption block, and this is an encrypted payload. So decryption block is up here. First"
    },
    {
      "Time_Start": 688.2400000000001,
      "Time_End": 691.8800000000001,
      "Text": " you start with a jump, and then you have a call. On your stack, you'll have the first"
    },
    {
      "Time_Start": 691.88,
      "Time_End": 698.72,
      "Text": " address of the encrypted instructions. Then in here, you start reading in the data, either"
    },
    {
      "Time_Start": 698.72,
      "Time_End": 704.0,
      "Text": " adding constant offset or doing an XOR with a constant and writing data back out. Once"
    },
    {
      "Time_Start": 704.0,
      "Time_End": 708.0,
      "Text": " this drops through and is done, you jump into the first instruction of your payload and"
    },
    {
      "Time_Start": 708.0,
      "Time_End": 718.24,
      "Text": " execute your exploit. This is probably really small to see, but it's the same thing I said."
    },
    {
      "Time_Start": 718.24,
      "Time_End": 724.92,
      "Text": " You start here. Here's the jump. It goes to the call. This code right here is not encrypted"
    },
    {
      "Time_Start": 724.92,
      "Time_End": 729.88,
      "Text": " for demonstration purposes, so you wouldn't be able to see what it was. And then you go"
    },
    {
      "Time_Start": 729.88,
      "Time_End": 737.88,
      "Text": " back up, start decrypting, go through the loop, drop down, jump into the instructions."
    },
    {
      "Time_Start": 737.88,
      "Time_End": 747.08,
      "Text": " It's pretty simple. I had a couple demos working exploits have been converted to this, but"
    },
    {
      "Time_Start": 747.08,
      "Time_End": 754.36,
      "Text": " we don't have the setup to have a live demo. I'm going to release the paper probably within"
    },
    {
      "Time_Start": 754.36,
      "Time_End": 758.76,
      "Text": " a week. I had Spark code written, but it's not fully tested and needs a little more work."
    },
    {
      "Time_Start": 758.76,
      "Time_End": 762.6800000000001,
      "Text": " So either I'm going to release the paper in about a week with the x86 code, or maybe two"
    },
    {
      "Time_Start": 762.6800000000001,
      "Time_End": 772.44,
      "Text": " weeks and have both x86 and Spark code examples. GCC sucks. You don't want to use GCC to code"
    },
    {
      "Time_Start": 772.44,
      "Time_End": 778.0,
      "Text": " exploits. There's lots of instructions. It will not compile. It took me forever to figure"
    },
    {
      "Time_Start": 778.0,
      "Time_End": 784.0400000000001,
      "Text": " out why I couldn't get the instructions to compile. The assembler GCC uses is called"
    },
    {
      "Time_Start": 784.0400000000001,
      "Time_End": 790.5600000000001,
      "Text": " GAS, and they chose not to implement any instructions that have 8-bit offsets. And we're working"
    },
    {
      "Time_Start": 790.5600000000001,
      "Time_End": 795.6800000000001,
      "Text": " with such little code that we're never going to go past 8-bit offsets, so like a loop instruction"
    },
    {
      "Time_Start": 795.84,
      "Time_End": 802.72,
      "Text": " can't use. So if you're going to write exploits, use NASM. NASM supports the full i3 and i6"
    },
    {
      "Time_Start": 802.72,
      "Time_End": 806.08,
      "Text": " instruction set, and this is what you want to use for optimization."
    },
    {
      "Time_Start": 806.08,
      "Time_End": 807.2800000000001,
      "Text": " Yeah?"
    },
    {
      "Time_Start": 807.2800000000001,
      "Time_End": 810.48,
      "Text": " You don't have a choice between the GCC and Spark, do you?"
    },
    {
      "Time_Start": 810.48,
      "Time_End": 818.24,
      "Text": " The question is, you don't have a choice on Spark. I don't know, I haven't looked into if Spark"
    },
    {
      "Time_Start": 818.24,
      "Time_End": 824.8000000000001,
      "Text": " doesn't do all the instructions, because all Spark's instructions are 32-bit, because I haven't"
    },
    {
      "Time_Start": 824.8000000000001,
      "Time_End": 830.0000000000001,
      "Text": " been writing anything for 64-bit stuff, but they're all 32-bit, they're all the same size, it's"
    },
    {
      "Time_Start": 830.0000000000001,
      "Time_End": 839.9200000000001,
      "Text": " RISC, so I'm assuming it would support all the instructions. The comment is, GCC 295 on Solaris"
    },
    {
      "Time_Start": 839.9200000000001,
      "Time_End": 856.1600000000001,
      "Text": " does support all the instructions. What's that? On Solaris 8. And that's it, is there any questions?"
    },
    {
      "Time_Start": 856.16,
      "Time_End": 865.1999999999999,
      "Text": " Yeah, how is this different from the techniques that are being used to evade virus scans?"
    },
    {
      "Time_Start": 865.1999999999999,
      "Time_End": 874.7199999999999,
      "Text": " The question is, how is this different from techniques virus writers use to evade detection?"
    },
    {
      "Time_Start": 874.7199999999999,
      "Time_End": 880.48,
      "Text": " Like a portable execution compressor?"
    },
    {
      "Time_Start": 880.48,
      "Time_End": 885.28,
      "Text": " I mean, I'm not saying that these are new techniques, I'm just saying these are things available that"
    },
    {
      "Time_Start": 885.28,
      "Time_End": 896.16,
      "Text": " you can do to avoid detection."
    },
    {
      "Time_Start": 896.16,
      "Time_End": 903.04,
      "Text": " If you're looking to detect this, in the paper I'm writing, it's going to have a sample decryption"
    },
    {
      "Time_Start": 903.04,
      "Time_End": 907.8399999999999,
      "Text": " header, so the best way probably would be to look at the header, get a signature for the header, and"
    },
    {
      "Time_Start": 907.8399999999999,
      "Time_End": 912.48,
      "Text": " look at that. But if anyone's writing an exploit and wants to go around detection, you just write your"
    },
    {
      "Time_Start": 912.48,
      "Time_End": 921.44,
      "Text": " decryption header and go around anything you want to. Any other questions?"
    },
    {
      "Time_Start": 921.44,
      "Time_End": 935.84,
      "Text": " How is this different from the techniques that are being used to evade virus scans?"
    },
    {
      "Time_Start": 935.84,
      "Time_End": 939.9200000000001,
      "Text": " I couldn't hear the whole question, but I think it was, how would you go about, what if someone wrote a"
    },
    {
      "Time_Start": 939.9200000000001,
      "Time_End": 946.1600000000001,
      "Text": " signature to detect the decryption technique? This is the standard decryption technique that I'm"
    },
    {
      "Time_Start": 946.1600000000001,
      "Time_End": 950.48,
      "Text": " releasing, but if you write assembly, you can write your own decryption technique that will be"
    },
    {
      "Time_Start": 950.48,
      "Time_End": 954.8800000000001,
      "Text": " different, that will have a different signature. Most of the signature-based IDSs are looking for"
    },
    {
      "Time_Start": 954.8800000000001,
      "Time_End": 960.1600000000001,
      "Text": " known attacks that already exist, that they have problems finding new attacks. And what they try to"
    },
    {
      "Time_Start": 960.1600000000001,
      "Time_End": 966.0000000000001,
      "Text": " use for new attacks is look for strings of no-ops, look for slash bin shs, and these little tricks to"
    },
    {
      "Time_Start": 966.0,
      "Time_End": 979.6,
      "Text": " try to look for new attacks, but you can go around them. Any more questions?"
    },
    {
      "Time_Start": 979.6,
      "Time_End": 982.64,
      "Text": " Go buy T-shirts."
    },
    {
      "Time_Start": 982.64,
      "Time_End": 988.4,
      "Text": " Thank you."
    }
  ]
}