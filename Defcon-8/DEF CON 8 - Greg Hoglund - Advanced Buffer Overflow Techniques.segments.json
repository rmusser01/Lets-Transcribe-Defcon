{"segments": [{"Time_Start": 0.0, "Time_End": 13.94, "Text": " Parts, not very technical."}, {"Time_Start": 13.94, "Time_End": 20.2, "Text": " I'm going to make some points about how you can abstractify your payload and separate"}, {"Time_Start": 20.2, "Time_End": 23.38, "Text": " it from your injection vector, and I'll cover some stuff in that."}, {"Time_Start": 23.38, "Time_End": 24.72, "Text": " It's kind of interesting."}, {"Time_Start": 24.72, "Time_End": 27.18, "Text": " The second part of the talk is towards the middle."}, {"Time_Start": 27.18, "Time_End": 29.98, "Text": " I'm going to talk about injection vectors, which is how to get"}, {"Time_Start": 30.0, "Time_End": 34.02, "Text": " control of the instruction pointer on a target system and there's a lot of tricks"}, {"Time_Start": 34.02, "Time_End": 37.66, "Text": " to do that and then finally last part will be payload which is of course the"}, {"Time_Start": 37.66, "Time_End": 42.9, "Text": " funnest you know all the nasty things you can do once you're on the system I'd"}, {"Time_Start": 42.9, "Time_End": 47.519999999999996, "Text": " like to take Ryan Russell I don't know if he's here but he recently busted his"}, {"Time_Start": 47.519999999999996, "Time_End": 52.2, "Text": " ass to get this book printed and I believe they have copies of it here about"}, {"Time_Start": 52.2, "Time_End": 57.6, "Text": " 100 or so I wrote chapter 8 which is specifically on buffer overflow's the"}, {"Time_Start": 57.6, "Time_End": 59.980000000000004, "Text": " name of the book is hackproofing your network"}, {"Time_Start": 60.0, "Time_End": 67.8, "Text": " RFPs in here, Elias from Bugtrack, Caesar, if you know Riley, Caesar, he's pretty cool,"}, {"Time_Start": 67.9, "Time_End": 69.34, "Text": " he's in here too talking about stuff."}, {"Time_Start": 69.7, "Time_End": 71.84, "Text": " Jeremy Roche, there's a lot of good authors in this book."}, {"Time_Start": 72.58, "Time_End": 76.58, "Text": " So anyways, if you want to come up after the talk, I can give you the ISB a number or whatever,"}, {"Time_Start": 76.7, "Time_End": 80.48, "Text": " or you can go find the security focus guys, and then they should have a copy of it up there."}, {"Time_Start": 82.94, "Time_End": 86.56, "Text": " Oh, it's, the question was, who's the publisher?"}, {"Time_Start": 88.18, "Time_End": 88.58, "Text": " Singris."}, {"Time_Start": 90.0, "Time_End": 96.38, "Text": " Okay, so, um, these slides are not posted."}, {"Time_Start": 97.26, "Time_End": 98.72, "Text": " Um, I can't, I can post them."}, {"Time_Start": 98.8, "Time_End": 102.96000000000001, "Text": " I believe that Jeff has probably already, you know, got something set up on the website to post them."}, {"Time_Start": 103.28, "Time_End": 108.96000000000001, "Text": " As well as this entire audio and video feeds are all, of course, posted as well, so you should be able to get to this."}, {"Time_Start": 109.74000000000001, "Time_End": 113.88, "Text": " Um, okay, so this talk is going to talk about some, uh, some ideas here."}, {"Time_Start": 113.92, "Time_End": 115.74000000000001, "Text": " Our first one is formalizing your attack method."}, {"Time_Start": 116.82, "Time_End": 119.98, "Text": " Um, so I'm going to talk kind of like a military person for a little while and talk about it."}, {"Time_Start": 120.0, "Time_End": 124.84, "Text": " if you were like a military organization, how you would design your cyber warfare group"}, {"Time_Start": 124.84, "Time_End": 130.56, "Text": " to take advantage of buffer overflows and payloads and, you know, how you can reuse your attack code."}, {"Time_Start": 131.46, "Time_End": 135.0, "Text": " You can have a group of goons over here doing something like building a bunch of payloads,"}, {"Time_Start": 135.0, "Time_End": 139.1, "Text": " kind of like a missile with a warhead. You don't have to always send a nuclear warhead."}, {"Time_Start": 139.1, "Time_End": 144.38, "Text": " You could send a biological warhead or an EMP warhead, whatever it is, but the delivery mechanism"}, {"Time_Start": 144.38, "Time_End": 149.0, "Text": " is still the same missile. So we're going to talk about how you can combine the payloads and"}, {"Time_Start": 149.0, "Time_End": 149.98, "Text": " injection vectors in this way."}, {"Time_Start": 150.0, "Time_End": 152.68, "Text": " Okay, so that's separating deployment from the payload."}, {"Time_Start": 153.68, "Time_End": 155.88, "Text": " Of course, payloads can be chosen for desired effect."}, {"Time_Start": 156.44, "Time_End": 166.54, "Text": " And then when we get more technical later in the talk, I'm going to talk about the restraints and some of the details of getting around those restraints when you have, like, for instance, limited size on the stack and things like that."}, {"Time_Start": 168.54, "Time_End": 169.72, "Text": " So what is an exploit?"}, {"Time_Start": 169.8, "Time_End": 171.8, "Text": " I'm not going to linger here, because everybody knows what that is."}, {"Time_Start": 173.04, "Time_End": 174.62, "Text": " It's really easy to find bugs."}, {"Time_Start": 174.96, "Time_End": 178.96, "Text": " If you watch USSR Labs, you see they post, like, I don't know, three advisories a day or something."}, {"Time_Start": 179.44, "Time_End": 179.96, "Text": " It's ridiculous."}, {"Time_Start": 180.0, "Time_End": 185.3, "Text": " us. What they do is, or how you do it, is to simply run automated testing tools. It's"}, {"Time_Start": 185.3, "Time_End": 190.04, "Text": " very simple to do this. I've written several in the lab that I have. I can download a bunch of software"}, {"Time_Start": 190.04, "Time_End": 195.78, "Text": " off of 2,000 and one day find 10 buffer overflow. It's ridiculously simple. All I have to say is code"}, {"Time_Start": 195.78, "Time_End": 201.04, "Text": " sucks. The quality of code that you have on your systems is absolutely treacherousal, horrible."}, {"Time_Start": 201.58, "Time_End": 205.72, "Text": " And that's why you're going to continue to see buffer overflows from now and years from now."}, {"Time_Start": 205.98, "Time_End": 209.98, "Text": " I think companies over the next few years are going to start to realize this, and they'll be"}, {"Time_Start": 210.0, "Time_End": 214.18, "Text": " a lot more attention paid to testing, due diligence, and things like that in the labs"}, {"Time_Start": 214.18, "Time_End": 217.14, "Text": " before, you know, critical infrastructure software is released."}, {"Time_Start": 218.22, "Time_End": 223.34, "Text": " So, okay, so obviously an exploit is a bug, takes advantage of a bug for some desired effect."}, {"Time_Start": 224.78, "Time_End": 227.02, "Text": " Okay, so on a bad day, I can just crash my machine."}, {"Time_Start": 228.52, "Time_End": 230.48, "Text": " Machine crashing is getting harder to do these days."}, {"Time_Start": 230.56, "Time_End": 234.62, "Text": " I mean, obviously on Windows 95, it's really easy, but on Windows NT, it's slightly harder"}, {"Time_Start": 234.62, "Time_End": 237.52, "Text": " because typically you're going to be exploiting a user-level process."}, {"Time_Start": 237.9, "Time_End": 239.54, "Text": " It's not going to crash the kernel generally."}, {"Time_Start": 240.0, "Time_End": 243.7, "Text": " However, a lot of times it's very simple to cause it to DOS the machine, which is, or lock it up,"}, {"Time_Start": 243.74, "Time_End": 245.34, "Text": " which is almost equivalent to crashing it."}, {"Time_Start": 246.66, "Time_End": 251.92, "Text": " If it's a VIP process, you know, very important process, such as, you know, CSRSS or something like that,"}, {"Time_Start": 252.02, "Time_End": 256.28, "Text": " and you manage to get into 100% CPU loop, that's pretty much crashing the machine because it's not going anywhere."}, {"Time_Start": 257.1, "Time_End": 258.94, "Text": " Most common, of course, is an application crash."}, {"Time_Start": 258.98, "Time_End": 261.22, "Text": " If I don't get my payload right, I'll bomb the application."}, {"Time_Start": 261.36, "Time_End": 262.56, "Text": " The application just goes away."}, {"Time_Start": 263.66, "Time_End": 265.92, "Text": " Another possibility is recoverable exception."}, {"Time_Start": 266.64, "Time_End": 268.78, "Text": " So everybody here know what an exception handling is all about?"}, {"Time_Start": 270.0, "Time_End": 272.98, "Text": " Exception handling does not prevent buffer overflow some working."}, {"Time_Start": 274.32, "Time_End": 279.56, "Text": " Exception handlers, the code that takes care of dealing with an exception is all on the stack."}, {"Time_Start": 279.66, "Time_End": 283.06, "Text": " So if I just keep going down the stack with my buffer overflow, I'll just override that."}, {"Time_Start": 283.3, "Time_End": 286.72, "Text": " It actually makes it easier to exploit the buffer overflow because I don't have to worry about offsets."}, {"Time_Start": 287.24, "Time_End": 291.04, "Text": " I can have the EIP, which is the instruction pointer on Intel, go anywhere I want to go."}, {"Time_Start": 291.28, "Time_End": 296.76, "Text": " And when it throws an exception, which is all being going to do, my exception handler that I just conveniently put in there for, it gets called."}, {"Time_Start": 298.16, "Time_End": 299.82, "Text": " Oh, this all totally applies to Win 32."}, {"Time_Start": 300.0, "Time_End": 300.44, "Text": " Absolutely."}, {"Time_Start": 300.74, "Time_End": 302.76, "Text": " Does it be FSM on the stack?"}, {"Time_Start": 303.0, "Time_End": 304.74, "Text": " Oh, no, the handler for it is on the stack."}, {"Time_Start": 304.84, "Time_End": 305.08, "Text": " You're right."}, {"Time_Start": 305.14, "Time_End": 305.42, "Text": " It is."}, {"Time_Start": 305.86, "Time_End": 307.44, "Text": " FS0, offset zero."}, {"Time_Start": 307.54, "Time_End": 308.94, "Text": " From FS is where the exception handler."}, {"Time_Start": 309.44, "Time_End": 311.9, "Text": " Structures called, but the previous exception handler is right there on the stack."}, {"Time_Start": 312.96, "Time_End": 314.46, "Text": " There's code which explains that."}, {"Time_Start": 314.56, "Time_End": 317.84, "Text": " If you want to come up after I get done talking, I can give all that to you."}, {"Time_Start": 319.34, "Time_End": 321.9, "Text": " So recoverable exception is a possible thing that can happen."}, {"Time_Start": 322.68, "Time_End": 325.0, "Text": " Of course, if we're successful, we'll get mobile code under the system."}, {"Time_Start": 325.12, "Time_End": 326.76, "Text": " Mobile code obviously is very, very deadly."}, {"Time_Start": 327.1, "Time_End": 328.26, "Text": " It can do a number of things."}, {"Time_Start": 329.48, "Time_End": 329.98, "Text": " You know, you're all."}, {"Time_Start": 330.0, "Time_End": 334.78, "Text": " familiar with viruses. And if you were around in the early scene, you saw lots of really"}, {"Time_Start": 334.78, "Time_End": 338.78, "Text": " cool stuff. Viruses were doing all kinds of neat things back in the day. This all can be done"}, {"Time_Start": 338.78, "Time_End": 343.24, "Text": " today. There's no reason that, you know, you have to limit yourself. Obviously, reading"}, {"Time_Start": 343.24, "Time_End": 347.5, "Text": " and writing files on the system is a other possibility and, of course, denial of Earth's tech."}, {"Time_Start": 353.24, "Time_End": 359.04, "Text": " Sorry, I'm going so fast, but I've got to get to these slides. So, exploits can obviously be grouped."}, {"Time_Start": 360.0, "Time_End": 365.4, "Text": " it keep coming back. You know, if you go through all the lists, 8LGM, bug track, and you go through"}, {"Time_Start": 365.4, "Time_End": 369.72, "Text": " them all and classify the bugs, you're going to see, you know, certain groups of them. This book"}, {"Time_Start": 369.72, "Time_End": 376.22, "Text": " actually covers chapter by chapter each one of these subjects, like improper filtering, content-based"}, {"Time_Start": 376.22, "Time_End": 382.12, "Text": " attacks, balance overflows, impersonation, bad authentication, obfuscation, which they call encryption, certain"}, {"Time_Start": 382.12, "Time_End": 385.64, "Text": " things like that. In other words, we just need better testing on software."}, {"Time_Start": 385.64, "Time_End": 388.88, "Text": " Okay, so what I was going to get to with this military missile thing."}, {"Time_Start": 390.0, "Time_End": 392.0, "Text": " your attack payload is not the same as your entry point."}, {"Time_Start": 392.0, "Time_End": 399.0, "Text": " Let's see you have a given bug on a given version of exchange, on a given service pack,"}, {"Time_Start": 399.0, "Time_End": 401.0, "Text": " that's going to all dictate how your injection vector looks."}, {"Time_Start": 401.0, "Time_End": 406.0, "Text": " And when I say injection vector, I mean the code that gets the instruction pointer owned by you."}, {"Time_Start": 406.0, "Time_End": 410.0, "Text": " Once you have that, however, the payload can be anything it wants."}, {"Time_Start": 410.0, "Time_End": 416.0, "Text": " So what you can have is a situation where you've got like a group of goons over here all writing injection vectors"}, {"Time_Start": 416.0, "Time_End": 418.0, "Text": " for all these qualified hosts."}, {"Time_Start": 418.0, "Time_End": 420.0, "Text": " I have 335 different buffers."}, {"Time_Start": 420.0, "Time_End": 422.0, "Text": " for overflows in this collection over here,"}, {"Time_Start": 422.0, "Time_End": 425.0, "Text": " and it applies to these 2,048 machines."}, {"Time_Start": 425.0, "Time_End": 428.0, "Text": " And I send out my scanner crew, and they scan out and find"}, {"Time_Start": 428.0, "Time_End": 432.0, "Text": " 27 eligible hosts on this network, and then I go over here."}, {"Time_Start": 432.0, "Time_End": 434.0, "Text": " My other group of goons is all right in the payloads,"}, {"Time_Start": 434.0, "Time_End": 437.0, "Text": " and I can then select from the payloads that I want to use and deploy into their network."}, {"Time_Start": 437.0, "Time_End": 442.0, "Text": " Maybe have a payload that shoots out ICMP redirects so I can screw with their switch."}, {"Time_Start": 442.0, "Time_End": 446.0, "Text": " Maybe have another one that does an ARPS booth across the network and floods your entire subnet."}, {"Time_Start": 446.0, "Time_End": 449.0, "Text": " Maybe have another one that DOS is their router."}, {"Time_Start": 449.0, "Time_End": 450.0, "Text": " So this is like missile versus a router."}, {"Time_Start": 450.0, "Time_End": 451.0, "Text": " warhead technology."}, {"Time_Start": 451.0, "Time_End": 457.0, "Text": " All of the governments of the world are investing time and money into doing this."}, {"Time_Start": 457.0, "Time_End": 461.0, "Text": " So I just talked about this."}, {"Time_Start": 461.0, "Time_End": 466.0, "Text": " Obviously, there's a difference here and you can keep them separate and match them as you need."}, {"Time_Start": 466.0, "Time_End": 472.0, "Text": " Um, yes, injection vectors."}, {"Time_Start": 472.0, "Time_End": 474.0, "Text": " They're target dependent."}, {"Time_Start": 474.0, "Time_End": 477.0, "Text": " What this means is that if you have a different service pack, for instance,"}, {"Time_Start": 477.0, "Time_End": 479.0, "Text": " you might have to have a completely different injection vector."}, {"Time_Start": 479.0, "Time_End": 480.0, "Text": " But the people is that,"}, {"Time_Start": 480.0, "Time_End": 485.0, "Text": " can be the same. So injection vectors are tied explicitly with the environment you're about to exploit."}, {"Time_Start": 485.0, "Time_End": 489.0, "Text": " A different version of exchange, a different version of IIS."}, {"Time_Start": 489.0, "Time_End": 491.0, "Text": " You know, one service pack is different."}, {"Time_Start": 491.0, "Time_End": 495.0, "Text": " Maybe a different version of Colonel 32 DOL in the system makes all the difference,"}, {"Time_Start": 495.0, "Time_End": 496.0, "Text": " and now I have to have a new injection vector."}, {"Time_Start": 496.0, "Time_End": 498.0, "Text": " But the payload all the time remains the same."}, {"Time_Start": 498.0, "Time_End": 504.0, "Text": " So it's very OS dependent, target dependent, and oh yes,"}, {"Time_Start": 504.0, "Time_End": 506.0, "Text": " encoding dependent, that's very important as well."}, {"Time_Start": 506.0, "Time_End": 509.0, "Text": " If I'm sending the exploit through anything that does content,"}, {"Time_Start": 509.0, "Time_End": 514.0, "Text": " does content filtering, a URL request, for instance, only that has certain valid characters,"}, {"Time_Start": 514.0, "Time_End": 521.5, "Text": " mine encoding as well, then that's going to limit the number of characters, a character set, that is, that I can use."}, {"Time_Start": 521.5, "Time_End": 527.5, "Text": " Well, when I'm thinking about character set, what I'm really thinking about is the number of assembly language instructions,"}, {"Time_Start": 527.5, "Time_End": 528.5, "Text": " which are available to me, right?"}, {"Time_Start": 528.5, "Time_End": 533.5, "Text": " So I might have a limited set of instructions that I can use for my injection vector."}, {"Time_Start": 533.5, "Time_End": 538.5, "Text": " The payload is independent of the injection vector in most cases."}, {"Time_Start": 538.5, "Time_End": 542.0, "Text": " It'll still depend on the architecture of the machine, of course."}, {"Time_Start": 542.0, "Time_End": 544.0, "Text": " You're going to have an Intel payload."}, {"Time_Start": 544.0, "Time_End": 546.0, "Text": " It may not work on a Spark machine."}, {"Time_Start": 546.0, "Time_End": 550.5, "Text": " However, I can tell you that there are payloads that will work on multiple hardware platforms,"}, {"Time_Start": 550.5, "Time_End": 551.5, "Text": " and that's pretty elite trick."}, {"Time_Start": 555.5, "Time_End": 556.5, "Text": " Think of it like a virus."}, {"Time_Start": 556.5, "Time_End": 558.5, "Text": " Just think payload, think virus is almost the same thing."}, {"Time_Start": 558.5, "Time_End": 562.0, "Text": " Once it's established, it can spread by any means."}, {"Time_Start": 562.0, "Time_End": 564.5, "Text": " Trust relationships, obviously, are the easiest,"}, {"Time_Start": 564.5, "Time_End": 566.5, "Text": " and then another one is scanning for more bugs."}, {"Time_Start": 566.5, "Time_End": 567.5, "Text": " There are worms."}, {"Time_Start": 567.5, "Time_End": 568.5, "Text": " There are worms."}, {"Time_Start": 568.5, "Time_End": 571.5, "Text": " on the internet now that are crawling all over the place using buffer overflows."}, {"Time_Start": 571.5, "Time_End": 575.5, "Text": " We don't hear about it very often, but if you read cert, you'll see that ADM worm has been"}, {"Time_Start": 575.5, "Time_End": 578.5, "Text": " rooting machines for almost a year now, and it's amazing, the same bind vulnerability,"}, {"Time_Start": 578.5, "Time_End": 580.5, "Text": " and it's been around forever."}, {"Time_Start": 580.5, "Time_End": 581.5, "Text": " And, you know, you see that."}, {"Time_Start": 581.5, "Time_End": 585.5, "Text": " So there is evidence of this occurring."}, {"Time_Start": 585.5, "Time_End": 589.5, "Text": " The payload, this is some of the things you could do, denial service, obviously."}, {"Time_Start": 589.5, "Time_End": 593.5, "Text": " I could use it as a machine I exploit, could use them as a launching point for a distributed,"}, {"Time_Start": 593.5, "Time_End": 597.5, "Text": " or I could get several of them perhaps into a DDoS attack,"}, {"Time_Start": 597.5, "Time_End": 601.5, "Text": " remote shells, one you probably have all seen at some point or another."}, {"Time_Start": 601.5, "Time_End": 605.5, "Text": " The remote shell does not have to be tell net-like or netcat-like."}, {"Time_Start": 605.5, "Time_End": 607.5, "Text": " It can also just be some sort of covert channel."}, {"Time_Start": 607.5, "Time_End": 609.5, "Text": " I could put some code on the system."}, {"Time_Start": 609.5, "Time_End": 613.5, "Text": " For instance, it looks at offset 48 in any packet coming through the system"}, {"Time_Start": 613.5, "Time_End": 617.5, "Text": " and looks there for a special character, and if it sees that, it interprets the next five characters"}, {"Time_Start": 617.5, "Time_End": 619.5, "Text": " of some command. It's a covert channel."}, {"Time_Start": 619.5, "Time_End": 621.5, "Text": " I could embed those in ICMP packets."}, {"Time_Start": 621.5, "Time_End": 625.5, "Text": " If I don't have access to kernel mode, in other words, I can't promiscously sniff under NT,"}, {"Time_Start": 625.5, "Time_End": 626.5, "Text": " I could just patch IIS."}, {"Time_Start": 626.5, "Time_End": 631.5, "Text": " patch I.I.S. I could go into the IIS process space. Let's say that's the one that I"}, {"Time_Start": 631.5, "Time_End": 636.2, "Text": " exploited. And I could just go and find where it does all the URL moniker, you know,"}, {"Time_Start": 636.2, "Time_End": 639.9, "Text": " where it parses all the URLs. Well, then I could just use that as a covert channel and send"}, {"Time_Start": 639.9, "Time_End": 643.2, "Text": " all my commands through a URL. And it would be, nobody would be none the wiser."}, {"Time_Start": 644.4, "Time_End": 649.0, "Text": " Obviously, the worms are the most dangerous of all. And root kit is obviously for stealth."}, {"Time_Start": 651.8, "Time_End": 656.16, "Text": " You can say that an injector will only work on certain number of qualified hosts. I think when"}, {"Time_Start": 656.16, "Time_End": 661.36, "Text": " When Barnaby Jack and EI wrote the IIS injector back last year about this time, actually,"}, {"Time_Start": 661.8, "Time_End": 664.3199999999999, "Text": " it worked about on 20% of the web hosts currently online."}, {"Time_Start": 664.52, "Time_End": 668.52, "Text": " That was enough to cause insane amounts of damage to the e-commerce world."}, {"Time_Start": 669.6, "Time_End": 672.92, "Text": " So it's real. When you find a buffer overflow, it means something."}, {"Time_Start": 673.28, "Time_End": 676.1999999999999, "Text": " There are plenty of them out there that can root tons and tons of machines."}, {"Time_Start": 676.88, "Time_End": 678.24, "Text": " A lot of them that nobody knows about."}, {"Time_Start": 680.64, "Time_End": 681.04, "Text": " Okay."}, {"Time_Start": 682.5, "Time_End": 686.14, "Text": " Obviously, there's two types of injection. The first type is content."}, {"Time_Start": 686.16, "Time_End": 693.16, "Text": " What that means is I'm sending some content as being interpreted by an application server or some kind, and I'm going to bend its arm."}, {"Time_Start": 693.16, "Time_End": 695.16, "Text": " I'm going to say, hey dude, I want you to do this over here."}, {"Time_Start": 695.16, "Time_End": 699.16, "Text": " The process remains at control. It's doing something it shouldn't do, but it remains in control."}, {"Time_Start": 699.16, "Time_End": 704.16, "Text": " That's the content-based attack. That's doing things like what Rainforest Puppy did with the RDS exploit."}, {"Time_Start": 704.16, "Time_End": 709.16, "Text": " Then there's buffer overflow. This is different significantly because the process is no longer in control."}, {"Time_Start": 709.16, "Time_End": 714.16, "Text": " I have removed that process from the ability to control where it's going."}, {"Time_Start": 714.16, "Time_End": 716.16, "Text": " I've changed the instruction pointer on the, on the, on the,"}, {"Time_Start": 716.16, "Time_End": 718.16, "Text": " the chip."}, {"Time_Start": 718.16, "Time_End": 720.16, "Text": " I'm going to make it point to my own code."}, {"Time_Start": 720.16, "Time_End": 724.16, "Text": " Trust-based, content-based stuff."}, {"Time_Start": 724.16, "Time_End": 728.16, "Text": " Trust-based spreading could be like any of the stuff you've known"}, {"Time_Start": 728.16, "Time_End": 733.16, "Text": " for years with the virus, you know, underground, boot floppies, things like that."}, {"Time_Start": 733.16, "Time_End": 735.16, "Text": " Let me go through here."}, {"Time_Start": 735.16, "Time_End": 740.16, "Text": " Melissa is obviously another good example of a trust-based exploitation."}, {"Time_Start": 740.16, "Time_End": 743.16, "Text": " You know, I'm opening mail from somebody I thought, you know, I knew."}, {"Time_Start": 746.16, "Time_End": 749.16, "Text": " I have a couple slides talking about the government's stuff."}, {"Time_Start": 749.16, "Time_End": 753.16, "Text": " There's a couple declassified reports that originally were classified, but they were released."}, {"Time_Start": 753.16, "Time_End": 759.16, "Text": " As early as 95, they had evidence of Cuba doing virus teams."}, {"Time_Start": 759.16, "Time_End": 763.16, "Text": " You can bet you're asked that today they're still doing it and they're using buffer overflows."}, {"Time_Start": 763.16, "Time_End": 766.16, "Text": " The Russian KGB, as early as 91, was involved in this type of stuff."}, {"Time_Start": 766.16, "Time_End": 772.16, "Text": " And then E&Y reports, I had a couple that came up just talking about virus and mobile code."}, {"Time_Start": 772.16, "Time_End": 775.16, "Text": " Over 50% of the people they interviewed reported this is a problem."}, {"Time_Start": 775.16, "Time_End": 776.16, "Text": " is a problem."}, {"Time_Start": 776.16, "Time_End": 778.16, "Text": " The UK, same deal."}, {"Time_Start": 778.16, "Time_End": 782.16, "Text": " Costing almost $8,000 per incident on average to repair these things."}, {"Time_Start": 782.16, "Time_End": 784.16, "Text": " So it's very expensive."}, {"Time_Start": 784.16, "Time_End": 787.16, "Text": " Does everybody remember the Morris Worm or at least heard of it?"}, {"Time_Start": 787.16, "Time_End": 789.16, "Text": " Yeah, it's real famous."}, {"Time_Start": 789.16, "Time_End": 790.16, "Text": " It shut down most of the internet."}, {"Time_Start": 790.16, "Time_End": 793.16, "Text": " Of course, most of the internet back then wasn't very big."}, {"Time_Start": 793.16, "Time_End": 795.16, "Text": " So today, we have the same problem."}, {"Time_Start": 795.16, "Time_End": 799.16, "Text": " See, the Morris Worm worked really well because everything on the systems that it was attacking"}, {"Time_Start": 799.16, "Time_End": 800.16, "Text": " was all the same."}, {"Time_Start": 800.16, "Time_End": 801.16, "Text": " It's like a monoculture."}, {"Time_Start": 801.16, "Time_End": 805.16, "Text": " And I believe it was a single buffer overflow in FingerD and some send mail."}, {"Time_Start": 805.16, "Time_End": 809.16, "Text": " exploit and use both of them if I remember correctly."}, {"Time_Start": 809.16, "Time_End": 814.16, "Text": " And it spread rapidly and it took over most of the systems because there was this monoculture."}, {"Time_Start": 814.16, "Time_End": 816.16, "Text": " Well, today we still have that monoculture."}, {"Time_Start": 816.16, "Time_End": 818.16, "Text": " We have that Wintel platform out there."}, {"Time_Start": 818.16, "Time_End": 821.16, "Text": " And then we also have the Linux and Apache platform."}, {"Time_Start": 821.16, "Time_End": 824.16, "Text": " Together, those two things make up most of the web server market."}, {"Time_Start": 824.16, "Time_End": 827.16, "Text": " And that's pretty amazing to think that if I had one really good buffer"}, {"Time_Start": 827.16, "Time_End": 831.16, "Text": " for I could take out half of the web server market out there."}, {"Time_Start": 831.16, "Time_End": 834.16, "Text": " In 89, there was another war."}, {"Time_Start": 834.16, "Time_End": 848.16, "Text": " there was another worm. I just did this just to show that there are worms and they've been reported. It was called Wank. It hit NASA and it spread into HEPNET, which is a high energy physics network by the US DOE."}, {"Time_Start": 848.16, "Time_End": 852.16, "Text": " And it took two weeks to get to clean all those systems up. So there's evidence of that."}, {"Time_Start": 852.16, "Time_End": 856.16, "Text": " Okay, so let's get into buffer overflows a little more."}, {"Time_Start": 860.16, "Time_End": 864.14, "Text": " There are a couple ways to do it. The most common is a stack overflow, but"}, {"Time_Start": 864.16, "Time_End": 866.0, "Text": " but I'm sure you've all heard of a heap overflow as well."}, {"Time_Start": 866.26, "Time_End": 867.52, "Text": " I'm going to talk about both of those."}, {"Time_Start": 868.06, "Time_End": 871.86, "Text": " The goal of a buffer overflow is to own the instruction pointer."}, {"Time_Start": 872.4, "Time_End": 873.3199999999999, "Text": " That is the goal."}, {"Time_Start": 875.6, "Time_End": 878.04, "Text": " So I'm going to get it to point to something that I control."}, {"Time_Start": 878.6, "Time_End": 883.02, "Text": " Now, how many of you here think that the only place you could put instruction code is on the stack itself?"}, {"Time_Start": 884.88, "Time_End": 886.64, "Text": " I could put my instruction code anywhere."}, {"Time_Start": 887.14, "Time_End": 889.64, "Text": " I could put my instruction code on the heap, on the stack."}, {"Time_Start": 890.04, "Time_End": 893.78, "Text": " Any transaction that's recently taken place in any form on the system"}, {"Time_Start": 893.78, "Time_End": 896.28, "Text": " is probably going to be floating around in memory somewhere."}, {"Time_Start": 897.1999999999999, "Time_End": 899.16, "Text": " That's usually going to be on the heap in many cases."}, {"Time_Start": 899.4, "Time_End": 903.4599999999999, "Text": " So there we have a lot of room to play if we can get at least some of our code into the system anywhere."}, {"Time_Start": 903.88, "Time_End": 909.8199999999999, "Text": " The stack portion of the overflow may just be enough information to get us to jump to the other place in the code"}, {"Time_Start": 909.8199999999999, "Time_End": 912.06, "Text": " where we have the rest of our goodies waiting to be run."}, {"Time_Start": 913.4399999999999, "Time_End": 916.5, "Text": " Okay, so the challenges with all of this, just injecting and owning EIP,"}, {"Time_Start": 917.0799999999999, "Time_End": 920.24, "Text": " is there's obviously size restrictions many times."}, {"Time_Start": 920.9399999999999, "Time_End": 923.68, "Text": " And depending on those size restrictions, we might have to make some very tight,"}, {"Time_Start": 923.78, "Time_End": 928.02, "Text": " code. However, I can tell you it's amazing what you can do with 100 bytes."}, {"Time_Start": 929.78, "Time_End": 934.3399999999999, "Text": " Assembly language is very interesting in that you can do a lot with like a few bytes."}, {"Time_Start": 934.62, "Time_End": 936.28, "Text": " Two bytes is a very important instruction."}, {"Time_Start": 936.9599999999999, "Time_End": 942.76, "Text": " Well, that's, if I had every instruction with only two bytes long, and I had 100 bytes, that's 50 instructions."}, {"Time_Start": 942.9599999999999, "Time_End": 944.72, "Text": " Believe me, I can do a lot with 50 instructions."}, {"Time_Start": 947.06, "Time_End": 948.16, "Text": " Is somebody asking a question?"}, {"Time_Start": 949.16, "Time_End": 949.4399999999999, "Text": " Okay."}, {"Time_Start": 951.86, "Time_End": 953.72, "Text": " Obviously, I'm going to be sending a payload as well."}, {"Time_Start": 953.78, "Time_End": 960.06, "Text": " If the injector part and the payload part are in the same buffer, for example, all on the stack together,"}, {"Time_Start": 960.16, "Time_End": 965.38, "Text": " which is typical in the most of these that you see, we have to make sure that they don't step on each other."}, {"Time_Start": 965.48, "Time_End": 966.8199999999999, "Text": " So I'm going to talk about that a little bit."}, {"Time_Start": 968.14, "Time_End": 969.72, "Text": " Then there's this whole thing called offsets."}, {"Time_Start": 970.02, "Time_End": 972.72, "Text": " You typically see these under Unix Systems and not so much under NT."}, {"Time_Start": 973.36, "Time_End": 977.26, "Text": " When you don't know where you are, remember, you don't know where your code ended up, so you kind of have to guess."}, {"Time_Start": 977.5, "Time_End": 978.8199999999999, "Text": " So I'm going to talk about that a little bit."}, {"Time_Start": 979.12, "Time_End": 982.14, "Text": " And then obviously you probably all know the issue with null characters."}, {"Time_Start": 982.14, "Time_End": 986.84, "Text": " If you're doing a store copy and there's a null in there, the store copy stops at the null."}, {"Time_Start": 987.3199999999999, "Time_End": 991.08, "Text": " So obviously we can't have a null character just floating around in the middle of our payload,"}, {"Time_Start": 991.18, "Time_End": 992.78, "Text": " or we're going to have half a payload when they get done."}, {"Time_Start": 993.34, "Time_End": 994.9, "Text": " So there's a couple of encoding tricks."}, {"Time_Start": 995.46, "Time_End": 996.52, "Text": " You can go a little further with this."}, {"Time_Start": 996.56, "Time_End": 1001.08, "Text": " I'm just going to talk about null characters today, but in this book is some information on some other stuff."}, {"Time_Start": 1001.16, "Time_End": 1006.6, "Text": " If you have other types of encoding, for instance, URL or MIM, there are certain characters you cannot use."}, {"Time_Start": 1006.6, "Time_End": 1009.16, "Text": " So there's just some tricks for getting around this problem."}, {"Time_Start": 1009.16, "Time_End": 1011.46, "Text": " And they're actually explained in Chapter 8 in this book here."}, {"Time_Start": 1012.14, "Time_End": 1017.24, "Text": " Okay, so, oh, Ryan, hi, thank you very much."}, {"Time_Start": 1017.38, "Time_End": 1021.3, "Text": " I'm going to ask a couple questions, I guess, sometime, and I'll try to think of good ones,"}, {"Time_Start": 1021.42, "Time_End": 1023.62, "Text": " and then if you get the question right, I'll give you a book."}, {"Time_Start": 1026.26, "Time_End": 1029.5, "Text": " So this one, someone let me borrow, I'm hiding it over here."}, {"Time_Start": 1033.1, "Time_End": 1035.44, "Text": " Okay, so I'm going to go through this."}, {"Time_Start": 1035.6, "Time_End": 1037.3, "Text": " I'm going to tell you why Stack Overflow works."}, {"Time_Start": 1037.3, "Time_End": 1041.94, "Text": " The stack keeps track of a lot more information than just user-supplied information."}, {"Time_Start": 1042.14, "Time_End": 1044.72, "Text": " keeps track of what we might call housekeeping data."}, {"Time_Start": 1045.2800000000002, "Time_End": 1050.44, "Text": " And housekeeping data is essentially what we're going to try to overwrite in order to own the instruction pointer."}, {"Time_Start": 1051.38, "Time_End": 1053.26, "Text": " So there's a couple of issues there."}, {"Time_Start": 1053.3400000000001, "Time_End": 1059.16, "Text": " Obviously, if we're filling a buffer, that buffer should be growing towards our housekeeping data that we want to nuke, right?"}, {"Time_Start": 1059.46, "Time_End": 1060.8600000000001, "Text": " And we then must override it."}, {"Time_Start": 1061.76, "Time_End": 1062.8400000000001, "Text": " So I'm going to talk about that."}, {"Time_Start": 1063.3000000000002, "Time_End": 1069.48, "Text": " When we make a subroutine call and on the architecture of any processor, we've got to store the location of where we just were."}, {"Time_Start": 1069.8200000000002, "Time_End": 1071.3000000000002, "Text": " Otherwise, we won't know how to get back."}, {"Time_Start": 1071.3, "Time_End": 1078.8999999999999, "Text": " So typically we're moving along, we're running, bad-da-da-da-da, you know, and we're jumping here, jumping there, jumping there, jump in here, oh, I'm done here, okay, so now I've got to get back."}, {"Time_Start": 1079.02, "Time_End": 1082.56, "Text": " I've got to remember how to get back to here, and then I've got to remember how to get back to here, to here."}, {"Time_Start": 1082.6399999999999, "Time_End": 1085.3, "Text": " So all that information is what the stack is for."}, {"Time_Start": 1085.74, "Time_End": 1087.08, "Text": " It keeps track of all this information."}, {"Time_Start": 1087.22, "Time_End": 1089.0, "Text": " So let me do this little animation for you."}, {"Time_Start": 1090.0, "Time_End": 1092.56, "Text": " This IP appears, that's an instruction pointer."}, {"Time_Start": 1092.98, "Time_End": 1097.32, "Text": " This block right here is actually kind of my little version of the Intel processor."}, {"Time_Start": 1097.68, "Time_End": 1099.86, "Text": " It would look different depending on what processor you have."}, {"Time_Start": 1099.8600000000001, "Time_End": 1101.5200000000002, "Text": " but the concept is the same."}, {"Time_Start": 1102.42, "Time_End": 1105.0000000000002, "Text": " So the instruction pointer is pointing out into a code page."}, {"Time_Start": 1105.14, "Time_End": 1110.46, "Text": " See that says code at the bottom, and that little pink square is supposed to mean there's some code there that's important to us."}, {"Time_Start": 1110.7, "Time_End": 1111.18, "Text": " And we're running."}, {"Time_Start": 1111.3000000000002, "Time_End": 1113.44, "Text": " Now, let's say that code calls some other subroutine."}, {"Time_Start": 1113.8200000000002, "Time_End": 1116.9, "Text": " So we have to take the instruction pointer and put it on the stack."}, {"Time_Start": 1117.98, "Time_End": 1118.2600000000002, "Text": " Okay?"}, {"Time_Start": 1118.8000000000002, "Time_End": 1123.22, "Text": " Then the stack grows, oh, then the IP, of course, is updated to point to a new location."}, {"Time_Start": 1123.66, "Time_End": 1129.5800000000002, "Text": " The stack grows up, and that area up in here is going to be used as temporary scratch pad."}, {"Time_Start": 1129.8600000000001, "Time_End": 1131.94, "Text": " while this other subroutine does its things."}, {"Time_Start": 1132.1200000000001, "Time_End": 1135.4, "Text": " All the automatic variables on that subroutine will be stored here on the stack,"}, {"Time_Start": 1135.7, "Time_End": 1140.64, "Text": " and that means, you know, arrays and buffers as well as like integers,"}, {"Time_Start": 1140.88, "Time_End": 1141.72, "Text": " whatever it's using."}, {"Time_Start": 1142.44, "Time_End": 1147.5200000000002, "Text": " So then the stack pointer is updated to point to the top, and we run."}, {"Time_Start": 1147.66, "Time_End": 1150.92, "Text": " And then when we're done, it goes away."}, {"Time_Start": 1151.0200000000002, "Time_End": 1155.2800000000002, "Text": " It's kind of like deallocation, even though it's really just adjusting the stack pointer back to where it was."}, {"Time_Start": 1155.6200000000001, "Time_End": 1158.8000000000002, "Text": " And the old IP is put back and originally where it were."}, {"Time_Start": 1158.8, "Time_End": 1162.3, "Text": " That's the essence of the stack operation here."}, {"Time_Start": 1162.84, "Time_End": 1165.82, "Text": " Now, obviously, what we're going to try to do is change this value."}, {"Time_Start": 1168.76, "Time_End": 1170.52, "Text": " So the stack overflow works like this."}, {"Time_Start": 1170.62, "Time_End": 1173.76, "Text": " There's our housekeeping data, or a return pointer, whatever you want to call it."}, {"Time_Start": 1174.3999999999999, "Time_End": 1175.12, "Text": " Stack grows."}, {"Time_Start": 1175.32, "Time_End": 1178.9199999999998, "Text": " Now I'll say it's going to fill a buffer, like a stir copy, let's say."}, {"Time_Start": 1179.52, "Time_End": 1183.18, "Text": " The buffers grow down towards the information, towards the housekeeping data."}, {"Time_Start": 1183.6, "Time_End": 1185.46, "Text": " So it grows, see, right over the top."}, {"Time_Start": 1185.8799999999999, "Time_End": 1186.72, "Text": " That's how it works."}, {"Time_Start": 1187.56, "Time_End": 1188.7, "Text": " Now, the problem with the null."}, {"Time_Start": 1188.8, "Time_End": 1191.86, "Text": " character would be this. Same exact slide, pretty much."}, {"Time_Start": 1192.32, "Time_End": 1194.32, "Text": " Store the housekeeping data. It grows up."}, {"Time_Start": 1194.8, "Time_End": 1197.22, "Text": " We go down, but we hit a null character. Guess what?"}, {"Time_Start": 1197.52, "Time_End": 1202.12, "Text": " We stop. So essentially, we can't have a null character in our payload, and that's the problem."}, {"Time_Start": 1203.08, "Time_End": 1209.04, "Text": " Now, I'm going to show you a trick, which will allow you to have a null character in one particular instance."}, {"Time_Start": 1211.36, "Time_End": 1214.68, "Text": " But, okay, so obviously if we're going to have, we're going to override the housekeeping data,"}, {"Time_Start": 1214.68, "Time_End": 1217.08, "Text": " we need to be able to make sure the null is past that, right?"}, {"Time_Start": 1217.62, "Time_End": 1217.96, "Text": " Okay."}, {"Time_Start": 1217.98, "Time_End": 1218.74, "Text": " Does everybody get that?"}, {"Time_Start": 1218.8, "Time_End": 1220.54, "Text": " Okay, great."}, {"Time_Start": 1221.78, "Time_End": 1224.82, "Text": " Okay, so I'm going to talk a little bit, little and big Indian numbers."}, {"Time_Start": 1225.46, "Time_End": 1226.86, "Text": " Has everybody here at least heard of this term?"}, {"Time_Start": 1230.1399999999999, "Time_End": 1232.2, "Text": " This might be basic for some of you out there."}, {"Time_Start": 1233.04, "Time_End": 1235.48, "Text": " And, you know, I know it's said advanced buffer overflow techniques,"}, {"Time_Start": 1235.8999999999999, "Time_End": 1240.8999999999999, "Text": " but if you want to get some more insane stuff, I'll be around, you know, later on tonight,"}, {"Time_Start": 1241.26, "Time_End": 1244.8, "Text": " and I can show you some really insane stuff, but I'll just go over some of the things I have here."}, {"Time_Start": 1245.34, "Time_End": 1246.4199999999998, "Text": " Okay, so big and little Indian."}, {"Time_Start": 1246.4199999999998, "Time_End": 1248.6599999999999, "Text": " The Intel processor stores numbers,"}, {"Time_Start": 1248.8, "Time_End": 1254.04, "Text": " backwards, in my opinion. What this means is, if I have a number, 0,0,40, 100, F,"}, {"Time_Start": 1254.62, "Time_End": 1258.24, "Text": " stored internally on the processor, it's actually FFF, 1,4,000."}, {"Time_Start": 1260.8799999999999, "Time_End": 1263.8799999999999, "Text": " Spark architecture, I believe, is big in there, which means it doesn't do that."}, {"Time_Start": 1266.12, "Time_End": 1269.68, "Text": " So, okay, the least significant bite goes first. I think everybody can understand this, right?"}, {"Time_Start": 1269.72, "Time_End": 1273.98, "Text": " It's just backwards. So I'm going to store an address somewhere. I actually do have to store it this way"}, {"Time_Start": 1273.98, "Time_End": 1276.44, "Text": " on an Intel processor. I have to store it in this reverse form here."}, {"Time_Start": 1278.8, "Time_End": 1282.6599999999999, "Text": " So, let's say there's our, these colors might look a little,"}, {"Time_Start": 1282.74, "Time_End": 1284.06, "Text": " these colors might look a little screwed up."}, {"Time_Start": 1284.12, "Time_End": 1286.0, "Text": " I'm sorry, I apologize if you can't read it from the back."}, {"Time_Start": 1286.58, "Time_End": 1288.0, "Text": " So here's our housekeeping data."}, {"Time_Start": 1288.78, "Time_End": 1289.9199999999998, "Text": " Same as image as before."}, {"Time_Start": 1290.08, "Time_End": 1291.56, "Text": " We have an original return address."}, {"Time_Start": 1292.06, "Time_End": 1296.26, "Text": " This one here up in 7F is probably talking in NTDL somewhere, typical."}, {"Time_Start": 1296.96, "Time_End": 1300.5, "Text": " All right, so then our stacks are going to grow, and then we're going to override it."}, {"Time_Start": 1301.56, "Time_End": 1303.04, "Text": " And we're going to be able to put a null there."}, {"Time_Start": 1303.1399999999999, "Time_End": 1303.56, "Text": " Now watch."}, {"Time_Start": 1304.4199999999998, "Time_End": 1305.72, "Text": " Now I know that's really hard to see."}, {"Time_Start": 1305.72, "Time_End": 1308.78, "Text": " This says 0C, 2040."}, {"Time_Start": 1308.8, "Time_End": 1313.96, "Text": " zero zero zero. It's this address, I believe right here. Yeah. So does everybody see"}, {"Time_Start": 1313.96, "Time_End": 1319.1, "Text": " how I can put a null in there and they still have it work? This stack starts in an"}, {"Time_Start": 1319.1, "Time_End": 1322.46, "Text": " address, or runs in an address range, which starts with zero zero, but that doesn't"}, {"Time_Start": 1322.46, "Time_End": 1326.5, "Text": " prevent me because of the little Indianness of the x86 processor. I can now"}, {"Time_Start": 1326.5, "Time_End": 1332.3, "Text": " jump into that area. I've put an address in there that is valid. So injection is complete."}, {"Time_Start": 1332.3, "Time_End": 1338.68, "Text": " We've put in an address. Now let's talk about where we can put the payload."}, {"Time_Start": 1338.8, "Time_End": 1343.96, "Text": " Does everybody get how, like, I guess I didn't explain that very well."}, {"Time_Start": 1345.44, "Time_End": 1350.6599999999999, "Text": " Because I put that there, when we return from the function that we were in, and we replace EIP,"}, {"Time_Start": 1351.5, "Time_End": 1353.86, "Text": " that's going to be taken from the housekeeping data that we replaced."}, {"Time_Start": 1353.94, "Time_End": 1354.78, "Text": " Does everybody understand that?"}, {"Time_Start": 1355.4199999999998, "Time_End": 1355.6399999999999, "Text": " Okay."}, {"Time_Start": 1356.86, "Time_End": 1357.4199999999998, "Text": " What's that?"}, {"Time_Start": 1358.46, "Time_End": 1365.58, "Text": " How do I put the, the, you have to, you have to supply more, okay."}, {"Time_Start": 1365.58, "Time_End": 1367.3, "Text": " The question was, how do you actually overflow?"}, {"Time_Start": 1368.12, "Time_End": 1368.78, "Text": " What you have to do?"}, {"Time_Start": 1368.8, "Time_End": 1372.58, "Text": " is depend on the fact that there's going to be some software out there that does"}, {"Time_Start": 1372.58, "Time_End": 1376.0, "Text": " no bounds checking. It's going to look for a null character, like I showed you in the previous"}, {"Time_Start": 1376.0, "Time_End": 1381.6, "Text": " slide, to stop that overflow. Now, if you don't supply that null character and it doesn't check"}, {"Time_Start": 1381.6, "Time_End": 1387.04, "Text": " for it, it happily will continue copying as long as it wants, as long as you want. That's essentially"}, {"Time_Start": 1387.04, "Time_End": 1392.44, "Text": " the problem with some calls like S printf or stir copy. They look for a null character and they"}, {"Time_Start": 1392.44, "Time_End": 1397.08, "Text": " don't allow you, the programmer, to specify the size of the buffer. They assume that whatever"}, {"Time_Start": 1397.08, "Time_End": 1398.78, "Text": " you supply will be smaller than the buffer."}, {"Time_Start": 1398.8, "Time_End": 1400.68, "Text": " that was allocated."}, {"Time_Start": 1400.68, "Time_End": 1401.6, "Text": " Okay."}, {"Time_Start": 1401.6, "Time_End": 1406.56, "Text": " So after we've done this, let's talk about where you can put the actual code that you want to run, okay?"}, {"Time_Start": 1406.56, "Time_End": 1412.8, "Text": " So here's our housekeeping data, we have a stack, we overflow, there's our new address, and"}, {"Time_Start": 1412.8, "Time_End": 1418.9199999999998, "Text": " the null is okay, so it jumps back into here, and then that's our payload area."}, {"Time_Start": 1418.9199999999998, "Time_End": 1421.36, "Text": " We can put our instruction code in that."}, {"Time_Start": 1421.36, "Time_End": 1423.9199999999998, "Text": " That is the simplest form of stack overflow."}, {"Time_Start": 1423.9199999999998, "Time_End": 1428.56, "Text": " That's not going to give me a whole lot of room, unfortunately, but it would work."}, {"Time_Start": 1428.56, "Time_End": 1431.56, "Text": " So now let me talk about a little way to make some more room."}, {"Time_Start": 1441.56, "Time_End": 1442.56, "Text": " You find where the instruction pointer is stored on the stack?"}, {"Time_Start": 1442.56, "Time_End": 1445.56, "Text": " The question was, how do you find out where the instruction pointer is stored on a stack?"}, {"Time_Start": 1445.56, "Time_End": 1447.56, "Text": " It'll be in a known location."}, {"Time_Start": 1447.56, "Time_End": 1452.56, "Text": " You will have soft ice, you will explode it, and you will know that it is exactly,"}, {"Time_Start": 1452.56, "Time_End": 1455.56, "Text": " you know, X number of characters in in this particular buffer."}, {"Time_Start": 1455.56, "Time_End": 1458.54, "Text": " A trick that I use is I send, when I'm sending a"}, {"Time_Start": 1458.56, "Time_End": 1460.6, "Text": " buffer overflow initially, kind of black box testing."}, {"Time_Start": 1460.6, "Time_End": 1465.04, "Text": " I'm supplying large buffers, you know, with a Perl script or something into an application."}, {"Time_Start": 1465.04, "Time_End": 1468.12, "Text": " You know, I'm giving a username that is 300 characters long."}, {"Time_Start": 1468.12, "Time_End": 1471.76, "Text": " The characters I send, I alternate them in a predictable way."}, {"Time_Start": 1471.76, "Time_End": 1476.06, "Text": " And again, the algorithm for that is in this book, and they alternate in a predictable way so"}, {"Time_Start": 1476.06, "Time_End": 1480.8, "Text": " that if I get a crash, you know, when I get a crash, it's going to tell me what address"}, {"Time_Start": 1480.8, "Time_End": 1482.06, "Text": " it crashed on."}, {"Time_Start": 1482.06, "Time_End": 1486.0, "Text": " So I see that, and I'll know exactly what four characters it crashed on, because it'll tell me."}, {"Time_Start": 1486.0, "Time_End": 1487.8, "Text": " And I'll know exactly what the offset is."}, {"Time_Start": 1487.8, "Time_End": 1488.54, "Text": " It's just a little trick."}, {"Time_Start": 1488.56, "Time_End": 1491.32, "Text": " for debugging."}, {"Time_Start": 1491.32, "Time_End": 1495.4199999999998, "Text": " Oh, probably."}, {"Time_Start": 1497.3799999999999, "Time_End": 1497.6799999999998, "Text": " Sorry."}, {"Time_Start": 1498.56, "Time_End": 1499.6599999999999, "Text": " As long as you get it."}, {"Time_Start": 1501.96, "Time_End": 1505.94, "Text": " Okay, so if we have, let's say we were dealing with the previous slide here, and we have a very"}, {"Time_Start": 1505.94, "Time_End": 1506.54, "Text": " confined payload."}, {"Time_Start": 1506.54, "Time_End": 1508.7, "Text": " So we have confined payload, what are some of the things we can do?"}, {"Time_Start": 1509.32, "Time_End": 1511.8999999999999, "Text": " What are the restrictions, how we can get around this restriction?"}, {"Time_Start": 1511.8999999999999, "Time_End": 1517.24, "Text": " So we can compress our payload and then have a little decompresser in there that'll grow it out"}, {"Time_Start": 1517.24, "Time_End": 1521.1, "Text": " larger somewhere else, maybe on the heap or further down the stack."}, {"Time_Start": 1521.6, "Time_End": 1523.42, "Text": " We can use preloaded functions."}, {"Time_Start": 1523.6200000000001, "Time_End": 1528.02, "Text": " Obviously, any process that's running on the computer is going to have a bazillion"}, {"Time_Start": 1528.02, "Time_End": 1530.16, "Text": " functions already loaded and ready to use."}, {"Time_Start": 1530.22, "Time_End": 1530.98, "Text": " That's how it works."}, {"Time_Start": 1531.28, "Time_End": 1533.58, "Text": " So as long as we know where they are, we can just call them."}, {"Time_Start": 1533.6200000000001, "Time_End": 1535.32, "Text": " We don't have to load them or do anything weird."}, {"Time_Start": 1535.86, "Time_End": 1537.46, "Text": " And oftentimes, this works fine."}, {"Time_Start": 1538.94, "Time_End": 1541.48, "Text": " That means that my payload doesn't have to build what's called a jump table."}, {"Time_Start": 1542.66, "Time_End": 1546.08, "Text": " Of course, the key is that all these functions I want to use have to already be loaded."}, {"Time_Start": 1546.64, "Time_End": 1547.22, "Text": " I can use hard."}, {"Time_Start": 1547.24, "Time_End": 1551.38, "Text": " coded addresses. There's two ways to use a preloaded function. I can either go scan for it and"}, {"Time_Start": 1551.38, "Time_End": 1555.22, "Text": " find it because I don't trust it. It's always going to be in the same place. Or I'm just going"}, {"Time_Start": 1555.22, "Time_End": 1559.52, "Text": " to believe to myself that's always going to be in the same place. So I hard code the address to it."}, {"Time_Start": 1559.98, "Time_End": 1564.14, "Text": " I wrote a buffer overflow about a year ago that had the hard coded address for Reg open key and"}, {"Time_Start": 1564.14, "Time_End": 1569.1200000000001, "Text": " and Reg right key. And those worked fine. The hard coded address worked fine. So it was very small."}, {"Time_Start": 1570.36, "Time_End": 1572.86, "Text": " Once again, this has to be predictable and it has to always be there."}, {"Time_Start": 1574.48, "Time_End": 1577.08, "Text": " And of course, if you're sending a payload, you're going to also have data."}, {"Time_Start": 1577.24, "Time_End": 1579.18, "Text": " probably saw along with the payload and I'm going to show that in a second."}, {"Time_Start": 1579.6, "Time_End": 1584.24, "Text": " You can't put very much data on something if you have this, this confined space problem."}, {"Time_Start": 1585.74, "Time_End": 1587.56, "Text": " So let's say we want to use more stack."}, {"Time_Start": 1587.92, "Time_End": 1590.5, "Text": " Okay, now, you were complaining about the typo."}, {"Time_Start": 1590.8, "Time_End": 1593.3, "Text": " I'll get preempt to you here. This is also a typo."}, {"Time_Start": 1593.64, "Time_End": 1595.54, "Text": " Our stack should be zero, four zero."}, {"Time_Start": 1596.46, "Time_End": 1598.0, "Text": " Okay, so ignore that seven, seven."}, {"Time_Start": 1599.86, "Time_End": 1601.02, "Text": " We're going to use more stack."}, {"Time_Start": 1601.18, "Time_End": 1603.02, "Text": " So here we are. Here's our haluxsaving data."}, {"Time_Start": 1603.56, "Time_End": 1604.14, "Text": " Da-da-da-da-da-da."}, {"Time_Start": 1605.0, "Time_End": 1606.88, "Text": " Now we go down the stack."}, {"Time_Start": 1607.24, "Time_End": 1608.44, "Text": " We put a whole bunch of stuff on it."}, {"Time_Start": 1610.06, "Time_End": 1614.06, "Text": " Now, when we overwrite this address, notice I didn't put a zero zero at the end."}, {"Time_Start": 1614.5, "Time_End": 1616.24, "Text": " We have to pick an address."}, {"Time_Start": 1617.0, "Time_End": 1620.24, "Text": " Now, the code page has plenty of stuff that's not in zero zero range, right?"}, {"Time_Start": 1620.44, "Time_End": 1622.6200000000001, "Text": " Most of it, in fact, I don't believe it's in zero range."}, {"Time_Start": 1623.26, "Time_End": 1626.84, "Text": " We can pick an address out there anywhere and it'll jump to it, right?"}, {"Time_Start": 1626.92, "Time_End": 1627.96, "Text": " So that's the key."}, {"Time_Start": 1628.04, "Time_End": 1630.24, "Text": " We cannot have a null in the address, and I'll show you the trick."}, {"Time_Start": 1632.96, "Time_End": 1635.36, "Text": " So here's our larger version of the stack."}, {"Time_Start": 1635.36, "Time_End": 1637.1200000000001, "Text": " We overflow a long ways."}, {"Time_Start": 1637.24, "Time_End": 1639.58, "Text": " You see we went quite a distance here."}, {"Time_Start": 1640.24, "Time_End": 1641.1200000000001, "Text": " So we've got plenty of room."}, {"Time_Start": 1642.1200000000001, "Time_End": 1645.5, "Text": " We're still going to have to overwrite this guy, though, because it's a return pointer."}, {"Time_Start": 1646.14, "Time_End": 1647.26, "Text": " So we go down there, bunk."}, {"Time_Start": 1647.7, "Time_End": 1648.96, "Text": " We still override this guy."}, {"Time_Start": 1649.72, "Time_End": 1655.22, "Text": " We make it point somewhere that ends up getting the instruction pointer to point back into this buffer."}, {"Time_Start": 1655.96, "Time_End": 1657.4, "Text": " I'll show that trick in a second."}, {"Time_Start": 1659.56, "Time_End": 1663.3, "Text": " Essentially, we jump to here, and then we begin execution."}, {"Time_Start": 1663.3, "Time_End": 1664.6200000000001, "Text": " Much more room now."}, {"Time_Start": 1667.24, "Time_End": 1668.14, "Text": " Everybody get that."}, {"Time_Start": 1670.6200000000001, "Time_End": 1673.1, "Text": " So when does the address contain a null character?"}, {"Time_Start": 1673.9, "Time_End": 1675.3, "Text": " I call it a lowland address."}, {"Time_Start": 1675.7, "Time_End": 1677.46, "Text": " Under NT, the stack is stored in lowland."}, {"Time_Start": 1677.56, "Time_End": 1681.14, "Text": " What that means is that there's a zero-zero in the first part of the address."}, {"Time_Start": 1684.6200000000001, "Time_End": 1685.82, "Text": " Limits the size of our payload."}, {"Time_Start": 1686.46, "Time_End": 1689.24, "Text": " I believe the stack under Linux is not stored in low-end, store in Highland."}, {"Time_Start": 1689.24, "Time_End": 1691.76, "Text": " I think it starts with 7-7 or B-EF or BB."}, {"Time_Start": 1692.82, "Time_End": 1694.28, "Text": " Hobbs was in the audience earlier."}, {"Time_Start": 1694.54, "Time_End": 1695.5, "Text": " He probably knows that."}, {"Time_Start": 1696.78, "Time_End": 1697.22, "Text": " BF."}, {"Time_Start": 1697.24, "Time_End": 1703.04, "Text": " Okay. So Linux wouldn't have this problem with the low-land address."}, {"Time_Start": 1703.58, "Time_End": 1706.72, "Text": " I am an NT guy, so this is what I'm going to talk about mostly."}, {"Time_Start": 1707.32, "Time_End": 1707.66, "Text": " Yes, sir."}, {"Time_Start": 1708.54, "Time_End": 1713.34, "Text": " The question that was asked earlier, if you're trying to populate IP with an address inside the stack."}, {"Time_Start": 1713.68, "Time_End": 1715.08, "Text": " How do you know what that address is going to be?"}, {"Time_Start": 1715.16, "Time_End": 1716.84, "Text": " Some stacks is constantly growing and shrinking?"}, {"Time_Start": 1717.42, "Time_End": 1723.3, "Text": " The question was, if I populate the instruction pointer with an address which points into the stack,"}, {"Time_Start": 1723.38, "Time_End": 1724.54, "Text": " how do I know where I am?"}, {"Time_Start": 1724.92, "Time_End": 1726.54, "Text": " Remember when I was talking about guessing offsets?"}, {"Time_Start": 1726.54, "Time_End": 1728.3999999999999, "Text": " That's exactly what that's about."}, {"Time_Start": 1728.68, "Time_End": 1729.42, "Text": " I have to guess."}, {"Time_Start": 1729.84, "Time_End": 1732.8, "Text": " And I'm going to show you a trick in a moment that makes guessing it very easy."}, {"Time_Start": 1733.6399999999999, "Time_End": 1741.46, "Text": " In some other cases, I'm going to actually grab that address out of a register or something else,"}, {"Time_Start": 1741.5, "Time_End": 1742.6399999999999, "Text": " and I'll show you that trick as well."}, {"Time_Start": 1743.68, "Time_End": 1746.8799999999999, "Text": " Okay, so Highland address is no zeros in the address."}, {"Time_Start": 1747.0, "Time_End": 1748.3, "Text": " Okay, so you guys all understand that."}, {"Time_Start": 1748.3, "Time_End": 1748.7, "Text": " It's a big deal."}, {"Time_Start": 1749.3999999999999, "Time_End": 1752.46, "Text": " Okay, so under NT, you're going to be dealing with large payload, low-wind address."}, {"Time_Start": 1753.18, "Time_End": 1756.52, "Text": " We cannot use the low-wind address directly because it'll limit our payload size."}, {"Time_Start": 1756.54, "Time_End": 1761.0, "Text": " is typically. So we're going to have to figure out a way to get back to the stack"}, {"Time_Start": 1761.0, "Time_End": 1768.54, "Text": " without directly hard coding the address of a stack, of the stack itself in there."}, {"Time_Start": 1768.6399999999999, "Time_End": 1771.6599999999999, "Text": " Okay, so I'm going to show a couple tricks. I have a couple more than are in slides,"}, {"Time_Start": 1771.72, "Time_End": 1776.52, "Text": " but I'll talk about them. We can use a CPU register. Typically, the CPU is going to have a bunch"}, {"Time_Start": 1776.52, "Time_End": 1780.8999999999999, "Text": " of information stored in the registers, right? And oftentimes, one of those registers are even more"}, {"Time_Start": 1780.8999999999999, "Time_End": 1785.44, "Text": " than one, will be pointing to locations on the stack near or about the area I'm going to overflow."}, {"Time_Start": 1785.44, "Time_End": 1789.56, "Text": " And what this means is if I can get my payload or my overflow to cover that area,"}, {"Time_Start": 1789.8, "Time_End": 1793.3600000000001, "Text": " all I have to do is just make sure my payload starts right there, and it'll jump to it."}, {"Time_Start": 1793.68, "Time_End": 1794.5, "Text": " I'll show that trick."}, {"Time_Start": 1796.8400000000001, "Time_End": 1798.98, "Text": " So we have a register pointing into the stack somewhere."}, {"Time_Start": 1799.1200000000001, "Time_End": 1800.24, "Text": " Let's say it's the D register."}, {"Time_Start": 1802.6200000000001, "Time_End": 1806.04, "Text": " I overflow far enough so that I can begin putting payload information here."}, {"Time_Start": 1808.16, "Time_End": 1809.9, "Text": " Here's our housekeeping data. We overflow."}, {"Time_Start": 1811.1200000000001, "Time_End": 1815.42, "Text": " And we do something that makes the value of D end up in IB."}, {"Time_Start": 1815.44, "Time_End": 1822.66, "Text": " And what this does then is, boom. We're now executing right here. That's the basics of the trick."}, {"Time_Start": 1823.26, "Time_End": 1829.04, "Text": " How do we really do that technically? Well, if I could find an FFD0, two bytes in there somewhere,"}, {"Time_Start": 1829.26, "Time_End": 1834.0, "Text": " that's call EAX. What that means is if EAX has the address of something on the stack,"}, {"Time_Start": 1834.26, "Time_End": 1840.42, "Text": " if I can just get EIP to point to somewhere in location and memory somewhere that has these two bytes,"}, {"Time_Start": 1840.88, "Time_End": 1844.68, "Text": " then boom, I'm now going to call through EAX and be on the stack."}, {"Time_Start": 1845.44, "Time_End": 1850.44, "Text": " The key thing to remember about this is, I don't actually, when I put that address there in the housekeeping data,"}, {"Time_Start": 1851.14, "Time_End": 1856.0, "Text": " all it has to do, that address has to simply be the location of these two bytes."}, {"Time_Start": 1856.1000000000001, "Time_End": 1857.0800000000002, "Text": " It doesn't have to be in code."}, {"Time_Start": 1857.14, "Time_End": 1857.94, "Text": " It could be in data."}, {"Time_Start": 1858.8600000000001, "Time_End": 1859.1000000000001, "Text": " Okay?"}, {"Time_Start": 1859.5800000000002, "Time_End": 1860.8200000000002, "Text": " The computer doesn't care."}, {"Time_Start": 1862.76, "Time_End": 1864.22, "Text": " Call EBX, call ECX."}, {"Time_Start": 1864.28, "Time_End": 1865.78, "Text": " Just a couple examples of the same thing."}, {"Time_Start": 1868.98, "Time_End": 1874.38, "Text": " Another way to do it is to find a push of the particular register we're interested in,"}, {"Time_Start": 1874.38, "Time_End": 1879.2, "Text": " followed at some point in the future by a return, just as long as there's only one push."}, {"Time_Start": 1879.6000000000001, "Time_End": 1883.72, "Text": " That means the topmost value on the stack is going to be what we pushed, right?"}, {"Time_Start": 1883.8000000000002, "Time_End": 1886.68, "Text": " Let's say it's the D register, the one we just showed in the slide."}, {"Time_Start": 1887.14, "Time_End": 1891.7, "Text": " So now D is sitting on the top of the stack, and then maybe a couple instructions later we see a return."}, {"Time_Start": 1892.66, "Time_End": 1896.88, "Text": " Boom, it pops the top of the stack off what was the D register and puts it in EIP."}, {"Time_Start": 1897.18, "Time_End": 1899.22, "Text": " Same exact thing, just a different way to do it."}, {"Time_Start": 1901.0400000000002, "Time_End": 1903.38, "Text": " I don't have a slide for this one, but I'll talk about it."}, {"Time_Start": 1903.42, "Time_End": 1904.0200000000002, "Text": " It's another one I found."}, {"Time_Start": 1904.38, "Time_End": 1907.96, "Text": " A couple layers down on the stack, let's say it's not a register."}, {"Time_Start": 1908.22, "Time_End": 1909.48, "Text": " There's nothing in the registers we can use."}, {"Time_Start": 1912.24, "Time_End": 1915.14, "Text": " But let's say that a couple of 32-bit values down on the stack,"}, {"Time_Start": 1915.74, "Time_End": 1917.96, "Text": " we have an address of something on the stack,"}, {"Time_Start": 1918.42, "Time_End": 1919.6200000000001, "Text": " self-referencing in a way."}, {"Time_Start": 1919.7600000000002, "Time_End": 1923.6200000000001, "Text": " That happens all the time, especially if you're passing arguments from subroutine to subroutine to subroutine."}, {"Time_Start": 1924.0600000000002, "Time_End": 1927.88, "Text": " I pass the automatic variable of one subroutine to a parameter of a second subroutine."}, {"Time_Start": 1928.24, "Time_End": 1930.24, "Text": " The original is going to point back into the first one,"}, {"Time_Start": 1930.24, "Time_End": 1931.94, "Text": " which has its own little area there on the stack frame."}, {"Time_Start": 1934.38, "Time_End": 1935.3400000000001, "Text": " Where was I going with this?"}, {"Time_Start": 1935.4, "Time_End": 1935.64, "Text": " Oh, yes."}, {"Time_Start": 1935.7600000000002, "Time_End": 1937.5200000000002, "Text": " So if it's down there, a couple layers,"}, {"Time_Start": 1937.92, "Time_End": 1940.68, "Text": " as long as I can go out there in code and I can find a bunch of pops,"}, {"Time_Start": 1940.92, "Time_End": 1944.68, "Text": " all in a row, pop, pop, pop, pop, pop, pop, I can peel off the stack, if you will,"}, {"Time_Start": 1944.8400000000001, "Time_End": 1947.46, "Text": " until I get to the value I want, and then there has to be a return."}, {"Time_Start": 1947.8000000000002, "Time_End": 1948.92, "Text": " This works all the time."}, {"Time_Start": 1949.3000000000002, "Time_End": 1951.8000000000002, "Text": " There's plenty of places in NT, DLL, where you can find code."}, {"Time_Start": 1952.0400000000002, "Time_End": 1954.5, "Text": " It'll pop three or four, and then you can get a return."}, {"Time_Start": 1958.42, "Time_End": 1958.74, "Text": " Okay."}, {"Time_Start": 1959.8000000000002, "Time_End": 1962.8400000000001, "Text": " So I'm going to talk a little bit about what you were saying out of the offset"}, {"Time_Start": 1962.8400000000001, "Time_End": 1964.3600000000001, "Text": " and how we can reduce the precision."}, {"Time_Start": 1964.38, "Time_End": 1965.22, "Text": " of that a little bit."}, {"Time_Start": 1968.74, "Time_End": 1970.46, "Text": " We can use no-ops."}, {"Time_Start": 1971.0, "Time_End": 1972.3200000000002, "Text": " Does everybody know what a no-op is?"}, {"Time_Start": 1972.42, "Time_End": 1975.0, "Text": " Single-byte instruction, hex-90."}, {"Time_Start": 1976.0, "Time_End": 1978.42, "Text": " And it runs and does nothing, right?"}, {"Time_Start": 1978.7800000000002, "Time_End": 1981.14, "Text": " So there's this thing called a no-op sled."}, {"Time_Start": 1981.88, "Time_End": 1984.92, "Text": " And what we can do is make an area of just no-ops."}, {"Time_Start": 1985.0200000000002, "Time_End": 1987.14, "Text": " And if we jump anywhere in there, we can be sure"}, {"Time_Start": 1987.14, "Time_End": 1989.7, "Text": " we're going to kind of slide through it and end up somewhere else."}, {"Time_Start": 1990.2, "Time_End": 1991.3200000000002, "Text": " I call that a no-op sled."}, {"Time_Start": 1991.94, "Time_End": 1992.4, "Text": " Excuse me."}, {"Time_Start": 1994.38, "Time_End": 2003.2, "Text": " So illustrated, we grow, there's our null, yeah, and then we're going to overwrite that data there,"}, {"Time_Start": 2003.2, "Time_End": 2004.6000000000001, "Text": " there, housekeeping data."}, {"Time_Start": 2005.8000000000002, "Time_End": 2010.3400000000001, "Text": " Now, in this area of the code down here that we filled would be all no-ops, okay?"}, {"Time_Start": 2011.0800000000002, "Time_End": 2013.72, "Text": " This would be real payload up here, and this would be all no-ops."}, {"Time_Start": 2013.8200000000002, "Time_End": 2018.18, "Text": " We're going to guess, we know what kind of changes from system to system, but we're going to guess"}, {"Time_Start": 2018.18, "Time_End": 2023.5600000000002, "Text": " that within this range anywhere, if we can put an address in there, we're going to hit the no-op sled."}, {"Time_Start": 2023.7, "Time_End": 2024.3600000000001, "Text": " So here's what will happen."}, {"Time_Start": 2024.38, "Time_End": 2031.24, "Text": " we guess, we hit the no-op sled, and then if we're successful, we then slide through it,"}, {"Time_Start": 2031.5200000000002, "Time_End": 2034.38, "Text": " and boom, begin executing real payload right there."}, {"Time_Start": 2035.38, "Time_End": 2035.7800000000002, "Text": " Happiness."}, {"Time_Start": 2041.0800000000002, "Time_End": 2047.8400000000001, "Text": " If you're anything like I was last night, you probably didn't get any sleep and you drank way too much."}, {"Time_Start": 2048.34, "Time_End": 2051.2200000000003, "Text": " So forgive him, a little slow. I'm just guzzling this water down here."}, {"Time_Start": 2052.26, "Time_End": 2054.28, "Text": " Okay, so let's talk about heat."}, {"Time_Start": 2054.38, "Time_End": 2055.7200000000003, "Text": " a little bit, heap is kind of fun."}, {"Time_Start": 2057.1600000000003, "Time_End": 2061.62, "Text": " If we only have a limited size on the stack, we can probably use the stack enough to get to the"}, {"Time_Start": 2061.62, "Time_End": 2066.48, "Text": " heap. That's one way to exploit the heap, which means if we can somehow put something in a"}, {"Time_Start": 2066.48, "Time_End": 2069.78, "Text": " recent transaction, perhaps, you know, in a URL request where you have all the weird"}, {"Time_Start": 2069.78, "Time_End": 2074.2400000000002, "Text": " mime types and stuff that are passed prior to the, right after the get, that might be stored"}, {"Time_Start": 2074.2400000000002, "Time_End": 2077.6400000000003, "Text": " on the heap, for instance, so we could put some shell code in there and just do the stack part"}, {"Time_Start": 2077.6400000000003, "Time_End": 2079.38, "Text": " enough to jump to it, and that's an interesting idea."}, {"Time_Start": 2079.7400000000002, "Time_End": 2082.2000000000003, "Text": " So we can store parts in different places in the program."}, {"Time_Start": 2083.96, "Time_End": 2084.36, "Text": " Interesting."}, {"Time_Start": 2084.38, "Time_End": 2086.92, "Text": " places to inject, of course, in like HTTP headers, for instance."}, {"Time_Start": 2087.62, "Time_End": 2091.42, "Text": " Other ones are files. Files are being open and close, and you can control those files."}, {"Time_Start": 2092.1600000000003, "Time_End": 2095.1800000000003, "Text": " Oftentimes, information that was in those files will be stored on the heap somewhere."}, {"Time_Start": 2096.96, "Time_End": 2101.32, "Text": " And this is a simplistic slide, but we do enough to get EIP to point to the heap."}, {"Time_Start": 2102.36, "Time_End": 2108.08, "Text": " Okay. Here's another interesting thing. Let's say we don't do a stack overflow at all. We do"}, {"Time_Start": 2108.08, "Time_End": 2113.6600000000003, "Text": " 100% homegrown heap overflow. Here's an interesting one. We have two C++ objects. So anybody here"}, {"Time_Start": 2113.66, "Time_End": 2119.8999999999996, "Text": " program in C++? Okay, so you know about inheritance and virtual, right? And operator"}, {"Time_Start": 2119.8999999999996, "Time_End": 2126.94, "Text": " overloading and V tables, because that's what we're going to talk about. A C++ object stores its"}, {"Time_Start": 2126.94, "Time_End": 2131.7599999999998, "Text": " own function pointers if those functions can be modified by its children, okay? It's called"}, {"Time_Start": 2131.7599999999998, "Time_End": 2137.42, "Text": " inheritance and polymorphism. I'll show a diagram of that. The other thing to remember about"}, {"Time_Start": 2137.42, "Time_End": 2143.2799999999997, "Text": " C++ objects is that member variables, information stored within the object itself is subject"}, {"Time_Start": 2143.28, "Time_End": 2145.92, "Text": " to the same types of buffer overflows as a stack object, okay?"}, {"Time_Start": 2147.92, "Time_End": 2150.2400000000002, "Text": " Here's the V table on a C++ object under NTA."}, {"Time_Start": 2152.0, "Time_End": 2153.92, "Text": " So the V table is stored at the very beginning."}, {"Time_Start": 2154.48, "Time_End": 2157.44, "Text": " And this is where all the member variables are stored. Now, let's say we have a buffer in there."}, {"Time_Start": 2158.88, "Time_End": 2162.48, "Text": " Now, if we fill that buffer, it's going to fill away from the V table."}, {"Time_Start": 2163.44, "Time_End": 2167.6800000000003, "Text": " Obviously, this is going to be a problem, right? I mean, because we want to grow towards"}, {"Time_Start": 2168.0800000000004, "Time_End": 2170.0800000000004, "Text": " something that's important in housekeeping data."}, {"Time_Start": 2170.08, "Time_End": 2177.02, "Text": " So let's say we have two of them in an array, or near each other somewhere on the heap."}, {"Time_Start": 2177.52, "Time_End": 2178.34, "Text": " This is very interesting."}, {"Time_Start": 2179.44, "Time_End": 2180.98, "Text": " See? I went over a second guy."}, {"Time_Start": 2181.52, "Time_End": 2186.42, "Text": " To show you again, I overflow over the V-table pointer."}, {"Time_Start": 2187.2799999999997, "Time_End": 2190.86, "Text": " Okay, so where do we make the V-table pointer point?"}, {"Time_Start": 2191.2599999999998, "Time_End": 2194.12, "Text": " Well, we have to supply our own V-table pointer. How kind of us?"}, {"Time_Start": 2196.38, "Time_End": 2198.54, "Text": " We make a point back into the buffer we just overfilled."}, {"Time_Start": 2200.08, "Time_End": 2204.2, "Text": " If you were at Black Hat, you can't answer this question."}, {"Time_Start": 2205.44, "Time_End": 2206.74, "Text": " Okay, if you saw that."}, {"Time_Start": 2207.4, "Time_End": 2213.42, "Text": " But what would be a very convenient function to change if I was overflowing the V-table pointer?"}, {"Time_Start": 2213.84, "Time_End": 2215.36, "Text": " Somebody plead, everybody yelled out."}, {"Time_Start": 2215.42, "Time_End": 2218.16, "Text": " Just raise your hands, and I'll call on somebody, and you can win this book."}, {"Time_Start": 2218.16, "Time_End": 2223.48, "Text": " What would be the most convenient function to overflow in the, or to change in the V-table pointer?"}, {"Time_Start": 2224.12, "Time_End": 2228.96, "Text": " The Destructor, absolutely."}, {"Time_Start": 2230.08, "Time_End": 2237.86, "Text": " The same is right."}, {"Time_Start": 2238.7, "Time_End": 2239.2, "Text": " Yep."}, {"Time_Start": 2240.56, "Time_End": 2243.7999999999997, "Text": " So the destructor is usually always virtual."}, {"Time_Start": 2244.22, "Time_End": 2247.18, "Text": " So it's almost guaranteed to be there no matter what."}, {"Time_Start": 2248.02, "Time_End": 2250.64, "Text": " And so that obviously makes the best choice."}, {"Time_Start": 2251.56, "Time_End": 2255.52, "Text": " You could override any function that matters, but that just, you know, why?"}, {"Time_Start": 2255.64, "Time_End": 2256.42, "Text": " I mean, that one's the best."}, {"Time_Start": 2256.7, "Time_End": 2256.9, "Text": " Yes."}, {"Time_Start": 2260.08, "Time_End": 2263.14, "Text": " always puts in a destructor even if you're using in C mode."}, {"Time_Start": 2264.52, "Time_End": 2269.12, "Text": " Ryan mentioned that GCC always puts in a destructor, even if you're only using it in C mode."}, {"Time_Start": 2270.2799999999997, "Time_End": 2271.52, "Text": " Okay, sounds interesting."}, {"Time_Start": 2273.4, "Time_End": 2275.14, "Text": " Okay, so injection is complete at this point."}, {"Time_Start": 2276.2799999999997, "Time_End": 2278.0, "Text": " So here's some information."}, {"Time_Start": 2278.6, "Time_End": 2283.06, "Text": " These are things I'm not talking about in this talk here, but this is some of the stuff can happen."}, {"Time_Start": 2283.44, "Time_End": 2287.9, "Text": " The first one I'd like to, you'd all know, is that kernel mode buffer overflows are a reality,"}, {"Time_Start": 2287.9, "Time_End": 2289.7, "Text": " and they're all over in Windows and T."}, {"Time_Start": 2290.08, "Time_End": 2295.98, "Text": " It's mostly third-party drivers with i-octal calls, which are not checked."}, {"Time_Start": 2296.44, "Time_End": 2302.14, "Text": " Ioctal calls can be made by anybody on the system, usually, because they put improper permissions on the device handle."}, {"Time_Start": 2303.52, "Time_End": 2306.88, "Text": " Colonel mode buffer overflows are very interesting, considering I can put anything I want in there,"}, {"Time_Start": 2307.12, "Time_End": 2309.72, "Text": " site like the root kit, and I'm in like Flint."}, {"Time_Start": 2310.7799999999997, "Time_End": 2317.9, "Text": " Another one I'm not really going to talk a whole lot about is the off-by-one errors caused by an off-by-one error can cause a frame pointer overwrite,"}, {"Time_Start": 2317.9, "Time_End": 2320.06, "Text": " but there was an article of frack about that recently."}, {"Time_Start": 2320.08, "Time_End": 2324.24, "Text": " FRAC-55, I believe, and I think the guy that wrote it was K-log."}, {"Time_Start": 2325.58, "Time_End": 2329.86, "Text": " The other one is multi-stage attacks, where you have to get the target into a particular state"}, {"Time_Start": 2329.86, "Time_End": 2331.16, "Text": " before you supply the buffer overflow."}, {"Time_Start": 2331.62, "Time_End": 2333.7599999999998, "Text": " Does everybody here heard of RSA-RF, the overflow?"}, {"Time_Start": 2334.58, "Time_End": 2335.62, "Text": " That's how that worked."}, {"Time_Start": 2336.22, "Time_End": 2337.06, "Text": " It was complicated."}, {"Time_Start": 2338.08, "Time_End": 2342.36, "Text": " And then a little bit of this stuff, the URL and MIMA coding is actually covered in the book."}, {"Time_Start": 2343.12, "Time_End": 2344.16, "Text": " How to get around that."}, {"Time_Start": 2345.34, "Time_End": 2346.5, "Text": " So let's talk about payload."}, {"Time_Start": 2346.66, "Time_End": 2347.58, "Text": " Let me see where I am in time."}, {"Time_Start": 2348.3199999999997, "Time_End": 2349.9, "Text": " I've actually, I'm five minutes."}, {"Time_Start": 2350.08, "Time_End": 2351.84, "Text": " from what I'm supposed to end."}, {"Time_Start": 2351.84, "Time_End": 2353.84, "Text": " So I've actually got a number of slides off."}, {"Time_Start": 2353.84, "Time_End": 2355.84, "Text": " I'm going to try to go as fast as I can."}, {"Time_Start": 2355.84, "Time_End": 2356.84, "Text": " Started with you."}, {"Time_Start": 2356.84, "Time_End": 2360.84, "Text": " Yeah."}, {"Time_Start": 2360.84, "Time_End": 2364.9, "Text": " So, thanks with the payload, we can use loaded functions."}, {"Time_Start": 2364.9, "Time_End": 2366.94, "Text": " Functions are already located in memory."}, {"Time_Start": 2366.94, "Time_End": 2369.88, "Text": " I'm going to also show you how you can load your own functions and DOLs,"}, {"Time_Start": 2369.88, "Time_End": 2372.58, "Text": " if you don't have the functionality you need."}, {"Time_Start": 2372.58, "Time_End": 2376.72, "Text": " How to encode your data portion, and obviously, things"}, {"Time_Start": 2376.72, "Time_End": 2379.0, "Text": " that the payload can do is make a shell."}, {"Time_Start": 2379.0, "Time_End": 2379.96, "Text": " I'm not actually going to show."}, {"Time_Start": 2380.08, "Time_End": 2385.3199999999997, "Text": " the actual process of making a shell up here, but I'll just talk about it a little bit."}, {"Time_Start": 2385.3199999999997, "Time_End": 2387.58, "Text": " So the payload typically will look something like this."}, {"Time_Start": 2387.58, "Time_End": 2392.08, "Text": " You'll have a knopsled, you'll have real code, and you'll have a data portion."}, {"Time_Start": 2392.08, "Time_End": 2397.38, "Text": " This is stuff you're going to use later for arguments to function calls, typically."}, {"Time_Start": 2397.38, "Time_End": 2403.3199999999997, "Text": " Or if you remember Dill Dog's paper, the Dow Windows Buffro Overflow, he's stored in here a URL"}, {"Time_Start": 2403.3199999999997, "Time_End": 2405.3199999999997, "Text": " to go download a file from somewhere and execute it."}, {"Time_Start": 2405.3199999999997, "Time_End": 2407.52, "Text": " So the URL was stored in this part."}, {"Time_Start": 2407.52, "Time_End": 2410.06, "Text": " So I mean, there's lots of things you can store here in this."}, {"Time_Start": 2410.08, "Time_End": 2411.08, "Text": " data portion."}, {"Time_Start": 2411.08, "Time_End": 2416.44, "Text": " Okay, so the first thing that has to happen with our payload is executing is we have"}, {"Time_Start": 2416.44, "Time_End": 2418.34, "Text": " to find out where we are in memory."}, {"Time_Start": 2418.34, "Time_End": 2419.04, "Text": " We could be anywhere."}, {"Time_Start": 2419.04, "Time_End": 2420.88, "Text": " We have no idea."}, {"Time_Start": 2420.88, "Time_End": 2424.3199999999997, "Text": " So once again, if you're a black hat, you can't answer this question."}, {"Time_Start": 2424.3199999999997, "Time_End": 2426.84, "Text": " I'm going to ask one in just a moment."}, {"Time_Start": 2426.84, "Time_End": 2433.34, "Text": " But what we can do is a short call, which means call forward, one instruction, and then that"}, {"Time_Start": 2433.34, "Time_End": 2435.02, "Text": " next instruction will be pop EDI."}, {"Time_Start": 2435.02, "Time_End": 2439.58, "Text": " When you do a call, the first thing that happens is, it thinks you're going to do a subroutine call, right?"}, {"Time_Start": 2439.58, "Time_End": 2443.08, "Text": " So it takes the current instruction pointer and puts it on the stack."}, {"Time_Start": 2443.08, "Time_End": 2449.08, "Text": " Well, then when they get to where we called to, we pop it back off the stack and store it somewhere"}, {"Time_Start": 2449.08, "Time_End": 2450.08, "Text": " for later."}, {"Time_Start": 2450.08, "Time_End": 2451.08, "Text": " Pop EDI."}, {"Time_Start": 2451.08, "Time_End": 2453.08, "Text": " Let's see EDI is a convenient place to store it."}, {"Time_Start": 2453.08, "Time_End": 2460.08, "Text": " What we've done is we now know, let me go back to the previous slide, where this location is right here."}, {"Time_Start": 2460.08, "Time_End": 2463.08, "Text": " And because we know that, we can calculate the offset to get to our data."}, {"Time_Start": 2463.08, "Time_End": 2465.08, "Text": " This is very important because we have to use this data."}, {"Time_Start": 2465.08, "Time_End": 2469.08, "Text": " Okay, so we've got our, I call it getting bearings."}, {"Time_Start": 2469.08, "Time_End": 2475.3199999999997, "Text": " bearings. The problem with this instruction, however, is that it's EB 00000, 00. That's how it's"}, {"Time_Start": 2475.3199999999997, "Time_End": 2481.02, "Text": " encoded. Obviously, four null characters isn't going to do our payload any good. So the quiz question"}, {"Time_Start": 2481.02, "Time_End": 2486.02, "Text": " for the next book is, how would I change this such that there are no known characters, but"}, {"Time_Start": 2486.02, "Time_End": 2490.08, "Text": " it's equivalent? You, sir, over there. Yeah."}, {"Time_Start": 2490.08, "Time_End": 2496.54, "Text": " X or the instruction with itself to receive zero. X or the instruction with itself to receive zero."}, {"Time_Start": 2499.08, "Time_End": 2514.08, "Text": " that is that we're going to have a zero. You're on a track that is good, but it wouldn't work in this case for this."}, {"Time_Start": 2514.08, "Time_End": 2517.44, "Text": " You already, I got you. Somebody else? Yes, sir."}, {"Time_Start": 2529.08, "Time_End": 2536.08, "Text": " Okay, you are correct. The answer is, you make the call backwards."}, {"Time_Start": 2536.08, "Time_End": 2539.08, "Text": " So the sign is different, and instead of zeros, we'll have F."}, {"Time_Start": 2539.08, "Time_End": 2540.08, "Text": " So I'll show that in the next slide."}, {"Time_Start": 2559.08, "Time_End": 2566.08, "Text": " written down a little differently than you described it, but you're on exactly the same wavelength. The call goes backwards, see? And then I simply make the next"}, {"Time_Start": 2566.08, "Time_End": 2570.08, "Text": " instruction a jump to get over that part because we're done with that, right? We don't want to run that twice."}, {"Time_Start": 2570.08, "Time_End": 2581.08, "Text": " And then we pop EDI. That translates E B, F, F, F, F, F, F, F, F, F, E. No, no characters, and we essentially have done exactly the same thing."}, {"Time_Start": 2581.08, "Time_End": 2589.06, "Text": " Okay, now, like, what you were talking about earlier, sir, is the X-OR protection. We have a data, we have a data,"}, {"Time_Start": 2589.08, "Time_End": 2618.74, "Text": " payload, right? We can't have any null characters in that either, but we're going to probably put a lot of strings and weird stuff in there. And strings need to be null terminated. So here's the trick to make your payload safe from this. You simply exor it the entire thing with a bite, which then the result turns out not to have any null characters. You have to choose a bite that works for the payload, or excuse me, the data portion that you have. So we XOR every single bite and make it safe. There are no null characters. It looks garbally. It's not encrypted, of course. It's just pseudo."}, {"Time_Start": 2619.08, "Time_End": 2620.84, "Text": " obfuscated, I guess, in a way."}, {"Time_Start": 2622.12, "Time_End": 2623.7, "Text": " Does everybody understand how XOR works here?"}, {"Time_Start": 2624.16, "Time_End": 2628.2999999999997, "Text": " We XOR every single bite across, and if there was a zero, it'll now be the value of whatever"}, {"Time_Start": 2628.2999999999997, "Time_End": 2630.38, "Text": " X-O- or whatever we're ex-wering it with."}, {"Time_Start": 2630.72, "Time_End": 2632.7599999999998, "Text": " And it'll just look kind of like gobbly-goor when we're done."}, {"Time_Start": 2633.3199999999997, "Time_End": 2635.6, "Text": " The key is, of course, we can export back to the original."}, {"Time_Start": 2637.08, "Time_End": 2638.98, "Text": " So here's our typical payload."}, {"Time_Start": 2639.64, "Time_End": 2641.22, "Text": " Our instruction code begins there."}, {"Time_Start": 2641.58, "Time_End": 2645.54, "Text": " The first thing our instruction code is going to do, after, of course, it knows where it is in memory"}, {"Time_Start": 2645.54, "Time_End": 2648.06, "Text": " by doing that call, is going to begin to decode."}, {"Time_Start": 2648.2599999999998, "Time_End": 2649.06, "Text": " So it'll go down here."}, {"Time_Start": 2649.08, "Time_End": 2651.12, "Text": " and decode it back to the original."}, {"Time_Start": 2651.56, "Time_End": 2654.16, "Text": " This is on the remote computer once we've already got it online."}, {"Time_Start": 2656.16, "Time_End": 2661.54, "Text": " Okay, so let's say we've decoded, we have a bunch of function names in here."}, {"Time_Start": 2661.7799999999997, "Time_End": 2664.24, "Text": " Names like, what's a good function?"}, {"Time_Start": 2666.44, "Time_End": 2667.08, "Text": " What was that?"}, {"Time_Start": 2671.88, "Time_End": 2672.96, "Text": " System, yeah, that's a good one."}, {"Time_Start": 2672.96, "Time_End": 2673.04, "Text": " Okay."}, {"Time_Start": 2674.02, "Time_End": 2677.9, "Text": " All right, so we don't know the address of that call yet,"}, {"Time_Start": 2677.9, "Time_End": 2680.44, "Text": " because remember our compiler didn't"}, {"Time_Start": 2680.44, "Time_End": 2682.88, "Text": " the compiler that the remote system used to make this program"}, {"Time_Start": 2682.88, "Time_End": 2685.2200000000003, "Text": " didn't happily compile our non-existent code into it."}, {"Time_Start": 2685.2400000000002, "Time_End": 2687.6600000000003, "Text": " So we have to go find out where that function lives in memory."}, {"Time_Start": 2688.32, "Time_End": 2693.1800000000003, "Text": " So we can put the string system right here somewhere in this thing,"}, {"Time_Start": 2693.48, "Time_End": 2695.02, "Text": " and we can reference it to a call"}, {"Time_Start": 2695.02, "Time_End": 2699.84, "Text": " to get proc address, which is not the slide I wanted, oh no."}, {"Time_Start": 2700.38, "Time_End": 2700.8, "Text": " Hold on."}, {"Time_Start": 2702.1600000000003, "Time_End": 2704.14, "Text": " Okay, I'm going to go back and forth here."}, {"Time_Start": 2704.64, "Time_End": 2707.7200000000003, "Text": " Get prok address and give it the pointer to the name that we just"}, {"Time_Start": 2707.7200000000003, "Time_End": 2709.9, "Text": " supplied, and boom, we have the address."}, {"Time_Start": 2710.88, "Time_End": 2712.82, "Text": " When we have the address, we can actually use it."}, {"Time_Start": 2714.1600000000003, "Time_End": 2714.46, "Text": " Okay."}, {"Time_Start": 2715.32, "Time_End": 2719.1000000000004, "Text": " Another way to do it is if we don't know where, or if we do know exactly where it is"}, {"Time_Start": 2719.1000000000004, "Time_End": 2721.1400000000003, "Text": " and we don't want to try to find it, we can just hard-cote it in."}, {"Time_Start": 2721.44, "Time_End": 2725.6200000000003, "Text": " And this is, in this example, we just simply call the addresses directly."}, {"Time_Start": 2730.4, "Time_End": 2731.76, "Text": " Yes, I'll talk about that in a moment."}, {"Time_Start": 2731.76, "Time_End": 2733.78, "Text": " Oh, yeah."}, {"Time_Start": 2733.88, "Time_End": 2736.0600000000004, "Text": " So what this fellow said is, in order to call"}, {"Time_Start": 2736.0600000000004, "Time_End": 2738.9, "Text": " get proc address, you have to know where it is, clearly."}, {"Time_Start": 2740.48, "Time_End": 2743.36, "Text": " And I'll talk about PE, executable header to talk about that."}, {"Time_Start": 2744.48, "Time_End": 2745.9, "Text": " Okay, so the pros and cons are hard coding."}, {"Time_Start": 2746.44, "Time_End": 2748.5400000000004, "Text": " Pros, it makes obviously the code smaller."}, {"Time_Start": 2749.5600000000004, "Time_End": 2752.34, "Text": " If the function isn't in the same place, that's a con."}, {"Time_Start": 2753.2000000000003, "Time_End": 2755.5, "Text": " If dynamically loaded DLs are an example,"}, {"Time_Start": 2755.6600000000003, "Time_End": 2757.1400000000003, "Text": " or it's typically not going to be in the same place."}, {"Time_Start": 2757.5, "Time_End": 2759.9, "Text": " Some DLs, however, are always in the same place,"}, {"Time_Start": 2759.9, "Time_End": 2761.1400000000003, "Text": " well, most of the time."}, {"Time_Start": 2761.14, "Time_End": 2762.96, "Text": " I mean, Colonel 32 is an example of one of us."}, {"Time_Start": 2765.62, "Time_End": 2767.2999999999997, "Text": " Okay, so dynamic function loading."}, {"Time_Start": 2767.68, "Time_End": 2770.52, "Text": " We're going to use Load Library and Get Proc Address."}, {"Time_Start": 2770.8399999999997, "Time_End": 2773.2599999999998, "Text": " Load library loads new DLs, Get Proc Address,"}, {"Time_Start": 2773.72, "Time_End": 2776.62, "Text": " loads functions from DLs, which are currently loaded in memory."}, {"Time_Start": 2777.8799999999997, "Time_End": 2779.8199999999997, "Text": " Now, in reference to what you just said,"}, {"Time_Start": 2780.5, "Time_End": 2784.2599999999998, "Text": " the function calls Load Library and Get Procadress are always in the same place."}, {"Time_Start": 2784.46, "Time_End": 2786.16, "Text": " So we can hard code the addresses of them."}, {"Time_Start": 2786.7599999999998, "Time_End": 2789.3399999999997, "Text": " If we don't want to do that, we can go into the P.E. Executable header"}, {"Time_Start": 2789.3399999999997, "Time_End": 2791.12, "Text": " in the first two entries in the IData table,"}, {"Time_Start": 2791.14, "Time_End": 2794.3799999999997, "Text": " will be these two calls. Always. I've never seen it any other way."}, {"Time_Start": 2795.2999999999997, "Time_End": 2798.7, "Text": " So we can load a new DLLL and find any function by its Aski name."}, {"Time_Start": 2799.14, "Time_End": 2804.3599999999997, "Text": " I will know that sometimes functions are loaded by Ordinal, and I'm not actually talking about that in this talk."}, {"Time_Start": 2805.04, "Time_End": 2806.56, "Text": " Most of the time, I've seen them by Askey name."}, {"Time_Start": 2808.5, "Time_End": 2813.54, "Text": " Okay, so this was the slide you saw. You call Get Prock Address, pass at the Askey of the function name you want to load."}, {"Time_Start": 2814.52, "Time_End": 2818.52, "Text": " Now, this is called Building a Jump Table. We do the same thing. Get Proc Address."}, {"Time_Start": 2818.8599999999997, "Time_End": 2821.12, "Text": " When we get the address, we store it away for a little."}, {"Time_Start": 2821.14, "Time_End": 2825.14, "Text": " later and we do this for all the functions we're planning on using it might be six or seven"}, {"Time_Start": 2825.14, "Time_End": 2830.58, "Text": " so we just keep storing them as we load them and we build a jump table when we have the jump table"}, {"Time_Start": 2830.58, "Time_End": 2838.8199999999997, "Text": " completely begin doing useful things jump through it making the calls everybody kind of get that"}, {"Time_Start": 2843.7, "Time_End": 2851.06, "Text": " okay now here's an elite thing hash loading um i don't like having payloads um i don't like having payloads"}, {"Time_Start": 2851.14, "Time_End": 2855.7999999999997, "Text": " with data portions of these huge string names for every function I need to load."}, {"Time_Start": 2856.1, "Time_End": 2857.68, "Text": " Well, it turns out you don't need to do that."}, {"Time_Start": 2857.7599999999998, "Time_End": 2860.92, "Text": " What you can do is take a hash of the string itself,"}, {"Time_Start": 2861.0, "Time_End": 2864.4, "Text": " which turns out to be a 4 byte value in this case, and just store those."}, {"Time_Start": 2864.58, "Time_End": 2868.2999999999997, "Text": " And then you can go into the process of itself and just hash everything that's loaded."}, {"Time_Start": 2868.4, "Time_End": 2869.7799999999997, "Text": " And if it matches, use it."}, {"Time_Start": 2870.1, "Time_End": 2871.96, "Text": " There's almost no chance of a collision here."}, {"Time_Start": 2872.74, "Time_End": 2877.04, "Text": " So we can locate any loaded function by checking the CRC of each loaded asking name."}, {"Time_Start": 2877.04, "Time_End": 2878.68, "Text": " We don't send any asking names tomorrow."}, {"Time_Start": 2878.74, "Time_End": 2880.48, "Text": " We're just sending the hash equivalence of them."}, {"Time_Start": 2881.14, "Time_End": 2883.16, "Text": " It makes our payload much smaller."}, {"Time_Start": 2884.74, "Time_End": 2887.68, "Text": " So to talk about that for a moment, we have to know about the PE header."}, {"Time_Start": 2888.08, "Time_End": 2888.96, "Text": " So everybody know what that is?"}, {"Time_Start": 2890.1, "Time_End": 2894.24, "Text": " Every executable under NT or most are in this format called portable executable."}, {"Time_Start": 2895.24, "Time_End": 2899.08, "Text": " And inside of this format is a table of all the functions that it loads."}, {"Time_Start": 2900.14, "Time_End": 2901.7799999999997, "Text": " So we have to go find the information."}, {"Time_Start": 2901.98, "Time_End": 2903.16, "Text": " So we go to this optional header."}, {"Time_Start": 2903.7599999999998, "Time_End": 2909.12, "Text": " And then from there we can get the ASCII name and the corresponding address of that function."}, {"Time_Start": 2909.68, "Time_End": 2910.74, "Text": " That's all we need to do."}, {"Time_Start": 2911.14, "Time_End": 2913.08, "Text": " It's already there for us."}, {"Time_Start": 2914.3199999999997, "Time_End": 2918.2799999999997, "Text": " So over here on the right-hand side, this is our payload."}, {"Time_Start": 2919.2, "Time_End": 2924.24, "Text": " The yellow area down there is the actual CRCs or the hashes that we've made."}, {"Time_Start": 2924.66, "Time_End": 2925.8199999999997, "Text": " So we load one of those up."}, {"Time_Start": 2926.64, "Time_End": 2928.8799999999997, "Text": " And then we go into the PE header, which is over here,"}, {"Time_Start": 2929.24, "Time_End": 2932.42, "Text": " and we actually, in real time, hash every single ASCNAM."}, {"Time_Start": 2932.46, "Time_End": 2933.52, "Text": " These are ASC names, okay?"}, {"Time_Start": 2933.7599999999998, "Time_End": 2936.02, "Text": " We hash each one and match it against the CRC."}, {"Time_Start": 2936.3399999999997, "Time_End": 2940.2, "Text": " If it matches, then we go find the function address,"}, {"Time_Start": 2940.2000000000003, "Time_End": 2942.1600000000003, "Text": " and then boom, put it back."}, {"Time_Start": 2942.82, "Time_End": 2945.7000000000003, "Text": " Replacing the original CRC with a function address."}, {"Time_Start": 2945.9600000000005, "Time_End": 2946.84, "Text": " It's nice and clean."}, {"Time_Start": 2947.4, "Time_End": 2950.44, "Text": " If we start out, we want 10 functions, we start out with 10 hashes,"}, {"Time_Start": 2950.4800000000005, "Time_End": 2953.0200000000004, "Text": " and when we get done, we have 10 function addresses in there."}, {"Time_Start": 2953.1200000000003, "Time_End": 2954.4, "Text": " It doesn't change the size at all."}, {"Time_Start": 2954.5000000000005, "Time_End": 2955.1600000000003, "Text": " It's nice and clean."}, {"Time_Start": 2955.4, "Time_End": 2957.2400000000002, "Text": " So it's basically building another jump table."}, {"Time_Start": 2957.76, "Time_End": 2960.3, "Text": " Boom, boom, and so forth."}, {"Time_Start": 2961.3, "Time_End": 2962.38, "Text": " Okay, so there's our jump table."}, {"Time_Start": 2963.2000000000003, "Time_End": 2964.1000000000004, "Text": " Much, much cleaner."}, {"Time_Start": 2965.5000000000005, "Time_End": 2965.7000000000003, "Text": " Okay."}, {"Time_Start": 2966.9, "Time_End": 2967.9800000000005, "Text": " Limited character sets."}, {"Time_Start": 2967.9800000000005, "Time_End": 2969.88, "Text": " If you're MIM encoding, URL encoding, whatever,"}, {"Time_Start": 2970.2000000000003, "Time_End": 2975.0200000000004, "Text": " It's going to limit the number of characters that you can send through, say, the content filter to the application."}, {"Time_Start": 2975.38, "Time_End": 2978.88, "Text": " What this really means is that we've limited the number of instructions that we can use."}, {"Time_Start": 2980.0200000000004, "Time_End": 2985.32, "Text": " It means that the op-code values that we're able to send is a limited set."}, {"Time_Start": 2985.6600000000003, "Time_End": 2986.8, "Text": " So we have to work with that."}, {"Time_Start": 2987.34, "Time_End": 2988.5600000000004, "Text": " Now, a couple of years ago,"}, {"Time_Start": 2990.1200000000003, "Time_End": 2995.84, "Text": " our friend Caesar and I had a party came up with this solution for a problem."}, {"Time_Start": 2995.9800000000005, "Time_End": 2997.1200000000003, "Text": " The problem was mime encoding."}, {"Time_Start": 2997.1200000000003, "Time_End": 3000.1800000000003, "Text": " We only had a number of instructions."}, {"Time_Start": 3000.2000000000003, "Time_End": 3004.4, "Text": " that we could work with if we had to pass only ask, or excuse me, alpha-numeric information."}, {"Time_Start": 3004.5200000000004, "Time_End": 3005.6200000000003, "Text": " We couldn't pass anything weird."}, {"Time_Start": 3006.28, "Time_End": 3009.0600000000004, "Text": " We only had short jumps, push and pop, and subtract."}, {"Time_Start": 3010.0200000000004, "Time_End": 3016.4600000000005, "Text": " Now, the way this worked is, we came up this idea that we could just simply put a value on the stack,"}, {"Time_Start": 3016.7200000000003, "Time_End": 3021.2000000000003, "Text": " pop it, put it in a register like EAX, and they'd call subtract on it over and over and over again,"}, {"Time_Start": 3021.2000000000003, "Time_End": 3025.6200000000003, "Text": " so it was the actual value we really needed for the payload that we wanted, and we pushed it back on the stack."}, {"Time_Start": 3026.0400000000004, "Time_End": 3028.9800000000005, "Text": " When we just did this over and over and over again, we actually built our payload in real time."}, {"Time_Start": 3030.2000000000003, "Time_End": 3031.2000000000003, "Text": " like a dream."}, {"Time_Start": 3031.2000000000003, "Time_End": 3035.2000000000003, "Text": " Along with this technique, we also had the bridge."}, {"Time_Start": 3035.2000000000003, "Time_End": 3038.2000000000003, "Text": " Since we couldn't jump, we had to avoid the jump instruction."}, {"Time_Start": 3038.2000000000003, "Time_End": 3044.2000000000003, "Text": " So what we did is, we had the stack with the code on at this building, our new payload,"}, {"Time_Start": 3044.2000000000003, "Time_End": 3049.2000000000003, "Text": " so it's popping stuff into EAX, it's subtracting until it's a real op code that we want,"}, {"Time_Start": 3049.2000000000003, "Time_End": 3051.2000000000003, "Text": " and then pushing it back."}, {"Time_Start": 3051.2000000000003, "Time_End": 3056.2000000000003, "Text": " And then when it pushes it back, it pushes it down on the bottom, and it grows up."}, {"Time_Start": 3056.2000000000003, "Time_End": 3059.2000000000003, "Text": " So as we execute down, the other side is growing up."}, {"Time_Start": 3060.2000000000003, "Time_End": 3062.44, "Text": " is growing up as we push onto it."}, {"Time_Start": 3062.44, "Time_End": 3065.2000000000003, "Text": " And what happened was, is we calculated the size exactly,"}, {"Time_Start": 3065.2000000000003, "Time_End": 3068.7000000000003, "Text": " no jump instruction required, so that as it's growing up,"}, {"Time_Start": 3068.7000000000003, "Time_End": 3072.2000000000003, "Text": " as soon as we got done, they met in the middle perfectly."}, {"Time_Start": 3072.2000000000003, "Time_End": 3075.2000000000003, "Text": " And boom, we just began executing real instructions right off the bat."}, {"Time_Start": 3075.2000000000003, "Time_End": 3077.2000000000003, "Text": " Backwards bridge."}, {"Time_Start": 3079.2000000000003, "Time_End": 3082.2000000000003, "Text": " Okay, so let's talk about loading a new DOL."}, {"Time_Start": 3082.2000000000003, "Time_End": 3085.2000000000003, "Text": " Same as get proc address, just call it load library."}, {"Time_Start": 3085.2000000000003, "Time_End": 3087.2000000000003, "Text": " I actually stole the same slide."}, {"Time_Start": 3087.2000000000003, "Time_End": 3089.2000000000003, "Text": " This is the name of the name."}, {"Time_Start": 3089.2000000000003, "Time_End": 3091.4600000000005, "Text": " This is the name of the DL we want to load."}, {"Time_Start": 3091.9, "Time_End": 3093.1400000000003, "Text": " We call load library."}, {"Time_Start": 3094.44, "Time_End": 3096.7000000000003, "Text": " And we end up passing, oh, excuse me, no,"}, {"Time_Start": 3096.7000000000003, "Time_End": 3098.5000000000005, "Text": " this was the function address of load library,"}, {"Time_Start": 3098.7000000000003, "Time_End": 3101.7400000000002, "Text": " and then we pass the ASCY name of the DL we want to load,"}, {"Time_Start": 3101.9800000000005, "Time_End": 3104.82, "Text": " and then boom, suddenly our process space becomes much larger"}, {"Time_Start": 3104.82, "Time_End": 3108.1200000000003, "Text": " because we just added a whole new DL full of functions that we can use."}, {"Time_Start": 3108.76, "Time_End": 3111.82, "Text": " What's a good function, what's a good DOL to load?"}, {"Time_Start": 3114.6200000000003, "Time_End": 3115.6600000000003, "Text": " That sounds good."}, {"Time_Start": 3115.7200000000003, "Time_End": 3117.5800000000004, "Text": " I don't know what it exports, but it only sounds good,"}, {"Time_Start": 3117.6400000000003, "Time_End": 3118.82, "Text": " URL, DOL."}, {"Time_Start": 3119.2000000000003, "Time_End": 3121.2000000000003, "Text": " Can we know that URL download the file?"}, {"Time_Start": 3121.2000000000003, "Time_End": 3122.44, "Text": " Oh, okay."}, {"Time_Start": 3123.1000000000004, "Time_End": 3125.4, "Text": " There's another one that actually I have on the slide next,"}, {"Time_Start": 3125.4800000000005, "Time_End": 3128.1200000000003, "Text": " which is called Win-I-Net, which does something similar as well."}, {"Time_Start": 3130.5400000000004, "Time_End": 3133.4800000000005, "Text": " WinSock stuff is obviously good, so you might want to load that as well."}, {"Time_Start": 3134.34, "Time_End": 3137.0400000000004, "Text": " This is thanks to DILDog's paper that I read."}, {"Time_Start": 3137.28, "Time_End": 3140.0000000000005, "Text": " He just mentioned the Win-I-Net D-L, which comes with Internet Explorer."}, {"Time_Start": 3140.3, "Time_End": 3143.42, "Text": " It's really, really useful for downloading files off the Internet with like two or three calls."}, {"Time_Start": 3144.2200000000003, "Time_End": 3147.92, "Text": " So I load Win-I-N-N-N-N-D-L, and I use Internet open URL and Internet read file"}, {"Time_Start": 3147.92, "Time_End": 3149.1000000000004, "Text": " to download a file."}, {"Time_Start": 3149.2000000000003, "Time_End": 3155.4800000000005, "Text": " file from anywhere on the Internet takes two calls, very simple, no space, and it downloads it to the local system,"}, {"Time_Start": 3155.5200000000004, "Time_End": 3157.6400000000003, "Text": " at which point I can execute it. Pretty scary."}, {"Time_Start": 3158.5800000000004, "Time_End": 3168.1600000000003, "Text": " So when INet does all the hard work for me, it makes my payload smaller, and the best part is I can store my file anonymously on GeoCity somewhere,"}, {"Time_Start": 3168.36, "Time_End": 3170.8, "Text": " so if you caught the download, you wouldn't know who I was."}, {"Time_Start": 3174.4, "Time_End": 3178.6000000000004, "Text": " Just as, for example, obviously, WS2 underscore 32 DLL has all the windsock functionality."}, {"Time_Start": 3179.2000000000003, "Time_End": 3183.2200000000003, "Text": " If I'm going to make a back door or something like that, I'm going to need to open a socket, perhaps,"}, {"Time_Start": 3183.34, "Time_End": 3184.76, "Text": " so I could load this up and do that."}, {"Time_Start": 3186.0000000000005, "Time_End": 3188.9800000000005, "Text": " Another way to make calls on the system is through the use of what's called an interrupt call."}, {"Time_Start": 3190.42, "Time_End": 3196.6800000000003, "Text": " Interrupt 2E under Windows and T is the system call, and I can make a whole plethora of calls that way,"}, {"Time_Start": 3196.6800000000003, "Time_End": 3198.9, "Text": " and it takes like two bytes to make each one."}, {"Time_Start": 3199.2000000000003, "Time_End": 3203.6200000000003, "Text": " I just set up the registers to point to the parameters for that call, and then I call Interrupt 2E."}, {"Time_Start": 3203.86, "Time_End": 3205.0800000000004, "Text": " Boom, I've just made a SIS call."}, {"Time_Start": 3205.5000000000005, "Time_End": 3209.1800000000003, "Text": " I can start processes that way, open and close files, all of it available directly."}, {"Time_Start": 3209.2000000000003, "Time_End": 3210.1400000000003, "Text": " through the SISC call interface."}, {"Time_Start": 3210.5200000000004, "Time_End": 3212.36, "Text": " No monkeying around with DOLs."}, {"Time_Start": 3212.6000000000004, "Time_End": 3214.6000000000004, "Text": " And these are always guaranteed to work."}, {"Time_Start": 3214.88, "Time_End": 3218.28, "Text": " They don't change locations, and we'll make a caveat to that."}, {"Time_Start": 3218.6000000000004, "Time_End": 3222.1200000000003, "Text": " Windows NT4 to Windows 2K, the Syscall table changed slightly,"}, {"Time_Start": 3222.2400000000002, "Time_End": 3224.44, "Text": " so that it's just called numbers slightly modified."}, {"Time_Start": 3225.1600000000003, "Time_End": 3226.0000000000005, "Text": " That's important to know."}, {"Time_Start": 3226.5200000000004, "Time_End": 3227.4, "Text": " Same with Linux."}, {"Time_Start": 3227.5400000000004, "Time_End": 3230.6600000000003, "Text": " In fact, I believe you can do most of a remote shell just using this method."}, {"Time_Start": 3231.26, "Time_End": 3235.5600000000004, "Text": " And under Linux, I believe it's Interrupt 80, and then under NT, it's obviously interrupt 3A."}, {"Time_Start": 3239.2000000000003, "Time_End": 3247.1400000000003, "Text": " finding a remote command shell, I can use Create Process under NT or a SISC call under Linux."}, {"Time_Start": 3247.5800000000004, "Time_End": 3253.92, "Text": " I can pipe the output through a socket to attach to the process and open up a TCP socket by loading the windsock DL on my side"}, {"Time_Start": 3253.92, "Time_End": 3255.1600000000003, "Text": " and have two-way communications."}, {"Time_Start": 3255.26, "Time_End": 3256.86, "Text": " I've just created an instant telnet server."}, {"Time_Start": 3261.0200000000004, "Time_End": 3263.92, "Text": " If I want to get really crazy, I could not do it quite that way."}, {"Time_Start": 3263.9800000000005, "Time_End": 3265.1800000000003, "Text": " I could make a covert channel."}, {"Time_Start": 3265.82, "Time_End": 3269.1000000000004, "Text": " If I have access to the kernel, which most of the times I would, I could,"}, {"Time_Start": 3269.2000000000003, "Time_End": 3274.34, "Text": " a TDI or Indus layer hook, which enables me to sniff all network traffic and send raw packets"}, {"Time_Start": 3274.34, "Time_End": 3274.94, "Text": " over the wire."}, {"Time_Start": 3275.36, "Time_End": 3281.0200000000004, "Text": " I could watch ICMP packets, and if there's a certain option in there, I could detect the next"}, {"Time_Start": 3281.0200000000004, "Time_End": 3283.36, "Text": " five characters as a command, like I was talking about earlier."}, {"Time_Start": 3283.9, "Time_End": 3285.1000000000004, "Text": " It's covert, you would never know."}, {"Time_Start": 3285.34, "Time_End": 3288.8, "Text": " Arney Vidstrom, I don't know if you know him, but he has a site on the net where he distributes"}, {"Time_Start": 3288.8, "Time_End": 3290.2200000000003, "Text": " what he calls ACC command server."}, {"Time_Start": 3290.5400000000004, "Time_End": 3291.9600000000005, "Text": " It's another kind of interesting idea."}, {"Time_Start": 3292.38, "Time_End": 3293.4600000000005, "Text": " It just sends AC packets."}, {"Time_Start": 3293.5200000000004, "Time_End": 3294.36, "Text": " There's no three-way handshake."}, {"Time_Start": 3294.42, "Time_End": 3295.5200000000004, "Text": " There's no real TCP session."}, {"Time_Start": 3295.6200000000003, "Time_End": 3297.7200000000003, "Text": " It's just a bunch of ACP packets over Port 80, going back and forth."}, {"Time_Start": 3298.4800000000005, "Time_End": 3299.1200000000003, "Text": " But it looks."}, {"Time_Start": 3299.2000000000003, "Time_End": 3300.38, "Text": " just like a netcast session."}, {"Time_Start": 3301.44, "Time_End": 3302.9600000000005, "Text": " It's actually open and working."}, {"Time_Start": 3305.28, "Time_End": 3308.44, "Text": " IIS, if I can't get into kernel mode, I can just patch something in the process I'm in."}, {"Time_Start": 3308.5000000000005, "Time_End": 3311.0000000000005, "Text": " Obviously, it's accepting network input or I wouldn't be there in the first place."}, {"Time_Start": 3311.2400000000002, "Time_End": 3314.5800000000004, "Text": " So I obviously could patch the location where that network input is processed."}, {"Time_Start": 3315.0800000000004, "Time_End": 3316.26, "Text": " No need to get into kernel mode."}, {"Time_Start": 3316.6400000000003, "Time_End": 3319.88, "Text": " I could, for instance, on IIS, just check where it looks at all the URL stuff."}, {"Time_Start": 3322.9600000000005, "Time_End": 3325.1000000000004, "Text": " Worms, I'm not going to go into detail on this."}, {"Time_Start": 3325.1000000000004, "Time_End": 3328.32, "Text": " Just be, just know that, you know, mobile code is mobile code."}, {"Time_Start": 3329.2000000000003, "Time_End": 3334.6000000000004, "Text": " Lysine deficiency."}, {"Time_Start": 3334.9800000000005, "Time_End": 3336.1400000000003, "Text": " I want to talk about this a little bit."}, {"Time_Start": 3336.1800000000003, "Time_End": 3338.92, "Text": " In terms of worms, if you are playing with them in the lab,"}, {"Time_Start": 3339.36, "Time_End": 3343.9, "Text": " make sure you build a fail-safe mechanism so they don't get out of your lab by mistake."}, {"Time_Start": 3344.32, "Time_End": 3347.94, "Text": " What we do in our lab is we make it so you have to have a particular floppy disk in the drive."}, {"Time_Start": 3348.0400000000004, "Time_End": 3350.0400000000004, "Text": " The drive's not there, or excuse the floppy's not there."}, {"Time_Start": 3350.6600000000003, "Time_End": 3351.9, "Text": " The worm will not infect the machine."}, {"Time_Start": 3352.0200000000004, "Time_End": 3358.1600000000003, "Text": " We call it lysine deficiency, and it's a very, very important thing to do if you're designing worm technology to be responsible,"}, {"Time_Start": 3358.16, "Time_End": 3360.8999999999996, "Text": " especially if you're distributing it on a website somewhere."}, {"Time_Start": 3361.22, "Time_End": 3363.3399999999997, "Text": " Make sure that the licensing deficiency exists."}, {"Time_Start": 3363.66, "Time_End": 3364.72, "Text": " It could do a number of things."}, {"Time_Start": 3364.7799999999997, "Time_End": 3368.2, "Text": " If you don't want to deal with floppies, you can just make sure if it only works"}, {"Time_Start": 3368.2, "Time_End": 3371.8399999999997, "Text": " if a particular machine responds to a ping or something like that."}, {"Time_Start": 3374.0, "Time_End": 3375.42, "Text": " Okay, so to recap all this."}, {"Time_Start": 3375.52, "Time_End": 3377.5, "Text": " The injection part is not the same as the payload part."}, {"Time_Start": 3377.56, "Time_End": 3378.3399999999997, "Text": " They can be separated."}, {"Time_Start": 3379.14, "Time_End": 3382.98, "Text": " Payloads can do all kinds of things like DOS attacks, worm, remote shell, and solid root kit."}, {"Time_Start": 3384.3199999999997, "Time_End": 3386.16, "Text": " There's many challenges with the injection part."}, {"Time_Start": 3386.2599999999998, "Time_End": 3387.7, "Text": " Obviously, the way the characters are encoded,"}, {"Time_Start": 3387.7000000000003, "Time_End": 3389.6200000000003, "Text": " Null characters is obviously a good example of that."}, {"Time_Start": 3389.7000000000003, "Time_End": 3391.1600000000003, "Text": " The stack size, deal with that."}, {"Time_Start": 3391.4800000000005, "Time_End": 3394.4, "Text": " Highland and low-land address, and obviously the result,"}, {"Time_Start": 3394.5600000000004, "Time_End": 3399.4600000000005, "Text": " we could actually call through CPU registers and whatnot to get back to the stack if we can't use a low-land address."}, {"Time_Start": 3400.84, "Time_End": 3404.0400000000004, "Text": " Filters can limit what we can put in the payload or in the injection vector."}, {"Time_Start": 3404.5600000000004, "Time_End": 3408.32, "Text": " They could limit our op-code set, but I've demonstrated, obviously with the push, pop, and subtracting."}, {"Time_Start": 3408.4800000000005, "Time_End": 3409.4, "Text": " That's not a problem."}, {"Time_Start": 3409.4800000000005, "Time_End": 3411.7400000000002, "Text": " We can work around those and figure out how to make working code."}, {"Time_Start": 3413.92, "Time_End": 3416.9800000000005, "Text": " Typically, our payload's going to be encoded, X-LOR, or encoded some way."}, {"Time_Start": 3417.1600000000003, "Time_End": 3417.6800000000003, "Text": " We can build."}, {"Time_Start": 3417.7000000000003, "Time_End": 3422.38, "Text": " jump tables. We can load any DLO and any function we want to. We can hard code the addresses,"}, {"Time_Start": 3422.8, "Time_End": 3427.6600000000003, "Text": " or we can load them dynamically. And importantly, also, we should use lysine deficiency if we're"}, {"Time_Start": 3427.6600000000003, "Time_End": 3430.6800000000003, "Text": " doing worm stuff. Thank you very much."}]}