The talk, presented by a red team operator, focuses on the techniques used to execute and hide malware within another process, evading detection by security products and analysts. The speaker outlines common methods for process injection, such as handle creation and payload injection, and discusses userland hooks and system calls, providing strategies for bypassing security measures. They introduce the concept of handle duplication and upgrading to obtain a handle on the target process stealthily. The challenges of static signatures are addressed, including the use of polymorphism and sleep masks to obfuscate malware. The importance of changing the appearance of a program at the instruction level is highlighted, along with techniques like instruction substitution and keyless polymorphism. Memory artifacts and abnormal memory allocations are explored as indicators of compromise, along with the effectiveness of memory scanners. The speaker presents tools and techniques to bypass memory scanners and demonstrates how to mark code as non-executable while executing. They emphasize the value of combining multiple metrics, such as thread states and call stacks, to identify infected processes. The presentation concludes with the release of new tools, emphasizing the power of Position Independent Code and keyless polymorphism in evading static signatures.