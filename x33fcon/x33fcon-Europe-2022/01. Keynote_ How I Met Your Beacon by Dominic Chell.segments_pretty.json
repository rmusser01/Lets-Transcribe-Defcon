{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 7.12,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Welcome to my talk."
    },
    {
      "Time_Start": 7.12,
      "Time_End": 11.36,
      "Text": " I'm Dominic Chow, one of the red teamers from DSAC."
    },
    {
      "Time_Start": 11.36,
      "Time_End": 15.08,
      "Text": " My talk today is How I Met Your Beacons."
    },
    {
      "Time_Start": 15.08,
      "Time_End": 16.080000000000002,
      "Text": " Excellent."
    },
    {
      "Time_Start": 16.080000000000002,
      "Time_End": 17.080000000000002,
      "Text": " It worked."
    },
    {
      "Time_Start": 17.080000000000002,
      "Time_End": 24.16,
      "Text": " I had to get some guy on Fiverr to make that for me."
    },
    {
      "Time_Start": 24.16,
      "Time_End": 28.12,
      "Text": " Today we'll be more focused on the blue side, really, so I'm going to be looking at some"
    },
    {
      "Time_Start": 28.12,
      "Time_End": 34.36,
      "Text": " effective strategies for detecting beacons on Windows, including detections for behavior,"
    },
    {
      "Time_Start": 34.36,
      "Time_End": 39.04,
      "Text": " in-memory analysis, network interaction, that kind of stuff."
    },
    {
      "Time_Start": 39.04,
      "Time_End": 42.36,
      "Text": " I guess my interest in this topic is really threefold."
    },
    {
      "Time_Start": 42.36,
      "Time_End": 47.68,
      "Text": " So, firstly, it's no secret that we've got some skin in the game, because we, you know,"
    },
    {
      "Time_Start": 47.68,
      "Time_End": 50.760000000000005,
      "Text": " produce a framework ourselves."
    },
    {
      "Time_Start": 50.760000000000005,
      "Time_End": 54.92,
      "Text": " So I'm interested in this kind of stuff because, obviously, I want to improve our tool."
    },
    {
      "Time_Start": 54.92,
      "Time_End": 59.96,
      "Text": " Secondly, from a red team perspective, I'm interested in it because I want to improve"
    },
    {
      "Time_Start": 59.96,
      "Time_End": 64.64,
      "Text": " my tradecraft and make sure that we avoid doing certain actions that might end up kind"
    },
    {
      "Time_Start": 64.64,
      "Time_End": 67.76,
      "Text": " of leaving dangling IOCs behind."
    },
    {
      "Time_Start": 67.76,
      "Time_End": 72.16,
      "Text": " And then, finally, I do get involved with threat hunting exercises, that kind of stuff"
    },
    {
      "Time_Start": 72.16,
      "Time_End": 73.16,
      "Text": " at MDSAC."
    },
    {
      "Time_Start": 73.16,
      "Time_End": 78.28,
      "Text": " So it is useful for me to have a good understanding on how to kind of spot beacons."
    },
    {
      "Time_Start": 78.28,
      "Time_End": 82.44,
      "Text": " I guess I've always been in the mindset, in order to hide, you kind of really need to"
    },
    {
      "Time_Start": 82.44,
      "Time_End": 85.03999999999999,
      "Text": " understand all the different ways that you can be found."
    },
    {
      "Time_Start": 85.03999999999999,
      "Time_End": 89.08,
      "Text": " I'll also kind of demo a tool that I've been working on that we're going to open source"
    },
    {
      "Time_Start": 89.08,
      "Time_End": 92.64,
      "Text": " called Beacon Hunter, which implements some of the strategies that I'm going to talk about"
    },
    {
      "Time_Start": 92.64,
      "Time_End": 93.92,
      "Text": " today."
    },
    {
      "Time_Start": 93.92,
      "Time_End": 100.47999999999999,
      "Text": " And then we'll look at some real-world examples from some popular C2 frameworks."
    },
    {
      "Time_Start": 100.47999999999999,
      "Time_End": 104.75999999999999,
      "Text": " So the C2 frameworks that we're going to focus on is probably going to make Gene sweat a"
    },
    {
      "Time_Start": 104.75999999999999,
      "Time_End": 105.75999999999999,
      "Text": " little bit over there."
    },
    {
      "Time_Start": 105.75999999999999,
      "Time_End": 108.6,
      "Text": " The first one will be Cobalt Strike."
    },
    {
      "Time_Start": 108.60000000000001,
      "Time_End": 113.28,
      "Text": " I'm sure everybody's kind of familiar with this, doesn't really need any introduction."
    },
    {
      "Time_Start": 113.28,
      "Time_End": 117.92000000000002,
      "Text": " It's as popular with red teams as it is with threat actors."
    },
    {
      "Time_Start": 117.92000000000002,
      "Time_End": 121.54,
      "Text": " So having kind of an understanding on how to detect Cobalt Strike is really beneficial"
    },
    {
      "Time_Start": 121.54,
      "Time_End": 123.32000000000001,
      "Text": " for defenders."
    },
    {
      "Time_Start": 123.32000000000001,
      "Time_End": 127.60000000000001,
      "Text": " I guess one of the great things about Cobalt, though, at least from the red team perspective,"
    },
    {
      "Time_Start": 127.60000000000001,
      "Time_End": 129.76000000000002,
      "Text": " is that it's highly customizable."
    },
    {
      "Time_Start": 129.76000000000002,
      "Time_End": 135.44,
      "Text": " So there's a lot of flexibility for the operator to kind of mix up how it behaves."
    },
    {
      "Time_Start": 136.0,
      "Time_End": 140.35999999999999,
      "Text": " That can make pinning down generic detections quite tricky."
    },
    {
      "Time_Start": 140.35999999999999,
      "Time_End": 147.0,
      "Text": " So all the analysis that we did was on Cobalt Strike 4.6.1, which is the latest version."
    },
    {
      "Time_Start": 147.0,
      "Time_End": 151.28,
      "Text": " The other C2 framework that we're going to talk about will be Brute Retail."
    },
    {
      "Time_Start": 151.28,
      "Time_End": 155.24,
      "Text": " This is another commercial framework developed by a company called Dart Vortex."
    },
    {
      "Time_Start": 155.24,
      "Time_End": 159.52,
      "Text": " It's a little bit less popular, but it seems to be growing in popularity amongst threat"
    },
    {
      "Time_Start": 159.52,
      "Time_End": 161.24,
      "Text": " actors at least."
    },
    {
      "Time_Start": 161.24,
      "Time_End": 167.08,
      "Text": " And 42 dropped a blog post recently talking about how it was being abused by APT29."
    },
    {
      "Time_Start": 167.08,
      "Time_End": 170.8,
      "Text": " And then I think maybe last week or the week before, Sophos dropped a blog post documenting"
    },
    {
      "Time_Start": 170.8,
      "Time_End": 176.4,
      "Text": " on how the Black Hat Ransomware group were using it."
    },
    {
      "Time_Start": 176.4,
      "Time_End": 180.28,
      "Text": " I guess they kind of like stole some of my content, actually, because I wrote this talk"
    },
    {
      "Time_Start": 180.28,
      "Time_End": 184.08,
      "Text": " a while ago, and then people started focusing on it and blogging about some of the stuff"
    },
    {
      "Time_Start": 184.08,
      "Time_End": 185.08,
      "Text": " that I'd already knew about."
    },
    {
      "Time_Start": 185.08,
      "Time_End": 189.48000000000002,
      "Text": " But hopefully, you know, a few things will still be quite unique."
    },
    {
      "Time_Start": 189.48,
      "Time_End": 193.84,
      "Text": " One of the interesting things, I guess, about detections for Brute Retail is that the agent"
    },
    {
      "Time_Start": 193.84,
      "Time_End": 195.6,
      "Text": " is not particularly customizable."
    },
    {
      "Time_Start": 195.6,
      "Time_End": 200.28,
      "Text": " So outside of the C2, you can't really change how it behaves."
    },
    {
      "Time_Start": 200.28,
      "Time_End": 204.44,
      "Text": " So for example, there's no real way to kind of customize the obfuscate and sleep strategies"
    },
    {
      "Time_Start": 204.44,
      "Time_End": 206.16,
      "Text": " or its loading process, that kind of stuff."
    },
    {
      "Time_Start": 206.16,
      "Time_End": 211.04,
      "Text": " So if you start to build detections for it, they can be quite powerful."
    },
    {
      "Time_Start": 211.04,
      "Time_End": 215.79999999999998,
      "Text": " And then, you know, I saw this image on Twitter, I think it was like VX Underground put it"
    },
    {
      "Time_Start": 215.79999999999998,
      "Time_End": 216.79999999999998,
      "Text": " up there."
    },
    {
      "Time_Start": 216.84,
      "Time_End": 219.72,
      "Text": " You can see they've gone to the effort of obscure and all this kind of stuff."
    },
    {
      "Time_Start": 219.72,
      "Time_End": 220.72,
      "Text": " But you probably can't see it."
    },
    {
      "Time_Start": 220.72,
      "Time_End": 221.72,
      "Text": " It's not too clear."
    },
    {
      "Time_Start": 221.72,
      "Time_End": 225.52,
      "Text": " But there's actually an IP address in there that's not been obfuscated, and I just randomly"
    },
    {
      "Time_Start": 225.52,
      "Time_End": 227.28,
      "Text": " who is there, and it pointed to Moscow."
    },
    {
      "Time_Start": 227.28,
      "Time_End": 232.8,
      "Text": " So it kind of gives you an indication of who might be using this framework."
    },
    {
      "Time_Start": 232.8,
      "Time_End": 240.04000000000002,
      "Text": " All the analysis that we did was on the latest version, which was 1.0.7 as of today."
    },
    {
      "Time_Start": 240.04000000000002,
      "Time_End": 245.20000000000002,
      "Text": " So let's start from the beginning and look at how a beacon might actually begin its life."
    },
    {
      "Time_Start": 245.60000000000002,
      "Time_End": 248.48000000000002,
      "Text": " Firstly, there'd be some kind of loader."
    },
    {
      "Time_Start": 248.48000000000002,
      "Time_End": 251.92000000000002,
      "Text": " That loader's probably got an encrypted copy of the beacon inside it."
    },
    {
      "Time_Start": 251.92000000000002,
      "Time_End": 256.56,
      "Text": " The loader then will probably perform some kind of process injection, maybe to a remote"
    },
    {
      "Time_Start": 256.56,
      "Time_End": 259.28000000000003,
      "Text": " process, maybe in a local thread."
    },
    {
      "Time_Start": 259.28000000000003,
      "Time_End": 266.88,
      "Text": " Then the shellcode will probably unpack itself, and it will then go on to load any dependencies"
    },
    {
      "Time_Start": 266.88,
      "Time_End": 269.88,
      "Text": " that are required by the beacon."
    },
    {
      "Time_Start": 269.88,
      "Time_End": 274.08000000000004,
      "Text": " And then the reflective loader will be executing, the reflective DLL will be executing in memory,"
    },
    {
      "Time_Start": 274.08,
      "Time_End": 276.52,
      "Text": " doing its all at C2 from a thread."
    },
    {
      "Time_Start": 276.52,
      "Time_End": 280.84,
      "Text": " That's a pretty standard way for a beacon to initialize itself and get itself running"
    },
    {
      "Time_Start": 280.84,
      "Time_End": 281.84,
      "Text": " in memory."
    },
    {
      "Time_Start": 281.84,
      "Time_End": 294.76,
      "Text": " And what we're going to look at is, through each step of this process, where's my thing?"
    },
    {
      "Time_Start": 294.76,
      "Time_End": 299.12,
      "Text": " For each one of these steps, we're going to look at basically different IOCs that can"
    },
    {
      "Time_Start": 299.12,
      "Time_End": 304.0,
      "Text": " trigger, and where we can build detections around them."
    },
    {
      "Time_Start": 304.0,
      "Time_End": 308.36,
      "Text": " So the first one that I'm going to focus on is behavior, and I think behavior's quite"
    },
    {
      "Time_Start": 308.36,
      "Time_End": 314.8,
      "Text": " interesting, particularly when you look at commercial products, because you can't necessarily"
    },
    {
      "Time_Start": 314.8,
      "Time_End": 315.8,
      "Text": " change the behavior."
    },
    {
      "Time_Start": 315.8,
      "Time_End": 319.0,
      "Text": " If it's a behavior that is built into the architecture of the ..."
    },
    {
      "Time_Start": 319.0,
      "Time_End": 332.16,
      "Text": " Okay, that's back."
    },
    {
      "Time_Start": 332.16,
      "Time_End": 335.88000000000005,
      "Text": " Having some technical difficulties today."
    },
    {
      "Time_Start": 335.88000000000005,
      "Time_End": 340.92,
      "Text": " So some good examples of behaviors that we might be interested in that could leave dangling"
    },
    {
      "Time_Start": 340.92,
      "Time_End": 344.66,
      "Text": " IOCs are things like image loads, things like named pipes."
    },
    {
      "Time_Start": 344.66,
      "Time_End": 349.28000000000003,
      "Text": " They might not necessarily be customizable by the operator."
    },
    {
      "Time_Start": 349.28000000000003,
      "Time_End": 354.6,
      "Text": " So let's look at image loads to start off with."
    },
    {
      "Time_Start": 354.6,
      "Time_End": 360.40000000000003,
      "Text": " I guess, so in order for a beacon to kind of remain small, it usually relies on functionality."
    },
    {
      "Time_Start": 360.40000000000003,
      "Time_End": 361.40000000000003,
      "Text": " I'm going to change this."
    },
    {
      "Time_Start": 361.40000000000003,
      "Time_End": 362.40000000000003,
      "Text": " It's just not working."
    },
    {
      "Time_Start": 362.40000000000003,
      "Time_End": 363.40000000000003,
      "Text": " It's not working great."
    },
    {
      "Time_Start": 363.40000000000003,
      "Time_End": 371.08000000000004,
      "Text": " Okay, that's better."
    },
    {
      "Time_Start": 371.08000000000004,
      "Time_End": 374.44000000000005,
      "Text": " So in order for the beacon to remain small, it usually relies on functionality from the"
    },
    {
      "Time_Start": 374.44000000000005,
      "Time_End": 378.24,
      "Text": " operating system using DLL dependencies."
    },
    {
      "Time_Start": 378.24,
      "Time_End": 381.88000000000005,
      "Text": " So for example, rather than building your own HTTP client, it kind of makes much more"
    },
    {
      "Time_Start": 381.88000000000005,
      "Time_End": 385.6,
      "Text": " sense to use something like WinHTTP or WinINET."
    },
    {
      "Time_Start": 385.6,
      "Time_End": 392.56,
      "Text": " Now when the beacon loads these DLLs, we can obviously capture this telemetry if we're"
    },
    {
      "Time_Start": 392.56,
      "Time_End": 394.16,
      "Text": " collecting image load events."
    },
    {
      "Time_Start": 394.16,
      "Time_End": 400.32000000000005,
      "Text": " So for example here, we can see we're capturing a notepad loading kernel base dot DLL with"
    },
    {
      "Time_Start": 400.32000000000005,
      "Time_End": 405.12,
      "Text": " system on event seven."
    },
    {
      "Time_Start": 405.12,
      "Time_End": 410.40000000000003,
      "Text": " So image load telemetry is kind of interesting for us because it gives us hunting opportunities."
    },
    {
      "Time_Start": 410.40000000000003,
      "Time_End": 416.00000000000006,
      "Text": " So some of the things that we can focus on are beacon frameworks loading all its dependencies"
    },
    {
      "Time_Start": 416.00000000000006,
      "Time_End": 419.04,
      "Text": " at the start."
    },
    {
      "Time_Start": 419.04,
      "Time_End": 421.20000000000005,
      "Text": " We can start to build signatures on that."
    },
    {
      "Time_Start": 421.20000000000005,
      "Time_End": 425.24,
      "Text": " If we're hunting for egress beacons, we can see that they'll typically load things like"
    },
    {
      "Time_Start": 425.24,
      "Time_End": 427.24,
      "Text": " WinHTTP or WinINET."
    },
    {
      "Time_Start": 427.24,
      "Time_End": 432.52000000000004,
      "Text": " And if we kind of create baselines of DLL loads from specific processes, we can look"
    },
    {
      "Time_Start": 432.52000000000004,
      "Time_End": 433.52000000000004,
      "Text": " for anomalies."
    },
    {
      "Time_Start": 433.52000000000004,
      "Time_End": 439.28000000000003,
      "Text": " So for example, if we saw something like notepad loading DBG help, that would probably be irregular."
    },
    {
      "Time_Start": 440.16,
      "Time_End": 443.04,
      "Text": " So how do we go about hunting for these kind of things?"
    },
    {
      "Time_Start": 443.04,
      "Time_End": 445.6,
      "Text": " Well, usually most EDRs have this built into them."
    },
    {
      "Time_Start": 445.6,
      "Time_End": 449.08000000000004,
      "Text": " You can build like hunt rules within your EDR."
    },
    {
      "Time_Start": 449.08000000000004,
      "Time_End": 452.46000000000004,
      "Text": " But for my examples, I'm just going to use Elastic."
    },
    {
      "Time_Start": 452.46000000000004,
      "Time_End": 458.16,
      "Text": " So if you're not familiar with EQL, it's basically a SQL-like language that Elastic provides"
    },
    {
      "Time_Start": 458.16,
      "Time_End": 459.16,
      "Text": " you."
    },
    {
      "Time_Start": 459.16,
      "Time_End": 461.36,
      "Text": " It allows you to query the event database."
    },
    {
      "Time_Start": 461.36,
      "Time_End": 468.84000000000003,
      "Text": " So in this example, all I'm basically saying is give me all the processes that have loaded"
    },
    {
      "Time_Start": 469.40000000000003,
      "Time_End": 475.20000000000005,
      "Text": " credUI.dll, WinHTTP.dll within the space of a minute, and we can just pump that into our"
    },
    {
      "Time_Start": 475.20000000000005,
      "Time_End": 478.12,
      "Text": " events database and find all those processes."
    },
    {
      "Time_Start": 478.12,
      "Time_End": 480.96000000000004,
      "Text": " So let's look at a real example."
    },
    {
      "Time_Start": 480.96000000000004,
      "Time_End": 488.72,
      "Text": " So I took BruteRetail and I injected it into Notepad using the built-in PC inject command,"
    },
    {
      "Time_Start": 488.72,
      "Time_End": 491.32000000000005,
      "Text": " and then I just watched for DLL loads."
    },
    {
      "Time_Start": 491.32000000000005,
      "Time_End": 496.28000000000003,
      "Text": " And as you can see, when the reflective loader executes, it loads all the dependencies for"
    },
    {
      "Time_Start": 496.28000000000003,
      "Time_End": 499.92,
      "Text": " the DLL, for the reflective DLL."
    },
    {
      "Time_Start": 499.92,
      "Time_End": 501.64000000000004,
      "Text": " And there's quite a lot of stuff in there."
    },
    {
      "Time_Start": 501.64000000000004,
      "Time_End": 505.84000000000003,
      "Text": " It kind of pretty much loads the kitchen sink."
    },
    {
      "Time_Start": 505.84000000000003,
      "Time_End": 509.00000000000006,
      "Text": " So and there's some quite unique stuff that you wouldn't necessarily expect to see in"
    },
    {
      "Time_Start": 509.00000000000006,
      "Time_End": 510.32000000000005,
      "Text": " all processes."
    },
    {
      "Time_Start": 510.32000000000005,
      "Time_End": 517.44,
      "Text": " So for example, we can see credUI here, which is probably, wherever it is, it's probably"
    },
    {
      "Time_Start": 517.44,
      "Time_End": 524.0400000000001,
      "Text": " down to his credential prompt phishing thing tool that he's got built into the C2."
    },
    {
      "Time_Start": 524.04,
      "Time_End": 525.76,
      "Text": " So what can we do with this?"
    },
    {
      "Time_Start": 525.76,
      "Time_End": 533.8399999999999,
      "Text": " Well, using EQL, we can trivially build signatures to detect BruteRetail when it's loading and"
    },
    {
      "Time_Start": 533.8399999999999,
      "Time_End": 536.0799999999999,
      "Text": " when it's injected into beacons."
    },
    {
      "Time_Start": 536.0799999999999,
      "Time_End": 540.8399999999999,
      "Text": " So for example, if we took this EQL rule, we're basically saying, give me all the processes"
    },
    {
      "Time_Start": 540.8399999999999,
      "Time_End": 547.24,
      "Text": " where credUI, dbgHelp, WinHTTP are all loaded within the space of a minute."
    },
    {
      "Time_Start": 547.24,
      "Time_End": 550.8,
      "Text": " And as we can see here, I just pumped it into my events database, and I was able to trivially"
    },
    {
      "Time_Start": 550.84,
      "Time_End": 554.6,
      "Text": " find all the injected notepad processes."
    },
    {
      "Time_Start": 554.6,
      "Time_End": 558.2,
      "Text": " And this is cool because we can use this retrospectively."
    },
    {
      "Time_Start": 558.2,
      "Time_End": 562.2400000000001,
      "Text": " So we can actually hunt for all injections that have occurred in our environment over"
    },
    {
      "Time_Start": 562.2400000000001,
      "Time_End": 568.44,
      "Text": " time, assuming we've got the telemetry."
    },
    {
      "Time_Start": 568.44,
      "Time_End": 571.0400000000001,
      "Text": " So let's look at in-memory stuff."
    },
    {
      "Time_Start": 571.0400000000001,
      "Time_End": 575.5200000000001,
      "Text": " So once the beacon's injected, it will typically remain memory resident, really, to avoid any"
    },
    {
      "Time_Start": 575.5200000000001,
      "Time_End": 577.7600000000001,
      "Text": " on-disk detections."
    },
    {
      "Time_Start": 577.76,
      "Time_End": 581.04,
      "Text": " The beacon, as I mentioned before, is usually injected into memory using a loader, which"
    },
    {
      "Time_Start": 581.04,
      "Time_End": 584.4,
      "Text": " will create a thread or hijack a thread."
    },
    {
      "Time_Start": 584.4,
      "Time_End": 588.74,
      "Text": " And then it will typically be operating from virtual memory or from a stomped module."
    },
    {
      "Time_Start": 588.74,
      "Time_End": 593.06,
      "Text": " So there's various things that we can look at for in-memory detections."
    },
    {
      "Time_Start": 593.06,
      "Time_End": 597.68,
      "Text": " The first one is probably the most straightforward and the most simple, but is also possibly"
    },
    {
      "Time_Start": 597.68,
      "Time_End": 602.56,
      "Text": " one of the most effective for detecting known malware, which is using pre-built signatures."
    },
    {
      "Time_Start": 602.56,
      "Time_End": 607.16,
      "Text": " Essentially, this involves scanning memory with a tool, something like Yara or through"
    },
    {
      "Time_Start": 607.16,
      "Time_End": 609.8399999999999,
      "Text": " your EDR, for known signatures of a beacon."
    },
    {
      "Time_Start": 609.8399999999999,
      "Time_End": 613.1999999999999,
      "Text": " These could be like strings that might be in the reflective DLL, or they could be specific"
    },
    {
      "Time_Start": 613.1999999999999,
      "Time_End": 616.9599999999999,
      "Text": " opcodes from the text section of the implant."
    },
    {
      "Time_Start": 616.9599999999999,
      "Time_End": 619.48,
      "Text": " So if you've not played with Yara before, it's pretty straightforward."
    },
    {
      "Time_Start": 619.48,
      "Time_End": 623.6,
      "Text": " A simple Yara rule, probably the most simple Yara rule, might look something like this."
    },
    {
      "Time_Start": 623.6,
      "Time_End": 628.4399999999999,
      "Text": " All we're basically saying is scan this process memory."
    },
    {
      "Time_Start": 628.4399999999999,
      "Time_End": 633.56,
      "Text": " And if you spot two of these strings that are in blue, this hello CIFCON 2022, if you"
    },
    {
      "Time_Start": 633.5600000000001,
      "Time_End": 637.84,
      "Text": " spot two of those, then tell me about it."
    },
    {
      "Time_Start": 637.84,
      "Time_End": 642.8800000000001,
      "Text": " So let's look at how this might apply to CobaltStrike."
    },
    {
      "Time_Start": 642.8800000000001,
      "Time_End": 649.46,
      "Text": " So CobaltStrike has got some evasion configurations built into it for avoiding in-memory detections."
    },
    {
      "Time_Start": 649.46,
      "Time_End": 653.7800000000001,
      "Text": " So the first one is the strerep malleable config option."
    },
    {
      "Time_Start": 653.7800000000001,
      "Time_End": 658.0400000000001,
      "Text": " This basically allows the operator to replace strings that might exist within the beacon's"
    },
    {
      "Time_Start": 658.0400000000001,
      "Time_End": 660.6400000000001,
      "Text": " reflective DLL with whatever they want."
    },
    {
      "Time_Start": 660.72,
      "Time_End": 666.68,
      "Text": " Now, I think in-memory detections are probably a bit of a problem for CobaltStrike at the"
    },
    {
      "Time_Start": 666.68,
      "Time_End": 672.56,
      "Text": " moment because of its popularity, and it's gained much more focus from EDR and AV companies."
    },
    {
      "Time_Start": 672.56,
      "Time_End": 677.56,
      "Text": " So what they did was in the 4.4 release, they basically introduced something called the"
    },
    {
      "Time_Start": 677.56,
      "Time_End": 682.92,
      "Text": " sleep mask kit, which effectively allows the operator to provide their own custom code"
    },
    {
      "Time_Start": 682.92,
      "Time_End": 688.18,
      "Text": " for sleeping and obfuscating the beacon in memory."
    },
    {
      "Time_Start": 688.22,
      "Time_End": 692.2600000000001,
      "Text": " So there's three kind of configurations that you can go with for sleep masking."
    },
    {
      "Time_Start": 692.2600000000001,
      "Time_End": 694.0200000000001,
      "Text": " Obviously, there's no sleep mask."
    },
    {
      "Time_Start": 694.0200000000001,
      "Time_End": 698.3000000000001,
      "Text": " In this kind of scenario, the strings, the code, it will all remain in plain text, and"
    },
    {
      "Time_Start": 698.3000000000001,
      "Time_End": 702.9200000000001,
      "Text": " the beacon can trivially be picked out of memory through memory scanning."
    },
    {
      "Time_Start": 702.9200000000001,
      "Time_End": 707.98,
      "Text": " We can enable the sleep mask with sleep mask equals true in the malleable profile."
    },
    {
      "Time_Start": 707.98,
      "Time_End": 713.7,
      "Text": " So when this is turned on, basically, CobaltStrike will mask the beacon in memory."
    },
    {
      "Time_Start": 713.7,
      "Time_End": 719.58,
      "Text": " It will use XOR to obfuscate the strings and data, but this can still be fingerprinted"
    },
    {
      "Time_Start": 719.58,
      "Time_End": 727.0600000000001,
      "Text": " because it's basically using like a pre-built obfuscating sleep strategy, and you can build"
    },
    {
      "Time_Start": 727.0600000000001,
      "Time_End": 732.1800000000001,
      "Text": " URLs for it on the actual code that does the sleeping."
    },
    {
      "Time_Start": 732.1800000000001,
      "Time_End": 735.98,
      "Text": " And then finally, which is probably the preferred option, you've got the user-defined sleep"
    },
    {
      "Time_Start": 735.98,
      "Time_End": 736.98,
      "Text": " mask."
    },
    {
      "Time_Start": 736.98,
      "Time_End": 742.1400000000001,
      "Text": " And this basically exposes the sleep mask functionality to the operator."
    },
    {
      "Time_Start": 742.14,
      "Time_End": 747.02,
      "Text": " It provides them with pointers to beacon's heat memory, and it basically allows you to"
    },
    {
      "Time_Start": 747.02,
      "Time_End": 751.14,
      "Text": " kind of walk through it and obfuscate the text section and obfuscate all the heat records"
    },
    {
      "Time_Start": 751.14,
      "Time_End": 755.62,
      "Text": " for the beacon, which is pretty cool."
    },
    {
      "Time_Start": 755.62,
      "Time_End": 760.6999999999999,
      "Text": " So if we look at how this actually works, so using the user-defined sleep mask, there"
    },
    {
      "Time_Start": 760.6999999999999,
      "Time_End": 764.14,
      "Text": " are a couple of things that you need to be aware of, a couple of tradeoffs."
    },
    {
      "Time_Start": 764.14,
      "Time_End": 773.14,
      "Text": " So notably, if you're operating from kind of read execute memory only, then the beacon"
    },
    {
      "Time_Start": 773.14,
      "Time_End": 776.9,
      "Text": " doesn't actually obfuscate the text section because it can't write to it."
    },
    {
      "Time_Start": 776.9,
      "Time_End": 784.3,
      "Text": " So in essence, it's not actually adding anything, so you can still build URLs for the text section"
    },
    {
      "Time_Start": 784.3,
      "Time_End": 786.64,
      "Text": " of the beacon."
    },
    {
      "Time_Start": 786.64,
      "Time_End": 792.14,
      "Text": " So you can see in this example, we've got like useRWX equals false, and we're still"
    },
    {
      "Time_Start": 792.14,
      "Time_End": 797.42,
      "Text": " able to pick up Cobalt Strike with a URL."
    },
    {
      "Time_Start": 797.42,
      "Time_End": 805.02,
      "Text": " And as I said, that's basically because the text section is not modifiable."
    },
    {
      "Time_Start": 805.02,
      "Time_End": 810.3,
      "Text": " If we wanted to obfuscate the text section, we can do that, but I guess the tradeoff is"
    },
    {
      "Time_Start": 810.3,
      "Time_End": 814.26,
      "Text": " we have to operate from read-write-execute memory."
    },
    {
      "Time_Start": 814.26,
      "Time_End": 821.62,
      "Text": " So I think it's probably a case of pick your poison, what do you think is the bigger IOC?"
    },
    {
      "Time_Start": 821.62,
      "Time_End": 822.62,
      "Text": " How about Brute Retail?"
    },
    {
      "Time_Start": 822.62,
      "Time_End": 825.54,
      "Text": " Does that fare any better?"
    },
    {
      "Time_Start": 825.54,
      "Time_End": 831.5,
      "Text": " So if we took a look at the documentation for Brute Retail, it basically says something"
    },
    {
      "Time_Start": 831.5,
      "Time_End": 836.62,
      "Text": " along the lines of it's got a pretty complex sleep and obfuscate mechanism."
    },
    {
      "Time_Start": 836.62,
      "Time_End": 842.74,
      "Text": " It uses a mixture of Windows event creation, weight objects, timers, in addition to kind"
    },
    {
      "Time_Start": 842.74,
      "Time_End": 845.22,
      "Text": " of ROP gadgets and APCs."
    },
    {
      "Time_Start": 845.22,
      "Time_End": 851.3,
      "Text": " So you would think it would be pretty complex to detect the beacon, right?"
    },
    {
      "Time_Start": 851.98,
      "Time_End": 857.6600000000001,
      "Text": " So what we did was we injected a badger, as he calls it, to a process, put the badger"
    },
    {
      "Time_Start": 857.6600000000001,
      "Time_End": 864.0600000000001,
      "Text": " to sleep, on quite a high sleep, and then just did a strings dump over all the strings"
    },
    {
      "Time_Start": 864.0600000000001,
      "Time_End": 865.0600000000001,
      "Text": " that were in memory."
    },
    {
      "Time_Start": 865.0600000000001,
      "Time_End": 868.6200000000001,
      "Text": " And I was a little bit surprised to see some stuff like this sitting around."
    },
    {
      "Time_Start": 868.6200000000001,
      "Time_End": 875.7400000000001,
      "Text": " So as I said, all I did was use process hacker and dump to the strings, and we can see randomly"
    },
    {
      "Time_Start": 875.7400000000001,
      "Time_End": 879.0600000000001,
      "Text": " there's things like amsy, ecw, patched, that kind of stuff."
    },
    {
      "Time_Start": 879.0600000000001,
      "Time_End": 882.98,
      "Text": " I mean, it sounds totally legit."
    },
    {
      "Time_Start": 882.98,
      "Time_End": 887.5400000000001,
      "Text": " And basically, that was because the obfuscating sleep mechanism is only protecting the text"
    },
    {
      "Time_Start": 887.5400000000001,
      "Time_End": 890.86,
      "Text": " section."
    },
    {
      "Time_Start": 890.86,
      "Time_End": 893.62,
      "Text": " So what I did was I was kind of curious about how this was working."
    },
    {
      "Time_Start": 893.62,
      "Time_End": 895.62,
      "Text": " So I wanted to reverse engineer it."
    },
    {
      "Time_Start": 895.62,
      "Time_End": 901.82,
      "Text": " So I threw it into IDA, and I wanted to kind of start to build some more reliable detections."
    },
    {
      "Time_Start": 901.82,
      "Time_End": 907.5400000000001,
      "Text": " So when I threw it into IDA, one of the things that I kind of spotted initially was Brute"
    },
    {
      "Time_Start": 907.54,
      "Time_End": 908.54,
      "Text": " Loader."
    },
    {
      "Time_Start": 908.54,
      "Time_End": 913.06,
      "Text": " That's basically the export for the entry point for the reflective DLL."
    },
    {
      "Time_Start": 913.06,
      "Time_End": 918.54,
      "Text": " So I searched memory for the string Brute Loader, and we spotted it inside the sleeping"
    },
    {
      "Time_Start": 918.54,
      "Time_End": 920.06,
      "Text": " badger."
    },
    {
      "Time_Start": 920.06,
      "Time_End": 921.06,
      "Text": " So what can we do with this?"
    },
    {
      "Time_Start": 921.06,
      "Time_End": 927.06,
      "Text": " Well, we can build a very simple YARL to search for all instances of Brute Retail that might"
    },
    {
      "Time_Start": 927.06,
      "Time_End": 933.18,
      "Text": " be running in any process in memory and pluck them out quite trivially."
    },
    {
      "Time_Start": 933.18,
      "Time_End": 935.3,
      "Text": " But can we take this one step further?"
    },
    {
      "Time_Start": 935.3,
      "Time_End": 936.3,
      "Text": " We can."
    },
    {
      "Time_Start": 936.3000000000001,
      "Time_End": 941.2600000000001,
      "Text": " We can go into VirusTotal, and we can find all the other samples of Brute Retail that"
    },
    {
      "Time_Start": 941.2600000000001,
      "Time_End": 945.22,
      "Text": " are sitting around in there and pull them down and have a look what they're doing as"
    },
    {
      "Time_Start": 945.22,
      "Time_End": 946.22,
      "Text": " well."
    },
    {
      "Time_Start": 946.22,
      "Time_End": 951.7800000000001,
      "Text": " And I'll come back to this, because actually, what we did was we wrote a tool to extract"
    },
    {
      "Time_Start": 951.7800000000001,
      "Time_End": 956.7400000000001,
      "Text": " all the configurations from the artifacts on disk and from the artifacts in memory."
    },
    {
      "Time_Start": 956.7400000000001,
      "Time_End": 962.7400000000001,
      "Text": " So you can get all the CT information, all that kind of stuff."
    },
    {
      "Time_Start": 962.74,
      "Time_End": 967.42,
      "Text": " So moving on from signatures, what else can we use to spot the beacon?"
    },
    {
      "Time_Start": 967.42,
      "Time_End": 972.54,
      "Text": " Well, once the beacon's up and running in memory, it will typically operate from, as"
    },
    {
      "Time_Start": 972.54,
      "Time_End": 975.46,
      "Text": " I said, virtual memory or from a stomp DLL."
    },
    {
      "Time_Start": 975.46,
      "Time_End": 980.86,
      "Text": " If it's operating from virtual memory, there's a few telltale indicators that we can use"
    },
    {
      "Time_Start": 980.86,
      "Time_End": 983.62,
      "Text": " or we can focus on to build detections."
    },
    {
      "Time_Start": 983.62,
      "Time_End": 988.58,
      "Text": " Perhaps one of the most obvious things is the page permissions, as I touched on with"
    },
    {
      "Time_Start": 988.58,
      "Time_End": 990.58,
      "Text": " Cobalt Strike already."
    },
    {
      "Time_Start": 990.58,
      "Time_End": 997.0600000000001,
      "Text": " So outside of the CLR, outside of CLR JITs, it's pretty irregular to see executable pages"
    },
    {
      "Time_Start": 997.0600000000001,
      "Time_End": 999.58,
      "Text": " that are not backed by a DLL."
    },
    {
      "Time_Start": 999.58,
      "Time_End": 1004.5,
      "Text": " So if we saw something like this where we've got the read execute page permissions set"
    },
    {
      "Time_Start": 1004.5,
      "Time_End": 1012.58,
      "Text": " and it's not backed against a physical DLL on disk, then it's probably a little bit suspicious."
    },
    {
      "Time_Start": 1012.58,
      "Time_End": 1015.1800000000001,
      "Text": " So we can start to hunt for these."
    },
    {
      "Time_Start": 1015.1800000000001,
      "Time_End": 1021.3000000000001,
      "Text": " If we maybe disregard the CLR modules for a moment, we can start to build relatively"
    },
    {
      "Time_Start": 1021.3000000000001,
      "Time_End": 1025.14,
      "Text": " high signal detections around them."
    },
    {
      "Time_Start": 1025.14,
      "Time_End": 1028.48,
      "Text": " Obviously there are ways around this."
    },
    {
      "Time_Start": 1028.48,
      "Time_End": 1035.38,
      "Text": " So some beacons have strategies built into them within their obfuscate and sleep to basically"
    },
    {
      "Time_Start": 1035.38,
      "Time_End": 1037.7,
      "Text": " modify the page permissions."
    },
    {
      "Time_Start": 1037.7,
      "Time_End": 1042.38,
      "Text": " So basically when the beacon goes to sleep, it removes the execute bit from that page."
    },
    {
      "Time_Start": 1042.38,
      "Time_End": 1047.2600000000002,
      "Text": " And these strategies, they typically leverage some form of event-driven execution within"
    },
    {
      "Time_Start": 1047.2600000000002,
      "Time_End": 1048.66,
      "Text": " its sleep and wake."
    },
    {
      "Time_Start": 1048.66,
      "Time_End": 1053.74,
      "Text": " And when it re-engages execution, it will use something like ROP Gadgets to call virtual"
    },
    {
      "Time_Start": 1053.74,
      "Time_End": 1058.38,
      "Text": " protect and reset the beacon's page permissions back to executable."
    },
    {
      "Time_Start": 1058.38,
      "Time_End": 1063.38,
      "Text": " So there is some blog posts out there detailing some of the techniques that we discovered"
    },
    {
      "Time_Start": 1063.38,
      "Time_End": 1064.7,
      "Text": " and we're using in our products."
    },
    {
      "Time_Start": 1064.7,
      "Time_End": 1070.9,
      "Text": " One of my colleagues, Peter Wintersmith, built a technique that uses Windows timers."
    },
    {
      "Time_Start": 1071.42,
      "Time_End": 1078.5400000000002,
      "Text": " And this technique basically works by queuing a number of timers using createTimerQueueTimer,"
    },
    {
      "Time_Start": 1078.5400000000002,
      "Time_End": 1084.94,
      "Text": " which then when it triggers, ends up returning to some previously defined context records,"
    },
    {
      "Time_Start": 1084.94,
      "Time_End": 1088.98,
      "Text": " which call NT continue and end up calling virtual protect, acting like a form of ROP"
    },
    {
      "Time_Start": 1088.98,
      "Time_End": 1093.42,
      "Text": " to engage the execute bit back on the page."
    },
    {
      "Time_Start": 1093.42,
      "Time_End": 1096.94,
      "Text": " So it might look something like this, where when the beacon's awake, it's doing its"
    },
    {
      "Time_Start": 1096.94,
      "Time_End": 1101.42,
      "Text": " tasking and the execute bit is set on that page."
    },
    {
      "Time_Start": 1101.42,
      "Time_End": 1107.5800000000002,
      "Text": " And then when the beacon goes to sleep, it might be reset back to read-write."
    },
    {
      "Time_Start": 1107.5800000000002,
      "Time_End": 1110.06,
      "Text": " So how does this work within Cobalt Strike?"
    },
    {
      "Time_Start": 1110.06,
      "Time_End": 1113.42,
      "Text": " Well, the page permissions are always executable in Cobalt Strike."
    },
    {
      "Time_Start": 1113.42,
      "Time_End": 1116.8600000000001,
      "Text": " It doesn't have a strategy to remove them on sleep."
    },
    {
      "Time_Start": 1116.8600000000001,
      "Time_End": 1121.42,
      "Text": " So the page permissions will typically remain read-execute or read-write-execute."
    },
    {
      "Time_Start": 1122.14,
      "Time_End": 1127.5,
      "Text": " Without module stomping, this will always run from virtual memory."
    },
    {
      "Time_Start": 1127.5,
      "Time_End": 1129.26,
      "Text": " It won't have a DLL backed against it."
    },
    {
      "Time_Start": 1129.26,
      "Time_End": 1131.3400000000001,
      "Text": " So it's pretty straightforward to pick up."
    },
    {
      "Time_Start": 1132.3000000000002,
      "Time_End": 1138.14,
      "Text": " Brute Retail does have an off-the-skate and sleep strategy that modifies the page permissions."
    },
    {
      "Time_Start": 1138.14,
      "Time_End": 1141.26,
      "Text": " So you can see here, it's read-execute."
    },
    {
      "Time_Start": 1141.26,
      "Time_End": 1143.9,
      "Text": " And then when the beacon's asleep, it's read-write."
    },
    {
      "Time_Start": 1145.18,
      "Time_End": 1149.26,
      "Text": " So I was kind of curious to see how this works."
    },
    {
      "Time_Start": 1149.26,
      "Time_End": 1153.1,
      "Text": " And one of the interesting things about this strategy within Brute Retail is, you know,"
    },
    {
      "Time_Start": 1153.1,
      "Time_End": 1155.58,
      "Text": " it's kind of cool that it's like flipping the page permissions because it does make"
    },
    {
      "Time_Start": 1155.58,
      "Time_End": 1156.86,
      "Text": " it harder to set when it's sleeping."
    },
    {
      "Time_Start": 1157.5,
      "Time_End": 1160.46,
      "Text": " That is unless you've got a badger linked to peer-to-peer."
    },
    {
      "Time_Start": 1161.5,
      "Time_End": 1163.9,
      "Text": " Because obviously those two need to communicate."
    },
    {
      "Time_Start": 1163.9,
      "Time_End": 1168.62,
      "Text": " So if you've got a pivot enabled within Brute Retail, you know, all bets are off."
    },
    {
      "Time_Start": 1168.62,
      "Time_End": 1172.78,
      "Text": " It just doesn't encrypt itself and it remains executable all the time."
    },
    {
      "Time_Start": 1172.78,
      "Time_End": 1177.02,
      "Text": " So if you've got an egress beacon linked to a peer-to-peer beacon, there's no off-the-skate"
    },
    {
      "Time_Start": 1177.02,
      "Time_End": 1177.42,
      "Text": " and sleep."
    },
    {
      "Time_Start": 1178.3000000000002,
      "Time_End": 1182.46,
      "Text": " And so I was kind of like curious again at how this worked."
    },
    {
      "Time_Start": 1185.42,
      "Time_End": 1191.5,
      "Text": " So what I did was, while I was reversing Brute Retail, I had a look at the off-the-skate"
    },
    {
      "Time_Start": 1191.5,
      "Time_End": 1192.78,
      "Text": " and sleep inside IDA."
    },
    {
      "Time_Start": 1194.78,
      "Time_End": 1200.22,
      "Text": " And I guess like basically the way it works is, or what it does, the first thing it does"
    },
    {
      "Time_Start": 1200.22,
      "Time_End": 1204.6200000000001,
      "Text": " is it creates a new thread and it spoofs the start address of that thread to be tp-release"
    },
    {
      "Time_Start": 1205.2600000000002,
      "Time_End": 1207.2600000000002,
      "Text": " cleanup group members plus 55 hex."
    },
    {
      "Time_Start": 1208.94,
      "Time_End": 1213.18,
      "Text": " And then once it creates that thread, it sets up a number of context structures."
    },
    {
      "Time_Start": 1213.8200000000002,
      "Time_End": 1217.18,
      "Text": " So these context structures are basically used to call things like"
    },
    {
      "Time_Start": 1217.18,
      "Time_End": 1219.1000000000001,
      "Text": " NT wait for single object to delay execution."
    },
    {
      "Time_Start": 1220.0600000000002,
      "Time_End": 1225.5000000000002,
      "Text": " NT protect virtual memory to change page permissions, system function 32 to do RC4,"
    },
    {
      "Time_Start": 1225.5000000000002,
      "Time_End": 1226.0600000000002,
      "Text": " that kind of stuff."
    },
    {
      "Time_Start": 1228.14,
      "Time_End": 1232.6200000000001,
      "Text": " And these are basically the different steps within its encrypt off-the-skate and sleep"
    },
    {
      "Time_Start": 1232.6200000000001,
      "Time_End": 1233.1000000000001,
      "Text": " strategy."
    },
    {
      "Time_Start": 1234.6200000000001,
      "Time_End": 1238.14,
      "Text": " And then once it's set up the context structures, it basically queues a bunch of APCs against"
    },
    {
      "Time_Start": 1238.14,
      "Time_End": 1238.8600000000001,
      "Text": " NT continue."
    },
    {
      "Time_Start": 1239.42,
      "Time_End": 1243.98,
      "Text": " And these will end up proxying calls to those context structures, as I kind of mentioned."
    },
    {
      "Time_Start": 1245.9,
      "Time_End": 1252.0600000000002,
      "Text": " So by the time I'd kind of like put a couple of hours into reversing this, it kind of like"
    },
    {
      "Time_Start": 1252.0600000000002,
      "Time_End": 1252.7,
      "Text": " clicked on me."
    },
    {
      "Time_Start": 1253.3400000000001,
      "Time_End": 1254.22,
      "Text": " I've seen this before."
    },
    {
      "Time_Start": 1255.5800000000002,
      "Time_End": 1260.7,
      "Text": " And it basically, it's just the open source implementation of foliage that Austin Hudson's"
    },
    {
      "Time_Start": 1260.7,
      "Time_End": 1262.3000000000002,
      "Text": " got on his GitHub repo."
    },
    {
      "Time_Start": 1262.94,
      "Time_End": 1267.74,
      "Text": " Interestingly, based on the description about the timers and all that kind of stuff that"
    },
    {
      "Time_Start": 1267.74,
      "Time_End": 1269.5,
      "Text": " was in the blog post, I was expecting to see a little bit more."
    },
    {
      "Time_Start": 1269.5,
      "Time_End": 1273.18,
      "Text": " But actually, I couldn't find any imports for any of the timer APIs or anything like"
    },
    {
      "Time_Start": 1273.18,
      "Time_End": 1273.74,
      "Text": " that."
    },
    {
      "Time_Start": 1273.74,
      "Time_End": 1276.3799999999999,
      "Text": " So maybe I missed something."
    },
    {
      "Time_Start": 1279.98,
      "Time_End": 1286.22,
      "Text": " So moving on, there are other kind of in-memory IOCs that can be left around, dangling around"
    },
    {
      "Time_Start": 1287.02,
      "Time_End": 1289.02,
      "Text": " that threat hunters can use to build detections."
    },
    {
      "Time_Start": 1289.58,
      "Time_End": 1291.26,
      "Text": " So these might be deployed by the operator."
    },
    {
      "Time_Start": 1291.26,
      "Time_End": 1292.86,
      "Text": " They might be deployed by the beacon."
    },
    {
      "Time_Start": 1292.86,
      "Time_End": 1296.3,
      "Text": " So some good examples of these are patches like memory hooks."
    },
    {
      "Time_Start": 1296.94,
      "Time_End": 1302.22,
      "Text": " So things that might be applied to things like ETW or AMSI, maybe to disabled telemetry"
    },
    {
      "Time_Start": 1302.22,
      "Time_End": 1304.22,
      "Text": " or to evade scanning from antivirus engines."
    },
    {
      "Time_Start": 1305.34,
      "Time_End": 1309.58,
      "Text": " So hunting for these can give us a really high signal that something suspicious is going"
    },
    {
      "Time_Start": 1309.58,
      "Time_End": 1310.62,
      "Text": " on inside a beacon."
    },
    {
      "Time_Start": 1311.58,
      "Time_End": 1315.82,
      "Text": " So in this example, and these are taken from the sliver armory."
    },
    {
      "Time_Start": 1316.3799999999999,
      "Time_End": 1317.5,
      "Text": " The sliver armory."
    },
    {
      "Time_Start": 1318.62,
      "Time_End": 1324.3799999999999,
      "Text": " So basically, patching ETW, you can see all it's doing is finding the address of ETW event"
    },
    {
      "Time_Start": 1324.3799999999999,
      "Time_End": 1326.1399999999999,
      "Text": " write, and it's patching it with a RET."
    },
    {
      "Time_Start": 1327.6599999999999,
      "Time_End": 1329.82,
      "Text": " And then we've got an AMSI scan buffer bypass down here."
    },
    {
      "Time_Start": 1330.54,
      "Time_End": 1336.06,
      "Text": " So if we can actually hunt for these in processes, looking for these patches, then we know that"
    },
    {
      "Time_Start": 1336.06,
      "Time_End": 1337.34,
      "Text": " there's something suspicious going on."
    },
    {
      "Time_Start": 1340.22,
      "Time_End": 1344.22,
      "Text": " The only kind of problem with this, of course, is that some of these patches might be reverted."
    },
    {
      "Time_Start": 1344.22,
      "Time_End": 1345.26,
      "Text": " So they could be temporary."
    },
    {
      "Time_Start": 1345.26,
      "Time_End": 1349.42,
      "Text": " So for example, maybe you've got like a CLR harness that's used to run an assembly in"
    },
    {
      "Time_Start": 1349.42,
      "Time_End": 1350.3,
      "Text": " memory."
    },
    {
      "Time_Start": 1350.3,
      "Time_End": 1355.98,
      "Text": " You might patch ETW and AMSI, do the post exploitation assembly execution, and then"
    },
    {
      "Time_Start": 1355.98,
      "Time_End": 1357.02,
      "Text": " remove those patches."
    },
    {
      "Time_Start": 1357.02,
      "Time_End": 1361.34,
      "Text": " So hunting for the patches alone is not necessarily the best thing to do."
    },
    {
      "Time_Start": 1362.3799999999999,
      "Time_End": 1365.98,
      "Text": " But there are some kind of like dangling IOCs that do get left around."
    },
    {
      "Time_Start": 1367.26,
      "Time_End": 1371.5,
      "Text": " So the way Windows works is it will back common DLLs to physical memory."
    },
    {
      "Time_Start": 1371.5,
      "Time_End": 1374.3799999999999,
      "Text": " And these are shared across different processes on the host."
    },
    {
      "Time_Start": 1374.38,
      "Time_End": 1379.98,
      "Text": " Now, if a beacon patches a DLL, something like NTDLL, in our previous example, like"
    },
    {
      "Time_Start": 1379.98,
      "Time_End": 1383.5800000000002,
      "Text": " ETW, that triggers what's known as a copy on write operation."
    },
    {
      "Time_Start": 1383.5800000000002,
      "Time_End": 1388.8600000000001,
      "Text": " So that basically means that that process gets its own copy of the DLL."
    },
    {
      "Time_Start": 1389.5,
      "Time_End": 1391.42,
      "Text": " And that page gets marked as private."
    },
    {
      "Time_Start": 1391.42,
      "Time_End": 1395.66,
      "Text": " And when the page gets marked as private, it basically clears a specific bit known as"
    },
    {
      "Time_Start": 1395.66,
      "Time_End": 1397.2600000000002,
      "Text": " the shared bit on that page."
    },
    {
      "Time_Start": 1397.2600000000002,
      "Time_End": 1402.5400000000002,
      "Text": " So what we can do is we can hunt for processes and hunt for pages with the shared bit cleared."
    },
    {
      "Time_Start": 1402.54,
      "Time_End": 1405.42,
      "Text": " And then we can resolve all the exports in those pages."
    },
    {
      "Time_Start": 1405.42,
      "Time_End": 1410.78,
      "Text": " And we can get a good indicator if something has been hooked on that page."
    },
    {
      "Time_Start": 1412.46,
      "Time_End": 1415.58,
      "Text": " So if we took a look at an example of this from Brute Retail."
    },
    {
      "Time_Start": 1415.58,
      "Time_End": 1419.02,
      "Text": " So Brute Retail's got a shop inline command."
    },
    {
      "Time_Start": 1420.06,
      "Time_End": 1426.86,
      "Text": " And you can see here, when we run shop inline with an assembly, it says on the console patch"
    },
    {
      "Time_Start": 1426.86,
      "Time_End": 1429.18,
      "Text": " ETW event write and patch AMSI."
    },
    {
      "Time_Start": 1429.18,
      "Time_End": 1430.46,
      "Text": " And now these patches are permanent."
    },
    {
      "Time_Start": 1430.46,
      "Time_End": 1435.3400000000001,
      "Text": " So what I did was I just ran shop inline, let it run the assembly, and then I attached"
    },
    {
      "Time_Start": 1435.3400000000001,
      "Time_End": 1436.6200000000001,
      "Text": " WinDBG to the process."
    },
    {
      "Time_Start": 1437.42,
      "Time_End": 1441.98,
      "Text": " And I just disassembled ETW event write and AMSI scan buffer."
    },
    {
      "Time_Start": 1441.98,
      "Time_End": 1447.26,
      "Text": " And you can see, even after the assembly's finished executing, the function remains patched."
    },
    {
      "Time_Start": 1447.26,
      "Time_End": 1453.1000000000001,
      "Text": " So if we're threat hunting, we can trivially detect Brute Retail based on some of the post"
    },
    {
      "Time_Start": 1453.1000000000001,
      "Time_End": 1458.94,
      "Text": " exploitation actions of the operator when they're running CLR assemblies by looking"
    },
    {
      "Time_Start": 1458.94,
      "Time_End": 1459.66,
      "Text": " for these patches."
    },
    {
      "Time_Start": 1460.7,
      "Time_End": 1469.98,
      "Text": " In addition to this, threads can give us a relatively good hunting opportunity as well."
    },
    {
      "Time_Start": 1470.78,
      "Time_End": 1475.58,
      "Text": " So threads, as I mentioned before, will typically be operating from virtual memory or from Stomp"
    },
    {
      "Time_Start": 1475.58,
      "Time_End": 1476.46,
      "Text": " DLL."
    },
    {
      "Time_Start": 1476.46,
      "Time_End": 1481.02,
      "Text": " There may be one or more threads, depending on whether the beacon is synchronous or asynchronous."
    },
    {
      "Time_Start": 1481.02,
      "Time_End": 1484.54,
      "Text": " So looking for anomalies in these threads can be extremely useful to us."
    },
    {
      "Time_Start": 1485.42,
      "Time_End": 1489.6599999999999,
      "Text": " And so you can see in this example, we've got Cobalt Strike."
    },
    {
      "Time_Start": 1490.94,
      "Time_End": 1495.6599999999999,
      "Text": " We can tell it's one of the Cobalt Strike threads because it just looks entirely suspicious."
    },
    {
      "Time_Start": 1495.6599999999999,
      "Time_End": 1497.82,
      "Text": " So we've got this null start address."
    },
    {
      "Time_Start": 1497.82,
      "Time_End": 1500.3,
      "Text": " And then if we look at the call stack for the thread, we can see there's a bunch of"
    },
    {
      "Time_Start": 1500.3,
      "Time_End": 1501.34,
      "Text": " calls to virtual memory."
    },
    {
      "Time_Start": 1504.86,
      "Time_End": 1506.7,
      "Text": " But what else can we look for?"
    },
    {
      "Time_Start": 1508.46,
      "Time_End": 1512.7,
      "Text": " Well, at some point when the beacon goes to sleep, it needs to delay execution."
    },
    {
      "Time_Start": 1512.7,
      "Time_End": 1513.42,
      "Text": " It needs to wait."
    },
    {
      "Time_Start": 1514.0600000000002,
      "Time_End": 1520.46,
      "Text": " So if we examine the call stack of different threads, and we see some of the functions"
    },
    {
      "Time_Start": 1520.46,
      "Time_End": 1523.66,
      "Text": " that are typically used to delay execution, so things like SleepX."
    },
    {
      "Time_Start": 1523.66,
      "Time_End": 1527.8200000000002,
      "Text": " And SleepX ends up calling the NT API, NT delay execution."
    },
    {
      "Time_Start": 1528.6200000000001,
      "Time_End": 1533.42,
      "Text": " If we hunt for these threads and we combine them with other IOCs, like the virtual memory,"
    },
    {
      "Time_Start": 1534.14,
      "Time_End": 1537.26,
      "Text": " then that's a pretty good indicator that this is a sleeping beacon."
    },
    {
      "Time_Start": 1537.26,
      "Time_End": 1547.9,
      "Text": " And obviously, there are ways to get around this, to mask these suspicious calls within"
    },
    {
      "Time_Start": 1547.9,
      "Time_End": 1548.94,
      "Text": " your call stack."
    },
    {
      "Time_Start": 1548.94,
      "Time_End": 1550.86,
      "Text": " And it seems to be quite a popular thing at the moment."
    },
    {
      "Time_Start": 1555.26,
      "Time_End": 1560.06,
      "Text": " So some of the techniques are to spoof the call stack."
    },
    {
      "Time_Start": 1560.78,
      "Time_End": 1562.54,
      "Text": " There's a few different ways we can do this."
    },
    {
      "Time_Start": 1562.54,
      "Time_End": 1565.1,
      "Text": " So we could truncate the stack."
    },
    {
      "Time_Start": 1565.7400000000002,
      "Time_End": 1568.38,
      "Text": " So basically, we end it before some of these suspicious calls."
    },
    {
      "Time_Start": 1569.18,
      "Time_End": 1570.7800000000002,
      "Text": " And this is pretty easy to do."
    },
    {
      "Time_Start": 1570.7800000000002,
      "Time_End": 1575.9,
      "Text": " You can basically just set the return address of the frame where you want to end to null."
    },
    {
      "Time_Start": 1576.8600000000001,
      "Time_End": 1580.7800000000002,
      "Text": " And that will effectively kind of mask that stack for us or end it early."
    },
    {
      "Time_Start": 1582.94,
      "Time_End": 1586.6200000000001,
      "Text": " Another approach might be to actually clone the context of a legitimate thread."
    },
    {
      "Time_Start": 1587.66,
      "Time_End": 1591.3400000000001,
      "Text": " So we can find a legitimate thread that is running in the process."
    },
    {
      "Time_Start": 1592.14,
      "Time_End": 1594.7,
      "Text": " And then when the beacon goes to sleep, we copy the context of it."
    },
    {
      "Time_Start": 1595.5800000000002,
      "Time_End": 1598.0600000000002,
      "Text": " And we overwrite our own context with it."
    },
    {
      "Time_Start": 1598.0600000000002,
      "Time_End": 1602.38,
      "Text": " And then we update the TIB to make sure that the TIB values match for that thread."
    },
    {
      "Time_Start": 1603.7400000000002,
      "Time_End": 1604.7,
      "Text": " That's pretty effective."
    },
    {
      "Time_Start": 1607.42,
      "Time_End": 1610.7,
      "Text": " Or another approach, this is the one that's used by KibbleStrike,"
    },
    {
      "Time_Start": 1611.5800000000002,
      "Time_End": 1613.5800000000002,
      "Text": " is to switch the thread to a fiber."
    },
    {
      "Time_Start": 1614.14,
      "Time_End": 1618.7800000000002,
      "Text": " So when the beacon goes to sleep, it changes to a fiber calling createFiberX."
    },
    {
      "Time_Start": 1619.5,
      "Time_End": 1621.5,
      "Text": " And that effectively creates a new stack."
    },
    {
      "Time_Start": 1622.22,
      "Time_End": 1626.86,
      "Text": " So what you actually look at when you retrieve the stack is the stack for the fiber rather than"
    },
    {
      "Time_Start": 1626.86,
      "Time_End": 1627.58,
      "Text": " the thread."
    },
    {
      "Time_Start": 1627.58,
      "Time_End": 1631.42,
      "Text": " And it looks a lot less suspicious because it hides the kind of calls to virtual memory."
    },
    {
      "Time_Start": 1633.02,
      "Time_End": 1634.78,
      "Text": " So they might look something like this."
    },
    {
      "Time_Start": 1634.78,
      "Time_End": 1638.22,
      "Text": " So the first one up here is Brute Retail."
    },
    {
      "Time_Start": 1639.5,
      "Time_End": 1643.5,
      "Text": " Now, the bits I've highlighted are the bits that are suspicious."
    },
    {
      "Time_Start": 1643.5,
      "Time_End": 1647.42,
      "Text": " So we can see the start address of the Brute Retail thread is"
    },
    {
      "Time_Start": 1647.42,
      "Time_End": 1652.94,
      "Text": " tpReleaseCleanupGroupMembers plus 5550 hex."
    },
    {
      "Time_Start": 1654.0600000000002,
      "Time_End": 1657.9,
      "Text": " Now, every Brute Retail thread gets this as a start address."
    },
    {
      "Time_Start": 1657.9,
      "Time_End": 1659.8200000000002,
      "Text": " And this is not a common start address."
    },
    {
      "Time_Start": 1659.8200000000002,
      "Time_End": 1661.18,
      "Text": " Like, I scanned my host."
    },
    {
      "Time_Start": 1661.18,
      "Time_End": 1664.46,
      "Text": " And I couldn't find any other processes other than Brute Retail ones that are"
    },
    {
      "Time_Start": 1664.46,
      "Time_End": 1665.5800000000002,
      "Text": " using this as a start address."
    },
    {
      "Time_Start": 1665.5800000000002,
      "Time_End": 1667.98,
      "Text": " I'm not sure why this one was picked."
    },
    {
      "Time_Start": 1667.98,
      "Time_End": 1671.74,
      "Text": " But it becomes quite a trivial way to actually pluck these beacons out of memory."
    },
    {
      "Time_Start": 1672.46,
      "Time_End": 1675.42,
      "Text": " If we looked at the call stack for it, we can see we've got some"
    },
    {
      "Time_Start": 1675.98,
      "Time_End": 1677.42,
      "Text": " calls to delay execution."
    },
    {
      "Time_Start": 1677.42,
      "Time_End": 1680.38,
      "Text": " And then at the end, we've got this ntTerminateJob object."
    },
    {
      "Time_Start": 1680.38,
      "Time_End": 1682.0600000000002,
      "Text": " Now, that is actually just a ROP gadget."
    },
    {
      "Time_Start": 1682.8600000000001,
      "Time_End": 1687.8200000000002,
      "Text": " So if you look at this in WinDBG, you can actually see it's a ROP gadget for ntTestAlert."
    },
    {
      "Time_Start": 1687.8200000000002,
      "Time_End": 1693.74,
      "Text": " And he basically just uses it to execute the APCs that are queued on the thread."
    },
    {
      "Time_Start": 1695.42,
      "Time_End": 1700.14,
      "Text": " If we look at Cobalt Strikes thread stack spoofing, this is quite a new thing."
    },
    {
      "Time_Start": 1700.8600000000001,
      "Time_End": 1703.3400000000001,
      "Text": " It's only actually available in the artifact kit,"
    },
    {
      "Time_Start": 1704.3000000000002,
      "Time_End": 1706.0600000000002,
      "Text": " which was kind of quite surprising."
    },
    {
      "Time_Start": 1706.0600000000002,
      "Time_End": 1713.9800000000002,
      "Text": " So only the DLL and the XE artifacts that you produce are able to spoof the call stack."
    },
    {
      "Time_Start": 1713.9800000000002,
      "Time_End": 1716.7,
      "Text": " It doesn't work for shellcode or the reflective DLL."
    },
    {
      "Time_Start": 1718.0600000000002,
      "Time_End": 1721.2600000000002,
      "Text": " So if you are, I don't know who uses the artifacts."
    },
    {
      "Time_Start": 1721.2600000000002,
      "Time_End": 1723.5800000000002,
      "Text": " But if you do, then you can spoof the call stack."
    },
    {
      "Time_Start": 1723.5800000000002,
      "Time_End": 1724.7800000000002,
      "Text": " And it might look something like this."
    },
    {
      "Time_Start": 1724.7800000000002,
      "Time_End": 1729.0200000000002,
      "Text": " And again, I think it still looks a bit suspicious."
    },
    {
      "Time_Start": 1729.0200000000002,
      "Time_End": 1732.3000000000002,
      "Text": " Because I'm not sure how popular fibers actually are."
    },
    {
      "Time_Start": 1733.02,
      "Time_End": 1737.1,
      "Text": " But we can spot the fiber just by the call to RTL user fiber start"
    },
    {
      "Time_Start": 1737.1,
      "Time_End": 1739.82,
      "Text": " as the first frame in the call stack."
    },
    {
      "Time_Start": 1742.86,
      "Time_End": 1746.1399999999999,
      "Text": " So like some suspicious indicators for stack spoofing"
    },
    {
      "Time_Start": 1747.18,
      "Time_End": 1749.26,
      "Text": " that we can use to kind of build hunt rules."
    },
    {
      "Time_Start": 1750.94,
      "Time_End": 1755.26,
      "Text": " So I guess, firstly, at least in most of the threads that I've looked at,"
    },
    {
      "Time_Start": 1755.26,
      "Time_End": 1757.02,
      "Text": " and they tend to have a common start address."
    },
    {
      "Time_Start": 1757.02,
      "Time_End": 1761.74,
      "Text": " So if the start address of the thread is RTL user thread start,"
    },
    {
      "Time_Start": 1762.3,
      "Time_End": 1764.22,
      "Text": " sorry, is not RTL user thread start,"
    },
    {
      "Time_Start": 1764.22,
      "Time_End": 1767.02,
      "Text": " and the second frame is not base thread init func,"
    },
    {
      "Time_Start": 1767.02,
      "Time_End": 1770.1399999999999,
      "Text": " then it's possibly that the call stack has been truncated in some way."
    },
    {
      "Time_Start": 1771.74,
      "Time_End": 1773.98,
      "Text": " In terms of like looking for clone contexts,"
    },
    {
      "Time_Start": 1773.98,
      "Time_End": 1776.06,
      "Text": " what we can do is recover the tip for each thread."
    },
    {
      "Time_Start": 1777.1,
      "Time_End": 1779.8999999999999,
      "Text": " And we just look for duplicated values."
    },
    {
      "Time_Start": 1779.8999999999999,
      "Time_End": 1783.82,
      "Text": " So if we saw something like stack base and stack limit attributes,"
    },
    {
      "Time_Start": 1783.82,
      "Time_End": 1787.6599999999999,
      "Text": " and that within the tip that are duplicated across different threads,"
    },
    {
      "Time_Start": 1787.6599999999999,
      "Time_End": 1789.5,
      "Text": " then that's probably irregular."
    },
    {
      "Time_Start": 1789.5,
      "Time_End": 1791.98,
      "Text": " And it means that that thread has been spoofed or cloned in some way."
    },
    {
      "Time_Start": 1793.26,
      "Time_End": 1795.1,
      "Text": " And then finally, as I mentioned,"
    },
    {
      "Time_Start": 1795.1,
      "Time_End": 1797.8999999999999,
      "Text": " it's not too common to see fibers anymore."
    },
    {
      "Time_Start": 1797.8999999999999,
      "Time_End": 1800.94,
      "Text": " So scanning my own system, I didn't find any examples of them."
    },
    {
      "Time_Start": 1800.94,
      "Time_End": 1805.26,
      "Text": " But basically, we could potentially build hunt rules looking for fibers."
    },
    {
      "Time_Start": 1805.26,
      "Time_End": 1809.4199999999998,
      "Text": " So thread stacks with a start address of RTL user fiber start."
    },
    {
      "Time_Start": 1812.62,
      "Time_End": 1816.1399999999999,
      "Text": " So one kind of approach for avoiding threads running from virtual memory"
    },
    {
      "Time_Start": 1816.1399999999999,
      "Time_End": 1817.26,
      "Text": " is to use module stomping."
    },
    {
      "Time_Start": 1818.14,
      "Time_End": 1823.02,
      "Text": " So this technique basically involves loading a legitimate module,"
    },
    {
      "Time_Start": 1823.02,
      "Time_End": 1825.82,
      "Text": " and then we stomp a copy of the beacon over it,"
    },
    {
      "Time_Start": 1826.3799999999999,
      "Time_End": 1829.34,
      "Text": " either over the text section or over the whole DLL itself."
    },
    {
      "Time_Start": 1829.34,
      "Time_End": 1831.5,
      "Text": " A thread is then created that is backed by the module."
    },
    {
      "Time_Start": 1832.14,
      "Time_End": 1835.42,
      "Text": " So we can see in this example, for Cobalt Strike,"
    },
    {
      "Time_Start": 1835.42,
      "Time_End": 1838.86,
      "Text": " we're using like net shell as our stomp DLL."
    },
    {
      "Time_Start": 1838.86,
      "Time_End": 1840.06,
      "Text": " And then if we look in the call stack,"
    },
    {
      "Time_Start": 1840.06,
      "Time_End": 1842.62,
      "Text": " we can see like the thread coming from net shell."
    },
    {
      "Time_Start": 1843.5000000000002,
      "Time_End": 1846.7800000000002,
      "Text": " So there's a few different like approaches for detecting module stomping."
    },
    {
      "Time_Start": 1846.7800000000002,
      "Time_End": 1847.98,
      "Text": " We've got a few different options."
    },
    {
      "Time_Start": 1848.7,
      "Time_End": 1851.18,
      "Text": " So firstly, the most simple one is probably comparing"
    },
    {
      "Time_Start": 1851.18,
      "Time_End": 1854.46,
      "Text": " the copy of the module that's in memory with one that's on disk."
    },
    {
      "Time_Start": 1857.0200000000002,
      "Time_End": 1859.42,
      "Text": " But I don't think this is particularly feasible to do at scale"
    },
    {
      "Time_Start": 1859.42,
      "Time_End": 1862.8600000000001,
      "Text": " because it kind of means reading the copy of every single DLL."
    },
    {
      "Time_Start": 1862.8600000000001,
      "Time_End": 1864.5400000000002,
      "Text": " So it can be quite resource-incentive."
    },
    {
      "Time_Start": 1865.5800000000002,
      "Time_End": 1868.5400000000002,
      "Text": " Another option might be to look at the modified working set."
    },
    {
      "Time_Start": 1868.5400000000002,
      "Time_End": 1871.3400000000001,
      "Text": " So as I mentioned before, we basically hunt for these copies"
    },
    {
      "Time_Start": 1871.42,
      "Time_End": 1875.2600000000002,
      "Text": " on write operations so we can tell that that DLL has been modified"
    },
    {
      "Time_Start": 1875.2600000000002,
      "Time_End": 1877.42,
      "Text": " because it doesn't have the shared bit set."
    },
    {
      "Time_Start": 1879.5800000000002,
      "Time_End": 1882.7800000000002,
      "Text": " Or we can look for indicators that might actually be associated"
    },
    {
      "Time_Start": 1882.7800000000002,
      "Time_End": 1884.7800000000002,
      "Text": " with that specific module stomping technique."
    },
    {
      "Time_Start": 1886.7,
      "Time_End": 1889.8200000000002,
      "Text": " So if we look at how Cobalt Strike implements its module stomping,"
    },
    {
      "Time_Start": 1889.8200000000002,
      "Time_End": 1892.3000000000002,
      "Text": " we'll find it does leave some dangling IOCs within the PEP."
    },
    {
      "Time_Start": 1893.9,
      "Time_End": 1896.5400000000002,
      "Text": " So the way the Cobalt Strike module stomping works is"
    },
    {
      "Time_Start": 1896.78,
      "Time_End": 1902.3,
      "Text": " it will effectively load a new DLL with loadLibraryX"
    },
    {
      "Time_Start": 1902.3,
      "Time_End": 1905.82,
      "Text": " with these arguments, so null and do not resolve DLL references."
    },
    {
      "Time_Start": 1906.7,
      "Time_End": 1909.26,
      "Text": " And all that is doing is basically telling the loader"
    },
    {
      "Time_Start": 1910.3,
      "Time_End": 1914.54,
      "Text": " not to call the entry point and not to resolve the import table for the DLL"
    },
    {
      "Time_Start": 1914.54,
      "Time_End": 1917.26,
      "Text": " because we don't want to load all the DLL's dependencies."
    },
    {
      "Time_Start": 1919.26,
      "Time_End": 1922.78,
      "Text": " So this ends up leaving some IOCs in the PEP, as I kind of mentioned."
    },
    {
      "Time_Start": 1923.26,
      "Time_End": 1927.02,
      "Text": " So there's a structure, which is this LDR data table entry structure."
    },
    {
      "Time_Start": 1927.02,
      "Time_End": 1931.02,
      "Text": " And if we look at that, what we'll see is the entry point attribute will be null"
    },
    {
      "Time_Start": 1931.58,
      "Time_End": 1933.34,
      "Text": " and the image bit will be set to false."
    },
    {
      "Time_Start": 1933.34,
      "Time_End": 1935.8999999999999,
      "Text": " And that will basically is a good strong indicator"
    },
    {
      "Time_Start": 1935.8999999999999,
      "Time_End": 1938.3799999999999,
      "Text": " that that module has been stomped using Cobalt Strikes"
    },
    {
      "Time_Start": 1938.3799999999999,
      "Time_End": 1939.58,
      "Text": " and module stomping technique."
    },
    {
      "Time_Start": 1941.58,
      "Time_End": 1944.3,
      "Text": " How about, like, kind of moving away from the end point,"
    },
    {
      "Time_Start": 1944.3,
      "Time_End": 1946.94,
      "Text": " how about like network level detections?"
    },
    {
      "Time_Start": 1948.7,
      "Time_End": 1951.1,
      "Text": " Because if we're actually able to fingerprint the CPU"
    },
    {
      "Time_Start": 1951.1000000000001,
      "Time_End": 1953.66,
      "Text": " because if we're actually able to fingerprint the C2 server,"
    },
    {
      "Time_Start": 1953.66,
      "Time_End": 1955.5800000000002,
      "Text": " then that might give us sufficient intelligence"
    },
    {
      "Time_Start": 1955.5800000000002,
      "Time_End": 1957.2600000000002,
      "Text": " to detect beacon incoming from the network."
    },
    {
      "Time_Start": 1959.2600000000002,
      "Time_End": 1961.7400000000002,
      "Text": " So some of the things that we might be interested in are,"
    },
    {
      "Time_Start": 1961.7400000000002,
      "Time_End": 1964.7800000000002,
      "Text": " you know, any kind of bugs that might be in the C2 server"
    },
    {
      "Time_Start": 1964.7800000000002,
      "Time_End": 1967.1000000000001,
      "Text": " that might allow us to fingerprint it."
    },
    {
      "Time_Start": 1967.1000000000001,
      "Time_End": 1970.5400000000002,
      "Text": " So FoxIT did some good research on this a couple of years ago"
    },
    {
      "Time_Start": 1971.1000000000001,
      "Time_End": 1973.9,
      "Text": " and they did a census and found a bunch of Cobalt Strikes servers"
    },
    {
      "Time_Start": 1973.9,
      "Time_End": 1975.9800000000002,
      "Text": " that were on the internet based on the response"
    },
    {
      "Time_Start": 1975.9800000000002,
      "Time_End": 1977.9,
      "Text": " containing an extra space at the end."
    },
    {
      "Time_Start": 1977.9,
      "Time_End": 1981.5,
      "Text": " And if we can hunt for staging URIs,"
    },
    {
      "Time_Start": 1981.5,
      "Time_End": 1983.18,
      "Text": " you know, we can pull down the beacons as well"
    },
    {
      "Time_Start": 1983.18,
      "Time_End": 1984.7800000000002,
      "Text": " because they're in a predictable format."
    },
    {
      "Time_Start": 1985.74,
      "Time_End": 1987.18,
      "Text": " Or otherwise, you know, any kind of, like,"
    },
    {
      "Time_Start": 1987.18,
      "Time_End": 1988.8600000000001,
      "Text": " default content that might be exposed."
    },
    {
      "Time_Start": 1988.8600000000001,
      "Time_End": 1990.22,
      "Text": " So things like the default landing page"
    },
    {
      "Time_Start": 1990.22,
      "Time_End": 1992.94,
      "Text": " or default SSL certs that are exposed by the C2 servers,"
    },
    {
      "Time_Start": 1992.94,
      "Time_End": 1995.18,
      "Text": " we can use these to hunt for the C2 infrastructure."
    },
    {
      "Time_Start": 1996.14,
      "Time_End": 1997.42,
      "Text": " So let's look at some examples."
    },
    {
      "Time_Start": 1998.38,
      "Time_End": 2002.7,
      "Text": " So Cobalt Strike is based on Nano HTTPd."
    },
    {
      "Time_Start": 2003.66,
      "Time_End": 2008.06,
      "Text": " And Nano HTTPd is basically an open source,"
    },
    {
      "Time_Start": 2008.06,
      "Time_End": 2009.26,
      "Text": " like, Java web server."
    },
    {
      "Time_Start": 2009.82,
      "Time_End": 2012.6200000000001,
      "Text": " I think it was built by some university student."
    },
    {
      "Time_Start": 2014.54,
      "Time_End": 2019.26,
      "Text": " Now, one of the things that in the FoxIT census,"
    },
    {
      "Time_Start": 2019.26,
      "Time_End": 2021.02,
      "Text": " they basically showed that there was probably"
    },
    {
      "Time_Start": 2021.02,
      "Time_End": 2023.18,
      "Text": " more Cobalt Strike servers on the internet"
    },
    {
      "Time_Start": 2023.18,
      "Time_End": 2025.42,
      "Text": " than there were Nano HTTPd servers."
    },
    {
      "Time_Start": 2026.54,
      "Time_End": 2027.5,
      "Text": " So if you do find one of these,"
    },
    {
      "Time_Start": 2027.5,
      "Time_End": 2028.8600000000001,
      "Text": " there's probably a good chance it's Cobalt."
    },
    {
      "Time_Start": 2029.5800000000002,
      "Time_End": 2031.3400000000001,
      "Text": " So let's look at some ways to kind of fingerprint this."
    },
    {
      "Time_Start": 2031.3400000000001,
      "Time_End": 2033.0200000000002,
      "Text": " So the first one is in the range header."
    },
    {
      "Time_Start": 2033.7400000000002,
      "Time_End": 2036.8600000000001,
      "Text": " So if you send a request with a range header"
    },
    {
      "Time_Start": 2037.5800000000002,
      "Time_End": 2039.18,
      "Text": " where you've got bytes equals,"
    },
    {
      "Time_Start": 2039.18,
      "Time_End": 2041.8200000000002,
      "Text": " and then you've got an invalid integer"
    },
    {
      "Time_Start": 2041.8200000000002,
      "Time_End": 2043.0200000000002,
      "Text": " as one of the values,"
    },
    {
      "Time_Start": 2043.9800000000002,
      "Time_End": 2046.3000000000002,
      "Text": " you get no response back from the team server."
    },
    {
      "Time_Start": 2046.3000000000002,
      "Time_End": 2048.1400000000003,
      "Text": " So you can use this to kind of, like, fingerprint for,"
    },
    {
      "Time_Start": 2048.1400000000003,
      "Time_End": 2049.34,
      "Text": " scan for Cobalt Strike, right?"
    },
    {
      "Time_Start": 2049.34,
      "Time_End": 2051.58,
      "Text": " So I built a nuclei template to scan the internet"
    },
    {
      "Time_Start": 2051.58,
      "Time_End": 2052.38,
      "Text": " for this stuff."
    },
    {
      "Time_Start": 2053.34,
      "Time_End": 2055.6600000000003,
      "Text": " Now, you might wonder, like, why do we get no response?"
    },
    {
      "Time_Start": 2055.6600000000003,
      "Time_End": 2057.9,
      "Text": " Well, if we look on the team server,"
    },
    {
      "Time_Start": 2057.9,
      "Time_End": 2059.42,
      "Text": " the reason we get no response is"
    },
    {
      "Time_Start": 2059.42,
      "Time_End": 2062.06,
      "Text": " because we get an unhandled exception in the team server,"
    },
    {
      "Time_Start": 2062.06,
      "Time_End": 2063.1,
      "Text": " and it crashes the thread."
    },
    {
      "Time_Start": 2065.02,
      "Time_End": 2066.54,
      "Text": " So you get something printed like this,"
    },
    {
      "Time_Start": 2066.54,
      "Time_End": 2070.06,
      "Text": " which basically says, you know, invalid number format."
    },
    {
      "Time_Start": 2070.94,
      "Time_End": 2073.58,
      "Text": " So if we want to dig deeper and see what's going on here,"
    },
    {
      "Time_Start": 2073.58,
      "Time_End": 2074.86,
      "Text": " we can jump into the source code."
    },
    {
      "Time_Start": 2076.78,
      "Time_End": 2078.62,
      "Text": " And we can see basically what it's doing"
    },
    {
      "Time_Start": 2078.62,
      "Time_End": 2080.62,
      "Text": " when it's processing the range header"
    },
    {
      "Time_Start": 2080.62,
      "Time_End": 2084.62,
      "Text": " is it's trying to convert the string read from the header"
    },
    {
      "Time_Start": 2084.62,
      "Time_End": 2085.9,
      "Text": " into an integer."
    },
    {
      "Time_Start": 2085.9,
      "Time_End": 2087.66,
      "Text": " And there's no exception handling around this."
    },
    {
      "Time_Start": 2088.2999999999997,
      "Time_End": 2092.2999999999997,
      "Text": " So when you send an invalid integer,"
    },
    {
      "Time_Start": 2092.2999999999997,
      "Time_End": 2093.98,
      "Text": " it ends up throwing this unhandled exception."
    },
    {
      "Time_Start": 2097.2599999999998,
      "Time_End": 2098.8599999999997,
      "Text": " Other ways we can fingerprint Cobalt Strike,"
    },
    {
      "Time_Start": 2098.8599999999997,
      "Time_End": 2100.22,
      "Text": " again, with the range header."
    },
    {
      "Time_Start": 2100.22,
      "Time_End": 2105.42,
      "Text": " So this IOC is shared with nano-httpd."
    },
    {
      "Time_Start": 2106.46,
      "Time_End": 2108.2999999999997,
      "Text": " But we can figure out whether it's Cobalt Strike"
    },
    {
      "Time_Start": 2108.2999999999997,
      "Time_End": 2111.74,
      "Text": " or nano-httpd based on the server header,"
    },
    {
      "Time_Start": 2111.74,
      "Time_End": 2114.8599999999997,
      "Text": " because you don't expect IES and Apache to behave like this"
    },
    {
      "Time_Start": 2114.8599999999997,
      "Time_End": 2116.2999999999997,
      "Text": " returning these responses."
    },
    {
      "Time_Start": 2116.38,
      "Time_End": 2121.1000000000004,
      "Text": " So basically, if you send a range from byte 1 to 0,"
    },
    {
      "Time_Start": 2121.1000000000004,
      "Time_End": 2123.5800000000004,
      "Text": " if you're asking for the content in byte 1 to 0,"
    },
    {
      "Time_Start": 2123.5800000000004,
      "Time_End": 2126.7000000000003,
      "Text": " that's a range that the server can't facilitate."
    },
    {
      "Time_Start": 2126.7000000000003,
      "Time_End": 2129.5800000000004,
      "Text": " So it ends up providing this fixed response"
    },
    {
      "Time_Start": 2129.5800000000004,
      "Time_End": 2130.78,
      "Text": " of range not satisfied."
    },
    {
      "Time_Start": 2131.7400000000002,
      "Time_End": 2133.5800000000004,
      "Text": " So again, we can scan the internet for these"
    },
    {
      "Time_Start": 2133.5800000000004,
      "Time_End": 2135.26,
      "Text": " and use it to pluck out Cobalt Strike servers."
    },
    {
      "Time_Start": 2137.5,
      "Time_End": 2140.7000000000003,
      "Text": " Another fingerprint within the Cobalt Strike team server"
    },
    {
      "Time_Start": 2140.7000000000003,
      "Time_End": 2144.2200000000003,
      "Text": " is when we send an invalid byte."
    },
    {
      "Time_Start": 2145.1800000000003,
      "Time_End": 2147.34,
      "Text": " So I spotted this in the source code,"
    },
    {
      "Time_Start": 2147.34,
      "Time_End": 2149.0200000000004,
      "Text": " and we get this fixed response."
    },
    {
      "Time_Start": 2149.5800000000004,
      "Time_End": 2153.1800000000003,
      "Text": " So if you send an invalid URL encoded by,"
    },
    {
      "Time_Start": 2153.1800000000003,
      "Time_End": 2156.3,
      "Text": " so percent 0, obviously, it needs to be two bytes"
    },
    {
      "Time_Start": 2156.3,
      "Time_End": 2157.5000000000005,
      "Text": " for it to be a valid byte."
    },
    {
      "Time_Start": 2158.6200000000003,
      "Time_End": 2161.42,
      "Text": " We end up getting a fixed response back,"
    },
    {
      "Time_Start": 2162.38,
      "Time_End": 2164.5400000000004,
      "Text": " which is this bad percent encoding."
    },
    {
      "Time_Start": 2164.5400000000004,
      "Time_End": 2167.82,
      "Text": " So again, we can use this to scan for Cobalt Strike."
    },
    {
      "Time_Start": 2170.0600000000004,
      "Time_End": 2171.0200000000004,
      "Text": " How about Brute Retail?"
    },
    {
      "Time_Start": 2171.74,
      "Time_End": 2175.18,
      "Text": " And so we can fingerprint the Brute Retail C2 server."
    },
    {
      "Time_Start": 2176.14,
      "Time_End": 2180.06,
      "Text": " So if you send a POST request with some Base64,"
    },
    {
      "Time_Start": 2180.06,
      "Time_End": 2185.18,
      "Text": " valid Base64, but the Base64 does not unpack"
    },
    {
      "Time_Start": 2185.18,
      "Time_End": 2188.7,
      "Text": " to the C2 traffic, again, that triggers"
    },
    {
      "Time_Start": 2188.7,
      "Time_End": 2191.02,
      "Text": " a unhandled exception, and you get no response back"
    },
    {
      "Time_Start": 2191.02,
      "Time_End": 2192.22,
      "Text": " from the team server."
    },
    {
      "Time_Start": 2192.22,
      "Time_End": 2196.14,
      "Text": " So again, we can use this to scan for Brute Retail servers."
    },
    {
      "Time_Start": 2197.42,
      "Time_End": 2199.02,
      "Text": " Now, I'm pretty confident people are scanning"
    },
    {
      "Time_Start": 2199.02,
      "Time_End": 2201.58,
      "Text": " for Brute Retail servers, because I had got"
    },
    {
      "Time_Start": 2201.58,
      "Time_End": 2204.46,
      "Text": " a Brute Retail server sitting in AWS,"
    },
    {
      "Time_Start": 2204.46,
      "Time_End": 2207.1,
      "Text": " and then I wasn't actually using it at the time,"
    },
    {
      "Time_Start": 2207.1,
      "Time_End": 2210.38,
      "Text": " but I got a takedown notice from Amazon."
    },
    {
      "Time_Start": 2211.5,
      "Time_End": 2213.58,
      "Text": " First, I thought it was one of our red team gigs,"
    },
    {
      "Time_Start": 2213.58,
      "Time_End": 2215.34,
      "Text": " and someone had been busted."
    },
    {
      "Time_Start": 2215.34,
      "Time_End": 2217.34,
      "Text": " And then when I took a look at the instance ID,"
    },
    {
      "Time_Start": 2217.34,
      "Time_End": 2219.58,
      "Text": " it was basically the test Brute Retail instance"
    },
    {
      "Time_Start": 2219.58,
      "Time_End": 2220.38,
      "Text": " that we got."
    },
    {
      "Time_Start": 2220.38,
      "Time_End": 2223.5,
      "Text": " So I think some internet hero is scanning the internet"
    },
    {
      "Time_Start": 2223.5,
      "Time_End": 2225.02,
      "Text": " and reporting all the Brute Retail instances."
    },
    {
      "Time_Start": 2226.7,
      "Time_End": 2228.22,
      "Text": " Now, these are pretty trivial to pick up"
    },
    {
      "Time_Start": 2228.2200000000003,
      "Time_End": 2231.7400000000002,
      "Text": " with Shodan, so if the default landing page is exposed,"
    },
    {
      "Time_Start": 2232.38,
      "Time_End": 2234.1400000000003,
      "Text": " we can basically just take the hash for it,"
    },
    {
      "Time_Start": 2234.1400000000003,
      "Time_End": 2237.1800000000003,
      "Text": " pump it into Shodan, and find out where some of these are."
    },
    {
      "Time_Start": 2237.9800000000005,
      "Time_End": 2240.78,
      "Text": " And we can see, there's a few of them out there,"
    },
    {
      "Time_Start": 2240.78,
      "Time_End": 2242.6200000000003,
      "Text": " like the majority of them seem to be in the US."
    },
    {
      "Time_Start": 2242.6200000000003,
      "Time_End": 2244.0600000000004,
      "Text": " There's a couple in Russia."
    },
    {
      "Time_Start": 2244.0600000000004,
      "Time_End": 2245.1000000000004,
      "Text": " I don't know what they might be."
    },
    {
      "Time_Start": 2247.34,
      "Time_End": 2249.1800000000003,
      "Text": " And then I saw this tweet from this guy,"
    },
    {
      "Time_Start": 2249.1800000000003,
      "Time_End": 2251.6600000000003,
      "Text": " was basically saying, Russians, obviously,"
    },
    {
      "Time_Start": 2252.2200000000003,
      "Time_End": 2254.94,
      "Text": " they don't discriminate against any specific C2."
    },
    {
      "Time_Start": 2254.94,
      "Time_End": 2257.5800000000004,
      "Text": " They like to host both Cobalt Strike and Brute Retail"
    },
    {
      "Time_Start": 2257.58,
      "Time_End": 2258.46,
      "Text": " on their infrastructure."
    },
    {
      "Time_Start": 2260.2999999999997,
      "Time_End": 2264.7799999999997,
      "Text": " So once we found one of these, we found a badger,"
    },
    {
      "Time_Start": 2264.7799999999997,
      "Time_End": 2266.14,
      "Text": " what can we do with it?"
    },
    {
      "Time_Start": 2266.14,
      "Time_End": 2269.34,
      "Text": " So as I mentioned before, we built a little tool"
    },
    {
      "Time_Start": 2269.34,
      "Time_End": 2272.7,
      "Text": " to scan artifacts."
    },
    {
      "Time_Start": 2272.7,
      "Time_End": 2275.18,
      "Text": " So DLLs, XEs, that have got Brute Retail in them,"
    },
    {
      "Time_Start": 2275.18,
      "Time_End": 2276.94,
      "Text": " and extract all the configuration information."
    },
    {
      "Time_Start": 2277.5,
      "Time_End": 2278.86,
      "Text": " So we can get the C2 URIs."
    },
    {
      "Time_Start": 2278.86,
      "Time_End": 2281.18,
      "Text": " We can get the secrets for the team server,"
    },
    {
      "Time_Start": 2281.98,
      "Time_End": 2282.7799999999997,
      "Text": " that kind of stuff."
    },
    {
      "Time_Start": 2284.06,
      "Time_End": 2285.42,
      "Text": " We can also scan these in memory."
    },
    {
      "Time_Start": 2285.42,
      "Time_End": 2286.86,
      "Text": " So you can see, I'm just giving a PID here."
    },
    {
      "Time_Start": 2287.42,
      "Time_End": 2292.06,
      "Text": " And basically, it's looking for the badger's config structure"
    },
    {
      "Time_Start": 2292.06,
      "Time_End": 2292.54,
      "Text": " in memory."
    },
    {
      "Time_Start": 2292.54,
      "Time_End": 2293.98,
      "Text": " And then when it finds it, it just prints it out."
    },
    {
      "Time_Start": 2293.98,
      "Time_End": 2296.2200000000003,
      "Text": " So we can actually extract all these"
    },
    {
      "Time_Start": 2296.2200000000003,
      "Time_End": 2297.42,
      "Text": " from any kind of processes, too."
    },
    {
      "Time_Start": 2299.7400000000002,
      "Time_End": 2301.7400000000002,
      "Text": " So I guess we put all this together."
    },
    {
      "Time_Start": 2301.7400000000002,
      "Time_End": 2302.86,
      "Text": " What can we do with it?"
    },
    {
      "Time_Start": 2302.86,
      "Time_End": 2304.54,
      "Text": " What was the point of all this research?"
    },
    {
      "Time_Start": 2305.5,
      "Time_End": 2308.06,
      "Text": " Well, what I did was, I basically"
    },
    {
      "Time_Start": 2308.06,
      "Time_End": 2311.9,
      "Text": " used it to build a tool that I called Beacon Hunter,"
    },
    {
      "Time_Start": 2312.54,
      "Time_End": 2313.82,
      "Text": " which I'm going to open source."
    },
    {
      "Time_Start": 2313.82,
      "Time_End": 2315.42,
      "Text": " There's also a whole bunch of blog posts."
    },
    {
      "Time_Start": 2315.5,
      "Time_End": 2317.02,
      "Text": " I think we've got four or five blog posts."
    },
    {
      "Time_Start": 2317.02,
      "Time_End": 2318.62,
      "Text": " We did look at other C2s."
    },
    {
      "Time_Start": 2319.5,
      "Time_End": 2321.7400000000002,
      "Text": " But when I was putting this together for the presentation,"
    },
    {
      "Time_Start": 2321.7400000000002,
      "Time_End": 2323.1,
      "Text": " I just had way too much material."
    },
    {
      "Time_Start": 2323.1,
      "Time_End": 2325.58,
      "Text": " So I just picked the two that were probably the most popular."
    },
    {
      "Time_Start": 2327.58,
      "Time_End": 2330.7000000000003,
      "Text": " But some of the things that the Beacon Hunter will currently do"
    },
    {
      "Time_Start": 2330.7000000000003,
      "Time_End": 2334.54,
      "Text": " is, it will look for things like, it will analyze call stacks."
    },
    {
      "Time_Start": 2334.54,
      "Time_End": 2337.5,
      "Text": " It will look for beacons that are running in unmapped memory,"
    },
    {
      "Time_Start": 2338.06,
      "Time_End": 2339.9,
      "Text": " look for suspicious start addresses."
    },
    {
      "Time_Start": 2339.9,
      "Time_End": 2342.78,
      "Text": " It will look for suspicious execute pages."
    },
    {
      "Time_Start": 2343.6600000000003,
      "Time_End": 2345.9,
      "Text": " It will detect Cobalt Strike's module stomping."
    },
    {
      "Time_Start": 2345.9,
      "Time_End": 2347.82,
      "Text": " It will detect in-memory hooks, even if they've"
    },
    {
      "Time_Start": 2347.82,
      "Time_End": 2349.1000000000004,
      "Text": " been reverted, that kind of stuff."
    },
    {
      "Time_Start": 2349.9,
      "Time_End": 2352.7000000000003,
      "Text": " So let me give you a quick demo of this."
    },
    {
      "Time_Start": 2354.0600000000004,
      "Time_End": 2355.5800000000004,
      "Text": " Now, I have cheated."
    },
    {
      "Time_Start": 2355.5800000000004,
      "Time_End": 2357.6600000000003,
      "Text": " And I have recorded the demo."
    },
    {
      "Time_Start": 2357.6600000000003,
      "Time_End": 2359.02,
      "Text": " So it cannot go wrong."
    },
    {
      "Time_Start": 2360.6200000000003,
      "Time_End": 2361.82,
      "Text": " I've given talks before."
    },
    {
      "Time_Start": 2361.82,
      "Time_End": 2364.6200000000003,
      "Text": " So this is the safest way to operate."
    },
    {
      "Time_Start": 2365.98,
      "Time_End": 2366.48,
      "Text": " OK."
    },
    {
      "Time_Start": 2367.42,
      "Time_End": 2371.6600000000003,
      "Text": " So we're going to start off with Brute Red Cell."
    },
    {
      "Time_Start": 2373.7400000000002,
      "Time_End": 2375.98,
      "Text": " So basically, I've got Brute Red Cell here."
    },
    {
      "Time_Start": 2375.98,
      "Time_End": 2378.38,
      "Text": " I've injected it into Notepad."
    },
    {
      "Time_Start": 2378.38,
      "Time_End": 2379.98,
      "Text": " And what we're going to take a look at"
    },
    {
      "Time_Start": 2379.98,
      "Time_End": 2381.9,
      "Text": " is, you might not have seen that,"
    },
    {
      "Time_Start": 2381.9,
      "Time_End": 2386.2200000000003,
      "Text": " but the start address of this thread, this thread, it was null."
    },
    {
      "Time_Start": 2386.78,
      "Time_End": 2388.38,
      "Text": " And if we took a look at the call stack for it,"
    },
    {
      "Time_Start": 2388.38,
      "Time_End": 2390.78,
      "Text": " we can see it's got a wait for single object."
    },
    {
      "Time_Start": 2390.78,
      "Time_End": 2392.94,
      "Text": " So it's just a thread that's delaying execution."
    },
    {
      "Time_Start": 2397.6600000000003,
      "Time_End": 2400.2200000000003,
      "Text": " And then, if we take a look at the next thread,"
    },
    {
      "Time_Start": 2400.3,
      "Time_End": 2402.86,
      "Text": " what we can do, I'm just going to pause that."
    },
    {
      "Time_Start": 2402.86,
      "Time_End": 2404.2200000000003,
      "Text": " We can tell this is Brute Red Cell."
    },
    {
      "Time_Start": 2404.2200000000003,
      "Time_End": 2405.6600000000003,
      "Text": " And I might not necessarily be clear."
    },
    {
      "Time_Start": 2405.6600000000003,
      "Time_End": 2407.5000000000005,
      "Text": " But the start address of this one"
    },
    {
      "Time_Start": 2407.5000000000005,
      "Time_End": 2411.9,
      "Text": " is TP release cleanup group members plus 550 hex."
    },
    {
      "Time_Start": 2411.9,
      "Time_End": 2414.1400000000003,
      "Text": " Whereas all the other ones you can see are 450 hex."
    },
    {
      "Time_Start": 2414.1400000000003,
      "Time_End": 2415.26,
      "Text": " So that one's 550 hex."
    },
    {
      "Time_Start": 2415.26,
      "Time_End": 2417.42,
      "Text": " So we know immediately that that one's Brute Red Cell."
    },
    {
      "Time_Start": 2418.78,
      "Time_End": 2421.1000000000004,
      "Text": " And then, if we took a look at the call stack for it,"
    },
    {
      "Time_Start": 2421.1000000000004,
      "Time_End": 2422.78,
      "Text": " we can see, as I kind of mentioned before,"
    },
    {
      "Time_Start": 2422.78,
      "Time_End": 2425.9800000000005,
      "Text": " we've got the calls to delay execution."
    },
    {
      "Time_Start": 2425.9800000000005,
      "Time_End": 2428.38,
      "Text": " And then, at the end, we've got the ROP gadget"
    },
    {
      "Time_Start": 2428.38,
      "Time_End": 2431.1,
      "Text": " for NT-Test Alert to execute the APCs"
    },
    {
      "Time_Start": 2431.1,
      "Time_End": 2432.1400000000003,
      "Text": " that are queued on the thread."
    },
    {
      "Time_Start": 2434.46,
      "Time_End": 2436.38,
      "Text": " Now, what I'm going to do is I'm just"
    },
    {
      "Time_Start": 2436.38,
      "Time_End": 2439.26,
      "Text": " going to run BeaconHunter over this PID."
    },
    {
      "Time_Start": 2440.46,
      "Time_End": 2441.6600000000003,
      "Text": " So I'm just going to pause this."
    },
    {
      "Time_Start": 2442.3,
      "Time_End": 2446.3,
      "Text": " So what we're doing is I'm telling it to support filters."
    },
    {
      "Time_Start": 2446.3,
      "Time_End": 2448.38,
      "Text": " So you can say, scan for all processes"
    },
    {
      "Time_Start": 2448.38,
      "Time_End": 2450.46,
      "Text": " that have got WinHttp.dll loaded."
    },
    {
      "Time_Start": 2450.46,
      "Time_End": 2451.98,
      "Text": " And I'm giving it a PID just so I don't"
    },
    {
      "Time_Start": 2451.98,
      "Time_End": 2453.02,
      "Text": " have to scan all of them."
    },
    {
      "Time_Start": 2453.7400000000002,
      "Time_End": 2457.26,
      "Text": " And I'm basically saying, so M is for memory."
    },
    {
      "Time_Start": 2457.26,
      "Time_End": 2458.7000000000003,
      "Text": " M is for memory."
    },
    {
      "Time_Start": 2458.7000000000003,
      "Time_End": 2459.7400000000002,
      "Text": " T is for threads."
    },
    {
      "Time_Start": 2460.78,
      "Time_End": 2463.5800000000004,
      "Text": " H, I can't remember."
    },
    {
      "Time_Start": 2463.5800000000004,
      "Time_End": 2464.86,
      "Text": " P is for page permissions."
    },
    {
      "Time_Start": 2466.86,
      "Time_End": 2469.98,
      "Text": " So I'm just going to scan this Brute Red Cell process."
    },
    {
      "Time_Start": 2469.98,
      "Time_End": 2471.34,
      "Text": " I'm just going to pause."
    },
    {
      "Time_Start": 2471.34,
      "Time_End": 2473.0200000000004,
      "Text": " And so I think I'll highlight them."
    },
    {
      "Time_Start": 2473.0200000000004,
      "Time_End": 2474.38,
      "Text": " So some of the stuff that we pick up,"
    },
    {
      "Time_Start": 2475.0200000000004,
      "Time_End": 2476.46,
      "Text": " or that the BeaconHunter picks up,"
    },
    {
      "Time_Start": 2476.46,
      "Time_End": 2479.0200000000004,
      "Text": " is we've got the suspicious start address."
    },
    {
      "Time_Start": 2479.0200000000004,
      "Time_End": 2480.94,
      "Text": " And then, it tells us that it's Brute Red Cell,"
    },
    {
      "Time_Start": 2481.5800000000004,
      "Time_End": 2483.1800000000003,
      "Text": " because we know it's Brute Red Cell,"
    },
    {
      "Time_Start": 2483.1800000000003,
      "Time_End": 2484.46,
      "Text": " because Brute Red Cell is the only thing"
    },
    {
      "Time_Start": 2484.46,
      "Time_End": 2486.46,
      "Text": " that has that fixed start address."
    },
    {
      "Time_Start": 2486.46,
      "Time_End": 2488.78,
      "Text": " So we found both of the Brute Red Cell threads."
    },
    {
      "Time_Start": 2488.78,
      "Time_End": 2493.42,
      "Text": " So thread ID 10236, thread ID 2900."
    },
    {
      "Time_Start": 2495.18,
      "Time_End": 2496.78,
      "Text": " We know that one is Brute Red Cell as well."
    },
    {
      "Time_Start": 2496.78,
      "Time_End": 2498.38,
      "Text": " And we can see that they're delaying execution,"
    },
    {
      "Time_Start": 2498.38,
      "Time_End": 2500.2200000000003,
      "Text": " because we've got the call to wait for single object."
    },
    {
      "Time_Start": 2502.86,
      "Time_End": 2504.62,
      "Text": " So that's the first one."
    },
    {
      "Time_Start": 2509.02,
      "Time_End": 2510.14,
      "Text": " I'm going to have to speed up, because he's"
    },
    {
      "Time_Start": 2510.14,
      "Time_End": 2511.26,
      "Text": " telling me I've only got five minutes."
    },
    {
      "Time_Start": 2511.5800000000004,
      "Time_End": 2515.0200000000004,
      "Text": " What I'm going to do next is show you"
    },
    {
      "Time_Start": 2515.0200000000004,
      "Time_End": 2516.6200000000003,
      "Text": " how we can detect the memory hooks."
    },
    {
      "Time_Start": 2516.6200000000003,
      "Time_End": 2518.5400000000004,
      "Text": " So what I'll do is, I'm just going"
    },
    {
      "Time_Start": 2518.5400000000004,
      "Time_End": 2520.3,
      "Text": " to run sharp inline in Brute Red Cell."
    },
    {
      "Time_Start": 2521.5,
      "Time_End": 2522.86,
      "Text": " And just run any old assembly."
    },
    {
      "Time_Start": 2522.86,
      "Time_End": 2523.82,
      "Text": " I think I'll run seat belt."
    },
    {
      "Time_Start": 2528.38,
      "Time_End": 2529.82,
      "Text": " Now, if you remember when I was talking,"
    },
    {
      "Time_Start": 2529.82,
      "Time_End": 2533.1800000000003,
      "Text": " I said that the sharp inline command basically"
    },
    {
      "Time_Start": 2533.1800000000003,
      "Time_End": 2534.5400000000004,
      "Text": " does leave these dangling IOCs."
    },
    {
      "Time_Start": 2534.5400000000004,
      "Time_End": 2537.5800000000004,
      "Text": " So it patches ETW, and it patches AMSI scan buffer,"
    },
    {
      "Time_Start": 2537.5800000000004,
      "Time_End": 2539.0200000000004,
      "Text": " and it leaves them sitting in memory."
    },
    {
      "Time_Start": 2539.34,
      "Time_End": 2540.62,
      "Text": " So we're going to run seat belt."
    },
    {
      "Time_Start": 2541.42,
      "Time_End": 2545.42,
      "Text": " And then if we run beacon hunter over the process."
    },
    {
      "Time_Start": 2553.2599999999998,
      "Time_End": 2554.86,
      "Text": " So same thing again, same process."
    },
    {
      "Time_Start": 2555.98,
      "Time_End": 2559.2599999999998,
      "Text": " But what we get this time is, it actually"
    },
    {
      "Time_Start": 2559.2599999999998,
      "Time_End": 2563.66,
      "Text": " tells us that there's a bunch of hooks that have been applied."
    },
    {
      "Time_Start": 2563.66,
      "Time_End": 2565.74,
      "Text": " Now, this is not looking for the opcodes on the hooks."
    },
    {
      "Time_Start": 2565.74,
      "Time_End": 2567.2599999999998,
      "Text": " It's basically doing it by the time"
    },
    {
      "Time_Start": 2568.0600000000004,
      "Time_End": 2570.2200000000003,
      "Text": " It's basically doing it by looking"
    },
    {
      "Time_Start": 2570.2200000000003,
      "Time_End": 2573.7400000000002,
      "Text": " if the shared bit has been cleared on those pages."
    },
    {
      "Time_Start": 2573.7400000000002,
      "Time_End": 2575.98,
      "Text": " And then it resolves all the exports in those pages."
    },
    {
      "Time_Start": 2575.98,
      "Time_End": 2578.94,
      "Text": " So we don't know exactly which function has been hooked."
    },
    {
      "Time_Start": 2578.94,
      "Time_End": 2581.5,
      "Text": " But all the exports that are on that page might have been."
    },
    {
      "Time_Start": 2581.5,
      "Time_End": 2584.0600000000004,
      "Text": " So we can see it's probably ETW event write."
    },
    {
      "Time_Start": 2584.0600000000004,
      "Time_End": 2586.46,
      "Text": " And we can see here on this page that it's probably"
    },
    {
      "Time_Start": 2586.46,
      "Time_End": 2588.2200000000003,
      "Text": " the AMSI scan buffer."
    },
    {
      "Time_Start": 2589.7400000000002,
      "Time_End": 2591.26,
      "Text": " So again, that gives us a good way"
    },
    {
      "Time_Start": 2591.26,
      "Time_End": 2592.78,
      "Text": " to detect these hooks in memory."
    },
    {
      "Time_Start": 2597.5,
      "Time_End": 2604.46,
      "Text": " So the next one I'm going to do is Kerbal Strike."
    },
    {
      "Time_Start": 2612.94,
      "Time_End": 2614.86,
      "Text": " So I've got a couple of beacons here,"
    },
    {
      "Time_Start": 2614.86,
      "Time_End": 2616.38,
      "Text": " both injected into Notepad."
    },
    {
      "Time_Start": 2616.38,
      "Time_End": 2617.98,
      "Text": " And one of them is using module stomping,"
    },
    {
      "Time_Start": 2617.98,
      "Time_End": 2619.5800000000004,
      "Text": " and one of them is running from virtual memory."
    },
    {
      "Time_Start": 2622.7000000000003,
      "Time_End": 2624.78,
      "Text": " So I think I'll look at the virtual memory one first."
    },
    {
      "Time_Start": 2628.1400000000003,
      "Time_End": 2629.0200000000004,
      "Text": " Let's find the PID."
    },
    {
      "Time_Start": 2633.1000000000004,
      "Time_End": 2634.46,
      "Text": " So if we took a look at this one here,"
    },
    {
      "Time_Start": 2634.46,
      "Time_End": 2635.34,
      "Text": " let's pause it for a second."
    },
    {
      "Time_Start": 2637.1000000000004,
      "Time_End": 2639.6600000000003,
      "Text": " We can see that basically in this thread,"
    },
    {
      "Time_Start": 2639.6600000000003,
      "Time_End": 2640.46,
      "Text": " we've got a call."
    },
    {
      "Time_Start": 2640.46,
      "Time_End": 2641.42,
      "Text": " In the stack of the thread, we've"
    },
    {
      "Time_Start": 2641.42,
      "Time_End": 2642.6200000000003,
      "Text": " got a call from virtual memory."
    },
    {
      "Time_Start": 2642.6200000000003,
      "Time_End": 2644.3,
      "Text": " And we can see it's calling SleepX and then"
    },
    {
      "Time_Start": 2644.3,
      "Time_End": 2645.34,
      "Text": " NTDelayExecution."
    },
    {
      "Time_Start": 2645.34,
      "Time_End": 2648.2200000000003,
      "Text": " So we know that is a pretty good candidate"
    },
    {
      "Time_Start": 2648.2200000000003,
      "Time_End": 2649.26,
      "Text": " for being a sleeping beacon."
    },
    {
      "Time_Start": 2653.1800000000003,
      "Time_End": 2655.98,
      "Text": " So I'll just run Beacon Hunter over this one as well."
    },
    {
      "Time_Start": 2657.5,
      "Time_End": 2666.0600000000004,
      "Text": " So I did mess up here."
    },
    {
      "Time_Start": 2666.0600000000004,
      "Time_End": 2669.1000000000004,
      "Text": " I tried to cut it out, but I gave it the wrong PID initially."
    },
    {
      "Time_Start": 2669.82,
      "Time_End": 2672.3,
      "Text": " So if we scan it with Beacon Hunter,"
    },
    {
      "Time_Start": 2672.3,
      "Time_End": 2674.0600000000004,
      "Text": " we can see some of the stuff it's picked up."
    },
    {
      "Time_Start": 2674.0600000000004,
      "Time_End": 2675.5800000000004,
      "Text": " So it's picked up the sleeping beacon."
    },
    {
      "Time_Start": 2675.5800000000004,
      "Time_End": 2678.86,
      "Text": " It's telling me it's got calls to SleepX and NTDelayExecution"
    },
    {
      "Time_Start": 2678.86,
      "Time_End": 2679.34,
      "Text": " in the stack."
    },
    {
      "Time_Start": 2680.46,
      "Time_End": 2683.1800000000003,
      "Text": " It's basically telling me that it's running"
    },
    {
      "Time_Start": 2683.1800000000003,
      "Time_End": 2684.86,
      "Text": " from an unmapped image."
    },
    {
      "Time_Start": 2685.42,
      "Time_End": 2688.06,
      "Text": " And we can see the suspicious looking"
    },
    {
      "Time_Start": 2688.06,
      "Time_End": 2689.1800000000003,
      "Text": " like start address of null."
    },
    {
      "Time_Start": 2693.6600000000003,
      "Time_End": 2696.7000000000003,
      "Text": " So again, those are pretty good IOCs"
    },
    {
      "Time_Start": 2696.7000000000003,
      "Time_End": 2698.86,
      "Text": " to flag that something suspicious"
    },
    {
      "Time_Start": 2698.86,
      "Time_End": 2699.9,
      "Text": " is going on in this process."
    },
    {
      "Time_Start": 2702.7000000000003,
      "Time_End": 2705.98,
      "Text": " The next one we're going to look at is the module stomped one."
    },
    {
      "Time_Start": 2706.6200000000003,
      "Time_End": 2708.1400000000003,
      "Text": " So just to prove it's module stomping,"
    },
    {
      "Time_Start": 2709.02,
      "Time_End": 2711.34,
      "Text": " we will have a look at the call stack for this one."
    },
    {
      "Time_Start": 2711.34,
      "Time_End": 2716.46,
      "Text": " And you can see we're stomping from WW whatever that DLL was."
    },
    {
      "Time_Start": 2717.5,
      "Time_End": 2719.42,
      "Text": " And then I'm just going to run Beacon Hunter over it again."
    },
    {
      "Time_Start": 2720.86,
      "Time_End": 2723.82,
      "Text": " And what we should see is it picks up"
    },
    {
      "Time_Start": 2723.82,
      "Time_End": 2724.86,
      "Text": " the same stuff with the threads."
    },
    {
      "Time_Start": 2724.86,
      "Time_End": 2727.1000000000004,
      "Text": " But down here, you can see it basically"
    },
    {
      "Time_Start": 2727.1000000000004,
      "Time_End": 2728.38,
      "Text": " says check in for module stomping."
    },
    {
      "Time_Start": 2728.38,
      "Time_End": 2729.98,
      "Text": " And it says found stomped DLL."
    },
    {
      "Time_Start": 2729.98,
      "Time_End": 2732.46,
      "Text": " And that is it's able to detect Cobalt strikes"
    },
    {
      "Time_Start": 2732.46,
      "Time_End": 2734.7000000000003,
      "Text": " and module stomping functionality basically"
    },
    {
      "Time_Start": 2734.7000000000003,
      "Time_End": 2738.06,
      "Text": " down to the specific DLL that's been stomped because"
    },
    {
      "Time_Start": 2738.06,
      "Time_End": 2739.98,
      "Text": " of those dangling IOCs that get left in the pub."
    },
    {
      "Time_Start": 2742.06,
      "Time_End": 2742.56,
      "Text": " Cool."
    },
    {
      "Time_Start": 2746.94,
      "Time_End": 2747.7400000000002,
      "Text": " Where's my mouse?"
    },
    {
      "Time_Start": 2752.78,
      "Time_End": 2753.7400000000002,
      "Text": " OK, not too much more."
    },
    {
      "Time_Start": 2754.54,
      "Time_End": 2756.06,
      "Text": " That's pretty much it really."
    },
    {
      "Time_Start": 2756.06,
      "Time_End": 2760.2200000000003,
      "Text": " But just a quick thank you to some of the guys from DSEC,"
    },
    {
      "Time_Start": 2760.78,
      "Time_End": 2762.94,
      "Text": " particularly Peter, who gave me lots of advice"
    },
    {
      "Time_Start": 2762.94,
      "Time_End": 2764.1400000000003,
      "Text": " when doing some of this stuff."
    },
    {
      "Time_Start": 2764.1400000000003,
      "Time_End": 2766.54,
      "Text": " Gave me some example code and things to look at."
    },
    {
      "Time_Start": 2767.1800000000003,
      "Time_End": 2770.2200000000003,
      "Text": " And also, ModiXP, who helped me with some"
    },
    {
      "Time_Start": 2770.3,
      "Time_End": 2771.42,
      "Text": " of the reversing of Brick Retell."
    },
    {
      "Time_Start": 2772.2200000000003,
      "Time_End": 2775.0200000000004,
      "Text": " There's a bunch of really good references here"
    },
    {
      "Time_Start": 2775.0200000000004,
      "Time_End": 2777.9,
      "Text": " to different techniques, both for detection"
    },
    {
      "Time_Start": 2777.9,
      "Time_End": 2781.42,
      "Text": " and for building evasion strategies,"
    },
    {
      "Time_Start": 2782.1400000000003,
      "Time_End": 2789.82,
      "Text": " which I would recommend going and reading."
    }
  ]
}