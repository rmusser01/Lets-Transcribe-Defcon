**AppLocker Weaknesses and Workarounds**:

- AppLocker, a Windows application whitelisting solution, has certain weaknesses that can be exploited to bypass its protection. 
- AppLocker consists of multiple components, including a user mode management system, a kernel-based mechanism, and a special service for translating the database. 
- It can work in enforcement or audit mode, blocking non-whitelisted apps or simply logging warnings, respectively. 
- AppLocker rules can be based on paths, hashes, or digital signatures, with hash rules being the simplest to demonstrate. 
- Imperfection #1: AppLocker ignores executable files with the S156 seed in the process token, allowing unauthorized processes to be launched without being blocked, logged, or audited. 
- Imperfection #2: AppLocker uses caching to speed up hash calculations, but this cache is stored in NTFS extended attributes, which can be manipulated offline to bypass AppLocker protection. 
- The hashing algorithm used by AppLocker is undocumented and differs from the commonly assumed SHA256 algorithm. 
- Extended attributes with names starting with "$kernel" can only be manipulated by kernel modules, making it challenging to modify them online. 
- By modifying the file content offline and planting a fake hash in the extended attributes, it is possible to trick AppLocker into trusting a manipulated file. 
- AppLocker also caches digital signatures, and the same manipulation technique can be used to falsify signatures, such as those from Microsoft. 
- The "Test-AppLockerPolicy" PowerShell cmdlet calculates hashes on-demand and can be used to test if a file will be allowed to run, providing a more accurate result than AppLocker's cached hash. 
- Workarounds include monitoring for processes with the S156 seed and being cautious about whitelisting based on digital signatures.