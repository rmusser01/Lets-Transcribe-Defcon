Daniel Bohannon, a security researcher and applied research specialist at Mandiant FireEye, presents his talk, "DevSec Defense," at the x33fcon security conference. He begins by explaining his motivation for the talk, which is to share his methodology for crafting detections and the tools he uses to automate the process of detection development and problem enumeration. Bohannon provides a brief overview of his background, highlighting his experience in IT operations, security, consulting, and applied research. He mentions his interest in PowerShell and how he started focusing on detection work after observing its widespread use by attackers.

Bohannon defines the problem of PowerShell argument and script obfuscation, which can evade rigid detections. He demonstrates how attackers can manipulate strings, tokens, and special characters to obfuscate their commands and provides examples of various obfuscation techniques. To counter these techniques, Bohannon introduces the concept of using PowerShell's Abstract Syntax Tree (AST) and PSScriptAnalyzer for detection. He presents a research project where they analyzed a large corpus of PowerShell scripts to extract features and develop detection models.

Bohannon then discusses the use of AST by attackers to minimally obfuscate scripts and bypass detection frameworks. He introduces PSAMSY, a tool that utilizes the AST and the Anti-Malware Scan Interface (AMSI) to detect obfuscated scripts. He also explains how defenders can use AST to detect minimal obfuscation by writing signature-like rules focused on specific elements of the PowerShell language. Bohannon provides examples of detection rules and introduces a wrapper module he created to visualize the rules' effectiveness.

Moving on from PowerShell, Bohannon discusses command obfuscation and how attackers can obfuscate command.exe arguments to evade detections. He presents a case study of Fin7, an advanced persistent threat group, and their use of string replacement syntax native to command.exe. Bohannon then introduces his tool, Invoke Obfuscation, which he developed to automate the detection process and create a corpus of obfuscated commands. He explains the concept of a custom fuzzer and how it can be used to generate a large number of obfuscated commands for testing and detection development.

Bohannon emphasizes the importance of automating testing to preserve creative brain cycles and shares his experience with Pester, a PowerShell framework for unit testing. He demonstrates how Pester can be used to validate detections and introduces Invoke-DosTestHarness, a wrapper he created to automate the testing process. By generating a large number of obfuscated commands and testing them against detection rules, Bohannon can identify false negatives and improve his detections.

The presentation concludes with a discussion on framework fuzzing, where Bohannon explains how attackers can add obfuscation to publicly available frameworks. He demonstrates a technique for enumerating the problem space by copying source code and using a for loop to generate a large number of samples. By analyzing the generated samples, Bohannon can develop detections for the obfuscation techniques used. He emphasizes the importance of sharing successes, failures, methods, and tools within the security community.

In summary, Bohannon's talk provides a comprehensive overview of his approach to detection development and the tools he uses to automate the process. He emphasizes the importance of proactive research, data collection, and sharing within the security community. By utilizing DevSec principles and PowerShell tooling, Bohannon has developed effective detections for various obfuscation techniques used by attackers.