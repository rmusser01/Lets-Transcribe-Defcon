**Project Memoria**: Large-scale Study of Embedded TCP/IP Stack Security
- Aims to understand why and how TCP/IP stacks are vulnerable and identify solutions.

**Previous Research on TCP/IP Stacks**:
- Ripple20: 19 vulnerabilities in Treck TCP/IP stack, highlighting supply chain effects.
- Amnesia:33: 33 vulnerabilities in four open-source stacks, similar supply chain impact.
- Numberjack: 9 vulnerabilities related to predictable TCP initial sequence numbers.

**Focus on DNS**:
- Most affected component in previous TCP/IP stack research.
- Complex protocol with a history of vulnerabilities (e.g., DNS Spook, SIGRED, SETDNS, Kaminsky attack).
- Externally accessible, increasing attack surface and potential for remote exploitation.

**Introduction to DNS**:
- Domain Name System maps domain names to IP addresses.
- Clients query DNS servers, which return responses.
- DNS is hierarchical and uses recursive queries.

**DNS Request and Response Encoding**:
- Domain names are sequences of labels with length bytes.
- Compression mechanism replaces repeated sequences with pointers to prior occurrences.
- Compression is used in DNS, DHCP, multicast DNS, IPv6 router advertisement, etc.

**Vulnerabilities in DNS Compression**:
- Known issues with DNS compression due to complex implementation.
- History of vulnerabilities affecting various devices and software (e.g., Cisco IP phone, TCPdump, VLC).

**NameRack**: New Set of Vulnerabilities
- Collaboration between Forescout and JSOF, with contributions from others.
- Focuses on vulnerabilities in DNS compression, a complex RFC.
- Examined various stacks (embedded, general-purpose, open-source, closed-source, new, and old).

**Initial Results**:
- Some stacks were not vulnerable or had already been patched.
- Vulnerabilities found in prominent stacks (FreeBSD, Nucleus Net, VxWorks, NetX).
- Different types of issues, including misimplementation and misallocation of buffer sizes.

**Types of Vulnerabilities**:
- Lack of transaction ID and port ID validation/randomization, affecting integrity.
- Lack of label length and name length validation, leading to memory corruptions.
- No validation of domain name termination (null byte).
- Issues in parsing DNS response header, leading to read-out-of-bounds vulnerabilities.
- DNS compression vulnerabilities: tricky to implement correctly.

**Impact of Vulnerabilities**:
- Affected devices include popular software and hardware components (FreeBSD, Nucleus RTOS, ThreadX, VxWorks).
- Over 10 billion deployments of affected operating systems/stacks, even if not all use default stack or have DNS/DHCP enabled.
- Silently patched vulnerabilities and unsupported versions make it difficult to track and patch affected devices.
- Exploitation and patching challenges vary depending on the device and environment (IT, IoT, OT).

**Mitigation and Future Steps**:
- Better documentation and static analysis tools for developers.
- Device fingerprinting, intrusion detection, and exploit detection rules for network operators.
- Information RFC draft, static analysis queries, stack fingerprinting updates, and malicious PCAPs released to help mitigate DNS-based vulnerabilities.

**Conclusion**:
- RFC misimplementation is a common cause of vulnerabilities in TCP/IP stacks due to complexity and outdated behaviors.
- DNS clients are vulnerable, especially to message compression issues.
- Not implementing support for compression may be an effective mitigation.
- DNS clients may be less rigorously tested than servers due to their communication model.
- Key takeaways: DNS complexity leads to critical vulnerabilities, and mitigation steps are available.