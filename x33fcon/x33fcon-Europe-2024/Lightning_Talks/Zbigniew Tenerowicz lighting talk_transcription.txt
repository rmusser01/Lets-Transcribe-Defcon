{
  "webpage_url": "https://www.youtube.com/watch?v=1srl6c7JQkk",
  "title": "Zbigniew Tenerowicz lighting talk",
  "description": "Zbigniew Tenerowicz lighting talk, x33fcon 2024",
  "channel_url": "https://www.youtube.com/channel/UC8wesSvHdlNXVZgSy_UU_Ug",
  "duration": 208,
  "channel": "x33fcon",
  "uploader": "x33fcon",
  "upload_date": "20240716"
}

This text was transcribed using whisper model: large-v2

 This is a funny little project that's an unusual malware analysis tool for JavaScript.  And what you're seeing on the left is some JavaScript code that's been obfuscated four  times and a bunch of other stuff happened to it, but it needs to run at run time.  So let's look at it at run time.  What did I do?  Yeah.  Typo.  Great.  Great for time.  Okay.  So this is a tiny lab.  That's an experiment of mine.  I'm cheating, obviously.  This is a demo, so I have to cheat.  So it's asking me step by step what I want to do.  If I want to give it stuff.  So these are the four levels of obfuscation.  It had to evaluate each obfuscation.  So I agreed to that.  And then it asks me if I want to require a file system.  No.  No.  No.  No.  I didn't allow any of it.  I'm going to emulate it.  Now it's asking me for the exec.  I'm going to do a function.  Do I want to require this?  No.  I'm going to give it a fake.  Fake process.  Okay.  Fake process.env.  We're getting there.  Process local app data.  We know it's a Windows malware now.  It's reading some files from that string.  So it's reading from local app data.  I gave it a recognizable string.  And now it's iterating it to find stuff.  Checking the task list.  And then posting it to a Discord webhook.  And I know all that without giving it access to the file system or network.  And without deobfuscating it.  And by the way, this thing also works, which might be interesting for you people, on compiled  sources.  So this is a simple JavaScript file that I just compiled to V8 byte code.  And extracted that byte code.  This is a payload delivery method.  I can now run this in the same exact tool.  With a tiny tweak.  And I now go through the same process.  Console log.  There you go.  Demo sample.  Right?  URL.  Some weird artifacts from the compilation.  Depends on Node.js version.  Okay.  Funny.  URL of string.  Require file system.  No.  Thank you.  Read file sync.  Let's give it a fake.  Payload.  We're reading a payload.  Passing that to eval.  Hello.  Yeah.  There's some JSONification going on in the compiled stuff.  That's also funny.  And eval gets what we returned.  Done.  That's my demo.  And this whole thing is an experiment built out of components that we normally use for  Lava Mode, which is defending JavaScript projects against malware at runtime.  So in your browsers, in your Node.js applications, it's preventing stuff from doing malicious  things at runtime while your developers already ignored all the other warnings and shipped  malware to production.  I have more.  Find me.  But I have to go.  Thank you.