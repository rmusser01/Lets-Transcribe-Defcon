{
  "webpage_url": "https://www.youtube.com/watch?v=14tNFwfety4",
  "title": "Tomasz Bukowski lighting talk",
  "description": "Tomasz Bukowski lighting talk, x33fcon 2024",
  "channel_url": "https://www.youtube.com/channel/UC8wesSvHdlNXVZgSy_UU_Ug",
  "duration": 388,
  "channel": "x33fcon",
  "uploader": "x33fcon",
  "upload_date": "20240716"
}

This text was transcribed using whisper model: large-v2

 Hi everybody, a few words about my adventures of hacking Java serialisation from Python  and the real name of this presentation should be I really hate Java.  So for all those of you who don't know what is serialisation, basically if you programme  in Java classes and objects are first class citizens, so if you want to do something on  strings you shouldn't because you should use objects and when you have two applications  written in Java that need to communicate they need to exchange objects but objects are things  that you cannot just put into the wire in a binary form, you need to serialise them.  So this is an example of serialised object in Java.  Basically that's the binary format, a class needs to inherit a serialisable interface  and that's an example of a binary serialised payload.  What's the status of security tools?  So there is a YSO serial and this is a very widely covering tool that allows you to generate  numbers of payloads that can be used to attack Java serialisation but that tool is written  in Java, so whenever you want to use it you need to have a Java on your station and if  you want to change something, improve the payload you actually need to have a PhD from  Java development because those payloads are pretty complicated.  So for me the biggest challenge was I hate Java and I don't have a PhD in Java.  So well, those are the tools that you can use to start your hacking adventures but all  of them are somehow related to Java and I hate Java so I rewrote my own tool which is  called Deserek from Polish desert, that allows you to do this Java object stuff serialisation  in pure Python.  This is two way tool, so you can take an already serialised Java object and deserialise that  and the funny thing is you can deserialise Java object into the Python file, so as you  can see on the screen I'm ingesting the Integer 99, let's try to see the demo.  That's the binary format, you can then stuff it into the Java, into Python.  Python, yep, format Python and you'll get the Python code, you can see the Python code  here, yeah, going back to the slides, thanks, and basically when you execute that Python  file that was generated you will get the binary file back but because you have a Python code  that is generating that file you can mess with that.  One example is on the top you can see original serialised Integer, this is like a single  Integer number serialised in Java but because you can mess up with the structure, keeping  the integrity of the structure, you can just remove some things and on the bottom you have  my Python code generating something that is still interpreted by Java as in the Integer,  so the payload is almost twice smaller than the original and Java still recognise that  as a valid Integer, yeah, so as you can see here you have a Python code and you can basically  mess up with that as in regular, like similar to impacket, sorry, similar to what was the  name of the Python stuff to read the pick up files, so you have a Python code basically.  You can use it to, you can generate a YSO serial payload, then you can parse it using  the Serec to Python code and then you can utilise that to customise your Java payload  in a Python.  Let me show you the file.  So for example this is a parsed automatically generated file that gives you, yeah, you see  nothing, yep, you can see now everything, yeah, you have basically a Python code and  for example if you want to change a domain in this payload, you can basically change  a string, you don't need to have a Java to utilise YSO serial payload.  And the last feature that was implemented, you basically can have your own Python objects  and serialise them to the Java.  The only thing you need to do is to inherit the Java object, Java serialisable class that  is doing all the magic, so for example we have something that will act as a Java Integer  and we are just serialising that using the Serec to the binary file and we will get something  that will be ingested by Java as well, proper Integer.  So from that day forward, you no longer need to use Java to exploit Java serialisation  format.  There are resources here.  And yeah.  Any questions?