{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 12.4,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Hi everybody, a few words about my adventures of hacking Java serialisation from Python"
    },
    {
      "Time_Start": 12.4,
      "Time_End": 18.44,
      "Text": " and the real name of this presentation should be I really hate Java."
    },
    {
      "Time_Start": 18.44,
      "Time_End": 26.76,
      "Text": " So for all those of you who don't know what is serialisation, basically if you programme"
    },
    {
      "Time_Start": 26.76,
      "Time_End": 33.120000000000005,
      "Text": " in Java classes and objects are first class citizens, so if you want to do something on"
    },
    {
      "Time_Start": 33.120000000000005,
      "Time_End": 39.88,
      "Text": " strings you shouldn't because you should use objects and when you have two applications"
    },
    {
      "Time_Start": 39.88,
      "Time_End": 45.6,
      "Text": " written in Java that need to communicate they need to exchange objects but objects are things"
    },
    {
      "Time_Start": 45.6,
      "Time_End": 51.28,
      "Text": " that you cannot just put into the wire in a binary form, you need to serialise them."
    },
    {
      "Time_Start": 51.28,
      "Time_End": 56.2,
      "Text": " So this is an example of serialised object in Java."
    },
    {
      "Time_Start": 56.2,
      "Time_End": 63.080000000000005,
      "Text": " Basically that's the binary format, a class needs to inherit a serialisable interface"
    },
    {
      "Time_Start": 63.080000000000005,
      "Time_End": 69.76,
      "Text": " and that's an example of a binary serialised payload."
    },
    {
      "Time_Start": 69.76,
      "Time_End": 73.64,
      "Text": " What's the status of security tools?"
    },
    {
      "Time_Start": 73.64,
      "Time_End": 85.64,
      "Text": " So there is a YSO serial and this is a very widely covering tool that allows you to generate"
    },
    {
      "Time_Start": 85.64,
      "Time_End": 92.4,
      "Text": " numbers of payloads that can be used to attack Java serialisation but that tool is written"
    },
    {
      "Time_Start": 92.4,
      "Time_End": 98.64,
      "Text": " in Java, so whenever you want to use it you need to have a Java on your station and if"
    },
    {
      "Time_Start": 98.64,
      "Time_End": 103.48,
      "Text": " you want to change something, improve the payload you actually need to have a PhD from"
    },
    {
      "Time_Start": 103.48,
      "Time_End": 107.96000000000001,
      "Text": " Java development because those payloads are pretty complicated."
    },
    {
      "Time_Start": 107.96000000000001,
      "Time_End": 113.32,
      "Text": " So for me the biggest challenge was I hate Java and I don't have a PhD in Java."
    },
    {
      "Time_Start": 113.32000000000001,
      "Time_End": 122.48,
      "Text": " So well, those are the tools that you can use to start your hacking adventures but all"
    },
    {
      "Time_Start": 122.48,
      "Time_End": 130.72,
      "Text": " of them are somehow related to Java and I hate Java so I rewrote my own tool which is"
    },
    {
      "Time_Start": 130.72,
      "Time_End": 140.92000000000002,
      "Text": " called Deserek from Polish desert, that allows you to do this Java object stuff serialisation"
    },
    {
      "Time_Start": 140.92000000000002,
      "Time_End": 144.08,
      "Text": " in pure Python."
    },
    {
      "Time_Start": 144.08,
      "Time_End": 152.24,
      "Text": " This is two way tool, so you can take an already serialised Java object and deserialise that"
    },
    {
      "Time_Start": 152.24,
      "Time_End": 157.76000000000002,
      "Text": " and the funny thing is you can deserialise Java object into the Python file, so as you"
    },
    {
      "Time_Start": 157.76,
      "Time_End": 177.32,
      "Text": " can see on the screen I'm ingesting the Integer 99, let's try to see the demo."
    },
    {
      "Time_Start": 177.32,
      "Time_End": 204.92,
      "Text": " That's the binary format, you can then stuff it into the Java, into Python."
    },
    {
      "Time_Start": 205.92000000000002,
      "Time_End": 217.04000000000002,
      "Text": " Python, yep, format Python and you'll get the Python code, you can see the Python code"
    },
    {
      "Time_Start": 217.04000000000002,
      "Time_End": 222.28000000000003,
      "Text": " here, yeah, going back to the slides, thanks, and basically when you execute that Python"
    },
    {
      "Time_Start": 222.28000000000003,
      "Time_End": 227.16000000000003,
      "Text": " file that was generated you will get the binary file back but because you have a Python code"
    },
    {
      "Time_Start": 227.16000000000003,
      "Time_End": 230.20000000000002,
      "Text": " that is generating that file you can mess with that."
    },
    {
      "Time_Start": 230.44000000000003,
      "Time_End": 236.96,
      "Text": " One example is on the top you can see original serialised Integer, this is like a single"
    },
    {
      "Time_Start": 236.96,
      "Time_End": 242.52,
      "Text": " Integer number serialised in Java but because you can mess up with the structure, keeping"
    },
    {
      "Time_Start": 242.52,
      "Time_End": 246.8,
      "Text": " the integrity of the structure, you can just remove some things and on the bottom you have"
    },
    {
      "Time_Start": 246.8,
      "Time_End": 252.44000000000003,
      "Text": " my Python code generating something that is still interpreted by Java as in the Integer,"
    },
    {
      "Time_Start": 252.44000000000003,
      "Time_End": 258.20000000000005,
      "Text": " so the payload is almost twice smaller than the original and Java still recognise that"
    },
    {
      "Time_Start": 258.2,
      "Time_End": 265.4,
      "Text": " as a valid Integer, yeah, so as you can see here you have a Python code and you can basically"
    },
    {
      "Time_Start": 265.4,
      "Time_End": 274.52,
      "Text": " mess up with that as in regular, like similar to impacket, sorry, similar to what was the"
    },
    {
      "Time_Start": 274.52,
      "Time_End": 284.48,
      "Text": " name of the Python stuff to read the pick up files, so you have a Python code basically."
    },
    {
      "Time_Start": 284.48,
      "Time_End": 290.08000000000004,
      "Text": " You can use it to, you can generate a YSO serial payload, then you can parse it using"
    },
    {
      "Time_Start": 290.08000000000004,
      "Time_End": 297.04,
      "Text": " the Serec to Python code and then you can utilise that to customise your Java payload"
    },
    {
      "Time_Start": 297.04,
      "Time_End": 300.24,
      "Text": " in a Python."
    },
    {
      "Time_Start": 300.24,
      "Time_End": 303.56,
      "Text": " Let me show you the file."
    },
    {
      "Time_Start": 303.56,
      "Time_End": 308.32,
      "Text": " So for example this is a parsed automatically generated file that gives you, yeah, you see"
    },
    {
      "Time_Start": 308.32,
      "Time_End": 322.64,
      "Text": " nothing, yep, you can see now everything, yeah, you have basically a Python code and"
    },
    {
      "Time_Start": 322.64,
      "Time_End": 327.71999999999997,
      "Text": " for example if you want to change a domain in this payload, you can basically change"
    },
    {
      "Time_Start": 327.71999999999997,
      "Time_End": 334.32,
      "Text": " a string, you don't need to have a Java to utilise YSO serial payload."
    },
    {
      "Time_Start": 334.32,
      "Time_End": 339.56,
      "Text": " And the last feature that was implemented, you basically can have your own Python objects"
    },
    {
      "Time_Start": 339.56,
      "Time_End": 342.56,
      "Text": " and serialise them to the Java."
    },
    {
      "Time_Start": 342.56,
      "Time_End": 347.96,
      "Text": " The only thing you need to do is to inherit the Java object, Java serialisable class that"
    },
    {
      "Time_Start": 347.96,
      "Time_End": 354.56,
      "Text": " is doing all the magic, so for example we have something that will act as a Java Integer"
    },
    {
      "Time_Start": 354.56,
      "Time_End": 359.24,
      "Text": " and we are just serialising that using the Serec to the binary file and we will get something"
    },
    {
      "Time_Start": 359.24,
      "Time_End": 363.03999999999996,
      "Text": " that will be ingested by Java as well, proper Integer."
    },
    {
      "Time_Start": 363.04,
      "Time_End": 369.88,
      "Text": " So from that day forward, you no longer need to use Java to exploit Java serialisation"
    },
    {
      "Time_Start": 369.88,
      "Time_End": 370.88,
      "Text": " format."
    },
    {
      "Time_Start": 370.88,
      "Time_End": 374.04,
      "Text": " There are resources here."
    },
    {
      "Time_Start": 374.04,
      "Time_End": 375.04,
      "Text": " And yeah."
    },
    {
      "Time_Start": 375.04,
      "Time_End": 375.84000000000003,
      "Text": " Any questions?"
    }
  ]
}