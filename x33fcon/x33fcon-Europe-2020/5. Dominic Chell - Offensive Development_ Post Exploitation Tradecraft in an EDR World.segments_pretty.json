{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 14.48,
      "Text": "This text was transcribed using whisper model: large-v2\n\n The talk that I'm going to give today is entitled Offensive Development and Post-Exploitation"
    },
    {
      "Time_Start": 14.48,
      "Time_End": 18.0,
      "Text": " Tradecraft in an EDR World."
    },
    {
      "Time_Start": 18.0,
      "Time_End": 19.0,
      "Text": " So who am I?"
    },
    {
      "Time_Start": 19.0,
      "Time_End": 20.88,
      "Text": " Well, my name is Dominic Chell."
    },
    {
      "Time_Start": 20.88,
      "Time_End": 29.2,
      "Text": " I work for a company over in the UK called MDSEC, mainly focusing on offensive security."
    },
    {
      "Time_Start": 29.2,
      "Time_End": 36.84,
      "Text": " Day-to-day, my role is relatively hands-on, so I spend most of my time leading and executing"
    },
    {
      "Time_Start": 36.84,
      "Time_End": 39.44,
      "Text": " red team operations for our clients."
    },
    {
      "Time_Start": 39.44,
      "Time_End": 44.68,
      "Text": " You can find me on Twitter under the unimaginative handle of at DomChell."
    },
    {
      "Time_Start": 44.68,
      "Time_End": 52.44,
      "Text": " I try and also contribute back to the red team community, so I'm quite active on Twitter,"
    },
    {
      "Time_Start": 52.44,
      "Time_End": 56.8,
      "Text": " on the MDSEC blog, so you can find some of my research and some of the blogs post on"
    },
    {
      "Time_Start": 56.8,
      "Time_End": 57.8,
      "Text": " that."
    },
    {
      "Time_Start": 58.800000000000004,
      "Time_End": 64.72,
      "Text": " So before I dive into the talk, I'm going to start off with a little story."
    },
    {
      "Time_Start": 64.72,
      "Time_End": 72.12,
      "Text": " So let's say, and maybe this is atypical for many kind of red teams, so maybe you've spent"
    },
    {
      "Time_Start": 72.12,
      "Time_End": 76.24000000000001,
      "Text": " days concocting the perfect fish."
    },
    {
      "Time_Start": 76.24000000000001,
      "Time_End": 81.56,
      "Text": " You've engaged the user, you've finally got them to open that payload that you've weaponized"
    },
    {
      "Time_Start": 81.56,
      "Time_End": 87.04,
      "Text": " and prepped to bypass EDR, and then you get your beacon check-in."
    },
    {
      "Time_Start": 87.28,
      "Time_End": 88.28,
      "Text": " So what's next?"
    },
    {
      "Time_Start": 88.28,
      "Time_End": 89.28,
      "Text": " How do you operate?"
    },
    {
      "Time_Start": 89.28,
      "Time_End": 95.36000000000001,
      "Text": " Well, maybe you want to do some basic situational awareness, so maybe you check your privileges"
    },
    {
      "Time_Start": 95.36000000000001,
      "Time_End": 97.84,
      "Text": " with things like, who am I?"
    },
    {
      "Time_Start": 97.84,
      "Time_End": 101.12,
      "Text": " Maybe you check that you're on the right network, on the right environment with things like"
    },
    {
      "Time_Start": 101.12,
      "Time_End": 103.64000000000001,
      "Text": " IP config."
    },
    {
      "Time_Start": 103.64000000000001,
      "Time_End": 107.96000000000001,
      "Text": " Maybe you probe the endpoint a little bit, trying to discover some documents that might"
    },
    {
      "Time_Start": 107.96000000000001,
      "Time_End": 110.52000000000001,
      "Text": " be of interest."
    },
    {
      "Time_Start": 110.52000000000001,
      "Time_End": 114.64000000000001,
      "Text": " And then once you've kind of, you're happy that you're on the right endpoint and you've"
    },
    {
      "Time_Start": 114.64,
      "Time_End": 117.24,
      "Text": " finished with it, maybe you want to kind of move laterally."
    },
    {
      "Time_Start": 117.24,
      "Time_End": 121.84,
      "Text": " So maybe you use something like Bloodhound to gather information about the active directory"
    },
    {
      "Time_Start": 121.84,
      "Time_End": 126.64,
      "Text": " and look for potential opportunities for lateral movement."
    },
    {
      "Time_Start": 126.64,
      "Time_End": 131.96,
      "Text": " And then finally, you discover another system in the network where you've got admin rights,"
    },
    {
      "Time_Start": 131.96,
      "Time_End": 135.28,
      "Text": " and so maybe you want to move laterally."
    },
    {
      "Time_Start": 135.28,
      "Time_End": 139.88,
      "Text": " So you upload a DLL to the remote system, to the remote host, and then you stage it"
    },
    {
      "Time_Start": 139.88,
      "Time_End": 145.2,
      "Text": " with something like one DLL, 32 or equivalent."
    },
    {
      "Time_Start": 145.2,
      "Time_End": 149.04,
      "Text": " And then suddenly, the beacon's gone, it stops checking in."
    },
    {
      "Time_Start": 149.04,
      "Time_End": 153.92,
      "Text": " You probably start to question yourself, maybe the user went to a meeting, maybe they finished"
    },
    {
      "Time_Start": 153.92,
      "Time_End": 154.92,
      "Text": " for the day."
    },
    {
      "Time_Start": 154.92,
      "Time_End": 158.84,
      "Text": " You start to kind of wonder what's happened, up until the client drops you that message"
    },
    {
      "Time_Start": 158.84,
      "Time_End": 165.6,
      "Text": " saying, oh, sorry, the blue team detected you, and they've isolated your endpoint."
    },
    {
      "Time_Start": 165.6,
      "Time_End": 171.2,
      "Text": " So at that point, you may have spent days or weeks, and then suddenly you need to start"
    },
    {
      "Time_Start": 171.2,
      "Time_End": 172.2,
      "Text": " over."
    },
    {
      "Time_Start": 172.2,
      "Time_End": 178.0,
      "Text": " And I'm sure this situation has happened to almost all red teamers, and it can be quite"
    },
    {
      "Time_Start": 178.0,
      "Time_End": 179.84,
      "Text": " frustrating."
    },
    {
      "Time_Start": 179.84,
      "Time_End": 184.28,
      "Text": " So let's take a little look at what the blue team actually saw in this scenario, and perhaps"
    },
    {
      "Time_Start": 184.28,
      "Time_End": 189.07999999999998,
      "Text": " we can look at some potential approaches to improve our tradecraft."
    },
    {
      "Time_Start": 190.08,
      "Time_End": 195.8,
      "Text": " Okay, so firstly, they've got an EDR that captures process creation events."
    },
    {
      "Time_Start": 195.8,
      "Time_End": 200.88000000000002,
      "Text": " So they can see PowerShell spawning IP config, they can see us running QAMA, they might be"
    },
    {
      "Time_Start": 200.88000000000002,
      "Time_End": 204.44,
      "Text": " able to see us using various lull bins."
    },
    {
      "Time_Start": 204.44,
      "Time_End": 209.0,
      "Text": " This of course doesn't blend in very well, and will no doubt raise the threat profile"
    },
    {
      "Time_Start": 209.0,
      "Time_End": 215.0,
      "Text": " of the endpoint, particularly if the user has never run any of these before."
    },
    {
      "Time_Start": 215.0,
      "Time_End": 218.56,
      "Text": " And the EDR's also catching ETW events."
    },
    {
      "Time_Start": 218.56,
      "Time_End": 223.0,
      "Text": " So they've seen all of our .NET tradecraft, and maybe they're even like baselining the"
    },
    {
      "Time_Start": 223.0,
      "Time_End": 225.4,
      "Text": " processes that will load the CLR."
    },
    {
      "Time_Start": 225.4,
      "Time_End": 232.64000000000001,
      "Text": " So the fact that we've got W32TM as our spawn to process, and it's loading the .NET runtime,"
    },
    {
      "Time_Start": 232.64000000000001,
      "Time_End": 236.08,
      "Text": " this might in itself be an indicator."
    },
    {
      "Time_Start": 236.08,
      "Time_End": 242.36,
      "Text": " But then we've also got things like the sharp hound assembly names sitting, it being communicated"
    },
    {
      "Time_Start": 242.36,
      "Time_End": 244.44,
      "Text": " back through ETW events."
    },
    {
      "Time_Start": 244.44,
      "Time_End": 248.12,
      "Text": " So this is probably not ideal and probably stands out."
    },
    {
      "Time_Start": 248.12,
      "Time_End": 252.76,
      "Text": " If not, it probably should."
    },
    {
      "Time_Start": 252.76,
      "Time_End": 258.4,
      "Text": " So perhaps some elements of that story resonated with you, and that is the crux of my talk"
    },
    {
      "Time_Start": 258.4,
      "Time_End": 259.76,
      "Text": " today."
    },
    {
      "Time_Start": 259.76,
      "Time_End": 265.32,
      "Text": " It's really that the defenses and the environments are becoming more mature, and blue teams really"
    },
    {
      "Time_Start": 265.32,
      "Time_End": 267.84000000000003,
      "Text": " have got that home field advantage."
    },
    {
      "Time_Start": 267.84000000000003,
      "Time_End": 272.92,
      "Text": " As a red team, there's a lot of different things that we actually need to deal with."
    },
    {
      "Time_Start": 272.92,
      "Time_End": 277.52,
      "Text": " And at least most of the client environments that we are kind of red team against, and"
    },
    {
      "Time_Start": 277.91999999999996,
      "Time_End": 282.79999999999995,
      "Text": " they'll have things like command line logging, PowerShell logging, and they'll have sandboxes,"
    },
    {
      "Time_Start": 282.79999999999995,
      "Time_End": 288.28,
      "Text": " EDRs, EDPs, application whitelisting, AMSI, ETW."
    },
    {
      "Time_Start": 288.28,
      "Time_End": 294.64,
      "Text": " All these kind of technologies are basically creating a minefield of defenses that we as"
    },
    {
      "Time_Start": 294.64,
      "Time_End": 299.12,
      "Text": " a red team need to navigate through."
    },
    {
      "Time_Start": 299.12,
      "Time_End": 304.71999999999997,
      "Text": " And because of this, actually in order to be successful, what we find is that as a red"
    },
    {
      "Time_Start": 304.72,
      "Time_End": 309.72,
      "Text": " team, we have a growing investment in our operations."
    },
    {
      "Time_Start": 309.72,
      "Time_End": 315.96000000000004,
      "Text": " And the last thing that we want to do, really, is have entire campaigns, entire techniques,"
    },
    {
      "Time_Start": 315.96000000000004,
      "Time_End": 324.12,
      "Text": " or entire tools burned very quickly through incident response."
    },
    {
      "Time_Start": 324.12,
      "Time_End": 329.24,
      "Text": " So in this talk, I plan to basically look at this problem in greater detail."
    },
    {
      "Time_Start": 329.24,
      "Time_End": 333.32000000000005,
      "Text": " So I'll start off by examining some of the techniques that are used by blue teams to"
    },
    {
      "Time_Start": 333.36,
      "Time_End": 337.15999999999997,
      "Text": " actually detect post-exploitation tradecraft."
    },
    {
      "Time_Start": 337.15999999999997,
      "Time_End": 343.36,
      "Text": " I'll look at, once we've kind of looked at those, I will look at ways to actually go"
    },
    {
      "Time_Start": 343.36,
      "Time_End": 350.36,
      "Text": " and understand how they're catching this, and then potential ways to evade these detections."
    },
    {
      "Time_Start": 350.36,
      "Time_End": 355.8,
      "Text": " We don't just want to actually evade them, but we also want to integrate these evasions"
    },
    {
      "Time_Start": 355.8,
      "Time_End": 357.64,
      "Text": " into all of our tools."
    },
    {
      "Time_Start": 357.68,
      "Time_End": 364.8,
      "Text": " For every tool that we run, we want to basically bootstrap these techniques into them."
    },
    {
      "Time_Start": 364.8,
      "Time_End": 369.88,
      "Text": " In addition to that, I'll also cover a few different approaches that we can leverage"
    },
    {
      "Time_Start": 369.88,
      "Time_End": 375.2,
      "Text": " to really better protect all our tools and intellectual property in scenarios where we"
    },
    {
      "Time_Start": 375.2,
      "Time_End": 376.76,
      "Text": " do end up being detected."
    },
    {
      "Time_Start": 376.76,
      "Time_End": 386.4,
      "Text": " And I'll try and increase that time from detection to kind of ejection, really."
    },
    {
      "Time_Start": 386.40000000000003,
      "Time_End": 391.6,
      "Text": " So I'm going to start off initially looking at kind of historic tradecraft."
    },
    {
      "Time_Start": 391.6,
      "Time_End": 398.48,
      "Text": " And traditional tradecraft is typically involved running OS commands on the endpoint."
    },
    {
      "Time_Start": 398.48,
      "Time_End": 404.04,
      "Text": " So this might include things like leveraging little bins to perform certain actions."
    },
    {
      "Time_Start": 404.04,
      "Time_End": 408.00000000000006,
      "Text": " So for example, maybe we want to actually download a file."
    },
    {
      "Time_Start": 408.00000000000006,
      "Time_End": 412.24,
      "Text": " So to do that, you might use something like bitsadmin as a means to accomplish it."
    },
    {
      "Time_Start": 412.56,
      "Time_End": 417.8,
      "Text": " Now, of course, this is not a recommended approach for a mature environment."
    },
    {
      "Time_Start": 417.8,
      "Time_End": 422.16,
      "Text": " And that's basically because if the blue team is capturing process creation events, they'll"
    },
    {
      "Time_Start": 422.16,
      "Time_End": 426.44,
      "Text": " trivially be able to monitor and see everything that we're doing."
    },
    {
      "Time_Start": 426.44,
      "Time_End": 431.04,
      "Text": " So one of the methodologies that I want to propose is, can we actually abstract ourselves"
    },
    {
      "Time_Start": 431.04,
      "Time_End": 433.2,
      "Text": " entirely from the concept?"
    },
    {
      "Time_Start": 433.2,
      "Time_End": 436.8,
      "Text": " Can we actually only ever operate on an endpoint in code?"
    },
    {
      "Time_Start": 436.8,
      "Time_End": 439.68,
      "Text": " Now, there have been some steps taken."
    },
    {
      "Time_Start": 439.68,
      "Time_End": 440.88,
      "Text": " I do think the answer is yes."
    },
    {
      "Time_Start": 441.04,
      "Time_End": 444.71999999999997,
      "Text": " And there have been some steps taken to move in this direction."
    },
    {
      "Time_Start": 444.71999999999997,
      "Time_End": 450.48,
      "Text": " So we've seen the introduction of features such as execute assembly in Cobalt Strike,"
    },
    {
      "Time_Start": 450.48,
      "Time_End": 458.8,
      "Text": " which basically allows us to execute .NET tools in unmanaged processes."
    },
    {
      "Time_Start": 458.8,
      "Time_End": 463.96,
      "Text": " We've also more recently seen the introduction of things like beacon object files, which"
    },
    {
      "Time_Start": 464.04,
      "Time_End": 472.36,
      "Text": " basically provide an interface to execute C code inside a process."
    },
    {
      "Time_Start": 472.36,
      "Time_End": 478.44000000000005,
      "Text": " So I'm going to start off looking at some different approaches for actually detecting"
    },
    {
      "Time_Start": 478.44000000000005,
      "Time_End": 481.48,
      "Text": " .NET Tradecraft."
    },
    {
      "Time_Start": 481.48,
      "Time_End": 486.40000000000003,
      "Text": " And the reason we're starting to see this really is mainly because red teams moved over"
    },
    {
      "Time_Start": 486.40000000000003,
      "Time_End": 493.8,
      "Text": " to .NET following the introduction of PowerShell defenses."
    },
    {
      "Time_Start": 493.8,
      "Time_End": 499.52000000000004,
      "Text": " So this, of course, led to much more focus from the blue teams in techniques to detect"
    },
    {
      "Time_Start": 499.52000000000004,
      "Time_End": 503.32,
      "Text": " .NET post-exploitation Tradecraft."
    },
    {
      "Time_Start": 503.32,
      "Time_End": 510.36,
      "Text": " And one of these techniques, which is documented in this great blog post by the guys from Counterceptor"
    },
    {
      "Time_Start": 510.36,
      "Time_End": 518.52,
      "Text": " Secure, basically shows how we can use event tracing for Windows to integrate it into our"
    },
    {
      "Time_Start": 518.52,
      "Time_End": 523.96,
      "Text": " EDRs and into our EDR telemetry, our blue team telemetry, to actually go on and receive"
    },
    {
      "Time_Start": 523.96,
      "Time_End": 529.12,
      "Text": " CLR runtime traces through an ETW consumer."
    },
    {
      "Time_Start": 529.12,
      "Time_End": 534.84,
      "Text": " This is really powerful because it can provide deep visibility of all the assembly names,"
    },
    {
      "Time_Start": 534.84,
      "Time_End": 541.72,
      "Text": " namespaces, class names, method names that are being run in the .NET runtime, even when"
    },
    {
      "Time_Start": 541.72,
      "Time_End": 548.3199999999999,
      "Text": " we're using an unmanaged surrogate, so using something like execute assembly."
    },
    {
      "Time_Start": 548.32,
      "Time_End": 553.96,
      "Text": " So the consequence of this really is the blue teams now have at their disposal tools"
    },
    {
      "Time_Start": 553.96,
      "Time_End": 561.8000000000001,
      "Text": " like Silky ETW by FuzzySec, which can basically allow them to monitor all .NET executions,"
    },
    {
      "Time_Start": 561.8000000000001,
      "Time_End": 564.5200000000001,
      "Text": " even in unmanaged processes, and actually signature them."
    },
    {
      "Time_Start": 564.5200000000001,
      "Time_End": 568.08,
      "Text": " So signature all the function calls and method names and class names and things that are"
    },
    {
      "Time_Start": 568.08,
      "Time_End": 573.5600000000001,
      "Text": " being run, looking for known .NET tools."
    },
    {
      "Time_Start": 573.5600000000001,
      "Time_End": 580.24,
      "Text": " So that gives the blue team great insights to .NET post exploitation."
    },
    {
      "Time_Start": 580.24,
      "Time_End": 587.6800000000001,
      "Text": " So what are some approaches we can actually leverage to evade or get around these detections?"
    },
    {
      "Time_Start": 587.6800000000001,
      "Time_End": 592.44,
      "Text": " So the most obvious one and the most trivial one to avoid at least signature detection"
    },
    {
      "Time_Start": 592.44,
      "Time_End": 594.6,
      "Text": " is just to obfuscate the assemblies."
    },
    {
      "Time_Start": 594.6,
      "Time_End": 601.2,
      "Text": " So renaming the namespaces, the class names, the method names, all this kind of stuff can"
    },
    {
      "Time_Start": 601.2,
      "Time_End": 608.32,
      "Text": " actually help us slip past some of the signature-based detections that some of the blue team tools"
    },
    {
      "Time_Start": 608.32,
      "Time_End": 610.6,
      "Text": " might be using."
    },
    {
      "Time_Start": 610.6,
      "Time_End": 615.12,
      "Text": " This is quite simple to do, and we can take advantage of some of the open source obfuscators,"
    },
    {
      "Time_Start": 615.12,
      "Time_End": 622.5200000000001,
      "Text": " things like Confuser X, and these will actually help us to change up our binary before we"
    },
    {
      "Time_Start": 622.5200000000001,
      "Time_End": 623.5200000000001,
      "Text": " run it."
    },
    {
      "Time_Start": 623.5200000000001,
      "Time_End": 629.32,
      "Text": " So as you can see here, we've got a very simple example of how a safety cats assembly might"
    },
    {
      "Time_Start": 629.32,
      "Time_End": 633.5600000000001,
      "Text": " look in the disassembler after it's been run through something like Confuser X."
    },
    {
      "Time_Start": 633.5600000000001,
      "Time_End": 636.12,
      "Text": " And as you can see, it's much less signature-friendly."
    },
    {
      "Time_Start": 636.12,
      "Time_End": 640.44,
      "Text": " There's fewer strings than in the original unprotected binary."
    },
    {
      "Time_Start": 640.44,
      "Time_End": 641.44,
      "Text": " So that's great."
    },
    {
      "Time_Start": 641.44,
      "Time_End": 646.32,
      "Text": " We can now obfuscate all our binaries."
    },
    {
      "Time_Start": 646.32,
      "Time_End": 649.84,
      "Text": " Another thing that we might want to do, aside from obfuscation, is potentially just try"
    },
    {
      "Time_Start": 649.84,
      "Time_End": 657.7600000000001,
      "Text": " and stop the .NET assembly actually sending any ETW events entirely."
    },
    {
      "Time_Start": 657.7600000000001,
      "Time_End": 658.7600000000001,
      "Text": " So we can actually do this."
    },
    {
      "Time_Start": 659.2,
      "Time_End": 665.12,
      "Text": " And the reason for this is mainly because the ETW events are sent from user land, and"
    },
    {
      "Time_Start": 665.12,
      "Time_End": 668.6,
      "Text": " they're sent from a process that we have already got code execution inside."
    },
    {
      "Time_Start": 668.6,
      "Time_End": 674.24,
      "Text": " And because inside .NET, we've got access to the full process memory, we can actually"
    },
    {
      "Time_Start": 674.24,
      "Time_End": 682.64,
      "Text": " just go on and simply patch the functions that are relevant for sending ETW events."
    },
    {
      "Time_Start": 682.64,
      "Time_End": 690.36,
      "Text": " So for example, inside NTDLL, there's the ETWEventWrite function, and if we patch this"
    },
    {
      "Time_Start": 690.36,
      "Time_End": 697.4,
      "Text": " to just return, we can basically remove that ability or visibility of the ETW events for"
    },
    {
      "Time_Start": 697.4,
      "Time_End": 698.8,
      "Text": " the blue team."
    },
    {
      "Time_Start": 698.8,
      "Time_End": 702.8,
      "Text": " How that might look if we've got a patch process."
    },
    {
      "Time_Start": 702.8,
      "Time_End": 706.48,
      "Text": " So if we dive into it with something like Process Hacker, we might see something like"
    },
    {
      "Time_Start": 706.48,
      "Time_End": 718.4,
      "Text": " this, where we haven't actually got any events being reported up to the consumer."
    },
    {
      "Time_Start": 718.4,
      "Time_End": 723.36,
      "Text": " So what other kind of tools, what other kind of techniques and things are available or"
    },
    {
      "Time_Start": 723.36,
      "Time_End": 729.6800000000001,
      "Text": " at the blue team's disposal for detecting our .NET tradecraft?"
    },
    {
      "Time_Start": 729.6800000000001,
      "Time_End": 738.6,
      "Text": " Well, version 4.8 of .NET Framework introduced AMSI, and I'm sure many of you are familiar"
    },
    {
      "Time_Start": 738.6,
      "Time_End": 745.84,
      "Text": " with this, and basically it will be called, AMSI will be triggered any time an assembly"
    },
    {
      "Time_Start": 745.84,
      "Time_End": 749.6800000000001,
      "Text": " is loaded through something like assembly.load, it will basically allow the AV engine to go"
    },
    {
      "Time_Start": 749.6800000000001,
      "Time_End": 753.2800000000001,
      "Text": " on and scan those bytes of memory."
    },
    {
      "Time_Start": 753.2800000000001,
      "Time_End": 758.08,
      "Text": " This of course isn't a huge problem, as I already mentioned, .NET exposes the full process"
    },
    {
      "Time_Start": 758.08,
      "Time_End": 765.2800000000001,
      "Text": " memory, so you can leverage one of the traditional AMSI bypasses, something like the AMSI Scan"
    },
    {
      "Time_Start": 765.2800000000001,
      "Time_End": 772.96,
      "Text": " Buffer Patch, which Cobalt Strike actually offers through the AMSI Disable Malleable"
    },
    {
      "Time_Start": 772.96,
      "Time_End": 774.72,
      "Text": " Profile Config option."
    },
    {
      "Time_Start": 774.72,
      "Time_End": 777.5200000000001,
      "Text": " You can actually leverage this to just go on and patch AMSI."
    },
    {
      "Time_Start": 777.5200000000001,
      "Time_End": 784.44,
      "Text": " Now that in itself is fine from a red team perspective, but inadvertently you might also"
    },
    {
      "Time_Start": 784.5200000000001,
      "Time_End": 789.96,
      "Text": " be creating an indicator of compromise, because what we've started to see, and there is a"
    },
    {
      "Time_Start": 789.96,
      "Time_End": 795.8800000000001,
      "Text": " blog post referenced at the bottom by the guys again from FSQL Countercept, we started"
    },
    {
      "Time_Start": 795.8800000000001,
      "Time_End": 804.6800000000001,
      "Text": " to see blue teams actually using memory scanners to hunt for modifications of code sections,"
    },
    {
      "Time_Start": 804.6800000000001,
      "Time_End": 809.2800000000001,
      "Text": " so basically looking for patches to AMSI DLL and memory."
    },
    {
      "Time_Start": 809.36,
      "Time_End": 816.3199999999999,
      "Text": " So as a red teamer, you might want to leverage this technique cautiously, and once you have"
    },
    {
      "Time_Start": 816.3199999999999,
      "Time_End": 822.8,
      "Text": " leveraged it, go on and restore the original values inside the AMSI DLL to basically limit"
    },
    {
      "Time_Start": 822.8,
      "Time_End": 828.3199999999999,
      "Text": " the window for detection."
    },
    {
      "Time_Start": 828.3199999999999,
      "Time_End": 834.0799999999999,
      "Text": " So aside from that, how about detecting actual tools?"
    },
    {
      "Time_Start": 834.08,
      "Time_End": 842.8000000000001,
      "Text": " So one of the most common CLR harnesses that are used is the execute assembly method inside"
    },
    {
      "Time_Start": 842.8000000000001,
      "Time_End": 845.84,
      "Text": " Cobalt Strike."
    },
    {
      "Time_Start": 845.84,
      "Time_End": 851.36,
      "Text": " So I've mentioned this a couple of times, the way it basically works is it will inject"
    },
    {
      "Time_Start": 851.36,
      "Time_End": 857.9200000000001,
      "Text": " the CLR into an unmanaged surrogate process, and this is one of the probably the most widely"
    },
    {
      "Time_Start": 857.9200000000001,
      "Time_End": 862.9200000000001,
      "Text": " used tools for achieving .NET execution."
    },
    {
      "Time_Start": 862.9200000000001,
      "Time_End": 867.72,
      "Text": " Now there's a few kind of techniques that the blue teams can employ to actually go on"
    },
    {
      "Time_Start": 867.72,
      "Time_End": 872.7600000000001,
      "Text": " and detect tools like execute assembly."
    },
    {
      "Time_Start": 872.7600000000001,
      "Time_End": 879.08,
      "Text": " So the first one is basically down to the fork and run behavior, and so as I mentioned"
    },
    {
      "Time_Start": 879.08,
      "Time_End": 883.72,
      "Text": " before, the way it works is it will spawn a new process, inject the CLR inside it."
    },
    {
      "Time_Start": 883.72,
      "Time_End": 889.7600000000001,
      "Text": " Now that kind of behavior, from the blue team perspective, you might want to actually look"
    },
    {
      "Time_Start": 889.84,
      "Time_End": 895.76,
      "Text": " for suspicious process creations, anomalous parent-child relationships, so there's potential"
    },
    {
      "Time_Start": 895.76,
      "Time_End": 897.92,
      "Text": " to detect it that way."
    },
    {
      "Time_Start": 897.92,
      "Time_End": 905.4399999999999,
      "Text": " Additionally, there's no kind of ETW bypasses built inside execute assembly, so if you are,"
    },
    {
      "Time_Start": 905.4399999999999,
      "Time_End": 911.2,
      "Text": " if you have got an ETW consumer, you can collect all these events and look for the signatures"
    },
    {
      "Time_Start": 911.2,
      "Time_End": 915.68,
      "Text": " and things that I kind of mentioned before."
    },
    {
      "Time_Start": 915.7600000000001,
      "Time_End": 923.6,
      "Text": " Aside from that, we might also, if we're monitoring for module loads, is maintain like a baseline"
    },
    {
      "Time_Start": 923.6,
      "Time_End": 930.6800000000001,
      "Text": " of processes that are actually loading the CLR, so that every time execute assembly runs,"
    },
    {
      "Time_Start": 930.6800000000001,
      "Time_End": 936.2800000000001,
      "Text": " it will cause the CLR to be loaded into the surrogate process, and several modules will"
    },
    {
      "Time_Start": 936.2800000000001,
      "Time_End": 942.1600000000001,
      "Text": " actually be loaded inside the process, so things like CLRJIT.dll, CLR.dll, and whatnot."
    },
    {
      "Time_Start": 942.1999999999999,
      "Time_End": 949.0,
      "Text": " So, if we're maintaining a baseline of processes that will legitimately load the CLR, and the"
    },
    {
      "Time_Start": 949.0,
      "Time_End": 955.9599999999999,
      "Text": " operator is not blending in with their spawn to, then potentially we might have an indicator"
    },
    {
      "Time_Start": 955.9599999999999,
      "Time_End": 959.8,
      "Text": " of some .NET post-exploitation behavior happening."
    },
    {
      "Time_Start": 962.28,
      "Time_End": 968.24,
      "Text": " And then finally, I also spent some time actually digging into how execute assembly works, and"
    },
    {
      "Time_Start": 968.24,
      "Time_End": 973.96,
      "Text": " what I discovered were, there are a number of specific IOCs in this behavior, so because of"
    },
    {
      "Time_Start": 973.96,
      "Time_End": 980.2,
      "Text": " this fork and run kind of methodology that it uses, and that basically means it's going to"
    },
    {
      "Time_Start": 980.2,
      "Time_End": 987.44,
      "Text": " require process injection, so within Kerbal Strike, you can actually customize the process"
    },
    {
      "Time_Start": 987.44,
      "Time_End": 992.52,
      "Text": " injection techniques on Malibu, so you can customize them, so you can control things like"
    },
    {
      "Time_Start": 992.56,
      "Time_End": 1000.3199999999999,
      "Text": " the page protections, so for example, you can basically say a page should start read-write-execute,"
    },
    {
      "Time_Start": 1000.3199999999999,
      "Time_End": 1009.1999999999999,
      "Text": " or can be read-write-execute, or a page can end up read-execute, and this is done through the"
    },
    {
      "Time_Start": 1009.1999999999999,
      "Time_End": 1013.4399999999999,
      "Text": " start RWX and use RWX Malibu profile options."
    },
    {
      "Time_Start": 1014.24,
      "Time_End": 1025.4,
      "Text": " Basically, what that means is that our .NET binary will always be sitting inside a page that is"
    },
    {
      "Time_Start": 1025.4,
      "Time_End": 1032.64,
      "Text": " allocated read-write-execute, or read-execute in the surrogate process, so if as a blue team, we"
    },
    {
      "Time_Start": 1032.64,
      "Time_End": 1039.96,
      "Text": " start to hunt for firstly processes that are loading the CLR, and secondly, once we've found those"
    },
    {
      "Time_Start": 1039.96,
      "Time_End": 1048.16,
      "Text": " processes, pages inside them that are read-write-execute, or read-execute, and have a .NET PE"
    },
    {
      "Time_Start": 1048.16,
      "Time_End": 1056.16,
      "Text": " binary inside of them, then we can actually not only detect when a .NET post-exploitation, but we"
    },
    {
      "Time_Start": 1056.16,
      "Time_End": 1063.4,
      "Text": " can also actually carve out the .NET PE. Now, you might think, well, what about things like"
    },
    {
      "Time_Start": 1064.1200000000001,
      "Time_End": 1070.68,
      "Text": " assembly.load when it happens legitimately inside the CLR? Well, actually, just because of the way"
    },
    {
      "Time_Start": 1070.68,
      "Time_End": 1077.3200000000002,
      "Text": " the CLR works, the pages with things like assembly.load are never actually executable"
    },
    {
      "Time_Start": 1077.3200000000002,
      "Time_End": 1083.3200000000002,
      "Text": " because they're jitted, so at least from my testing, this becomes a very specific behavior"
    },
    {
      "Time_Start": 1084.92,
      "Time_End": 1091.16,
      "Text": " through execute assembly and becomes a way to actually detect it. So I can show you a demo of"
    },
    {
      "Time_Start": 1091.16,
      "Time_End": 1114.6000000000001,
      "Text": " this. So I'm just going to try and screenshot. Let's try this. Can everybody see my video?"
    },
    {
      "Time_Start": 1114.6000000000001,
      "Time_End": 1124.44,
      "Text": " Yes? Excellent. Okay. I have videoed all these because I was a little bit nervous about doing"
    },
    {
      "Time_Start": 1124.44,
      "Time_End": 1131.4,
      "Text": " them over a live stream, but basically, I've got Cobalt Strike running with a beacon up here,"
    },
    {
      "Time_Start": 1132.0400000000002,
      "Time_End": 1137.88,
      "Text": " and then I've got a very simple, I'm just showing you the code for a very simple .NET binary,"
    },
    {
      "Time_Start": 1138.6000000000001,
      "Time_End": 1143.72,
      "Text": " .NET tool that we're going to run through execute assembly on the endpoint."
    },
    {
      "Time_Start": 1145.2400000000002,
      "Time_End": 1150.7600000000002,
      "Text": " Now, all this tool does, as you can see, is just sit there printing something to the console."
    },
    {
      "Time_Start": 1151.96,
      "Time_End": 1159.5600000000002,
      "Text": " So basically, I'm just going to run this. So we're going to run it on this endpoint through"
    },
    {
      "Time_Start": 1159.5600000000002,
      "Time_End": 1167.88,
      "Text": " execute assembly. Okay. And you'll see, all it does is just print sleeping. The reason I've"
    },
    {
      "Time_Start": 1167.88,
      "Time_End": 1173.72,
      "Text": " done this is just so we can leave the process running and kind of show you how to kind of pull"
    },
    {
      "Time_Start": 1173.72,
      "Time_End": 1182.52,
      "Text": " this out. So inside the Malibu profile, the spawn to is set to background task host by XE,"
    },
    {
      "Time_Start": 1182.52,
      "Time_End": 1192.28,
      "Text": " which we can see is now spawned in process hacker. So I wrote a tool called Sniper, which will"
    },
    {
      "Time_Start": 1192.28,
      "Time_End": 1199.8,
      "Text": " basically scan all the processes on an endpoint. I'll just pause this here. It will scan all the"
    },
    {
      "Time_Start": 1199.8,
      "Time_End": 1205.6399999999999,
      "Text": " processes on an endpoint, and it will look for the ones that are using, that have CLR.dll loaded."
    },
    {
      "Time_Start": 1206.52,
      "Time_End": 1212.6,
      "Text": " And then when it finds those processes, it will then walk through virtually allocated memory,"
    },
    {
      "Time_Start": 1213.72,
      "Time_End": 1221.32,
      "Text": " looking for pages with read, write, execute, or read, execute page permissions. And if it"
    },
    {
      "Time_Start": 1221.32,
      "Time_End": 1227.1599999999999,
      "Text": " finds them, it will then look at the start of those pages, looking for PE binary headers."
    },
    {
      "Time_Start": 1227.72,
      "Time_End": 1233.24,
      "Text": " Okay. And what you can see here is that the Sniper tool has basically found a process called"
    },
    {
      "Time_Start": 1233.8000000000002,
      "Time_End": 1242.92,
      "Text": " background task host. It's shown that it's loaded the CLR.dll. And then about midway through on this"
    },
    {
      "Time_Start": 1242.92,
      "Time_End": 1247.8000000000002,
      "Text": " command prompt, it says found PE binary in region, and let's give the base address. And then it says"
    },
    {
      "Time_Start": 1247.8000000000002,
      "Time_End": 1255.48,
      "Text": " carving PE from memory. So I'll let this run through, just this bit that I've highlighted here."
    },
    {
      "Time_Start": 1257.3200000000002,
      "Time_End": 1259.88,
      "Text": " So if we take a look at that actual page in memory,"
    },
    {
      "Time_Start": 1260.6000000000001,
      "Time_End": 1267.4,
      "Text": " so I'm just going to use Process Hacker to actually find the right page."
    },
    {
      "Time_Start": 1270.92,
      "Time_End": 1278.44,
      "Text": " So just here. So I'll just pause this here. So I've used Process Hacker basically just to show"
    },
    {
      "Time_Start": 1278.44,
      "Time_End": 1282.92,
      "Text": " you what the memory looks like. And at the page that it's identified, we can see we've actually"
    },
    {
      "Time_Start": 1282.92,
      "Time_End": 1290.92,
      "Text": " got a PE binary, which is, has been caught using the Sniper tool has actually been carved"
    },
    {
      "Time_Start": 1290.92,
      "Time_End": 1300.52,
      "Text": " and written to disk. So we can take a look at that actual PE. So you can see here, it writes"
    },
    {
      "Time_Start": 1300.52,
      "Time_End": 1305.88,
      "Text": " it to a file called out.exe. So if I run this, now, obviously, I wouldn't recommend running"
    },
    {
      "Time_Start": 1305.88,
      "Time_End": 1311.4,
      "Text": " any arbitrary PE, you've just carved from memory in a real kind of blue team investigation. But"
    },
    {
      "Time_Start": 1311.4,
      "Time_End": 1315.16,
      "Text": " given I know what it is, and you know, it's relatively safe to do, we can see it's actually"
    },
    {
      "Time_Start": 1315.16,
      "Time_End": 1321.16,
      "Text": " the original dotnet PE binary that we ran through Cobalt Strike with execute assembly."
    },
    {
      "Time_Start": 1322.0400000000002,
      "Time_End": 1328.2800000000002,
      "Text": " So now we've got a great way to not only detect execute assembly, but also"
    },
    {
      "Time_Start": 1330.6000000000001,
      "Time_End": 1335.3200000000002,
      "Text": " recover the binaries that are being run through Cobalt Strike."
    },
    {
      "Time_Start": 1341.72,
      "Time_End": 1357.0,
      "Text": " So hopefully, you can see the slides again now. So as a, if we're, if we're a red teamer,"
    },
    {
      "Time_Start": 1357.0,
      "Time_End": 1363.8000000000002,
      "Text": " and we're looking to actually improve our tradecraft with execute assembly, there's a"
    },
    {
      "Time_Start": 1363.8000000000002,
      "Time_End": 1369.64,
      "Text": " couple of things that we might want to consider. So firstly, we might want to actually try and"
    },
    {
      "Time_Start": 1369.64,
      "Time_End": 1376.92,
      "Text": " select a surrogate process that will legitimately be loading the CLR. And this can help us avoid"
    },
    {
      "Time_Start": 1376.92,
      "Time_End": 1385.24,
      "Text": " those CLR load baselines. Secondly, we might actually want to stomp the dotnet PE headers"
    },
    {
      "Time_Start": 1386.76,
      "Time_End": 1392.8400000000001,
      "Text": " inside of our dotnet binary, because they're not actually even used. And then we might want to"
    },
    {
      "Time_Start": 1393.72,
      "Time_End": 1401.32,
      "Text": " actually go on and reset the page permissions. So maybe we want to reset them to read write so that"
    },
    {
      "Time_Start": 1401.32,
      "Time_End": 1405.8799999999999,
      "Text": " we actually blend in with the behavior of things like assembly dot load. Because as I mentioned"
    },
    {
      "Time_Start": 1405.8799999999999,
      "Time_End": 1410.36,
      "Text": " before, the page never actually needs to be execute, never needs to actually have the"
    },
    {
      "Time_Start": 1410.36,
      "Time_End": 1418.6,
      "Text": " execute permission because the CLR will jitter. So how can we actually go and find suitable"
    },
    {
      "Time_Start": 1419.3200000000002,
      "Time_End": 1429.4,
      "Text": " process surrogate processes? Well, I did this using Sysmon. So Sysmon event ID seven will"
    },
    {
      "Time_Start": 1429.4,
      "Time_End": 1435.8000000000002,
      "Text": " basically show module loads. So we can use Sysmon offensively to actually go on and look for"
    },
    {
      "Time_Start": 1435.8000000000002,
      "Time_End": 1442.8400000000001,
      "Text": " processes that are loading the CLR. So a good example of this is background task host, which"
    },
    {
      "Time_Start": 1442.84,
      "Time_End": 1451.8799999999999,
      "Text": " you can see is loading the CLR dot DLL. So this might potentially be a good option to use in our"
    },
    {
      "Time_Start": 1451.8799999999999,
      "Time_End": 1460.6799999999998,
      "Text": " spawn to configuration within Cobalt Strike. Secondly, if we want to actually stomp the PE"
    },
    {
      "Time_Start": 1460.6799999999998,
      "Time_End": 1468.12,
      "Text": " headers, again, what we can do is bootstrap something like this into our dotnet code. So"
    },
    {
      "Time_Start": 1468.1200000000001,
      "Time_End": 1473.72,
      "Text": " we would bootstrap this into every dotnet binary that we run. And this will basically just firstly"
    },
    {
      "Time_Start": 1473.72,
      "Time_End": 1481.0800000000002,
      "Text": " recover the base address of the process. It will then overwrite the first 132 bytes of memory"
    },
    {
      "Time_Start": 1481.72,
      "Time_End": 1488.8400000000001,
      "Text": " from the base address such that it basically nukes the PE header. And then we would go on and reset"
    },
    {
      "Time_Start": 1488.8400000000001,
      "Time_End": 1495.48,
      "Text": " those page permissions to be read write. And this might actually help us avoid detection from"
    },
    {
      "Time_Start": 1495.88,
      "Time_End": 1501.88,
      "Text": " memory scanners that are looking for dotnet binaries in memory."
    },
    {
      "Time_Start": 1506.68,
      "Time_End": 1512.84,
      "Text": " So I guess to summarize what I'm trying to show or trying to say, and we've covered a few"
    },
    {
      "Time_Start": 1512.84,
      "Time_End": 1519.48,
      "Text": " different evasions there, to actually go on and maximize our dotnet tradecraft, we might want to,"
    },
    {
      "Time_Start": 1520.44,
      "Time_End": 1526.2,
      "Text": " you know, we might need to bypass AMSI, we might need to bypass ECW, we might need to stomp PE"
    },
    {
      "Time_Start": 1526.2,
      "Time_End": 1532.52,
      "Text": " headers, we might need to reset page permissions, we might need to obfuscate our binaries. So a lot"
    },
    {
      "Time_Start": 1532.52,
      "Time_End": 1539.48,
      "Text": " of different things that we might need to do to try and keep our dotnet post-exploitation"
    },
    {
      "Time_Start": 1539.48,
      "Time_End": 1546.6,
      "Text": " tradecraft invisible. If we're trying to actually manually apply these to every dotnet assembly that"
    },
    {
      "Time_Start": 1546.6000000000001,
      "Time_End": 1553.0000000000002,
      "Text": " we run, it's probably not going to be feasible. So I guess like fundamentally what I'm trying to"
    },
    {
      "Time_Start": 1553.0000000000002,
      "Time_End": 1559.5600000000002,
      "Text": " show is that because we want to bootstrap all our code and dynamically build all our code,"
    },
    {
      "Time_Start": 1560.7600000000002,
      "Time_End": 1565.3200000000002,
      "Text": " then in an automated way, this is very much in the DevOps territory."
    },
    {
      "Time_Start": 1568.8400000000001,
      "Time_End": 1574.92,
      "Text": " So I started to kind of look at this problem and it seemed to me that the best solution"
    },
    {
      "Time_Start": 1575.5600000000002,
      "Time_End": 1582.52,
      "Text": " was to actually try and integrate all my tools inside the CI-CD pipeline, and that would hopefully"
    },
    {
      "Time_Start": 1582.52,
      "Time_End": 1588.8400000000001,
      "Text": " allow me to weaponize them on every build. And before I dive into my approach and the tools that"
    },
    {
      "Time_Start": 1588.8400000000001,
      "Time_End": 1593.72,
      "Text": " I kind of created to do this, there has been some work in this space already which you should"
    },
    {
      "Time_Start": 1593.72,
      "Time_End": 1599.3200000000002,
      "Text": " probably recognize. So firstly, there was a really interesting blog post from Adam called"
    },
    {
      "Time_Start": 1599.32,
      "Time_End": 1606.04,
      "Text": " Building, Modifying, and Packing with Azure DevOps. And secondly, there was also another"
    },
    {
      "Time_Start": 1606.04,
      "Time_End": 1613.0,
      "Text": " blog post on the MDSet blog called Offensive Development with GitHub Actions, which again"
    },
    {
      "Time_Start": 1614.6,
      "Time_End": 1620.12,
      "Text": " uses this CI-CD pipeline approach to automatically build and obfuscate all your tools."
    },
    {
      "Time_Start": 1622.9199999999998,
      "Time_End": 1627.24,
      "Text": " But for me, rather than trying to use something like one of the existing pipelines,"
    },
    {
      "Time_Start": 1627.24,
      "Time_End": 1633.56,
      "Text": " something like GitHub Actions or Azure DevOps, the approach that I took was basically to try and"
    },
    {
      "Time_Start": 1633.56,
      "Time_End": 1638.36,
      "Text": " build my own custom one. And the reason for this was mainly because it would give me greater"
    },
    {
      "Time_Start": 1638.36,
      "Time_End": 1647.56,
      "Text": " flexibility and it would also allow me to easily integrate other third-party tools. So to do this,"
    },
    {
      "Time_Start": 1647.56,
      "Time_End": 1655.64,
      "Text": " I basically ended up building a .NET Core Web API project. The reason I chose .NET Core was"
    },
    {
      "Time_Start": 1655.64,
      "Time_End": 1662.44,
      "Text": " because it's platform agnostic, you can use it in Docker, and it's also got a really cool"
    },
    {
      "Time_Start": 1662.44,
      "Time_End": 1668.2,
      "Text": " compiler built inside it called Roslyn, which basically acts, at least in my projects,"
    },
    {
      "Time_Start": 1668.2,
      "Time_End": 1676.3600000000001,
      "Text": " as the core engine for building and manipulating all my tools. And then finally, I was also actually"
    },
    {
      "Time_Start": 1676.3600000000001,
      "Time_End": 1685.5600000000002,
      "Text": " able to integrate this pipeline with things like Donut. So that basically then gave me the ability"
    },
    {
      "Time_Start": 1685.72,
      "Time_End": 1692.8400000000001,
      "Text": " using Donut's .NET Core bindings to actually turn any of my projects or any of my code"
    },
    {
      "Time_Start": 1693.8000000000002,
      "Time_End": 1697.96,
      "Text": " into shellcode. So that basically means that I can also use them"
    },
    {
      "Time_Start": 1699.16,
      "Time_End": 1701.88,
      "Text": " within any kind of custom loaders that I might have."
    },
    {
      "Time_Start": 1705.0800000000002,
      "Time_End": 1710.92,
      "Text": " So the project that I created, the pipeline that I created was basically a tool called"
    },
    {
      "Time_Start": 1711.48,
      "Time_End": 1719.4,
      "Text": " Covert Toolsmith. And I'm hoping to actually release this at some point in the near future."
    },
    {
      "Time_Start": 1720.04,
      "Time_End": 1727.16,
      "Text": " So there's three kind of core components to it. So firstly, there's a loader, which ends up getting"
    },
    {
      "Time_Start": 1727.16,
      "Time_End": 1733.3200000000002,
      "Text": " run on the target endpoint using a CLR harness. So something like execute assembly or any kind of"
    },
    {
      "Time_Start": 1733.3200000000002,
      "Time_End": 1739.4,
      "Text": " custom CLR harness that you might have. And this is basically what is used to bootstrap all the code."
    },
    {
      "Time_Start": 1740.1200000000001,
      "Time_End": 1745.0,
      "Text": " So you can use it for adding, like bootstrapping an ECW bypass, or"
    },
    {
      "Time_Start": 1746.6000000000001,
      "Time_End": 1754.2800000000002,
      "Text": " keying your binary before it actually gets run. And I'll talk a little bit in more detail around"
    },
    {
      "Time_Start": 1754.2800000000002,
      "Time_End": 1760.6000000000001,
      "Text": " how that works later. Then there's also the projects. So these are basically all the kind"
    },
    {
      "Time_Start": 1760.6000000000001,
      "Time_End": 1765.24,
      "Text": " of .NET tools, whether those are public tools or whether they're your own kind of in-house"
    },
    {
      "Time_Start": 1765.24,
      "Time_End": 1770.92,
      "Text": " custom tools. So things like a ghost pack, or maybe any kind of artifact loaders and things"
    },
    {
      "Time_Start": 1770.92,
      "Time_End": 1775.96,
      "Text": " that we might want to drop to disk or execute in memory. And then the final component is the"
    },
    {
      "Time_Start": 1775.96,
      "Time_End": 1783.16,
      "Text": " actual engines. This is basically the .NET core web API that will receive requests for projects."
    },
    {
      "Time_Start": 1783.16,
      "Time_End": 1788.92,
      "Text": " It will then go on and consume the project source code, bootstrap them, compile them,"
    },
    {
      "Time_Start": 1788.92,
      "Time_End": 1795.96,
      "Text": " protect those binaries, and then return the compiled and encrypted project back to the user,"
    },
    {
      "Time_Start": 1795.96,
      "Time_End": 1802.1200000000001,
      "Text": " back to the loader. The loader, there is a lot of flexibility in this. I've kind of tried to"
    },
    {
      "Time_Start": 1802.1200000000001,
      "Time_End": 1807.72,
      "Text": " build it such that you could use it in different ways, because it's all done through API requests."
    },
    {
      "Time_Start": 1808.6000000000001,
      "Time_End": 1812.92,
      "Text": " But basically the loader is optional. So you can, if you wanted to say, just recover"
    },
    {
      "Time_Start": 1813.88,
      "Time_End": 1823.0800000000002,
      "Text": " an obfuscated or keyed copy of like Rubust or a copy of whatever project, you could do that,"
    },
    {
      "Time_Start": 1823.0800000000002,
      "Time_End": 1827.16,
      "Text": " and then you could run it on an endpoint, or you could use it with a CLR harness,"
    },
    {
      "Time_Start": 1827.16,
      "Time_End": 1834.1200000000001,
      "Text": " however you wanted to approach it, really. So the architecture looks a little bit like this,"
    },
    {
      "Time_Start": 1834.1200000000001,
      "Time_End": 1840.28,
      "Text": " and this is like an example of one way you might be able to use it. So I also tried to make it"
    },
    {
      "Time_Start": 1841.24,
      "Time_End": 1848.44,
      "Text": " like C2 agnostic, because it is just a web API. So as long as there's some way to script inside"
    },
    {
      "Time_Start": 1848.44,
      "Time_End": 1854.2,
      "Text": " your C2, then you could basically take advantage of it, because we use multiple C2s, and we've got"
    },
    {
      "Time_Start": 1854.2,
      "Time_End": 1859.8799999999999,
      "Text": " our own implant and things as well. But if you're using it with something like Cobalt Strike,"
    },
    {
      "Time_Start": 1859.8799999999999,
      "Time_End": 1866.92,
      "Text": " I basically wrote like an aggressor script that will firstly make a request to the COVID"
    },
    {
      "Time_Start": 1867.0,
      "Time_End": 1873.88,
      "Text": " Toolsmith API, saying, I want this tool, whether that tool is, you know, Safety Cats, Rubust, or"
    },
    {
      "Time_Start": 1874.44,
      "Time_End": 1880.3600000000001,
      "Text": " whatever, you know, projects that you want. And then COVID Toolsmith will build that tool,"
    },
    {
      "Time_Start": 1880.3600000000001,
      "Time_End": 1889.4,
      "Text": " modify it, obfuscate it, bootstrap it as needed, return that tool to the actual end, the C2 client."
    },
    {
      "Time_Start": 1890.2,
      "Time_End": 1894.76,
      "Text": " And then the C2 client can basically use, run that however you want. It can,"
    },
    {
      "Time_Start": 1895.72,
      "Time_End": 1900.28,
      "Text": " you deliver it to the endpoint and use like a custom CLR harness, or use execute assembly,"
    },
    {
      "Time_Start": 1900.28,
      "Time_End": 1907.48,
      "Text": " whatever kind of harness you want to actually use to execute it. I'll show you a little example"
    },
    {
      "Time_Start": 1908.12,
      "Time_End": 1911.96,
      "Text": " in a few slides time, so you can kind of get an idea of how it actually works."
    },
    {
      "Time_Start": 1912.92,
      "Time_End": 1919.24,
      "Text": " And then in the end, the actual compiled and protected tool is run on the actual endpoint"
    },
    {
      "Time_Start": 1919.32,
      "Time_End": 1926.1200000000001,
      "Text": " in memory. And it might say, for example, if it's keyed to the endpoint, it can brute force"
    },
    {
      "Time_Start": 1926.1200000000001,
      "Time_End": 1931.56,
      "Text": " its own decryption key and run it in memory there. It can apply the ETW bypasses and things,"
    },
    {
      "Time_Start": 1931.56,
      "Time_End": 1940.2,
      "Text": " anything that's been bootstrapped onto it. In order to kind of build tools, there is a little"
    },
    {
      "Time_Start": 1940.2,
      "Time_End": 1945.08,
      "Text": " bit of configuration that needs to happen in advance. Basically, what we need to do is tell"
    },
    {
      "Time_Start": 1945.08,
      "Time_End": 1950.04,
      "Text": " Rosalind the resources that are required to actually go on and compile that tool."
    },
    {
      "Time_Start": 1950.6799999999998,
      "Time_End": 1956.04,
      "Text": " So every project has got a little JSON configuration file that is associated with it."
    },
    {
      "Time_Start": 1956.04,
      "Time_End": 1962.28,
      "Text": " And it basically says, in this example, when you compile this project, use all these references"
    },
    {
      "Time_Start": 1964.76,
      "Time_End": 1970.36,
      "Text": " to basically build it. And then each of these config files are serialized and stored in like"
    },
    {
      "Time_Start": 1970.3600000000001,
      "Time_End": 1977.72,
      "Text": " a small SQLite database that is within the Docker container. And these are basically then"
    },
    {
      "Time_Start": 1978.3600000000001,
      "Time_End": 1981.3200000000002,
      "Text": " accessed on every compilation request for that project."
    },
    {
      "Time_Start": 1982.92,
      "Time_End": 1990.2800000000002,
      "Text": " So I'll show you again a little demo of how we can run a .NET tool using this pipeline."
    },
    {
      "Time_Start": 1990.28,
      "Time_End": 2006.6,
      "Text": " So hopefully, everybody can see that. I can see there's a few questions. I will"
    },
    {
      "Time_Start": 2008.12,
      "Time_End": 2018.68,
      "Text": " kind of address these at the end. So first, I'm just going to reset"
    },
    {
      "Time_Start": 2019.16,
      "Time_End": 2026.92,
      "Text": " the parent process. Basically, just so we can see, I'm going to show you how this works in that."
    },
    {
      "Time_Start": 2027.48,
      "Time_End": 2033.8,
      "Text": " If we were using something like execute assembly, it would spawn a new process where the"
    },
    {
      "Time_Start": 2035.24,
      "Time_End": 2042.1200000000001,
      "Text": " child process, whatever is defined in our spawn to, is associated with the parent of beacon,"
    },
    {
      "Time_Start": 2042.1200000000001,
      "Time_End": 2045.96,
      "Text": " because we're not doing any people spoofing. So I'm just going to show you this initially"
    },
    {
      "Time_Start": 2046.92,
      "Time_End": 2052.28,
      "Text": " to show you how it might work with execute assembly. So I'm going to run a binary,"
    },
    {
      "Time_Start": 2052.28,
      "Time_End": 2057.56,
      "Text": " and we can see we've run, you can see on the left-hand side, we've run Rubus. And on,"
    },
    {
      "Time_Start": 2059.0,
      "Time_End": 2063.4,
      "Text": " let's just backtrack a second. On the right-hand side, in side process hacker,"
    },
    {
      "Time_Start": 2063.4,
      "Time_End": 2070.36,
      "Text": " we've got background task host spawning as a child of beacon.exe. Okay, so that is not ideal."
    },
    {
      "Time_Start": 2070.92,
      "Time_End": 2075.6400000000003,
      "Text": " So what I'm going to show you now is actually running using Covert Toolsmith."
    },
    {
      "Time_Start": 2076.92,
      "Time_End": 2082.52,
      "Text": " So I'm going to tell Covert Toolsmith to run Rubus. I'm just going to give it some arguments."
    },
    {
      "Time_Start": 2085.48,
      "Time_End": 2091.8,
      "Text": " And what you'll see here is we ran Rubus, but there was no child processes created."
    },
    {
      "Time_Start": 2092.6800000000003,
      "Time_End": 2098.92,
      "Text": " Now, what has actually happened is, in the background, is Covert Toolsmith has"
    },
    {
      "Time_Start": 2099.88,
      "Time_End": 2109.7200000000003,
      "Text": " made a request to the web API. It's recovered a .NET binary, which has been bootstrapped with"
    },
    {
      "Time_Start": 2109.7200000000003,
      "Time_End": 2119.1600000000003,
      "Text": " AMSI, ECW. It's obfuscated and encrypted. And then it's executed that process"
    },
    {
      "Time_Start": 2122.5200000000004,
      "Time_End": 2127.4800000000005,
      "Text": " actually inside the beacon. So I'll just skip that for a second."
    },
    {
      "Time_Start": 2129.2400000000002,
      "Time_End": 2136.76,
      "Text": " And basically, we've used our own custom CLR harness to inject that inside beacon's memory,"
    },
    {
      "Time_Start": 2136.84,
      "Time_End": 2139.88,
      "Text": " and run it all within beacon, so there's no additional processes created."
    },
    {
      "Time_Start": 2141.88,
      "Time_End": 2145.4,
      "Text": " And afterwards, actually, we unload the CLR to kind of clean it down."
    },
    {
      "Time_Start": 2146.1200000000003,
      "Time_End": 2153.32,
      "Text": " So if we take a look at the binary that comes back from Covert Toolsmith, before it is bootstrapped"
    },
    {
      "Time_Start": 2153.32,
      "Time_End": 2160.36,
      "Text": " into the reflective DLL that is used in our custom CLR harness, it's dropped to disk temporarily."
    },
    {
      "Time_Start": 2160.36,
      "Time_End": 2166.84,
      "Text": " So I basically dropped to disk on the C2 client, not on the actual endpoint."
    },
    {
      "Time_Start": 2167.6400000000003,
      "Time_End": 2171.4,
      "Text": " But I'm just going to recover that, so we can take a look, so you can actually"
    },
    {
      "Time_Start": 2171.4,
      "Time_End": 2176.28,
      "Text": " see what that binary looks like, just to show you that it's an obfuscated one as well."
    },
    {
      "Time_Start": 2177.4,
      "Time_End": 2185.2400000000002,
      "Text": " So I'm just going to pop that up in dot peak. And you can see, firstly, the assembly name is"
    },
    {
      "Time_Start": 2185.2400000000002,
      "Time_End": 2190.6800000000003,
      "Text": " completely obfuscated. And you can see none of the class names and things are visible as well."
    },
    {
      "Time_Start": 2192.76,
      "Time_End": 2198.76,
      "Text": " And that is basically how it works. And that is a nice little approach for executing our own"
    },
    {
      "Time_Start": 2198.76,
      "Time_End": 2207.32,
      "Text": " obfuscated bootstrapped binaries in process, without using that kind of fork and run"
    },
    {
      "Time_Start": 2207.96,
      "Time_End": 2215.6400000000003,
      "Text": " technique that Cobalt Strike uses. So"
    },
    {
      "Time_Start": 2221.88,
      "Time_End": 2226.36,
      "Text": " whenever, basically what I want to show is that every time we want to run a tool,"
    },
    {
      "Time_Start": 2227.32,
      "Time_End": 2231.56,
      "Text": " we want to build it before we run it. So it's completely fresh every single time."
    },
    {
      "Time_Start": 2231.56,
      "Time_End": 2238.2799999999997,
      "Text": " It's completely obfuscated every iteration. If we take this approach, it makes it much harder"
    },
    {
      "Time_Start": 2239.08,
      "Time_End": 2243.0,
      "Text": " for blue teams to triage the use of tools and artifacts across the network."
    },
    {
      "Time_Start": 2243.56,
      "Time_End": 2247.56,
      "Text": " And in turn, that increases their response time and their investigation with time."
    },
    {
      "Time_Start": 2249.48,
      "Time_End": 2257.72,
      "Text": " So in addition to some kind of custom obfuscation that occurs within the pipeline,"
    },
    {
      "Time_Start": 2257.7200000000003,
      "Time_End": 2264.6000000000004,
      "Text": " it also integrates with Confuser X. So Confuser X is actually really nice in that it's got"
    },
    {
      "Time_Start": 2264.6000000000004,
      "Time_End": 2271.5600000000004,
      "Text": " an API. So we leverage that API to rename all the resources, add control for obfuscation,"
    },
    {
      "Time_Start": 2272.28,
      "Time_End": 2276.5200000000004,
      "Text": " add anti-tampering, anti-debugging, that kind of stuff, encrypt all the resources and all the"
    },
    {
      "Time_Start": 2276.5200000000004,
      "Time_End": 2281.0000000000005,
      "Text": " constants to make our binary much harder to analyze, even though we're never touching disk"
    },
    {
      "Time_Start": 2281.0,
      "Time_End": 2288.84,
      "Text": " with it and we're just reflectively running it inside memory. So to do this, basically,"
    },
    {
      "Time_Start": 2288.84,
      "Time_End": 2295.32,
      "Text": " Confuser X has got like a small config option that is built inside the Cobalt Toolsmith web API,"
    },
    {
      "Time_Start": 2295.32,
      "Time_End": 2302.68,
      "Text": " and we can just pick and choose which protections we actually want to run. And then Roslyn will"
    },
    {
      "Time_Start": 2302.68,
      "Time_End": 2310.52,
      "Text": " basically compile whatever tool, whether that's Rubus or whatever, into the kind of intermediate"
    },
    {
      "Time_Start": 2310.52,
      "Time_End": 2317.24,
      "Text": " language. It will then run them through Confuser X's engine, and then it will take that obfuscated"
    },
    {
      "Time_Start": 2317.24,
      "Time_End": 2322.52,
      "Text": " binary and pass it down to the C2 client before it ends up getting delivered to the compromised"
    },
    {
      "Time_Start": 2322.52,
      "Time_End": 2330.7599999999998,
      "Text": " endpoint. Aside from obfuscation, we might actually want to invest, spend some time"
    },
    {
      "Time_Start": 2332.92,
      "Time_End": 2339.8,
      "Text": " kind of protecting our actual individual binaries, because as I mentioned before,"
    },
    {
      "Time_Start": 2339.8,
      "Time_End": 2346.6800000000003,
      "Text": " there is like a significant R&D investment from Red Teams, and we don't want all our kind of"
    },
    {
      "Time_Start": 2346.6800000000003,
      "Time_End": 2352.28,
      "Text": " intellectual property to end up on virus total. So because we have this, if we're using a pipeline,"
    },
    {
      "Time_Start": 2352.28,
      "Time_End": 2357.2400000000002,
      "Text": " because we've now got this ability to programmatically modify every tool or every"
    },
    {
      "Time_Start": 2357.2400000000002,
      "Time_End": 2364.1200000000003,
      "Text": " artifact that we create, we can also key them. So what I mean by keying is, as a concept,"
    },
    {
      "Time_Start": 2364.12,
      "Time_End": 2370.52,
      "Text": " we're basically using like a local or remote resource to build a decryption key."
    },
    {
      "Time_Start": 2371.64,
      "Time_End": 2377.24,
      "Text": " And so as you can find this described better under MITRE ATT&CK's execution guardrails"
    },
    {
      "Time_Start": 2377.24,
      "Time_End": 2383.3199999999997,
      "Text": " tactic. But basically what we're doing is, let's say, for example, we want to create like a DLL"
    },
    {
      "Time_Start": 2383.3199999999997,
      "Time_End": 2388.8399999999997,
      "Text": " that we're using for persistence or a DLL that we're using for lateral movement. Using the"
    },
    {
      "Time_Start": 2388.84,
      "Time_End": 2397.8,
      "Text": " pipeline, we can do that to actually key it such that that DLL only ever executes on that endpoint,"
    },
    {
      "Time_Start": 2397.8,
      "Time_End": 2403.56,
      "Text": " because the decryption key material for running the main contents, the core kind of contents of"
    },
    {
      "Time_Start": 2403.56,
      "Time_End": 2409.7200000000003,
      "Text": " the DLL is derived from the environment. So maybe we take the user's username, the domain name,"
    },
    {
      "Time_Start": 2409.7200000000003,
      "Time_End": 2415.0,
      "Text": " the computer name, and we kind of add all these together into an algorithm. Maybe we take directory"
    },
    {
      "Time_Start": 2415.0,
      "Time_End": 2420.76,
      "Text": " listings from program files, that kind of stuff. And we gather all this information, we store it in the"
    },
    {
      "Time_Start": 2422.44,
      "Time_End": 2428.92,
      "Text": " the kind of Covert Toolsmith backend, so we know what that endpoint looks like,"
    },
    {
      "Time_Start": 2428.92,
      "Time_End": 2433.8,
      "Text": " and we use it to build a decryption key for our core kind of functionality."
    },
    {
      "Time_Start": 2434.92,
      "Time_End": 2441.4,
      "Text": " And that is basically how it works. So I've got like a little collection tool that"
    },
    {
      "Time_Start": 2441.4,
      "Time_End": 2448.44,
      "Text": " runs, and it will firstly recover a bunch of information about the endpoint. It will then"
    },
    {
      "Time_Start": 2448.44,
      "Time_End": 2453.88,
      "Text": " submit it to the Covert Toolsmith API, or alternatively, it's actually, with Cobalt Strike, it's actually"
    },
    {
      "Time_Start": 2453.88,
      "Time_End": 2460.36,
      "Text": " also able to use Beacon's built-in data model to gather some information about the endpoint,"
    },
    {
      "Time_Start": 2460.36,
      "Time_End": 2466.52,
      "Text": " whether that's usernames, computer names, that kind of stuff. And once we've got this"
    },
    {
      "Time_Start": 2466.52,
      "Time_End": 2473.56,
      "Text": " information, when a request for a tool is made, if we also say, key this tool, and I say whether"
    },
    {
      "Time_Start": 2473.56,
      "Time_End": 2478.28,
      "Text": " that's a loader, or whether that's, you know, whatever, we'll basically look at the keys"
    },
    {
      "Time_Start": 2478.28,
      "Time_End": 2484.36,
      "Text": " from the internal database, and then provide an encrypted copy of the tool or the artifact"
    },
    {
      "Time_Start": 2484.36,
      "Time_End": 2490.7599999999998,
      "Text": " that can only be decrypted based on the environmental keys. And then when the tool"
    },
    {
      "Time_Start": 2490.7599999999998,
      "Time_End": 2495.48,
      "Text": " runs on the endpoint, or the artifact runs on the endpoint, it will basically, it doesn't have the"
    },
    {
      "Time_Start": 2495.48,
      "Time_End": 2499.8,
      "Text": " key built in, but it knows which various different types of properties are used to actually build the"
    },
    {
      "Time_Start": 2499.8,
      "Time_End": 2504.52,
      "Text": " key, so it will gather lots of information, and then it will try and brute force its own"
    },
    {
      "Time_Start": 2504.52,
      "Time_End": 2513.2400000000002,
      "Text": " decryption key before it ends up getting run with assembly.load. And so let's look at a little"
    },
    {
      "Time_Start": 2513.32,
      "Time_End": 2514.6000000000004,
      "Text": " example of this."
    },
    {
      "Time_Start": 2520.5200000000004,
      "Time_End": 2528.84,
      "Text": " Okay, so I've got two screens, a cable strike up on the left,"
    },
    {
      "Time_Start": 2529.7200000000003,
      "Time_End": 2533.7200000000003,
      "Text": " and then a virtual machine with dot peak up on the right."
    },
    {
      "Time_Start": 2537.2400000000002,
      "Time_End": 2540.6800000000003,
      "Text": " So what, the first thing I'm going to do is, I'm just going to tell,"
    },
    {
      "Time_Start": 2541.3199999999997,
      "Time_End": 2547.24,
      "Text": " using the aggressor script, I'm going to tell it to recover an artifact, which has got some"
    },
    {
      "Time_Start": 2547.24,
      "Time_End": 2554.9199999999996,
      "Text": " built-in shellcode inside it, from covert toolsmith, and recover an artifact called"
    },
    {
      "Time_Start": 2554.9199999999996,
      "Time_End": 2561.8799999999997,
      "Text": " foobar.exe, and then it will end up getting uploaded to the endpoint inside this temp"
    },
    {
      "Time_Start": 2561.8799999999997,
      "Time_End": 2568.44,
      "Text": " directory. So on the right-hand side, what I've done is just dragged foobar.exe over into dot peak,"
    },
    {
      "Time_Start": 2569.4,
      "Time_End": 2573.4,
      "Text": " and then if we take a look at it, we can firstly see it's all completely obfuscated,"
    },
    {
      "Time_Start": 2574.36,
      "Time_End": 2580.68,
      "Text": " but if we dive into one of the functions, we can see here, this is where the keying is actually"
    },
    {
      "Time_Start": 2580.68,
      "Time_End": 2588.6,
      "Text": " occurring, and basically we have this, we have a number of variables that it's taking in,"
    },
    {
      "Time_Start": 2588.6,
      "Time_End": 2593.32,
      "Text": " like the machine name, the username, the domain name, external IP addresses,"
    },
    {
      "Time_Start": 2593.4,
      "Time_End": 2599.0800000000004,
      "Text": " sorry, internal IP addresses, and then we've also got this big block of base64,"
    },
    {
      "Time_Start": 2599.0800000000004,
      "Time_End": 2604.44,
      "Text": " which is actually the encrypted artifact or shellcode or whatever in this case."
    },
    {
      "Time_Start": 2606.84,
      "Time_End": 2615.4,
      "Text": " So if we run the foobar.exe, what you'll see, and I've turned on the debugging just so we can,"
    },
    {
      "Time_Start": 2615.4,
      "Time_End": 2619.4,
      "Text": " you can see this better, you can see it basically is trying to,"
    },
    {
      "Time_Start": 2620.04,
      "Time_End": 2625.32,
      "Text": " whoops, my bad, I was trying to see if I could zoom in. I don't know if that's zooming in for"
    },
    {
      "Time_Start": 2625.32,
      "Time_End": 2630.6800000000003,
      "Text": " everybody, but it at least zooms for me. It's basically trying to brute force its own decryption"
    },
    {
      "Time_Start": 2630.6800000000003,
      "Time_End": 2635.88,
      "Text": " key based on variables that are derived from the environment. In this case, I made it really"
    },
    {
      "Time_Start": 2635.88,
      "Time_End": 2641.48,
      "Text": " simple, and it's just using the user's username. So basically, when the user runs it, they would,"
    },
    {
      "Time_Start": 2641.48,
      "Time_End": 2647.4,
      "Text": " if the blue team captured this exe, in this case, they would need to be, well,"
    },
    {
      "Time_Start": 2647.4,
      "Time_End": 2652.36,
      "Text": " in this case, they would need to be running it as the same username as the endpoint that"
    },
    {
      "Time_Start": 2652.92,
      "Time_End": 2659.7200000000003,
      "Text": " we originally generated it for. And that, in this case, basically causes the exe to decrypt when it"
    },
    {
      "Time_Start": 2659.7200000000003,
      "Time_End": 2667.7200000000003,
      "Text": " gets the right username. And we get a beacon pop-up because this is basically just using"
    },
    {
      "Time_Start": 2667.7200000000003,
      "Time_End": 2673.32,
      "Text": " some injection to spawn Internet Explorer. That's what this artifact does. And that's"
    },
    {
      "Time_Start": 2673.32,
      "Time_End": 2689.88,
      "Text": " pretty much how it works. So as I kind of mentioned, the kind of real benefit of using"
    },
    {
      "Time_Start": 2689.88,
      "Time_End": 2695.6400000000003,
      "Text": " this approach, this kind of operating in code approach, rather than operating with commands,"
    },
    {
      "Time_Start": 2695.6400000000003,
      "Time_End": 2699.56,
      "Text": " is that we don't actually need to heavily interact with the operating system at all."
    },
    {
      "Time_Start": 2700.52,
      "Time_End": 2705.08,
      "Text": " So if we employ this concept of offensive development, we can achieve everything that"
    },
    {
      "Time_Start": 2705.08,
      "Time_End": 2711.56,
      "Text": " we want to do using code. So let's look at like an example problem that we might have. Let's say,"
    },
    {
      "Time_Start": 2711.56,
      "Time_End": 2717.32,
      "Text": " for example, we wanted to search, we're searching for passwords in files on the endpoint."
    },
    {
      "Time_Start": 2717.32,
      "Time_End": 2722.92,
      "Text": " Traditionally, you might use something like find string and searching for the pass as a string"
    },
    {
      "Time_Start": 2722.92,
      "Time_End": 2728.2799999999997,
      "Text": " inside the user's folder. Now, this would not look pretty at all from an EDR telemetry perspective."
    },
    {
      "Time_Start": 2728.6000000000004,
      "Time_End": 2734.84,
      "Text": " So how do we actually go on and solve this? So using offensive development, what we can do,"
    },
    {
      "Time_Start": 2735.5600000000004,
      "Time_End": 2740.52,
      "Text": " and this is really cool because you can actually just have the file, the source code file open."
    },
    {
      "Time_Start": 2740.52,
      "Time_End": 2744.76,
      "Text": " So I have a project called like offensive development. I just write things in C sharp"
    },
    {
      "Time_Start": 2744.76,
      "Time_End": 2749.32,
      "Text": " as I'm trying to operate on the endpoint and then just run them using the CLR harness."
    },
    {
      "Time_Start": 2749.32,
      "Time_End": 2755.48,
      "Text": " So maybe we've just got a source code file that we're working on and we're just adding stuff to."
    },
    {
      "Time_Start": 2756.2,
      "Time_End": 2764.6,
      "Text": " Because the tool is compiled and built on every run, we can just have the IDE open and just add"
    },
    {
      "Time_Start": 2764.6,
      "Time_End": 2769.64,
      "Text": " lines of code to the source code file and then it will automatically run on the endpoint when we"
    },
    {
      "Time_Start": 2769.64,
      "Time_End": 2775.96,
      "Text": " want it to. So I'll show you an example of this, how we can actually go about red teaming entirely"
    },
    {
      "Time_Start": 2775.96,
      "Time_End": 2791.2400000000002,
      "Text": " just from our IDE. Okay. So again, on the right-hand side, I've got a source code file,"
    },
    {
      "Time_Start": 2791.88,
      "Time_End": 2796.68,
      "Text": " which is literally just printing something to the console. I've got it open in Visual Studio."
    },
    {
      "Time_Start": 2796.68,
      "Time_End": 2801.8,
      "Text": " On the left-hand side, I've got Cobalt Strike. So what I'm going to do is I'm going to use"
    },
    {
      "Time_Start": 2801.8,
      "Time_End": 2806.92,
      "Text": " Covert Toolsmith to run this offensive dev project on the endpoint. And again, this is"
    },
    {
      "Time_Start": 2806.92,
      "Time_End": 2813.2400000000002,
      "Text": " actually running from like a Docker container that I'm running inside Visual Studio. So you can see,"
    },
    {
      "Time_Start": 2814.28,
      "Time_End": 2818.04,
      "Text": " firstly, it's just printed what we've got in the tool. So it's done the console dot"
    },
    {
      "Time_Start": 2818.04,
      "Time_End": 2823.96,
      "Text": " right line and we can see it on the screen. Secondly, what I'm going to do is just make"
    },
    {
      "Time_Start": 2823.96,
      "Time_End": 2827.8,
      "Text": " a change to this project. So I'm just going to delete the bits and comments."
    },
    {
      "Time_Start": 2828.76,
      "Time_End": 2835.0,
      "Text": " And then I'm going to add an extra line, console dot right line. Hello, ZFcon."
    },
    {
      "Time_Start": 2837.5600000000004,
      "Time_End": 2842.76,
      "Text": " So we're now changing that source code file. So what all this is going to do now is search in the"
    },
    {
      "Time_Start": 2842.76,
      "Time_End": 2848.52,
      "Text": " folder users DMC test, the text files, and then it will look inside those text files, looking for the"
    },
    {
      "Time_Start": 2848.52,
      "Time_End": 2856.52,
      "Text": " string password. So we now just save that file and run it again using Covert Toolsmith. And again,"
    },
    {
      "Time_Start": 2856.52,
      "Time_End": 2864.36,
      "Text": " this makes a request to the Covert Toolsmith API, which is inside the Docker container."
    },
    {
      "Time_Start": 2864.36,
      "Time_End": 2870.36,
      "Text": " That folder inside Docker is actually shared with my virtual machine in this case, where I've got"
    },
    {
      "Time_Start": 2870.36,
      "Time_End": 2877.4,
      "Text": " Visual Studio open with that file. And it will then read the new file, compile the project"
    },
    {
      "Time_Start": 2877.4,
      "Time_End": 2883.0,
      "Text": " and execute it in memory inside that process on the endpoint. And you can see now it's come back"
    },
    {
      "Time_Start": 2883.0,
      "Time_End": 2893.16,
      "Text": " saying we found this file called password.txt. And we can confirm it's working just by looking"
    },
    {
      "Time_Start": 2893.16,
      "Time_End": 2897.88,
      "Text": " at the contents of this file. You'd probably download it. If we're trying to avoid running"
    },
    {
      "Time_Start": 2897.88,
      "Time_End": 2901.16,
      "Text": " commands, you probably wouldn't run shell type. But for the purposes of this demo, we can see"
    },
    {
      "Time_Start": 2901.16,
      "Time_End": 2906.92,
      "Text": " it's working. And that basically allows us to do whatever we want completely in code."
    },
    {
      "Time_Start": 2913.08,
      "Time_End": 2914.04,
      "Text": " Not long left now."
    },
    {
      "Time_Start": 2917.24,
      "Time_End": 2924.36,
      "Text": " So in conclusion, I guess what I'm trying to show is that kind of modern EDR rich environments,"
    },
    {
      "Time_Start": 2925.4,
      "Time_End": 2930.6,
      "Text": " blue teams have got a wealth of telemetry. They can see all the processes that you run. They can"
    },
    {
      "Time_Start": 2930.6,
      "Time_End": 2936.68,
      "Text": " see your ETW events. They basically got full visibility of what you're doing on an endpoint."
    },
    {
      "Time_Start": 2936.68,
      "Time_End": 2942.84,
      "Text": " As I mentioned earlier on, they've got the home field advantage. In order for us to be successful"
    },
    {
      "Time_Start": 2942.92,
      "Time_End": 2948.04,
      "Text": " as a red teamer, we need to adapt our post-exploitation tradecraft. So we need to try"
    },
    {
      "Time_Start": 2948.04,
      "Time_End": 2954.84,
      "Text": " and blend in better. So blend in with the processes that are loading the CLR. We need to be aware of"
    },
    {
      "Time_Start": 2954.84,
      "Time_End": 2960.28,
      "Text": " how they're detecting us so that we can build innovations. And because there's so many different"
    },
    {
      "Time_Start": 2960.28,
      "Time_End": 2965.96,
      "Text": " types of evasions that we might need to consider, if we've got the ability to integrate and leverage"
    },
    {
      "Time_Start": 2965.96,
      "Time_End": 2973.4,
      "Text": " DevOps principles into this by using things like a CICD pipeline, then that will help us"
    },
    {
      "Time_Start": 2973.4,
      "Time_End": 2980.36,
      "Text": " better weaponize and better protect all of our tools. That's finally just a couple of shout outs."
    },
    {
      "Time_Start": 2981.4,
      "Time_End": 2989.0,
      "Text": " So firstly to Peter Wintersmith, who did some really awesome work on building the in-process"
    },
    {
      "Time_Start": 2989.0,
      "Time_End": 2995.8,
      "Text": " CLR harness that we use. A couple of ideas are borrowed from Shot Compiled, which was"
    },
    {
      "Time_Start": 2995.8,
      "Time_End": 3003.48,
      "Text": " written by another MD Secker from Dave Middlehurst. And then finally, Ryan Cobb did some really cool"
    },
    {
      "Time_Start": 3004.36,
      "Time_End": 3009.0,
      "Text": " automation stuff inside Covenant. If you dig into the source code of Covenant, you'll see"
    },
    {
      "Time_Start": 3009.0,
      "Time_End": 3014.84,
      "Text": " how it uses Roslyn and some similar principles to what I've kind of used in the pipeline."
    },
    {
      "Time_Start": 3014.84,
      "Time_End": 3026.52,
      "Text": " And that's basically it. I don't know if we've got any questions at all."
    }
  ]
}