{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 11.44,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Hi everyone, thank you for having me and welcome to the talk Improving the Selfness of Memory"
    },
    {
      "Time_Start": 11.44,
      "Time_End": 13.4,
      "Text": " Injection Techniques."
    },
    {
      "Time_Start": 13.4,
      "Time_End": 19.04,
      "Text": " So a brief word about me, I'm Diego Capriotti, I currently run the Offensive Cybersecurity"
    },
    {
      "Time_Start": 19.04,
      "Time_End": 20.76,
      "Text": " team at AXIOS Italy."
    },
    {
      "Time_Start": 20.76,
      "Time_End": 28.36,
      "Text": " I spent several years in the army and covered roles from radio frequency jamming to cybersecurity."
    },
    {
      "Time_Start": 28.36,
      "Time_End": 33.96,
      "Text": " In my spare time I play blitz chess and thinker with software defined radios."
    },
    {
      "Time_Start": 33.96,
      "Time_End": 36.480000000000004,
      "Text": " So let's get straight to the agenda."
    },
    {
      "Time_Start": 36.480000000000004,
      "Time_End": 42.019999999999996,
      "Text": " We will begin by talking about some very common injection techniques and how can we group"
    },
    {
      "Time_Start": 42.019999999999996,
      "Time_End": 44.64,
      "Text": " them into three main categories."
    },
    {
      "Time_Start": 44.64,
      "Time_End": 50.32,
      "Text": " We will have a look also at the most prevalent IOCs that these techniques are generating"
    },
    {
      "Time_Start": 50.32,
      "Time_End": 54.879999999999995,
      "Text": " and we will use this information to set an improvement strategy."
    },
    {
      "Time_Start": 54.88,
      "Time_End": 60.760000000000005,
      "Text": " We will choose some very promising injection techniques and we will try to test with some"
    },
    {
      "Time_Start": 60.760000000000005,
      "Time_End": 66.64,
      "Text": " open source memory scanners to look for the IOCs that they are producing and we will try"
    },
    {
      "Time_Start": 66.64,
      "Time_End": 69.94,
      "Text": " to reduce the number of these IOCs."
    },
    {
      "Time_Start": 69.94,
      "Time_End": 77.30000000000001,
      "Text": " We will then look to the module shifting technique that's a variation of two main techniques"
    },
    {
      "Time_Start": 77.30000000000001,
      "Time_End": 82.78,
      "Text": " and this is bringing some improvements and we will see how we can bypass actually some"
    },
    {
      "Time_Start": 82.78,
      "Time_End": 84.68,
      "Text": " open source memory scanner."
    },
    {
      "Time_Start": 84.68,
      "Time_End": 90.76,
      "Text": " We will also talk about some detection opportunities that can be put in place with this technique."
    },
    {
      "Time_Start": 90.76,
      "Time_End": 99.24000000000001,
      "Text": " So first thing is memory injection is where an attacker can insert or alter the code in"
    },
    {
      "Time_Start": 99.24000000000001,
      "Time_End": 105.94000000000001,
      "Text": " a running local or remote process memory space and the code can be executed within the context"
    },
    {
      "Time_Start": 105.94000000000001,
      "Time_End": 111.96000000000001,
      "Text": " of the target process itself and this is the bread and butter of red teamers and attackers"
    },
    {
      "Time_Start": 112.32000000000001,
      "Time_End": 117.80000000000001,
      "Text": " because memory injection can be used for some malicious purposes such as bypassing security"
    },
    {
      "Time_Start": 117.80000000000001,
      "Time_End": 124.68,
      "Text": " measures or achieving stealth or persistence, extending agent capabilities such as injecting"
    },
    {
      "Time_Start": 124.68,
      "Time_End": 131.96,
      "Text": " a DLL and then accessing there its exporting function from the payload or it can also be"
    },
    {
      "Time_Start": 131.96,
      "Time_End": 138.68,
      "Text": " used to get access to target process sensitive information for later exfiltration."
    },
    {
      "Time_Start": 138.68,
      "Time_End": 143.88,
      "Text": " So some common injection techniques can be grouped into three categories."
    },
    {
      "Time_Start": 143.88,
      "Time_End": 149.48000000000002,
      "Text": " The code injection category includes techniques that are typically involving dynamic memory"
    },
    {
      "Time_Start": 149.48000000000002,
      "Time_End": 150.48000000000002,
      "Text": " allocation."
    },
    {
      "Time_Start": 150.48000000000002,
      "Time_End": 156.8,
      "Text": " The P injection category includes techniques that are able to map and load APE into memory"
    },
    {
      "Time_Start": 156.8,
      "Time_End": 163.56,
      "Text": " and process manipulation category is including techniques that can modify the context or"
    },
    {
      "Time_Start": 163.56,
      "Time_End": 167.32,
      "Text": " the execution flow of a running process."
    },
    {
      "Time_Start": 167.32,
      "Time_End": 171.32,
      "Text": " So we will have a look now at code injection category, some very common technique."
    },
    {
      "Time_Start": 171.32,
      "Time_End": 176.32,
      "Text": " We are seeing now the classic shellcode injection where an attacker is allocating memory into"
    },
    {
      "Time_Start": 176.32,
      "Time_End": 182.79999999999998,
      "Text": " a target process, then it's changing the permission to read write in order to write malicious"
    },
    {
      "Time_Start": 182.79999999999998,
      "Time_End": 188.88,
      "Text": " code onto it and then changing back permission to read execute to actually execute the code"
    },
    {
      "Time_Start": 188.88,
      "Time_End": 194.72,
      "Text": " via for example new threat creation or function callback or other methods like a function"
    },
    {
      "Time_Start": 194.72,
      "Time_End": 196.24,
      "Text": " pointer for example."
    },
    {
      "Time_Start": 196.24,
      "Time_End": 202.36,
      "Text": " We also have here hook injection technique, threat local storage injection, APC injection"
    },
    {
      "Time_Start": 202.36,
      "Time_End": 205.12,
      "Text": " and exception dispatching injection."
    },
    {
      "Time_Start": 205.12,
      "Time_End": 211.72,
      "Text": " We are mostly interested in the most common and most prevalent IOCs of this technique"
    },
    {
      "Time_Start": 211.72,
      "Time_End": 217.96,
      "Text": " and these are essentially the dynamic memory allocation and subsequent changes in private"
    },
    {
      "Time_Start": 217.96,
      "Time_End": 224.16000000000003,
      "Text": " memory permission because an attacker, once he or she allocated some memory, she has to"
    },
    {
      "Time_Start": 224.16,
      "Time_End": 228.88,
      "Text": " change permissions in order to write and then to execute the malicious code."
    },
    {
      "Time_Start": 228.88,
      "Time_End": 239.12,
      "Text": " Of course there are some technique specific IOCs but this can be very peculiar depending"
    },
    {
      "Time_Start": 239.12,
      "Time_End": 245.48,
      "Text": " on the technique itself and it can be fingerprinted by security vendors with enough time and if"
    },
    {
      "Time_Start": 245.48,
      "Time_End": 247.48,
      "Text": " the technique is public for some time."
    },
    {
      "Time_Start": 247.48,
      "Time_End": 252.28,
      "Text": " So we are mainly interested in the most prevalent ones."
    },
    {
      "Time_Start": 252.28,
      "Time_End": 255.96,
      "Text": " The second category is the P injection category."
    },
    {
      "Time_Start": 255.96,
      "Time_End": 261.4,
      "Text": " This includes technique like classic DLL injection where you have to drop a DLL on disk, you"
    },
    {
      "Time_Start": 261.4,
      "Time_End": 268.16,
      "Text": " allocate memory to the target process, write malicious DLL, then you create a new thread"
    },
    {
      "Time_Start": 268.16,
      "Time_End": 275.8,
      "Text": " and pass the load library address of the procedure in order to get your DLL executed."
    },
    {
      "Time_Start": 275.8,
      "Time_End": 280.4,
      "Text": " We also have here the reflective DLL injection, that's a very common technique."
    },
    {
      "Time_Start": 280.40000000000003,
      "Time_End": 283.52000000000004,
      "Text": " It's pretty similar to the memory module technique."
    },
    {
      "Time_Start": 283.52000000000004,
      "Time_End": 289.92,
      "Text": " The main difference is that the reflective DLL injection is requiring an embedded loader"
    },
    {
      "Time_Start": 289.92,
      "Time_End": 296.32000000000005,
      "Text": " where the memory module technique is a bit more versatile in the fact that we can essentially"
    },
    {
      "Time_Start": 296.32000000000005,
      "Time_End": 301.88000000000005,
      "Text": " use unmodified DLL and inject it with memory module technique."
    },
    {
      "Time_Start": 301.88000000000005,
      "Time_End": 308.12,
      "Text": " Both of these techniques are allocating virtual memory but we have here also module stomping"
    },
    {
      "Time_Start": 308.24,
      "Time_End": 313.76,
      "Text": " and module overloading technique that are avoiding the dynamic memory allocation because"
    },
    {
      "Time_Start": 313.76,
      "Time_End": 320.48,
      "Text": " these two techniques are hosting DLL into a target process and then overwriting over"
    },
    {
      "Time_Start": 320.48,
      "Time_End": 327.08,
      "Text": " it in order to write the shellcode and get the shellcode executed or DPE."
    },
    {
      "Time_Start": 327.08,
      "Time_End": 336.2,
      "Text": " So the main IUC here is that the PE such as a DLL or an executable or even a shellcode"
    },
    {
      "Time_Start": 336.2,
      "Time_End": 337.86,
      "Text": " is residing in memory."
    },
    {
      "Time_Start": 337.86,
      "Time_End": 346.54,
      "Text": " In case of a PE, once DPE is mapped into memory, we will have left in memory an executable"
    },
    {
      "Time_Start": 346.54,
      "Time_End": 353.58000000000004,
      "Text": " region that will be floating around and some memory scanners will look for it and it will"
    },
    {
      "Time_Start": 353.58000000000004,
      "Time_End": 356.86,
      "Text": " flag as a suspicious IUC."
    },
    {
      "Time_Start": 356.86,
      "Time_End": 362.1,
      "Text": " We also have the changes in memory permissions because in module stomping and module overloading"
    },
    {
      "Time_Start": 362.1,
      "Time_End": 368.90000000000003,
      "Text": " techniques we are avoiding the allocation of dynamic memory but we have to change the"
    },
    {
      "Time_Start": 368.90000000000003,
      "Time_End": 377.06,
      "Text": " permission of the other space of the loaded hosting DLL in order to overwrite onto it."
    },
    {
      "Time_Start": 377.06,
      "Time_End": 380.86,
      "Text": " So that's an IUC that we will be having."
    },
    {
      "Time_Start": 380.86,
      "Time_End": 387.14000000000004,
      "Text": " And another important IUC is that there is a mismatch between the in-memory and on-disk"
    },
    {
      "Time_Start": 387.14,
      "Time_End": 392.58,
      "Text": " DLL code, for example, even the module overloading and module stomping."
    },
    {
      "Time_Start": 392.58,
      "Time_End": 398.47999999999996,
      "Text": " Once they are overwriting something, this will lead to a mismatch that some scanners"
    },
    {
      "Time_Start": 398.47999999999996,
      "Time_End": 404.18,
      "Text": " are looking for doing a comparison between the bytes that are on disk and the bytes that"
    },
    {
      "Time_Start": 404.18,
      "Time_End": 409.21999999999997,
      "Text": " are on the other space of the DLL that is loaded."
    },
    {
      "Time_Start": 409.21999999999997,
      "Time_End": 413.65999999999997,
      "Text": " The last category is the process manipulation category and we have here the process following"
    },
    {
      "Time_Start": 413.66,
      "Time_End": 419.74,
      "Text": " technique that we start the process in suspended state, replace the memory contents with a"
    },
    {
      "Time_Start": 419.74,
      "Time_End": 424.70000000000005,
      "Text": " malicious executable, then resume the execution to get our code running."
    },
    {
      "Time_Start": 424.70000000000005,
      "Time_End": 429.58000000000004,
      "Text": " Then we have also process doppelganging that is abusing some NTFS transaction to essentially"
    },
    {
      "Time_Start": 429.58000000000004,
      "Time_End": 435.46000000000004,
      "Text": " load a malicious DLL within the context of a legitimate process and then the very well"
    },
    {
      "Time_Start": 435.46000000000004,
      "Time_End": 440.96000000000004,
      "Text": " known side loading technique that requires dropping a DLL on disk or on a share and then"
    },
    {
      "Time_Start": 440.96000000000004,
      "Time_End": 447.16,
      "Text": " abusing the Windows DLL search order to make the target process load our malicious DLL."
    },
    {
      "Time_Start": 447.16,
      "Time_End": 452.36,
      "Text": " The thread execution hijacking is suspending a thread and then modifying the instruction"
    },
    {
      "Time_Start": 452.36,
      "Time_End": 454.76000000000005,
      "Text": " pointer to execute malicious code."
    },
    {
      "Time_Start": 454.76000000000005,
      "Time_End": 462.64000000000004,
      "Text": " So the bottom line here is that these common techniques all share the IUC that they are"
    },
    {
      "Time_Start": 462.64000000000004,
      "Time_End": 467.78000000000003,
      "Text": " altering the context or normal execution flow of a PE."
    },
    {
      "Time_Start": 467.78000000000003,
      "Time_End": 473.74,
      "Text": " And of course we have also some technique specific IUCs such as abusing NTFS transaction"
    },
    {
      "Time_Start": 473.74,
      "Time_End": 476.02000000000004,
      "Text": " or dropping a DLL on disk."
    },
    {
      "Time_Start": 476.02000000000004,
      "Time_End": 482.22,
      "Text": " We can use also now this information at a very high level and very brief but it's useful"
    },
    {
      "Time_Start": 482.22,
      "Time_End": 487.70000000000005,
      "Text": " to define a strategy because in order to improve some injection technique we have to choose"
    },
    {
      "Time_Start": 487.70000000000005,
      "Time_End": 492.02000000000004,
      "Text": " the most promising injection technique, right?"
    },
    {
      "Time_Start": 492.02000000000004,
      "Time_End": 497.58000000000004,
      "Text": " And we have also some moving parts for this strategy because there is not only the injection"
    },
    {
      "Time_Start": 497.58,
      "Time_End": 501.14,
      "Text": " technique itself but there is a loader and there is a payload."
    },
    {
      "Time_Start": 501.14,
      "Time_End": 507.26,
      "Text": " Each of these are creating their own IUC and we will have to think about very well and"
    },
    {
      "Time_Start": 507.26,
      "Time_End": 512.98,
      "Text": " very carefully on what we are choosing here because for example if we choose a payload"
    },
    {
      "Time_Start": 512.98,
      "Time_End": 521.8199999999999,
      "Text": " that is a PE for example, the injection technique would likely have to be belonging to the PE"
    },
    {
      "Time_Start": 521.8199999999999,
      "Time_End": 525.9,
      "Text": " injection category because we need to inject the PE in the first place, right?"
    },
    {
      "Time_Start": 525.9,
      "Time_End": 530.1,
      "Text": " So we need to choose a technique that is able to inject the PE."
    },
    {
      "Time_Start": 530.1,
      "Time_End": 535.14,
      "Text": " If we are choosing an embedded loader we would likely limit our option for the injection"
    },
    {
      "Time_Start": 535.14,
      "Time_End": 540.98,
      "Text": " technique to the reflective DLL injection or similar ones that are requiring an embedded"
    },
    {
      "Time_Start": 540.98,
      "Time_End": 541.98,
      "Text": " loader."
    },
    {
      "Time_Start": 541.98,
      "Time_End": 548.5,
      "Text": " So we can see here that by choosing one of the moving parts we have influence over other"
    },
    {
      "Time_Start": 548.5,
      "Time_End": 549.8199999999999,
      "Text": " parts that are moving."
    },
    {
      "Time_Start": 549.8199999999999,
      "Time_End": 555.86,
      "Text": " So it is essential to carefully choose what do we want."
    },
    {
      "Time_Start": 555.86,
      "Time_End": 558.94,
      "Text": " Let's begin by talking about the injection technique."
    },
    {
      "Time_Start": 558.94,
      "Time_End": 565.5,
      "Text": " We would likely as attackers to be the capability of better blend into an environment and we"
    },
    {
      "Time_Start": 565.5,
      "Time_End": 570.38,
      "Text": " would also like to avoid the allocation of dynamic memory."
    },
    {
      "Time_Start": 570.38,
      "Time_End": 575.62,
      "Text": " There are two techniques belonging to the PE injection category that are doing that"
    },
    {
      "Time_Start": 575.62,
      "Time_End": 581.02,
      "Text": " and they are module overloading and module stomping and also for these reasons they can"
    },
    {
      "Time_Start": 581.02,
      "Time_End": 582.38,
      "Text": " be challenging to detect."
    },
    {
      "Time_Start": 582.38,
      "Time_End": 588.86,
      "Text": " So we will aim to improve them and we will choose the PE injection category."
    },
    {
      "Time_Start": 588.86,
      "Time_End": 596.7,
      "Text": " Next for the loader, we chose to use the interpreted loader specifically by using Python language"
    },
    {
      "Time_Start": 596.7,
      "Time_End": 603.02,
      "Text": " because Python has some very interesting evasive properties."
    },
    {
      "Time_Start": 603.02,
      "Time_End": 609.22,
      "Text": " For example, the EDR security solution cannot inspect dynamic Python code because there"
    },
    {
      "Time_Start": 609.22,
      "Time_End": 612.7,
      "Text": " is not actually any AMSI for Python."
    },
    {
      "Time_Start": 612.7,
      "Time_End": 619.3000000000001,
      "Text": " So there is no introspection that security vendors can apply to the stock Python interpreter"
    },
    {
      "Time_Start": 619.3000000000001,
      "Time_End": 623.34,
      "Text": " that can be downloaded from the Python.org website."
    },
    {
      "Time_Start": 623.34,
      "Time_End": 629.78,
      "Text": " Furthermore, you can download an embeddable package so it's not mandatory to have a Python"
    },
    {
      "Time_Start": 629.78,
      "Time_End": 631.6600000000001,
      "Text": " installed on a target."
    },
    {
      "Time_Start": 631.6600000000001,
      "Time_End": 637.82,
      "Text": " You can just download 8 megabyte of embeddable package, unzip it on the target and then use"
    },
    {
      "Time_Start": 637.9000000000001,
      "Time_End": 640.0600000000001,
      "Text": " the interpreter that is there."
    },
    {
      "Time_Start": 640.0600000000001,
      "Time_End": 646.1400000000001,
      "Text": " We can also combine this with a project that's called Pyramid that you can find on my GitHub"
    },
    {
      "Time_Start": 646.1400000000001,
      "Time_End": 652.7,
      "Text": " that its purpose is just to import Python packages in memory in order to get memory"
    },
    {
      "Time_Start": 652.7,
      "Time_End": 655.7,
      "Text": " execution of the package that you want."
    },
    {
      "Time_Start": 655.7,
      "Time_End": 662.3800000000001,
      "Text": " And furthermore, we can use Python C types that is effectively a wrapper for C code and"
    },
    {
      "Time_Start": 662.3800000000001,
      "Time_End": 667.0600000000001,
      "Text": " you can effectively write Python code that translates to C code."
    },
    {
      "Time_Start": 667.0600000000001,
      "Time_End": 675.3000000000001,
      "Text": " So combining all this together, we could get rid of compiled loader and execute dynamic"
    },
    {
      "Time_Start": 675.3000000000001,
      "Time_End": 680.98,
      "Text": " Python code that is essentially C code and we can call that dynamically the Windows API"
    },
    {
      "Time_Start": 680.98,
      "Time_End": 682.1800000000001,
      "Text": " calls."
    },
    {
      "Time_Start": 682.1800000000001,
      "Time_End": 689.22,
      "Text": " So you can see here that we can inject in memory by using Python and actually writing"
    },
    {
      "Time_Start": 689.22,
      "Time_End": 694.3000000000001,
      "Text": " Python code that is a wrapper for C code."
    },
    {
      "Time_Start": 694.3000000000001,
      "Time_End": 700.3800000000001,
      "Text": " The payload is also of utmost importance because PE payloads needs to reside in memory."
    },
    {
      "Time_Start": 700.3800000000001,
      "Time_End": 706.1400000000001,
      "Text": " So you will have this executable section that is mapped in memory and needs to be there"
    },
    {
      "Time_Start": 706.1400000000001,
      "Time_End": 708.5000000000001,
      "Text": " in order for the payload to run."
    },
    {
      "Time_Start": 708.5000000000001,
      "Time_End": 713.6200000000001,
      "Text": " And this will haunt us as we will see in a minute, but there are some other features"
    },
    {
      "Time_Start": 713.6200000000001,
      "Time_End": 718.8600000000001,
      "Text": " that the shellcode payload can provide us and they are very beneficial for our strategy."
    },
    {
      "Time_Start": 718.86,
      "Time_End": 724.62,
      "Text": " For example, we might have the functional independence from further stages that the"
    },
    {
      "Time_Start": 724.62,
      "Time_End": 731.1,
      "Text": " shellcode once it's executed, its further stages are not tied to the first shellcode"
    },
    {
      "Time_Start": 731.1,
      "Time_End": 737.42,
      "Text": " in the first place and we will see later that this will allow us to even improve the injection"
    },
    {
      "Time_Start": 737.42,
      "Time_End": 738.46,
      "Text": " technique itself."
    },
    {
      "Time_Start": 738.46,
      "Time_End": 744.1800000000001,
      "Text": " So by choosing the right payload, we can get more room for improvement for the injection"
    },
    {
      "Time_Start": 744.1800000000001,
      "Time_End": 748.1800000000001,
      "Text": " technique and this is very important from our side as attackers."
    },
    {
      "Time_Start": 748.1800000000001,
      "Time_End": 753.82,
      "Text": " We can also have sleep obfuscation and custom effective loading to give the payload some"
    },
    {
      "Time_Start": 753.82,
      "Time_End": 759.1,
      "Text": " feature of evasiveness that can be beneficial, but for the sake of this presentation, we"
    },
    {
      "Time_Start": 759.1,
      "Time_End": 764.82,
      "Text": " are mostly interested in the IOC that are generated by the injection technique itself."
    },
    {
      "Time_Start": 764.82,
      "Time_End": 771.5400000000001,
      "Text": " We will use a great project from him, you can find the link in the bottom of the slide"
    },
    {
      "Time_Start": 771.5400000000001,
      "Time_End": 776.4200000000001,
      "Text": " and we will choose a shellcode payload for our purposes."
    },
    {
      "Time_Start": 777.4200000000001,
      "Time_End": 780.9000000000001,
      "Text": " Okay, we're talking now about memory scanners."
    },
    {
      "Time_Start": 780.9000000000001,
      "Time_End": 784.98,
      "Text": " There are some great memory scanners over there that are open source."
    },
    {
      "Time_Start": 784.98,
      "Time_End": 792.5000000000001,
      "Text": " PEC has been made by Aleksandra Donetsch that I shared out on Twitter and it's essentially"
    },
    {
      "Time_Start": 792.5000000000001,
      "Time_End": 797.7,
      "Text": " a user mode memory scanner that's designed to apply some detection criteria that she"
    },
    {
      "Time_Start": 797.7,
      "Time_End": 800.22,
      "Text": " embedded in the code herself."
    },
    {
      "Time_Start": 800.22,
      "Time_End": 808.4200000000001,
      "Text": " For example, PEC can identify hooked or implanted PE or shellcode patterns and it has some data"
    },
    {
      "Time_Start": 808.4200000000001,
      "Time_End": 813.78,
      "Text": " analysis tricks that she applied to the scanner itself."
    },
    {
      "Time_Start": 813.78,
      "Time_End": 819.58,
      "Text": " On the other hand, there's also Moneta that's a bit different from PEC."
    },
    {
      "Time_Start": 819.58,
      "Time_End": 825.86,
      "Text": " It has been developed by Forestore and it is mostly focused on the characteristics of"
    },
    {
      "Time_Start": 825.86,
      "Time_End": 832.26,
      "Text": " the memory region of the mapped PE that is in memory and it's also focused on the presence"
    },
    {
      "Time_Start": 832.26,
      "Time_End": 838.9,
      "Text": " of dynamic or unknown code and on the IOCs related to the process itself."
    },
    {
      "Time_Start": 838.9,
      "Time_End": 845.5,
      "Text": " These two tools can be used by defenders, but also by attackers because we can use Moneta,"
    },
    {
      "Time_Start": 845.5,
      "Time_End": 851.62,
      "Text": " for example, on all the processes on a Windows operating system and look for false positive"
    },
    {
      "Time_Start": 851.66,
      "Time_End": 856.46,
      "Text": " patterns that we can mimic with our injection technique."
    },
    {
      "Time_Start": 856.46,
      "Time_End": 863.94,
      "Text": " We can see here that some .NET DLLs and also the CLR are doing very strange behavior in"
    },
    {
      "Time_Start": 863.94,
      "Time_End": 864.94,
      "Text": " memory."
    },
    {
      "Time_Start": 864.94,
      "Time_End": 872.7,
      "Text": " For example, here the mscorlib.ni.dll, that's a .NET DLL, it's modifying its own code section"
    },
    {
      "Time_Start": 872.7,
      "Time_End": 874.82,
      "Text": " with 45 kilobytes."
    },
    {
      "Time_Start": 874.82,
      "Time_End": 881.3,
      "Text": " That's a normal behavior and think about what the EDRs are seeing and how maybe they can"
    },
    {
      "Time_Start": 881.3000000000001,
      "Time_End": 883.22,
      "Text": " whitelist this behavior."
    },
    {
      "Time_Start": 883.22,
      "Time_End": 889.5400000000001,
      "Text": " So as attackers, if we look at this, we can smuggle the code in the very same behavior"
    },
    {
      "Time_Start": 889.5400000000001,
      "Time_End": 896.46,
      "Text": " with our injection technique and maybe pass through the radar to some security solution."
    },
    {
      "Time_Start": 896.46,
      "Time_End": 902.22,
      "Text": " Other third-party apps are doing also very strange things, such as Discord, Signal or"
    },
    {
      "Time_Start": 902.22,
      "Time_End": 907.98,
      "Text": " other Electron applications are overwriting their section, even their PE."
    },
    {
      "Time_Start": 907.98,
      "Time_End": 913.46,
      "Text": " In this case, Discord is overwriting over two megabytes and that's a great opportunity"
    },
    {
      "Time_Start": 913.46,
      "Time_End": 919.1800000000001,
      "Text": " for an attacker to smuggle a big payload here."
    },
    {
      "Time_Start": 919.1800000000001,
      "Time_End": 925.4200000000001,
      "Text": " So here we have a CLR that's loaded in a Python process, yes, because Python can also run"
    },
    {
      "Time_Start": 925.4200000000001,
      "Time_End": 933.04,
      "Text": " .NET code by using the Python.NET module, but this behavior is common almost to any"
    },
    {
      "Time_Start": 933.04,
      "Time_End": 936.44,
      "Text": " process that's loading a CLR and initializing it."
    },
    {
      "Time_Start": 936.44,
      "Time_End": 944.0200000000001,
      "Text": " So we have a very high number of abnormal private executable memory with RWX permissions"
    },
    {
      "Time_Start": 944.0200000000001,
      "Time_End": 950.84,
      "Text": " and that's a great place to hide, for example, our interactive beacon because it will have"
    },
    {
      "Time_Start": 950.84,
      "Time_End": 958.84,
      "Text": " the very same properties in memory and you might blend in very well in this kind of processes."
    },
    {
      "Time_Start": 958.84,
      "Time_End": 964.22,
      "Text": " So we have to start somewhere and with some techniques, so we chose to use the memory"
    },
    {
      "Time_Start": 964.22,
      "Time_End": 971.14,
      "Text": " module technique that was first published by Joachim Bauk and it has been ported to"
    },
    {
      "Time_Start": 971.14,
      "Time_End": 979.12,
      "Text": " Python C types and it is essentially a native Python code that can be dynamically imported"
    },
    {
      "Time_Start": 979.12,
      "Time_End": 981.6800000000001,
      "Text": " and executed by using the Pyramid project."
    },
    {
      "Time_Start": 981.6800000000001,
      "Time_End": 986.5,
      "Text": " So we don't need to use a compiled loader anymore if you want to use memory module because"
    },
    {
      "Time_Start": 986.5,
      "Time_End": 992.28,
      "Text": " we can just use the interpreter if it's available on target or just drop the embeddable package"
    },
    {
      "Time_Start": 992.28,
      "Time_End": 993.5,
      "Text": " and that's it."
    },
    {
      "Time_Start": 993.5,
      "Time_End": 999.54,
      "Text": " So we can download, map, and execute a stageless DLL agent like Cobblestrike or Sleever and"
    },
    {
      "Time_Start": 999.54,
      "Time_End": 1007.44,
      "Text": " even execute beacon object file via injecting the cough loader DLL and accessing some exported"
    },
    {
      "Time_Start": 1007.44,
      "Time_End": 1010.96,
      "Text": " function to execute the buff."
    },
    {
      "Time_Start": 1010.96,
      "Time_End": 1016.3,
      "Text": " So the GitHub project is on the bottom of the slide and also the Python memory buff"
    },
    {
      "Time_Start": 1016.3,
      "Time_End": 1019.64,
      "Text": " way of using the buff."
    },
    {
      "Time_Start": 1019.64,
      "Time_End": 1021.22,
      "Text": " So this is how it's working."
    },
    {
      "Time_Start": 1021.22,
      "Time_End": 1027.34,
      "Text": " We are allocating dynamic memory and we are downloading and copy the malicious payload"
    },
    {
      "Time_Start": 1027.34,
      "Time_End": 1028.58,
      "Text": " section by section."
    },
    {
      "Time_Start": 1028.58,
      "Time_End": 1030.84,
      "Text": " In this case, that's a DLL."
    },
    {
      "Time_Start": 1030.84,
      "Time_End": 1038.08,
      "Text": " Then we have to perform the base relocation because this DLL will be mapped on an address"
    },
    {
      "Time_Start": 1038.08,
      "Time_End": 1043.94,
      "Text": " that's different from the base of address parameter of the PE structure."
    },
    {
      "Time_Start": 1043.94,
      "Time_End": 1046.1200000000001,
      "Text": " Then we have to resolve the imports."
    },
    {
      "Time_Start": 1046.1200000000001,
      "Time_End": 1052.4,
      "Text": " We have to set the permission to the original state and then we can execute the entry point"
    },
    {
      "Time_Start": 1052.4,
      "Time_End": 1054.0400000000002,
      "Text": " basically."
    },
    {
      "Time_Start": 1054.0400000000002,
      "Time_End": 1061.8400000000001,
      "Text": " So here we have a demonstration of using Pyramid to dynamically import Python memory module"
    },
    {
      "Time_Start": 1061.8400000000001,
      "Time_End": 1069.16,
      "Text": " in memory and starts our injection of a beacon DLL and get the beacon back in our dashboard."
    },
    {
      "Time_Start": 1069.16,
      "Time_End": 1072.2800000000002,
      "Text": " So we are here on the Python website."
    },
    {
      "Time_Start": 1072.2800000000002,
      "Time_End": 1075.72,
      "Text": " We can see that there is a link for the embeddable package."
    },
    {
      "Time_Start": 1075.72,
      "Time_End": 1078.84,
      "Text": " We download, unpack it on the desktop."
    },
    {
      "Time_Start": 1078.84,
      "Time_End": 1084.08,
      "Text": " We can see that there's the Python.exe binary that's signed."
    },
    {
      "Time_Start": 1084.08,
      "Time_End": 1087.88,
      "Text": " We have a valid signature that's free."
    },
    {
      "Time_Start": 1087.88,
      "Time_End": 1090.34,
      "Text": " And then we open a common prompt on the upper side."
    },
    {
      "Time_Start": 1090.34,
      "Time_End": 1093.2,
      "Text": " We have an SSH connection to Kali Linux."
    },
    {
      "Time_Start": 1093.2,
      "Time_End": 1096.54,
      "Text": " On the down pane, we have the Python executable."
    },
    {
      "Time_Start": 1096.54,
      "Time_End": 1101.28,
      "Text": " Then we are starting the Pyramid server, setting the password for the encrypted delivery, and"
    },
    {
      "Time_Start": 1101.28,
      "Time_End": 1108.3999999999999,
      "Text": " then the set cradle parameter is generating a big base 64 blob with some Python code that"
    },
    {
      "Time_Start": 1108.3999999999999,
      "Time_End": 1116.2,
      "Text": " we can just copy and paste so we get a scriptless execution on the Python prompt below."
    },
    {
      "Time_Start": 1116.2,
      "Time_End": 1123.94,
      "Text": " So we just copy this big blob and paste it in the Python prompt."
    },
    {
      "Time_Start": 1123.94,
      "Time_End": 1127.44,
      "Text": " So we start our execution chain."
    },
    {
      "Time_Start": 1127.44,
      "Time_End": 1134.2,
      "Text": " We will see that the files will be downloaded from the Pyramid server and delivered encrypted."
    },
    {
      "Time_Start": 1134.2,
      "Time_End": 1138.52,
      "Text": " Also the URI is, in fact, also encrypted."
    },
    {
      "Time_Start": 1138.52,
      "Time_End": 1143.88,
      "Text": " Here we are downloading the script, then the dependencies, and finally the stage artifact"
    },
    {
      "Time_Start": 1143.88,
      "Time_End": 1146.3200000000002,
      "Text": " DLL."
    },
    {
      "Time_Start": 1146.3200000000002,
      "Time_End": 1152.0,
      "Text": " And we are seeing the same thing below in the Python prompt."
    },
    {
      "Time_Start": 1152.0,
      "Time_End": 1156.4,
      "Text": " We see here the importing memory of the Python memory module."
    },
    {
      "Time_Start": 1156.4,
      "Time_End": 1165.0400000000002,
      "Text": " Then we start injecting our DLL using Python code, and then here we are dynamically allocating"
    },
    {
      "Time_Start": 1165.0400000000002,
      "Time_End": 1168.48,
      "Text": " the space to host our payload."
    },
    {
      "Time_Start": 1168.48,
      "Time_End": 1173.3200000000002,
      "Text": " Then we are copying the section one by one, the text, the data, and so on."
    },
    {
      "Time_Start": 1173.3200000000002,
      "Time_End": 1178.88,
      "Text": " Here we are checking for base location, resolving the imports."
    },
    {
      "Time_Start": 1178.88,
      "Time_End": 1182.2,
      "Text": " This is a big list of imports that has been resolved."
    },
    {
      "Time_Start": 1182.2,
      "Time_End": 1188.0,
      "Text": " Then after the imports, we are changing the permission of the section to the original"
    },
    {
      "Time_Start": 1188.0,
      "Time_End": 1189.0,
      "Text": " state."
    },
    {
      "Time_Start": 1189.0,
      "Time_End": 1190.96,
      "Text": " Here's the execute read."
    },
    {
      "Time_Start": 1190.96,
      "Time_End": 1197.0,
      "Text": " Then we have to execute the TLS, and finally we can call the DLL entry with DLL process"
    },
    {
      "Time_Start": 1197.0,
      "Time_End": 1198.96,
      "Text": " touch flag."
    },
    {
      "Time_Start": 1198.96,
      "Time_End": 1200.56,
      "Text": " Here we have the beacon back."
    },
    {
      "Time_Start": 1200.56,
      "Time_End": 1201.56,
      "Text": " That's the PID."
    },
    {
      "Time_Start": 1201.56,
      "Time_End": 1209.16,
      "Text": " So we can now look for the IOCs by scanning with Moneta."
    },
    {
      "Time_Start": 1209.16,
      "Time_End": 1212.64,
      "Text": " So Moneta here is showing two main IOCs."
    },
    {
      "Time_Start": 1212.64,
      "Time_End": 1218.0400000000002,
      "Text": " We have an abnormal private executable memory and a threat within a non-image-baked region."
    },
    {
      "Time_Start": 1218.0400000000002,
      "Time_End": 1225.28,
      "Text": " That is due to the DLL that has been mapped and started on a dynamic private memory."
    },
    {
      "Time_Start": 1225.28,
      "Time_End": 1231.2,
      "Text": " Then the second IOC, this is due to the beacon itself because the DLL that we loaded is a"
    },
    {
      "Time_Start": 1231.2,
      "Time_End": 1236.4,
      "Text": " self bootstrapping DLL that's loaded beacon on another area of memory."
    },
    {
      "Time_Start": 1236.64,
      "Time_End": 1247.4,
      "Text": " PEC here is showing us three total suspicious IOCs, one implanted PE and two implanted shellcode."
    },
    {
      "Time_Start": 1247.4,
      "Time_End": 1251.8400000000001,
      "Text": " So here we have some IOC to work on."
    },
    {
      "Time_Start": 1251.8400000000001,
      "Time_End": 1260.64,
      "Text": " The advantage of using memory module is that it is avoiding the creation of RWX memory"
    },
    {
      "Time_Start": 1260.96,
      "Time_End": 1267.24,
      "Text": " because by mapping the DLL memory and we are effectively mimicking the Windows loader,"
    },
    {
      "Time_Start": 1267.24,
      "Time_End": 1272.2,
      "Text": " we are mapping a DLL without calling load library essentially and doing it in memory."
    },
    {
      "Time_Start": 1272.2,
      "Time_End": 1274.48,
      "Text": " That's the purpose for memory module."
    },
    {
      "Time_Start": 1274.48,
      "Time_End": 1279.1200000000001,
      "Text": " By doing this, we are avoiding the creation of RWX memory."
    },
    {
      "Time_Start": 1279.1200000000001,
      "Time_End": 1284.0400000000002,
      "Text": " But the disadvantage of this is that we are dynamically allocating memory, and that might"
    },
    {
      "Time_Start": 1284.0400000000002,
      "Time_End": 1286.5600000000002,
      "Text": " be a sound IOC."
    },
    {
      "Time_Start": 1286.56,
      "Time_End": 1292.8,
      "Text": " And then we still have this executable section resident in memory that is floating around"
    },
    {
      "Time_Start": 1292.8,
      "Time_End": 1295.96,
      "Text": " and that's a target for memory scanners to look for."
    },
    {
      "Time_Start": 1295.96,
      "Time_End": 1302.28,
      "Text": " So that's also our target for improvement in the next steps."
    },
    {
      "Time_Start": 1302.28,
      "Time_End": 1311.2,
      "Text": " And we will have a look now at module overloading that is our next step because this injection"
    },
    {
      "Time_Start": 1311.24,
      "Time_End": 1314.48,
      "Text": " technique can avoid the creation of dynamic memory."
    },
    {
      "Time_Start": 1314.48,
      "Time_End": 1318.48,
      "Text": " So we can get rid of some IOC that we just saw."
    },
    {
      "Time_Start": 1318.48,
      "Time_End": 1326.0800000000002,
      "Text": " And it is doing this by overwriting over a hosting DLL that we have to load normally."
    },
    {
      "Time_Start": 1326.0800000000002,
      "Time_End": 1332.96,
      "Text": " So we are mimicking a normal operation here by just using load library and loading a DLL."
    },
    {
      "Time_Start": 1332.96,
      "Time_End": 1338.8,
      "Text": " And then we are overwriting onto it so we don't have to allocate dynamic memory for"
    },
    {
      "Time_Start": 1338.8,
      "Time_End": 1339.8,
      "Text": " that."
    },
    {
      "Time_Start": 1339.8,
      "Time_End": 1345.36,
      "Text": " And then we can just map the PE in memory by using the very same memory module technique"
    },
    {
      "Time_Start": 1345.36,
      "Time_End": 1348.76,
      "Text": " because we are still mimicking the Windows loader here."
    },
    {
      "Time_Start": 1348.76,
      "Time_End": 1354.9199999999998,
      "Text": " So we can bring our code that we use for Python memory module, twist it a little bit, and"
    },
    {
      "Time_Start": 1354.9199999999998,
      "Time_End": 1361.54,
      "Text": " get the implementation of the module overloading technique even in Python C types."
    },
    {
      "Time_Start": 1361.54,
      "Time_End": 1364.3999999999999,
      "Text": " So this is how it works in the detailed step."
    },
    {
      "Time_Start": 1364.3999999999999,
      "Time_End": 1366.72,
      "Text": " We are loading a hosting DLL."
    },
    {
      "Time_Start": 1366.72,
      "Time_End": 1369.6399999999999,
      "Text": " Then we have to resolve the payload import table."
    },
    {
      "Time_Start": 1369.64,
      "Time_End": 1371.4,
      "Text": " We have to do base relocation."
    },
    {
      "Time_Start": 1371.4,
      "Time_End": 1376.6000000000001,
      "Text": " The payload has been written over the hosting DLL so that the entry point can be executed."
    },
    {
      "Time_Start": 1376.6000000000001,
      "Time_End": 1383.96,
      "Text": " This first implementation has been published by Ashera Zad once again, so credits to her."
    },
    {
      "Time_Start": 1383.96,
      "Time_End": 1390.64,
      "Text": " So by looking at the IOC that this technique is generating, we have here a modified PE"
    },
    {
      "Time_Start": 1390.64,
      "Time_End": 1394.16,
      "Text": " header and a modified code IOC in Moneta."
    },
    {
      "Time_Start": 1394.16,
      "Time_End": 1400.96,
      "Text": " So the modified PE header here is generated because we are beginning the overwriting starting"
    },
    {
      "Time_Start": 1400.96,
      "Time_End": 1407.24,
      "Text": " from the top of the loaded DLL, and on the top of the DLL, there's usually the PE header."
    },
    {
      "Time_Start": 1407.24,
      "Time_End": 1413.28,
      "Text": " So just by modifying the PE header, Moneta is getting this as an IOC."
    },
    {
      "Time_Start": 1413.28,
      "Time_End": 1419.48,
      "Text": " Then we are going down until the code section and overwriting also the code section, and"
    },
    {
      "Time_Start": 1419.48,
      "Time_End": 1423.16,
      "Text": " this has generated the modified code IOC."
    },
    {
      "Time_Start": 1423.16,
      "Time_End": 1429.96,
      "Text": " And PEC is looking for a similar thing and is getting a replaced IOC."
    },
    {
      "Time_Start": 1429.96,
      "Time_End": 1435.4,
      "Text": " So that's due to the payload overwritten over the hosting DLL, and we will see that this"
    },
    {
      "Time_Start": 1435.4,
      "Time_End": 1440.8600000000001,
      "Text": " is a trademark for the module overloading technique and also the module stomping technique"
    },
    {
      "Time_Start": 1440.8600000000001,
      "Time_End": 1443.88,
      "Text": " that you will see right now."
    },
    {
      "Time_Start": 1443.88,
      "Time_End": 1450.16,
      "Text": " So these are our target for improvement, and we can see that we got rid of the IOCs generated"
    },
    {
      "Time_Start": 1450.16,
      "Time_End": 1451.7,
      "Text": " by memory module."
    },
    {
      "Time_Start": 1451.7,
      "Time_End": 1456.94,
      "Text": " We have a different set of IOCs, but we can work on them."
    },
    {
      "Time_Start": 1456.94,
      "Time_End": 1463.22,
      "Text": " So the next step is module stomping technique that is very similar to module overloading,"
    },
    {
      "Time_Start": 1463.22,
      "Time_End": 1470.78,
      "Text": " and instead it's also much simpler because we are not overwriting PE and loading PE."
    },
    {
      "Time_Start": 1470.78,
      "Time_End": 1474.38,
      "Text": " We are overwriting shellcode, and we just need to execute it."
    },
    {
      "Time_Start": 1474.38,
      "Time_End": 1480.74,
      "Text": " So we can avoid the operations of the Windows loader that we implemented in the memory module"
    },
    {
      "Time_Start": 1480.74,
      "Time_End": 1486.8,
      "Text": " technique, and the payload, with the right payload, we can get rid also of the resident"
    },
    {
      "Time_Start": 1486.8,
      "Time_End": 1489.86,
      "Text": " executable section IOC."
    },
    {
      "Time_Start": 1489.86,
      "Time_End": 1492.86,
      "Text": " So here we can see the details step."
    },
    {
      "Time_Start": 1492.86,
      "Time_End": 1498.26,
      "Text": " We are loading and hosting DLL, change permission to read-write, overwrite the shellcode on"
    },
    {
      "Time_Start": 1498.26,
      "Time_End": 1503.54,
      "Text": " the section, change permission to read-execute, and then execute the shellcode via thread"
    },
    {
      "Time_Start": 1503.54,
      "Time_End": 1505.78,
      "Text": " creation or function callback."
    },
    {
      "Time_Start": 1505.82,
      "Time_End": 1510.98,
      "Text": " The public implementations, to my knowledge, are the one from Bobby Cook and the WithSecure,"
    },
    {
      "Time_Start": 1510.98,
      "Time_End": 1513.62,
      "Text": " so credit to them for the technique."
    },
    {
      "Time_Start": 1513.62,
      "Time_End": 1522.1399999999999,
      "Text": " Looking to the IOC now, we can see that we got inconsistent executable permission between"
    },
    {
      "Time_Start": 1522.1399999999999,
      "Time_End": 1523.3799999999999,
      "Text": " disk and memory."
    },
    {
      "Time_Start": 1523.3799999999999,
      "Time_End": 1533.8999999999999,
      "Text": " This is generated because we overwrote the shellcode over the resource section, and Moneta"
    },
    {
      "Time_Start": 1533.9,
      "Time_End": 1541.38,
      "Text": " is checking also if the resource section is consistent between what's in memory and"
    },
    {
      "Time_Start": 1541.38,
      "Time_End": 1542.38,
      "Text": " what's on disk."
    },
    {
      "Time_Start": 1542.38,
      "Time_End": 1548.5800000000002,
      "Text": " So if you have to execute the shellcode, you just have to change the permission to executable,"
    },
    {
      "Time_Start": 1548.5800000000002,
      "Time_End": 1553.5400000000002,
      "Text": " and this will generate the inconsistent executable permission between disk and memory."
    },
    {
      "Time_Start": 1553.5400000000002,
      "Time_End": 1563.26,
      "Text": " We have also here the modified code IOC, and it looks like we cannot get rid of it yet,"
    },
    {
      "Time_Start": 1563.26,
      "Time_End": 1569.54,
      "Text": " and that's a target for our improvement because we can get rid of the inconsistent executable"
    },
    {
      "Time_Start": 1569.54,
      "Time_End": 1577.94,
      "Text": " permission by just overwriting over the text section, and we will get this IOC disappeared."
    },
    {
      "Time_Start": 1577.94,
      "Time_End": 1586.66,
      "Text": " And here, PC is seeing a hooked IOC because the tool is looking for the comparison also"
    },
    {
      "Time_Start": 1586.66,
      "Time_End": 1592.82,
      "Text": " from the memory that's on disk, from the byte that are on disk and on memory for the hosting"
    },
    {
      "Time_Start": 1592.82,
      "Time_End": 1601.4199999999998,
      "Text": " DLL, and the PC tool is looking at this like it was an inline patch."
    },
    {
      "Time_Start": 1601.4199999999998,
      "Time_End": 1609.06,
      "Text": " Okay, we can now introduce the module shifting technique that brings some improvement."
    },
    {
      "Time_Start": 1609.06,
      "Time_End": 1616.3,
      "Text": " We essentially have to get rid of the modified code IOC that's floating around in Moneta,"
    },
    {
      "Time_Start": 1616.3,
      "Time_End": 1622.98,
      "Text": " and we will hopefully get zero result even with PC."
    },
    {
      "Time_Start": 1622.98,
      "Time_End": 1630.44,
      "Text": " We can get to this point by implementing the technique in C types, so we can combine the"
    },
    {
      "Time_Start": 1630.44,
      "Time_End": 1635.46,
      "Text": " module overloading technique with the module stomping technique and add some variation"
    },
    {
      "Time_Start": 1635.46,
      "Time_End": 1641.1599999999999,
      "Text": " to that so that we can avoid the modified code IOC that's generating by comparing the"
    },
    {
      "Time_Start": 1641.16,
      "Time_End": 1646.92,
      "Text": " virtual memory and the on disk bytes, and this will leave near to zero suspicious memory"
    },
    {
      "Time_Start": 1646.92,
      "Time_End": 1651.6200000000001,
      "Text": " artifacts and we'll get no indicators from Moneta and PC."
    },
    {
      "Time_Start": 1651.6200000000001,
      "Time_End": 1658.52,
      "Text": " So we also got the execution by using function pointer instead of creating a new thread because"
    },
    {
      "Time_Start": 1658.52,
      "Time_End": 1664.52,
      "Text": " function pointer of course will avoid this, and we will also like to avoid the calling"
    },
    {
      "Time_Start": 1664.52,
      "Time_End": 1669.74,
      "Text": " of some strange function callback that might trigger some IOC."
    },
    {
      "Time_Start": 1669.74,
      "Time_End": 1675.72,
      "Text": " We also need to find a way to better blend into the false positive that we saw in the"
    },
    {
      "Time_Start": 1675.72,
      "Time_End": 1682.34,
      "Text": " previous slide, and we can add some padding for example, and we can make sure that the"
    },
    {
      "Time_Start": 1682.34,
      "Time_End": 1690.6200000000001,
      "Text": " in-memory behavior of what we are injecting resume the same behavior of the false positive"
    },
    {
      "Time_Start": 1690.6200000000001,
      "Time_End": 1692.2,
      "Text": " that we want to target."
    },
    {
      "Time_Start": 1692.2,
      "Time_End": 1699.72,
      "Text": " So for example we can inject mscorlip.ni.dll and add some padding to reach the 45 kilobytes"
    },
    {
      "Time_Start": 1699.72,
      "Time_End": 1706.1200000000001,
      "Text": " that's the normal behavior for this DLL to overwrite its own code section so that in-memory"
    },
    {
      "Time_Start": 1706.1200000000001,
      "Time_End": 1711.96,
      "Text": " we will have the malicious code that might appear the same as the false positive for"
    },
    {
      "Time_Start": 1711.96,
      "Time_End": 1715.96,
      "Text": " security solutions."
    },
    {
      "Time_Start": 1715.96,
      "Time_End": 1720.76,
      "Text": " This is a detailed step work through of module shifting."
    },
    {
      "Time_Start": 1720.76,
      "Time_End": 1726.88,
      "Text": " The main technique advantage here is that we have no resident memory artifact left on"
    },
    {
      "Time_Start": 1726.88,
      "Time_End": 1733.2,
      "Text": " hosting DLL, and this is done by using the right shellcode payload."
    },
    {
      "Time_Start": 1733.2,
      "Time_End": 1738.88,
      "Text": " We have to use the shellcode payload that's functional independent from the initial shellcode"
    },
    {
      "Time_Start": 1738.88,
      "Time_End": 1746.4,
      "Text": " we are executing so that we can actually get rid of the initial shellcode we just executed"
    },
    {
      "Time_Start": 1746.4,
      "Time_End": 1751.68,
      "Text": " and we can replace that content with the original DLL content."
    },
    {
      "Time_Start": 1751.68,
      "Time_End": 1757.8400000000001,
      "Text": " So the first step would be loading the hosting DLL, that's pretty common right now, and change"
    },
    {
      "Time_Start": 1757.8400000000001,
      "Time_End": 1760.1200000000001,
      "Text": " permission to read write."
    },
    {
      "Time_Start": 1760.1200000000001,
      "Time_End": 1766.44,
      "Text": " We overwrite the shellcode on the little section, we can add some padding to resemble the false"
    },
    {
      "Time_Start": 1766.44,
      "Time_End": 1773.1200000000001,
      "Text": " positive and we change permission to read execute, we execute code via function pointer"
    },
    {
      "Time_Start": 1773.1200000000001,
      "Time_End": 1779.0800000000002,
      "Text": " and then we do this step of replacing the content of the original DLL to get rid of"
    },
    {
      "Time_Start": 1779.08,
      "Time_End": 1784.12,
      "Text": " the modified code IOC that we will get in Moneta."
    },
    {
      "Time_Start": 1784.12,
      "Time_End": 1790.4399999999998,
      "Text": " So here are the key points, we load the DLL, we load library, we shift to the target section,"
    },
    {
      "Time_Start": 1790.4399999999998,
      "Time_End": 1797.12,
      "Text": " we write the shellcode, we execute the shellcode and then we restore it with this operation"
    },
    {
      "Time_Start": 1797.12,
      "Time_End": 1803.48,
      "Text": " by using virtual protect and then doing a man move with the original DLL bytes that"
    },
    {
      "Time_Start": 1803.48,
      "Time_End": 1809.68,
      "Text": " we saved before writing the shellcode and we just move them for the exact exact same"
    },
    {
      "Time_Start": 1809.68,
      "Time_End": 1815.44,
      "Text": " amount of bytes of the shellcode over the very same position."
    },
    {
      "Time_Start": 1815.44,
      "Time_End": 1823.24,
      "Text": " Okay here is a demonstration of an injection using the module shifting technique we will"
    },
    {
      "Time_Start": 1823.24,
      "Time_End": 1829.84,
      "Text": " use in ASLOADER payload and we will injecting by using the pyramid project once again so"
    },
    {
      "Time_Start": 1829.8400000000001,
      "Time_End": 1835.5200000000002,
      "Text": " that we will not drop anything on disk apart from the interpreter of course and we will"
    },
    {
      "Time_Start": 1835.5200000000002,
      "Time_End": 1841.8400000000001,
      "Text": " see that we can actually get zero results from Moneta and even PSEVE."
    },
    {
      "Time_Start": 1841.8400000000001,
      "Time_End": 1849.2800000000002,
      "Text": " Okay that's an empty Cobblestrike client dashboard, here we have the config file for pyramid for"
    },
    {
      "Time_Start": 1849.2800000000002,
      "Time_End": 1855.3200000000002,
      "Text": " the module shifting technique, we are using pyramid for deriving encrypted files, we choose"
    },
    {
      "Time_Start": 1855.32,
      "Time_End": 1862.6,
      "Text": " the payload as a shellcode, we don't use padding here, we use the name of the payload"
    },
    {
      "Time_Start": 1862.6,
      "Time_End": 1869.12,
      "Text": " that's an ASLOADER payload and then we chose the hosting DLL as mscorelib.ni.dll."
    },
    {
      "Time_Start": 1869.12,
      "Time_End": 1873.96,
      "Text": " We chose to target the .txt section."
    },
    {
      "Time_Start": 1873.96,
      "Time_End": 1881.3999999999999,
      "Text": " Okay we generate the basic 64 blob and some Python code that we can copy and paste like"
    },
    {
      "Time_Start": 1881.4,
      "Time_End": 1886.64,
      "Text": " the previous demonstration."
    },
    {
      "Time_Start": 1886.64,
      "Time_End": 1893.2,
      "Text": " We just copy and paste it into the below prompt, the Python prompt, then we start our execution"
    },
    {
      "Time_Start": 1893.2,
      "Time_End": 1903.2,
      "Text": " chain and we will see that we will get the web request on the pyramid server with the"
    },
    {
      "Time_Start": 1903.2,
      "Time_End": 1910.7,
      "Text": " encrypted URI and it is delivering the encrypted files, the Python script, the dependencies"
    },
    {
      "Time_Start": 1910.8600000000001,
      "Time_End": 1913.1000000000001,
      "Text": " and then the ASLOADER beacon."
    },
    {
      "Time_Start": 1913.1000000000001,
      "Time_End": 1919.66,
      "Text": " We are seeing the same in the below prompt, so here we are not allocating dynamically"
    },
    {
      "Time_Start": 1919.66,
      "Time_End": 1929.3400000000001,
      "Text": " any memory, we are hosting the DLL, then looking for the .txt section and then change permission"
    },
    {
      "Time_Start": 1929.3400000000001,
      "Time_End": 1941.2600000000002,
      "Text": " to read write in order to overwrite some shellcode over the .txt section."
    },
    {
      "Time_Start": 1941.2600000000002,
      "Time_End": 1945.2200000000003,
      "Text": " Here we change permission and we copy the shellcode bytes over there."
    },
    {
      "Time_Start": 1945.2200000000003,
      "Time_End": 1949.7400000000002,
      "Text": " Then we set the permission to read execute, we execute the shellcode via function pointer"
    },
    {
      "Time_Start": 1949.7400000000002,
      "Time_End": 1956.5400000000002,
      "Text": " and then once the shellcode has been executed we can actually do a cleanup and restore the"
    },
    {
      "Time_Start": 1956.54,
      "Time_End": 1960.3799999999999,
      "Text": " original DLL data over the shellcode we just executed."
    },
    {
      "Time_Start": 1960.3799999999999,
      "Time_End": 1966.86,
      "Text": " So this would leave no artifacts, nearly no artifacts."
    },
    {
      "Time_Start": 1966.86,
      "Time_End": 1973.18,
      "Text": " So here's the beacon back, we got the PID so we can now test for any IUC that we get"
    },
    {
      "Time_Start": 1973.18,
      "Time_End": 1974.82,
      "Text": " with Moneta."
    },
    {
      "Time_Start": 1974.82,
      "Time_End": 1981.98,
      "Text": " We got none and the same from PECF."
    },
    {
      "Time_Start": 1981.98,
      "Time_End": 1991.8600000000001,
      "Text": " Okay, so here are the results, total suspicious zero and no results with Moneta and there"
    },
    {
      "Time_Start": 1991.8600000000001,
      "Time_End": 1997.5,
      "Text": " is currently no traces of injection IUCs but of course the sleeping ASLOADER can be detected"
    },
    {
      "Time_Start": 1997.5,
      "Time_End": 2005.06,
      "Text": " by other tools but our focus now is on the artifacts or traces that the injection technique"
    },
    {
      "Time_Start": 2005.06,
      "Time_End": 2008.46,
      "Text": " is leaving behind."
    },
    {
      "Time_Start": 2008.46,
      "Time_End": 2015.94,
      "Text": " There are some detection opportunities though because module stomping is modifying some"
    },
    {
      "Time_Start": 2015.94,
      "Time_End": 2022.8600000000001,
      "Text": " bytes over the legitimate DLL and it is not, at least the public implementations are not"
    },
    {
      "Time_Start": 2022.8600000000001,
      "Time_End": 2023.9,
      "Text": " doing a cleanup."
    },
    {
      "Time_Start": 2023.9,
      "Time_End": 2032.58,
      "Text": " So by doing a scan you will see that, for example, if you load the mscorlib.ni.dll and"
    },
    {
      "Time_Start": 2032.5800000000002,
      "Time_End": 2040.7400000000002,
      "Text": " we are overwriting with an ASLOADER payload that's at least 300 kilobytes, the common"
    },
    {
      "Time_Start": 2040.7400000000002,
      "Time_End": 2048.7400000000002,
      "Text": " behavior for this DLL is not to write 300 kilobytes, it is to write at least 45 kilobytes"
    },
    {
      "Time_Start": 2048.7400000000002,
      "Time_End": 2054.42,
      "Text": " and this could be a malicious indicator that something strange is going on."
    },
    {
      "Time_Start": 2054.42,
      "Time_End": 2060.78,
      "Text": " On the other hand, module shifting will do a cleanup so you would need some scanner with"
    },
    {
      "Time_Start": 2060.78,
      "Time_End": 2067.5400000000004,
      "Text": " runtime inspection capabilities to detect this strange behavior but again if you are"
    },
    {
      "Time_Start": 2067.5400000000004,
      "Time_End": 2074.34,
      "Text": " choosing the right false positive and you are trying to blend in exactly also in memory"
    },
    {
      "Time_Start": 2074.34,
      "Time_End": 2082.1800000000003,
      "Text": " with the exact same bytes, for example, by using 45 kilobytes instead of using 300 kilobytes,"
    },
    {
      "Time_Start": 2082.1800000000003,
      "Time_End": 2090.1400000000003,
      "Text": " this will be much more complicated also to identify as an IUC for scanners."
    },
    {
      "Time_Start": 2090.5,
      "Time_End": 2095.22,
      "Text": " So the main takeaway here is that injection techniques have several moving parts that"
    },
    {
      "Time_Start": 2095.22,
      "Time_End": 2101.8199999999997,
      "Text": " should be seen together in order to enable some further room for improvement on the injection"
    },
    {
      "Time_Start": 2101.8199999999997,
      "Time_End": 2107.58,
      "Text": " technique itself and Python can be used as a loader with parameters and C types and we"
    },
    {
      "Time_Start": 2107.58,
      "Time_End": 2114.2599999999998,
      "Text": " can use it to get rid of embedded loaders and compiled loaders by calling dynamically"
    },
    {
      "Time_Start": 2114.2599999999998,
      "Time_End": 2119.42,
      "Text": " Windows API and essentially dynamic C code."
    },
    {
      "Time_Start": 2119.42,
      "Time_End": 2125.1,
      "Text": " Memory IUC can also be reduced with a proper injection strategy and doing the steps that"
    },
    {
      "Time_Start": 2125.1,
      "Time_End": 2127.1800000000003,
      "Text": " we did also in the presentation."
    },
    {
      "Time_Start": 2127.1800000000003,
      "Time_End": 2132.86,
      "Text": " By using memory scanners, you can also find false positive in order to better blend in"
    },
    {
      "Time_Start": 2132.86,
      "Time_End": 2134.82,
      "Text": " and that's very important."
    },
    {
      "Time_Start": 2134.82,
      "Time_End": 2140.34,
      "Text": " By using functionally independent shellcode payloads, you can get rid of them once executed"
    },
    {
      "Time_Start": 2140.34,
      "Time_End": 2146.98,
      "Text": " because there is no reason to keep a shellcode in memory if it's not tied to the further"
    },
    {
      "Time_Start": 2147.02,
      "Time_End": 2149.06,
      "Text": " stages that it's executing."
    },
    {
      "Time_Start": 2149.06,
      "Time_End": 2154.7400000000002,
      "Text": " So these improvements can also be applied to other injection techniques and not only"
    },
    {
      "Time_Start": 2154.7400000000002,
      "Time_End": 2157.22,
      "Text": " the ones that we saw in the presentation."
    },
    {
      "Time_Start": 2157.22,
      "Time_End": 2159.66,
      "Text": " So thank you for listening, hope you enjoyed it."
    }
  ]
}