{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 18.28,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Hello everyone, last year I gave a talk about pentesting iOS applications without jailbreak."
    },
    {
      "Time_Start": 18.28,
      "Time_End": 25.04,
      "Text": " In this year I decided to change the side and show you how to build modern iOS applications"
    },
    {
      "Time_Start": 25.04,
      "Time_End": 27.8,
      "Text": " securely."
    },
    {
      "Time_Start": 27.8,
      "Time_End": 36.8,
      "Text": " So my name is Wojciech Regula, as I was introduced, I'm a senior IT security consultant at Securink,"
    },
    {
      "Time_Start": 36.8,
      "Time_End": 45.2,
      "Text": " where I'm mostly focused on iOS app security and in free time I run a blog, the link that"
    },
    {
      "Time_Start": 45.2,
      "Time_End": 51.760000000000005,
      "Text": " you can see on the slide, that is also mostly focused on iOS applications and macOS application"
    },
    {
      "Time_Start": 51.76,
      "Time_End": 59.879999999999995,
      "Text": " security and somebody of you may know me from OASP security knowledge framework that I contributed"
    },
    {
      "Time_Start": 59.879999999999995,
      "Time_End": 62.879999999999995,
      "Text": " to."
    },
    {
      "Time_Start": 62.879999999999995,
      "Time_End": 69.47999999999999,
      "Text": " This presentation will be about most frequent vulnerabilities in iOS applications that we"
    },
    {
      "Time_Start": 69.47999999999999,
      "Time_End": 73.36,
      "Text": " find during conducting penetration tests."
    },
    {
      "Time_Start": 73.36,
      "Time_End": 78.72,
      "Text": " We don't have, of course, time to talk about everything, so I selected the most interesting"
    },
    {
      "Time_Start": 78.72,
      "Time_End": 86.0,
      "Text": " ones and my Twitter and mail will be displayed, hold the presentation on the top of the slide,"
    },
    {
      "Time_Start": 86.0,
      "Time_End": 91.76,
      "Text": " so if you have any questions feel free to ask me or ping me on Twitter."
    },
    {
      "Time_Start": 91.76,
      "Time_End": 99.32,
      "Text": " Alright, so I introduced myself, now I want to know something about you, so who of you"
    },
    {
      "Time_Start": 99.32000000000001,
      "Time_End": 115.84,
      "Text": " are from security divisions, almost 30% I think, and what about developers, are there any?"
    },
    {
      "Time_Start": 115.84,
      "Time_End": 126.72000000000001,
      "Text": " Okay, so about 20% I think, so the persons are almost equal I think, so I will focus"
    },
    {
      "Time_Start": 126.72,
      "Time_End": 132.32,
      "Text": " both on the security, the offensive and defensive side of this."
    },
    {
      "Time_Start": 132.32,
      "Time_End": 140.48,
      "Text": " Okay, so agenda, at first we will talk about iOS platform myths and reality, then I'll"
    },
    {
      "Time_Start": 140.48,
      "Time_End": 146.4,
      "Text": " go through mobile application verification standard, then in each category I will show"
    },
    {
      "Time_Start": 146.4,
      "Time_End": 154.2,
      "Text": " you the vulnerabilities that we frequent find, I will show you also the solution and we'll"
    },
    {
      "Time_Start": 154.20000000000002,
      "Time_End": 161.92000000000002,
      "Text": " also discuss the features that were presented on the latest WWDC."
    },
    {
      "Time_Start": 161.92000000000002,
      "Time_End": 167.96,
      "Text": " In the third point, I will present you my new library, this is the first announcement"
    },
    {
      "Time_Start": 167.96,
      "Time_End": 180.12,
      "Text": " of this library, so watch carefully, and at the end I will show the developers, especially"
    },
    {
      "Time_Start": 180.12,
      "Time_End": 188.08,
      "Text": " the developers short and long term things to implement in your code, and I will say"
    },
    {
      "Time_Start": 188.08,
      "Time_End": 195.0,
      "Text": " about quick summary of the vulnerabilities that we were talking about."
    },
    {
      "Time_Start": 195.0,
      "Time_End": 201.32,
      "Text": " Alright, so we're going to part one, platform myths and reality, and this block I will show"
    },
    {
      "Time_Start": 201.32,
      "Time_End": 210.88,
      "Text": " you that we cannot rely on iOS platform 100%, so the first myth is that Apple's review"
    },
    {
      "Time_Start": 210.88,
      "Time_End": 220.64,
      "Text": " is 100% reliable and it's not true, guys from Guardian Mobile Firewall find application"
    },
    {
      "Time_Start": 220.64,
      "Time_End": 228.16,
      "Text": " that they reversed, that it's a malicious application and what this code snippet does"
    },
    {
      "Time_Start": 228.2,
      "Time_End": 236.0,
      "Text": " is it checks whether the application was run in Cupertino, where of course Apple is based,"
    },
    {
      "Time_Start": 236.0,
      "Time_End": 247.04,
      "Text": " and if they do a dynamic review, the functionality was hidden, so yeah, it was pretty neat bypass"
    },
    {
      "Time_Start": 247.04,
      "Time_End": 252.72,
      "Text": " of app review, so we cannot rely on this 100%."
    },
    {
      "Time_Start": 252.72,
      "Time_End": 260.52,
      "Text": " The second myth, there is no jailbreak for iOS 11+, and it's also again not true, because"
    },
    {
      "Time_Start": 260.52,
      "Time_End": 268.28,
      "Text": " we have Undecimus that is open source jailbreak, so if you are curious how it works, you can"
    },
    {
      "Time_Start": 268.28,
      "Time_End": 272.48,
      "Text": " check it on this GitHub site."
    },
    {
      "Time_Start": 272.48,
      "Time_End": 280.32,
      "Text": " Alright, and the third myth, no jailbreak means no reversing apps, and it's again not"
    },
    {
      "Time_Start": 280.32,
      "Time_End": 290.92,
      "Text": " true, because from probably one year, we have a Corellium that fully virtualized iOS,"
    },
    {
      "Time_Start": 290.92,
      "Time_End": 297.6,
      "Text": " so all you need to do is just to create a new device, select the iOS version, it may"
    },
    {
      "Time_Start": 297.6,
      "Time_End": 305.92,
      "Text": " be even the newest one, tick whether the device should be jailbroken or not, and then you"
    },
    {
      "Time_Start": 305.92,
      "Time_End": 313.6,
      "Text": " just can access it via SSH and dump the application as a regular app as we do."
    },
    {
      "Time_Start": 313.6,
      "Time_End": 321.0,
      "Text": " Okay, so you are probably convinced that iOS platform will not do security for us, so we"
    },
    {
      "Time_Start": 321.0,
      "Time_End": 329.84000000000003,
      "Text": " have to do it for ourselves, so this is the part two, secure development, and first category"
    },
    {
      "Time_Start": 329.84000000000003,
      "Time_End": 336.72,
      "Text": " in mobile application verification standard is architecture, and when we start talking"
    },
    {
      "Time_Start": 336.72,
      "Time_End": 345.12,
      "Text": " about iOS architecture, we usually have to decide in which language we want to write"
    },
    {
      "Time_Start": 345.12,
      "Time_End": 352.56000000000006,
      "Text": " our code, and Swift is of course the newest one, then Objective-C. Objective-C is by the"
    },
    {
      "Time_Start": 352.56,
      "Time_End": 359.96,
      "Text": " way just a wrapper on C, because when you compile Objective-C code, it's first translated"
    },
    {
      "Time_Start": 359.96,
      "Time_End": 367.68,
      "Text": " to pure C and then compiled, so all the vulnerabilities that are common to C programming language"
    },
    {
      "Time_Start": 367.68,
      "Time_End": 374.68,
      "Text": " exist also in Objective-C, and comparing it to Swift, for example, when we have integer"
    },
    {
      "Time_Start": 374.76,
      "Time_End": 383.16,
      "Text": " overflow, if we overflow the integer, it causes runtime error, so it won't accept bugs like"
    },
    {
      "Time_Start": 383.16,
      "Time_End": 389.84000000000003,
      "Text": " that, we don't have direct memory access, of course there are unsafe methods, but they"
    },
    {
      "Time_Start": 389.84000000000003,
      "Time_End": 399.16,
      "Text": " are explicitly named, like for example, unsafe pointer, and about format strings, they are"
    },
    {
      "Time_Start": 399.16,
      "Time_End": 405.52000000000004,
      "Text": " mitigated through string interpolation, so we just do backslash, you know, braces"
    },
    {
      "Time_Start": 405.52000000000004,
      "Time_End": 411.48,
      "Text": " and the parameter that will be of course interpolated."
    },
    {
      "Time_Start": 411.48,
      "Time_End": 419.12,
      "Text": " Alright, and when developing apps in Swift, we also have a few myths, and the first one"
    },
    {
      "Time_Start": 419.12,
      "Time_End": 425.8,
      "Text": " I wanted to present to you is that Swift obfuscates itself, it's of course not true, I had the"
    },
    {
      "Time_Start": 425.8,
      "Time_End": 437.12,
      "Text": " situation from my client where they said they don't need to obfuscate their iOS applications"
    },
    {
      "Time_Start": 437.12,
      "Time_End": 445.40000000000003,
      "Text": " because obfuscate does itself, it auto-obfuscates itself, of course it's not true, what Swift"
    },
    {
      "Time_Start": 445.40000000000003,
      "Time_End": 454.16,
      "Text": " does, it's name mangling, and you probably may know it from, for example, C++, so let's"
    },
    {
      "Time_Start": 454.16,
      "Time_End": 462.88000000000005,
      "Text": " imagine we have this piece of code, the test class, and it's just a clock, it's every one"
    },
    {
      "Time_Start": 462.88000000000005,
      "Time_End": 470.44000000000005,
      "Text": " second it prints incrementing number, so we have one class, one instance variable, constructor"
    },
    {
      "Time_Start": 470.44000000000005,
      "Time_End": 478.8,
      "Text": " and two methods, and when we compile this code, we can use nm, the Swift tester and"
    },
    {
      "Time_Start": 478.8,
      "Time_End": 486.36,
      "Text": " grep for test class, that was the name of the class, and as you can see, this strings"
    },
    {
      "Time_Start": 486.36,
      "Time_End": 490.76,
      "Text": " means something, it's not an obfuscation, and as you can see, the underscore dollar"
    },
    {
      "Time_Start": 490.76,
      "Time_End": 498.32,
      "Text": " for example indicates that's a Swift symbol, then we have length of the name of the module"
    },
    {
      "Time_Start": 498.32,
      "Time_End": 503.12,
      "Text": " name, so on, so on, and return values, etc."
    },
    {
      "Time_Start": 503.12,
      "Time_End": 510.56,
      "Text": " But even Apple provides a tool that will automatically de-mangle the names for you,"
    },
    {
      "Time_Start": 510.56,
      "Time_End": 519.44,
      "Text": " so when you, this grep test class strings pass to the XC run Swift de-mangle, you can"
    },
    {
      "Time_Start": 519.44,
      "Time_End": 527.5600000000001,
      "Text": " see how this weird strings will be translated to human readable form."
    },
    {
      "Time_Start": 528.12,
      "Time_End": 536.96,
      "Text": " Okay, and another myth in Swift is that Swift methods cannot be dynamically changed, it's"
    },
    {
      "Time_Start": 536.96,
      "Time_End": 543.32,
      "Text": " not true because we can use Frida and just hook its symbol, for those who are not familiar"
    },
    {
      "Time_Start": 543.32,
      "Time_End": 551.48,
      "Text": " with Frida, it's just a dynamic instrumentation toolkit for developers, so we have to create"
    },
    {
      "Time_Start": 551.48,
      "Time_End": 559.44,
      "Text": " a script like this, and as you can see, we just attach to the program, we find the export"
    },
    {
      "Time_Start": 559.44,
      "Time_End": 566.64,
      "Text": " by name, we pass the symbol, and whenever our clock returns the value, we just replace"
    },
    {
      "Time_Start": 566.64,
      "Time_End": 580.9200000000001,
      "Text": " it with lead, so it's a demo time that I will show you how it works, okay."
    },
    {
      "Time_Start": 580.9599999999999,
      "Time_End": 589.92,
      "Text": " So at first, I'll try to run this, okay, can you see it?"
    },
    {
      "Time_Start": 589.92,
      "Time_End": 597.3199999999999,
      "Text": " Yes, okay, so when I run the Swift tester, as you can see, it just prints the number"
    },
    {
      "Time_Start": 597.3199999999999,
      "Time_End": 610.3199999999999,
      "Text": " that's increasing, and then we'll open the Frida of the script that I've shown you, okay,"
    },
    {
      "Time_Start": 610.32,
      "Time_End": 620.9200000000001,
      "Text": " resume it, and as you can see, the number is replaced with lead that we wanted to do."
    },
    {
      "Time_Start": 620.9200000000001,
      "Time_End": 633.7600000000001,
      "Text": " Okay, let's open, and the takeaways from this module is that Swift protects your application"
    },
    {
      "Time_Start": 633.76,
      "Time_End": 641.2,
      "Text": " against basic binary vulnerabilities, as you can see, Swift enforces deliberate usage"
    },
    {
      "Time_Start": 641.2,
      "Time_End": 650.96,
      "Text": " of insecure methods like, for example, unsafe pointer, and there is no obfuscation, if you"
    },
    {
      "Time_Start": 650.96,
      "Time_End": 656.76,
      "Text": " consider that someone will reverse engineer your application that you don't want to, you"
    },
    {
      "Time_Start": 656.76,
      "Time_End": 662.72,
      "Text": " can use obfuscator like SwiftShield that is free, open source, and kudos for Rob Bruno"
    },
    {
      "Time_Start": 662.72,
      "Time_End": 664.52,
      "Text": " for doing this."
    },
    {
      "Time_Start": 664.52,
      "Time_End": 674.72,
      "Text": " Okay, and the WWC feature from this block is automated SMS code input, so it's a little"
    },
    {
      "Time_Start": 674.72,
      "Time_End": 681.44,
      "Text": " bit controversial, because let's imagine, we have an iPhone, SMS in comes to our phone,"
    },
    {
      "Time_Start": 681.44,
      "Time_End": 688.4,
      "Text": " and Apple process does some magic, let's say, and it retrieves the, for example, 2FA token"
    },
    {
      "Time_Start": 688.6,
      "Time_End": 698.6,
      "Text": " from this SMS, and it passes it to your native application, so when you tick on this SMS"
    },
    {
      "Time_Start": 698.6,
      "Time_End": 706.4,
      "Text": " code, it is passed to, for example, input value, so the input value, if you want to"
    },
    {
      "Time_Start": 706.4,
      "Time_End": 713.4,
      "Text": " retrieve the token, just needs to be set with this text content type, one-time code, and"
    },
    {
      "Time_Start": 713.4,
      "Time_End": 727.56,
      "Text": " iPhone will automatically give you the token from the SMS, and on demo, I wanted to present"
    },
    {
      "Time_Start": 727.56,
      "Time_End": 735.3199999999999,
      "Text": " you that any application is able to do this, so there is no connection between from which"
    },
    {
      "Time_Start": 735.3199999999999,
      "Time_End": 741.4399999999999,
      "Text": " number the SMS code should be passed to your application, any application that has this"
    },
    {
      "Time_Start": 741.44,
      "Time_End": 748.44,
      "Text": " text content type set can retrieve the token if you press it, so there is a possibility"
    },
    {
      "Time_Start": 748.44,
      "Time_End": 755.8000000000001,
      "Text": " that someone will trick a malicious, will trick the user to pass the token into the"
    },
    {
      "Time_Start": 755.8000000000001,
      "Time_End": 762.2800000000001,
      "Text": " malicious application, so it works like this."
    },
    {
      "Time_Start": 762.2800000000001,
      "Time_End": 768.4000000000001,
      "Text": " On the background, there is the code of the application that can be seen on the right,"
    },
    {
      "Time_Start": 768.4,
      "Time_End": 779.56,
      "Text": " and now I'm sending the iMessage message, and as you can see, this token is shown here"
    },
    {
      "Time_Start": 779.56,
      "Time_End": 783.16,
      "Text": " and is passed to the text input field."
    },
    {
      "Time_Start": 783.16,
      "Time_End": 793.68,
      "Text": " Okay, so now we're going to data storage, the second OWASP category, and the most common"
    },
    {
      "Time_Start": 793.6800000000001,
      "Time_End": 802.36,
      "Text": " issue that we find in data storage are API keys, like for example, Firebase private keys"
    },
    {
      "Time_Start": 802.36,
      "Time_End": 812.36,
      "Text": " that shouldn't be there, SSH keys, cloud credentials like AWS keys or Google Cloud keys, and sometimes"
    },
    {
      "Time_Start": 812.36,
      "Time_End": 821.5400000000001,
      "Text": " even credentials from test environment that works on production as well, so there is maybe"
    },
    {
      "Time_Start": 821.78,
      "Time_End": 828.5,
      "Text": " some of you know that there is a similar issue in one of the Polish banks where the credentials"
    },
    {
      "Time_Start": 828.5,
      "Time_End": 834.18,
      "Text": " from test environment work on the production and, you know, had an access to real money,"
    },
    {
      "Time_Start": 834.18,
      "Time_End": 844.54,
      "Text": " so yeah, it's an issue that we find frequently, and sensitive data may be insecurely stored"
    },
    {
      "Time_Start": 844.54,
      "Time_End": 852.74,
      "Text": " in info.plist, user defaults in regular files, then it can be even hard-coded into binary"
    },
    {
      "Time_Start": 852.74,
      "Time_End": 860.8199999999999,
      "Text": " as just strings in a binary, and we all know that keychain is the place that, you know,"
    },
    {
      "Time_Start": 860.8199999999999,
      "Time_End": 867.62,
      "Text": " the small secrets should be saved, it's the way how Apple has in documentation that we"
    },
    {
      "Time_Start": 867.74,
      "Time_End": 875.18,
      "Text": " have to write the secrets in, but some of the data that I showed you before shouldn't be at all"
    },
    {
      "Time_Start": 875.18,
      "Time_End": 883.02,
      "Text": " on the device, never on the device, and placing them into the keychain is wrong too."
    },
    {
      "Time_Start": 883.02,
      "Time_End": 893.86,
      "Text": " Okay, so Siguza, the famous iOS security researcher, shared his research where he summarizes the"
    },
    {
      "Time_Start": 893.9,
      "Time_End": 902.1,
      "Text": " iOS spyware, and as you can see, there are a lot of any kinds of spyware that retrieves the user"
    },
    {
      "Time_Start": 902.1,
      "Time_End": 912.62,
      "Text": " data from iCloud backups, so we have to know which data from iOS application are actually"
    },
    {
      "Time_Start": 912.62,
      "Time_End": 922.1800000000001,
      "Text": " backed up, and these directories are, for example, documents, library application support,"
    },
    {
      "Time_Start": 922.3000000000001,
      "Time_End": 929.98,
      "Text": " library preference, and any other directories in library without caches, and of course,"
    },
    {
      "Time_Start": 929.98,
      "Time_End": 933.86,
      "Text": " temporary is not backed up."
    },
    {
      "Time_Start": 933.86,
      "Time_End": 946.2600000000001,
      "Text": " Okay, so WWC feature from the last conference is credential provider extension, so it allows you to"
    },
    {
      "Time_Start": 946.26,
      "Time_End": 953.26,
      "Text": " use iCloud keychain and your external password managers, like 1Password or NPass, also in native"
    },
    {
      "Time_Start": 953.26,
      "Time_End": 962.62,
      "Text": " applications, and the case is similar, like with automated SMS code input, you just need to add the"
    },
    {
      "Time_Start": 962.62,
      "Time_End": 968.98,
      "Text": " UI text content type and set, you know, the user name text field to be username and password to be"
    },
    {
      "Time_Start": 968.98,
      "Time_End": 973.5,
      "Text": " content type password, it's as simple as that."
    },
    {
      "Time_Start": 973.5,
      "Time_End": 981.62,
      "Text": " And the takeaways from this part, that always check if any sensitive data is not saved in your"
    },
    {
      "Time_Start": 981.62,
      "Time_End": 983.42,
      "Text": " applications."
    },
    {
      "Time_Start": 983.42,
      "Time_End": 990.74,
      "Text": " For sensitive data stored in keychain that you don't want to be saved in iCloud, use this long"
    },
    {
      "Time_Start": 990.74,
      "Time_End": 995.98,
      "Text": " string, ksec attribute, access it when with this device only, that will make sure that the sensitive"
    },
    {
      "Time_Start": 995.98,
      "Time_End": 1003.06,
      "Text": " data from the keychain won't leave your device, and if you need to store something in regular files,"
    },
    {
      "Time_Start": 1003.0600000000001,
      "Time_End": 1010.34,
      "Text": " the bigger ones that can, you know, keychain can contain, consider using UIKit protection that will"
    },
    {
      "Time_Start": 1010.34,
      "Time_End": 1019.4200000000001,
      "Text": " encrypt the files on the OS, and you can also improve your text inputs to help credential providers"
    },
    {
      "Time_Start": 1019.4200000000001,
      "Time_End": 1022.9000000000001,
      "Text": " work well with your applications."
    },
    {
      "Time_Start": 1022.9000000000001,
      "Time_End": 1032.5,
      "Text": " Okay, so the third block, cryptography, and the most frequent vulnerability that we can find here is"
    },
    {
      "Time_Start": 1032.54,
      "Time_End": 1035.94,
      "Text": " insecure token generation."
    },
    {
      "Time_Start": 1035.94,
      "Time_End": 1040.54,
      "Text": " I give you as example a bear case that I found."
    },
    {
      "Time_Start": 1040.54,
      "Time_End": 1052.74,
      "Text": " So, the bear is alternative to Evernote, so it stores your notes, and it has, actually, the functionality"
    },
    {
      "Time_Start": 1052.74,
      "Time_End": 1064.5,
      "Text": " when it handles URL scheme to which any application could communicate with and retrieve your notes."
    },
    {
      "Time_Start": 1064.5,
      "Time_End": 1071.1,
      "Text": " And you need an access token to this, of course, application to make sure that any malicious or unwanted"
    },
    {
      "Time_Start": 1071.1,
      "Time_End": 1073.86,
      "Text": " application won't retrieve your notes."
    },
    {
      "Time_Start": 1073.86,
      "Time_End": 1079.86,
      "Text": " And token, the generation mechanism looked like this."
    },
    {
      "Time_Start": 1079.8600000000001,
      "Time_End": 1090.5400000000002,
      "Text": " I rewrote this code to exploit this vulnerability, and without reading it and going to the details,"
    },
    {
      "Time_Start": 1090.5400000000002,
      "Time_End": 1098.42,
      "Text": " as you can see on the beginning, it takes a date, the current date, does MD5 from this date,"
    },
    {
      "Time_Start": 1098.42,
      "Time_End": 1102.98,
      "Text": " and then some magic bit shuffles on them."
    },
    {
      "Time_Start": 1102.98,
      "Time_End": 1108.9,
      "Text": " So, as you can see, the vulnerability here is that predicting the date or even brute forcing it,"
    },
    {
      "Time_Start": 1108.9,
      "Time_End": 1111.74,
      "Text": " it's not a really hard job to do."
    },
    {
      "Time_Start": 1111.74,
      "Time_End": 1119.1000000000001,
      "Text": " So, I wrote a full exploit on macOS that could retrieve your notes."
    },
    {
      "Time_Start": 1119.1000000000001,
      "Time_End": 1129.5400000000002,
      "Text": " If you are interested in how I did it with details, you can visit my blog and read about this."
    },
    {
      "Time_Start": 1129.54,
      "Time_End": 1143.06,
      "Text": " So, I'll give you a few seconds to make a photo."
    },
    {
      "Time_Start": 1143.06,
      "Time_End": 1146.26,
      "Text": " All right."
    },
    {
      "Time_Start": 1146.26,
      "Time_End": 1152.1399999999999,
      "Text": " Okay, I think everyone took this photo."
    },
    {
      "Time_Start": 1152.18,
      "Time_End": 1160.5800000000002,
      "Text": " And the WWC feature from cryptography is that, mentioned before, autofill can now create new passwords"
    },
    {
      "Time_Start": 1160.5800000000002,
      "Time_End": 1169.3000000000002,
      "Text": " connected with your domain, and you are able to natively set the policy that will be applied on the password."
    },
    {
      "Time_Start": 1169.3000000000002,
      "Time_End": 1175.42,
      "Text": " So, as you can see, there is UIText input password rules, and you pass the string what's required."
    },
    {
      "Time_Start": 1175.46,
      "Time_End": 1184.26,
      "Text": " So, for example, one upper, one lower, the digits, some characters, consecutive, and minimum length."
    },
    {
      "Time_Start": 1184.26,
      "Time_End": 1189.8600000000001,
      "Text": " So, from now, you can do it natively, which is what is a great feature."
    },
    {
      "Time_Start": 1189.8600000000001,
      "Time_End": 1195.78,
      "Text": " And the takeaway from this blog is that do not create your homemade ciphers,"
    },
    {
      "Time_Start": 1195.78,
      "Time_End": 1203.38,
      "Text": " because it's really hard to do this securely, and treat your encryption algorithm as a public,"
    },
    {
      "Time_Start": 1203.38,
      "Time_End": 1210.7,
      "Text": " because, you know, any application can be reversed, and the algorithm may be known by the attacker."
    },
    {
      "Time_Start": 1210.7,
      "Time_End": 1219.2600000000002,
      "Text": " And you don't need more to use third-party encryption libraries,"
    },
    {
      "Time_Start": 1219.2600000000002,
      "Time_End": 1231.18,
      "Text": " because this method, say, key-create-encrypted-data, is now a native mechanism that allows Swift to do AS or RSA encryption."
    },
    {
      "Time_Start": 1231.18,
      "Time_End": 1241.0600000000002,
      "Text": " And if you deal with passwords, you can now use native password policy that will be, you know, much easier to maintain in the future."
    },
    {
      "Time_Start": 1241.0600000000002,
      "Time_End": 1247.3,
      "Text": " All right, and session management, the most frequent bugs, again, is here."
    },
    {
      "Time_Start": 1247.3,
      "Time_End": 1256.94,
      "Text": " Local access control is, of course, made locally, and the proper way how to do this is, of course, do every check on server side."
    },
    {
      "Time_Start": 1256.94,
      "Time_End": 1267.26,
      "Text": " And whenever the application deals with sessions, and they are stored in JWT,"
    },
    {
      "Time_Start": 1267.26,
      "Time_End": 1277.42,
      "Text": " we have to make sure that we sign, of course, the whole JSON, and we have to, of course, verify this signature,"
    },
    {
      "Time_Start": 1277.42,
      "Time_End": 1287.38,
      "Text": " because there are a lot of cases where the signature was applied on the JWT, but it was not checked on the server side."
    },
    {
      "Time_Start": 1287.38,
      "Time_End": 1292.8200000000002,
      "Text": " All right, and the fifth block, network communication."
    },
    {
      "Time_Start": 1292.8200000000002,
      "Time_End": 1304.26,
      "Text": " And here is, you know, a simple solution, and the most frequent bugs we can find here is plain HTTP connections,"
    },
    {
      "Time_Start": 1304.3,
      "Time_End": 1308.3,
      "Text": " so try to avoid this and use HTTPS."
    },
    {
      "Time_Start": 1308.3,
      "Time_End": 1323.7,
      "Text": " And from iOS 9, there is app transport security that is now by default feature that enforces, for example, usage of HTTPS,"
    },
    {
      "Time_Start": 1323.74,
      "Time_End": 1336.22,
      "Text": " and a lot of developers used to just turn it off, just add this domain which application communicates to as an exclusion,"
    },
    {
      "Time_Start": 1336.22,
      "Time_End": 1342.94,
      "Text": " so it causes, as you probably know, a lot of different problems."
    },
    {
      "Time_Start": 1343.3,
      "Time_End": 1353.94,
      "Text": " So, another bug that we find in network communication is that if you use HTTPS, always check if the certificate is trusted,"
    },
    {
      "Time_Start": 1353.94,
      "Time_End": 1363.54,
      "Text": " and what's interesting, the problem exists really common when developers implement certificate pinning mechanism,"
    },
    {
      "Time_Start": 1363.54,
      "Time_End": 1373.54,
      "Text": " and, you know, when we have applications with certificate pinning, the certificate usually is not trusted,"
    },
    {
      "Time_Start": 1373.54,
      "Time_End": 1380.22,
      "Text": " so developers have to manually turn off the certificate verification check,"
    },
    {
      "Time_Start": 1380.22,
      "Time_End": 1394.18,
      "Text": " and the problem exists when they, you know, stop support certificate pinning, but they don't turn on the certificate trust check,"
    },
    {
      "Time_Start": 1394.18,
      "Time_End": 1407.6200000000001,
      "Text": " and what it causes that attackers are, of course, able to intercept the SSL traffic because they can provide any SSL certificate that will be trusted by the application."
    },
    {
      "Time_Start": 1407.6200000000001,
      "Time_End": 1422.38,
      "Text": " And from a real-life example, for example, Twitter had a similar problem, and as you can see, the bounty that was paid was over $2,000."
    },
    {
      "Time_Start": 1422.38,
      "Time_End": 1428.14,
      "Text": " And the next category is platform interaction."
    },
    {
      "Time_Start": 1428.18,
      "Time_End": 1439.46,
      "Text": " In Apple environment, the most frequent used inter-application communication or inter-process communication are XPC and Mac messages."
    },
    {
      "Time_Start": 1439.46,
      "Time_End": 1452.0600000000002,
      "Text": " They are widely used in iOS as well, but you as a developer don't have, you know, a direct access to it, so we won't cover it."
    },
    {
      "Time_Start": 1452.06,
      "Time_End": 1467.1,
      "Text": " In Mac OS, when you use XPC or Mac messages, the most important thing here is to verify if the sender is the one that you expect."
    },
    {
      "Time_Start": 1467.1,
      "Time_End": 1476.62,
      "Text": " On iOS, we use URL schemes, airdrop, and clipboard, but please do not do clipboard for inter-process communication."
    },
    {
      "Time_Start": 1476.6200000000001,
      "Time_End": 1489.8600000000001,
      "Text": " I saw it in the wild many times, and it's not a good way how to do this because every time you put something in the clipboard, any application can have access to it and even modify it."
    },
    {
      "Time_Start": 1489.8600000000001,
      "Time_End": 1496.7,
      "Text": " So, as you can probably think about this, it's not an expected behavior."
    },
    {
      "Time_Start": 1496.74,
      "Time_End": 1513.38,
      "Text": " All right, and the examples from real life, for example, Grab had a similar problem with URL schemes, and they paid over $7,000 for it."
    },
    {
      "Time_Start": 1513.38,
      "Time_End": 1526.14,
      "Text": " And again, Twitter, it was just an interesting bug that iOS application can establish FaceTime calls without user's permission. Very interesting."
    },
    {
      "Time_Start": 1526.14,
      "Time_End": 1537.0200000000002,
      "Text": " And the takeaway from the sixth category is that check if a message comes from expected sender, strictly validate the parameters,"
    },
    {
      "Time_Start": 1537.0200000000002,
      "Time_End": 1555.5800000000002,
      "Text": " and if this URL scheme and the parameters that the URL schemes contain are passed directly to the web view, please check the permissions of this web view because it can lead to serious consequences."
    },
    {
      "Time_Start": 1555.58,
      "Time_End": 1561.58,
      "Text": " Okay, and the seventh category, that is code quality."
    },
    {
      "Time_Start": 1561.58,
      "Time_End": 1570.54,
      "Text": " So, there are the three main things to take care about."
    },
    {
      "Time_Start": 1570.54,
      "Time_End": 1576.62,
      "Text": " So, the first one is do not use deprecated APIs."
    },
    {
      "Time_Start": 1576.62,
      "Time_End": 1582.3,
      "Text": " Libraries that you use may also have vulnerabilities that I will show you on the next slide."
    },
    {
      "Time_Start": 1582.3,
      "Time_End": 1590.62,
      "Text": " And if you use any dependency managers like CocoaPods or Carthage, please do not hard code the fixed versions."
    },
    {
      "Time_Start": 1590.62,
      "Time_End": 1605.18,
      "Text": " So, if you open, for example, the pod file and you see the library name equals some number, it's not how it should be done because these libraries can also have vulnerabilities."
    },
    {
      "Time_Start": 1605.18,
      "Time_End": 1625.8200000000002,
      "Text": " As you can see on this example, the AF networking library and this version allowed to perform an in the middle attack because, as you can see, without going to the details, it was the example that I described you before."
    },
    {
      "Time_Start": 1626.06,
      "Time_End": 1640.06,
      "Text": " So, this AF networking takes care about the certificate pinning and if the certificate pinning was disabled, the SSL certificate was not checked if it's trusted or not."
    },
    {
      "Time_Start": 1640.06,
      "Time_End": 1660.3,
      "Text": " Okay, and in WWDC, Apple deprecated the UiWebView and it's a good news for us because UiWebView wasn't actually really secure because it handled file handler."
    },
    {
      "Time_Start": 1660.3,
      "Time_End": 1689.5,
      "Text": " So, any XSS, when, of course, attacker could exploit the XSS, they were able to steal local files from the container and, by the way, WebKit WebView has also this file functionality but it's not turned on by default so we have to do this manually."
    },
    {
      "Time_Start": 1689.5,
      "Time_End": 1697.42,
      "Text": " And the interesting thing is that I found these bugs in real Apple applications."
    },
    {
      "Time_Start": 1697.9,
      "Time_End": 1704.46,
      "Text": " The first one I want to show you is the Mac OS standard dictionary."
    },
    {
      "Time_Start": 1705.18,
      "Time_End": 1717.3400000000001,
      "Text": " So, without going into the details, it was really old technology because when you wanted to create a new dictionary, you had to compile it."
    },
    {
      "Time_Start": 1717.66,
      "Time_End": 1729.9,
      "Text": " So, the most of time that I spent to exploit this vulnerability took me to compile this dictionary so it was a really hard job to do."
    },
    {
      "Time_Start": 1730.6200000000001,
      "Time_End": 1735.02,
      "Text": " And the exploit looked like this."
    },
    {
      "Time_Start": 1735.66,
      "Time_End": 1751.98,
      "Text": " So, you just create a malicious entry, insert the script tags and using AJAX just steal the etc password and send it to my listener so it was as simple as that."
    },
    {
      "Time_Start": 1752.7,
      "Time_End": 1754.7,
      "Text": " So, the demo."
    },
    {
      "Time_Start": 1762.54,
      "Time_End": 1774.22,
      "Text": " I run the netcat and now I'm opening the malicious entry and as you can see, the etc password was sent to my listener."
    },
    {
      "Time_Start": 1775.18,
      "Time_End": 1782.22,
      "Text": " So, just a simple AJAX script that allowed to steal local files from the user."
    },
    {
      "Time_Start": 1782.8600000000001,
      "Time_End": 1803.74,
      "Text": " And the second Apple's application that I wanted to show you is Help Viewer and at first I wanted to kudos LockyHeart from Google Project Zero that find this vulnerability like one month before me but it happened that Apple didn't fix the core of the issue."
    },
    {
      "Time_Start": 1804.22,
      "Time_End": 1814.94,
      "Text": " So, it was again usage of UI WebView that had an access to local files so I find another way to exploit this vulnerability."
    },
    {
      "Time_Start": 1815.98,
      "Time_End": 1830.14,
      "Text": " In this case, I created a malicious documentation that could be open using the xhelp URL scheme."
    },
    {
      "Time_Start": 1830.8600000000001,
      "Time_End": 1855.3400000000001,
      "Text": " I pass some JavaScript and just send it via iMessage and whenever the victim clicks on it, it launches the script and opens the calculator because what was interesting in Help Viewer,"
    },
    {
      "Time_Start": 1855.42,
      "Time_End": 1863.66,
      "Text": " it had registered a few additional URL schemes that allowed to open arbitrary file on the Mac OS."
    },
    {
      "Time_Start": 1865.3400000000001,
      "Time_End": 1869.8200000000002,
      "Text": " And the example from non-Apple applications."
    },
    {
      "Time_Start": 1870.78,
      "Time_End": 1894.78,
      "Text": " For example, Yahoo iOS application had this UI WebView to preview some data so, for example, when you send some XML, it run it like a real HTML and the attacker was able to steal user cookies from your Yahoo email on iOS."
    },
    {
      "Time_Start": 1895.74,
      "Time_End": 1915.26,
      "Text": " Okay, and the last category that is resiliency requirements and when we talk about resiliency requirements, the most common issue here is problem with anti-tampering."
    },
    {
      "Time_Start": 1915.34,
      "Time_End": 1935.74,
      "Text": " So, anti-tampering is for those who don't want their application to be tampered with, for those who include malware risk in the threat model that were probably when there is a malware, it will probably at first jailbreak your device and then exploit something."
    },
    {
      "Time_Start": 1936.46,
      "Time_End": 1945.02,
      "Text": " And some of the developers, of course, just need to be compliant with our small mobile application security verification standard during the pen test."
    },
    {
      "Time_Start": 1945.66,
      "Time_End": 1963.26,
      "Text": " So, this is the first announcement of my new library for developers, iOS Security Suite that detects the jailbreaks with new indicators because things have changed since iOS 10."
    },
    {
      "Time_Start": 1964.22,
      "Time_End": 1978.46,
      "Text": " It checks for attached debuggers, the common use tampering tools like, for example, Frida or Needle or any Frida-based reverse engineering tool that is used on iOS."
    },
    {
      "Time_Start": 1978.86,
      "Time_End": 1986.78,
      "Text": " And in this version 1.0, it also checks if your application was run in the emulator."
    },
    {
      "Time_Start": 1987.26,
      "Time_End": 1992.62,
      "Text": " So, if you want to download it, it's accessible on GitHub."
    },
    {
      "Time_Start": 1992.7,
      "Time_End": 1996.46,
      "Text": " So, I'll give you a few seconds to do a photo."
    },
    {
      "Time_Start": 2008.0600000000002,
      "Time_End": 2008.5400000000002,
      "Text": " All right."
    },
    {
      "Time_Start": 2009.5800000000002,
      "Time_End": 2011.74,
      "Text": " And now, live demo."
    },
    {
      "Time_Start": 2011.74,
      "Time_End": 2040.94,
      "Text": " So, I wanted to make it really easy to use for developers, so everything you need to do is to just download it via Carthage or CocoaPods, import the iOS Security Suite and, for example, we can check whether our application is, for example,"
    },
    {
      "Time_Start": 2041.74,
      "Time_End": 2042.78,
      "Text": " running in the emulator."
    },
    {
      "Time_Start": 2045.1,
      "Time_End": 2050.62,
      "Text": " So, I'll build this and launch."
    },
    {
      "Time_Start": 2052.14,
      "Time_End": 2059.34,
      "Text": " And as you can see, the simulator opened and it returned true because it's an emulator, so it returned true, of course."
    },
    {
      "Time_Start": 2060.78,
      "Time_End": 2067.26,
      "Text": " So, it's pretty easy to use for developers and may increase your application security."
    },
    {
      "Time_Start": 2067.5800000000004,
      "Time_End": 2069.5800000000004,
      "Text": " Okay."
    },
    {
      "Time_Start": 2073.5800000000004,
      "Time_End": 2085.5,
      "Text": " So, here we come to the summary and the summary for pentesters and other people from offensive security divisions."
    },
    {
      "Time_Start": 2086.0600000000004,
      "Time_End": 2095.1800000000003,
      "Text": " So, the most common vulnerabilities that we find in modern iOS applications are sensitive data without any protection that may be backed up."
    },
    {
      "Time_Start": 2095.8999999999996,
      "Time_End": 2101.8199999999997,
      "Text": " API keys, cloud credential, working on production, test accounts in application package, as I said."
    },
    {
      "Time_Start": 2102.7799999999997,
      "Time_End": 2111.3399999999997,
      "Text": " Network issues, app transport security misconfiguration, poorly protected URL schemes and fixed library versions."
    },
    {
      "Time_Start": 2111.3399999999997,
      "Time_End": 2121.5,
      "Text": " So, if you do the security assessments of iOS applications, you can focus on this point"
    },
    {
      "Time_Start": 2121.5,
      "Time_End": 2125.98,
      "Text": " because they are the most frequent ones."
    },
    {
      "Time_Start": 2126.78,
      "Time_End": 2131.1,
      "Text": " And as I promised, recommendations for developers."
    },
    {
      "Time_Start": 2131.66,
      "Time_End": 2139.18,
      "Text": " So, in short term, you can optimise your application to work properly with password managers and autofill."
    },
    {
      "Time_Start": 2140.06,
      "Time_End": 2144.06,
      "Text": " Of course, if your application uses, for example, SMS as a 2FA."
    },
    {
      "Time_Start": 2144.62,
      "Time_End": 2158.06,
      "Text": " And if you are developing a high-risk application, you should consider anti-tampering tools to protect your application more deeply."
    },
    {
      "Time_Start": 2159.1,
      "Time_End": 2169.9,
      "Text": " And in long term, if you use UI WebView, you should probably think about WK WebView now because UI WebView is, as I said, deprecated now."
    },
    {
      "Time_Start": 2170.62,
      "Time_End": 2181.98,
      "Text": " If you use passwords to log in to your application, you can now use native password policy."
    },
    {
      "Time_Start": 2181.98,
      "Time_End": 2193.26,
      "Text": " And if your application is wrote in Objective-C, it's probably a good time since Swift is more and more stable to think about Swift."
    },
    {
      "Time_Start": 2193.34,
      "Time_End": 2202.86,
      "Text": " I won't say that you have from now rewrite your applications to Swift because I know the reality."
    },
    {
      "Time_Start": 2202.86,
      "Time_End": 2205.34,
      "Text": " But it's a good time to start thinking about it."
    },
    {
      "Time_Start": 2206.86,
      "Time_End": 2207.42,
      "Text": " All right."
    },
    {
      "Time_Start": 2207.42,
      "Time_End": 2216.6200000000003,
      "Text": " And basing on our experience in almost all applications that we test, vulnerabilities exist."
    },
    {
      "Time_Start": 2216.7,
      "Time_End": 2224.94,
      "Text": " And I think, and it's my personal opinion, that most of these vulnerabilities can be fixed by security-aware developers."
    },
    {
      "Time_Start": 2225.58,
      "Time_End": 2235.1,
      "Text": " But if you develop a high-risk application, it's probably a good practice to conduct pen tests anyway."
    },
    {
      "Time_Start": 2235.8199999999997,
      "Time_End": 2244.22,
      "Text": " So for developers, again, we prepared with my colleagues mobile application security best practices."
    },
    {
      "Time_Start": 2244.2200000000003,
      "Time_End": 2250.6200000000003,
      "Text": " That is a general guideline how to create secure mobile applications."
    },
    {
      "Time_Start": 2250.6200000000003,
      "Time_End": 2254.6200000000003,
      "Text": " So again, I will give you a few seconds to make a photo."
    },
    {
      "Time_Start": 2259.5000000000005,
      "Time_End": 2259.9800000000005,
      "Text": " All right."
    },
    {
      "Time_Start": 2263.26,
      "Time_End": 2265.7400000000002,
      "Text": " And this is the end of this presentation."
    },
    {
      "Time_Start": 2266.2200000000003,
      "Time_End": 2272.78,
      "Text": " If some of you want to have this presentation on the mail, please leave me business cards,"
    },
    {
      "Time_Start": 2273.42,
      "Time_End": 2276.1400000000003,
      "Text": " so I can send you the presentation."
    },
    {
      "Time_Start": 2276.1400000000003,
      "Time_End": 2278.3,
      "Text": " And thank you very much for your attention."
    }
  ]
}